using Dapper;
using DevExpress.Compression;
using DevExpress.LookAndFeel;
using DevExpress.Skins;
using DevExpress.Spreadsheet;
//using MoreLinq;
using DevExpress.Utils.Extensions;
using DevExpress.Utils.Menu;
using DevExpress.Utils.VisualEffects;
using DevExpress.XtraBars.Navigation;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGantt;
using DevExpress.XtraGantt.Chart;
using DevExpress.XtraGantt.Chart.Item.Task;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraPrinting;
using DevExpress.XtraPrinting.Native;
using DevExpress.XtraPrintingLinks;
using DevExpress.XtraScheduler.Drawing;
using DevExpress.XtraSpreadsheet;
using DevExpress.XtraSpreadsheet.Menu;
using DevExpress.XtraTab;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Menu;
using DevExpress.XtraTreeList.Nodes;
using Microsoft.AspNetCore.SignalR.Client;
using Newtonsoft.Json;
//using System.Windows.Threading;
using Newtonsoft.Json.Linq;
using PhanMemQuanLyThiCong.ChatBox;
using PhanMemQuanLyThiCong.ChatBox.Views;
using PhanMemQuanLyThiCong.Common;
using PhanMemQuanLyThiCong.Common.Constant;
using PhanMemQuanLyThiCong.Common.Constant.Enum;
using PhanMemQuanLyThiCong.Common.Enums;
using PhanMemQuanLyThiCong.Common.Helper;
using PhanMemQuanLyThiCong.Common.Helper.SeverHelper;
using PhanMemQuanLyThiCong.Common.MLogging;
using PhanMemQuanLyThiCong.Common.ViewModel;
using PhanMemQuanLyThiCong.Common.ViewModel.KLHN;
using PhanMemQuanLyThiCong.Constant.Enum;
using PhanMemQuanLyThiCong.Controls;
using PhanMemQuanLyThiCong.Controls.KiemSoat;
using PhanMemQuanLyThiCong.Controls.MTC;
using PhanMemQuanLyThiCong.Dto;
using PhanMemQuanLyThiCong.IRepositories;
using PhanMemQuanLyThiCong.KanbanModule;
using PhanMemQuanLyThiCong.Model;
using PhanMemQuanLyThiCong.Model.HopDong;
using PhanMemQuanLyThiCong.Model.PermissionControl;
using PhanMemQuanLyThiCong.Model.QuanLyVanChuyen;
using PhanMemQuanLyThiCong.Model.TDKH;
//using AutoMapper.Internal;
using PhanMemQuanLyThiCong.Model.ThuChiTamUng;
using PM360.Common.Helper;
using StackExchange.Profiling.Internal;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
//using System.IO.Compression;
using System.Xml.Serialization;
using Unity;
using VChatCore.ViewModels.SyncSqlite;
using ComboBox = System.Windows.Forms.ComboBox;
using MSETTING = PhanMemQuanLyThiCong.Properties.Settings;
//using TaskTienDo;
using MWORD = DevExpress.XtraRichEdit.API.Native;
//using System.IO.Compression;
//using DevExpress.Utils;
//using DevExpress.Mvvm.Native;

namespace PhanMemQuanLyThiCong
{
    public partial class PhanMemQuanLyThiCong360 : Form
    {
        ctrlTimKiemDinhMuc m_ctrlTKDM;
        ctrlTimKiemVatLieu m_ctrlVatlieu;
        uc_MTCs m_ctrlMTCs;

        ctrl_TimKiemVatLieuThuCong m_ctrlVatlieuThuCong;
        Uc_ChonMuiThiCong mtc;
        System.Windows.Forms.Timer timerAll;

        List<int> ls_SelectedInSpSheet = new List<int>();

        Dictionary<Control, string> DIC_QTMH_Map2Db;

        private bool m_isThongTinChinhChanged = false;
        private bool m_isTPTGChanged = false;

        //private int count_noti = 0;

        //static SemaphoreSlim _Lock = new SemaphoreSlim(1, 1);

        DataTable Table_GiaoViec_MapGuid2IdOfScheduler = new DataTable();
        Dictionary<string, KeyValuePair<int, KeyValuePair<string, string>>> dic_GiaoViec_MapGuid2IdOfScheduler = new Dictionary<string, KeyValuePair<int, KeyValuePair<string, string>>>();// <Code -> ID -> TenCVCha -> TenCVCha -> TenCVCon>
        //string m_crFileDA, m_pathFileThucHienDuAn; //Tên dự án hiện tại. BB là Biên Bản
        private IDataRepository _dataService = ConfigUnity.Container.Resolve<IDataRepository>();
        private readonly Dictionary<IXtraTabPage, Badge> dictNotify = new Dictionary<IXtraTabPage, Badge>();

        public static FileSystemWatcher watcher = new FileSystemWatcher();


        private const int DBT_DEVICEARRIVAL = 0x00000007;
        private const int DBT_DEVICEREMOVECOMPLETE = 0x8004;
        private const int DBT_DEVTYP_VOLUME = 0x00000002;
        private static int WM_QUERYENDSESSION = 0x11;
        private static bool systemShutdown = false;

        //private Uc_ChatBox uc_ChatBox;
        public PhanMemQuanLyThiCong360(string fileName = null)
        {
            Logging.Error("START>>>>>>>>>");
            //UpdateChecker();
            if (fileName.HasValue())
            {
                MSETTING.Default.PathHienTai = fileName;
                MSETTING.Default.Save();
            }


            watcher.IncludeSubdirectories = true;
            // Watch for all changes specified in the NotifyFilters  
            //enumeration.  
            watcher.NotifyFilter = NotifyFilters.Attributes |
                                    NotifyFilters.CreationTime |
                                    NotifyFilters.DirectoryName |
                                    NotifyFilters.FileName |
                                    NotifyFilters.LastAccess |
                                    NotifyFilters.LastWrite |
                                    NotifyFilters.Security |
                                    NotifyFilters.Size;
            // Watch all files.  
            watcher.Filter = "*.*";
            // Add event handlers.  
            watcher.Changed += new FileSystemEventHandler(OnDirChanged);
            watcher.Created += new FileSystemEventHandler(OnDirChanged);
            watcher.Deleted += new FileSystemEventHandler(OnDirChanged);
            watcher.Renamed += new RenamedEventHandler(OnDirChanged);


            //SET TIMER
            timerAll = new System.Windows.Forms.Timer();
            timerAll.Tick += timer1_Tick;
            timerAll.Interval = 1000 * 180;
            timerAll.Start();

            InitializeComponent();
            //TaoFunctionCode();
            this.Enabled = false;
            Setting_ThietLapAsync();
            Logging.Error("END<<<<<<<");

            //MainLoading();

            //Watcher


        }




        public static void OnDirChanged(object source, FileSystemEventArgs e)
        {
            // Specify what is done when a file is changed.  
            BaseFrom.THDAChanged = true;
        }

        // Define the event handlers.  


        private async void timer1_Tick(object sender, EventArgs e)
        {
            GC.Collect();
            if (MSETTING.Default.PathHienTai.HasValue() && DataProvider.InstanceTHDA.m_conString.HasValue() && BaseFrom.THDAChanged)
                TongHopHelper.fcn_saveDA(false, isShowErrorDialog: false);
            else if (BaseFrom.THDAChanged)
                AlertShower.ShowInfo("Dự án bạn làm chưa được lưu lần đầu. Vui lòng lưu lại để tránh mất dữ liệu", "Lưu dự án");

            if (InternetConnection.IsConnectedToInternet())
            {
                if (!BaseFrom.BanQuyenKeyInfo.IsSeverExpired && (BaseFrom.IsFullAccess || BaseFrom.IsValidAccount))
                {
                    try
                    {
                        if (ConnextService._Connection?.State != HubConnectionState.Connected)
                            await InitHubChat();
                    }
                    catch (Exception ex)
                    {
                        AlertShower.ShowInfo($"{ex.Message}_{ex.InnerException?.Message}", "Lỗi hub chat");
                    }
                }

                await CusHttpClient.InstanceTBT.MGetAsync<AppUserViewModel>(RouteAPI.USER_VALIDATETOKEN);
            }
            else
            {

            }
        }

        Dictionary<DataGridView, string> m_DicDataThanhPhanThamGia = new Dictionary<DataGridView, string>();

        private void Setting_ThietLapAsync()
        {
            BaseFrom.Provinces = DuAnHelper.GetAllProvinces();
            BaseFrom.Departments = DuAnHelper.GetAllDepartments();
            BaseFrom.ListSelectCategoryDinhMucs = DuAnHelper.GetAllCategoryDinhMuc();
            DataTable dtColName = DataProvider.InstanceTBT
                        .ExecuteQuery($"PRAGMA table_info({MyConstant.TBL_TBT_GiaVatLieu})");

            BaseFrom.ProvincesHaveDonGia = dtColName.AsEnumerable().Select(x => x["name"].ToString()).ToArray();
            BaseFrom.Provinces.Where(x => BaseFrom.ProvincesHaveDonGia.Contains(x.TenKhongDau)).ForEach(x => x.HaveDonGia = true);
        }

        /*private void SetTextFormByLicense(bool isResetVisiblePages = true)
        {
            //this.Text = BaseFrom.m_crTempDATH;
            this.Text = $"{BaseFrom.m_crTempDATH} - {CommonConstants.NAME_PHANMEM} V{Application.ProductVersion}";

            if (!string.IsNullOrEmpty(BaseFrom.BanQuyenKeyInfo.FullName))
                btn_TT_HienThiThongTinMoi.Text = BaseFrom.BanQuyenKeyInfo.FullName;
            else
                btn_TT_HienThiThongTinMoi.Text = "Đăng nhập";

            if (ce_Mode.Checked)
            {
                if (BaseFrom.IsFullAccess)
                {
                    BaseFrom.IsValidAccount = true;
                    thôngTinPhiênBảnToolStripMenuItem.Enabled = true;
                    đăngKýSửDụngPhầnMềmQuảnLýThiCôngToolStripMenuItem.Enabled = false;
                    //if (BaseFrom.BanQuyenOldViewModel.TypeKhoa == "Khóa cứng")

                    if (BaseFrom.BanQuyenKeyInfo.TypeCode == TypeStatus.KHOACUNG)
                    {
                        this.Text += $" (Phần mềm bản quyền / Khóa cứng)";
                    }
                    else
                    {
                        this.Text += $" (Hạn dùng: {BaseFrom.BanQuyenKeyInfo.LimitDate} ngày / Phần mềm bản quyền / Khóa mềm)";
                    }
                }
                else
                {
                    BaseFrom.allPermission = new AllPermission();
                    //MSETTING.Default.AllPermission = BaseFrom.allPermission;
                    MSETTING.Default.Save();

                    if (BaseFrom.IsLimitDate)
                    {
                        thôngTinPhiênBảnToolStripMenuItem.Enabled = true;
                        đăngKýSửDụngPhầnMềmQuảnLýThiCôngToolStripMenuItem.Enabled = false;
                        this.Text += $" (Hạn dùng: bản quyền hết hạn / Phiên bản dùng thử / Khóa mềm)";
                    }
                    else
                    {
                        thôngTinPhiênBảnToolStripMenuItem.Enabled = false;
                        đăngKýSửDụngPhầnMềmQuảnLýThiCôngToolStripMenuItem.Enabled = true;
                        this.Text += $" (Dùng thử)";
                    }
                }


            }
            else
            {
                if (BaseFrom.IsValidAccount)
                {
                    đăngKýSửDụngPhầnMềmQuảnLýThiCôngToolStripMenuItem.Enabled = false;

                    this.Text += $" ({BaseFrom.BanQuyenKeyInfo.FullName} ({BaseFrom.BanQuyenKeyInfo.Email}))";
                    if (string.IsNullOrEmpty(BaseFrom.BanQuyenKeyInfo.SerialNo))
                    {
                        this.Text += $" (Chưa chọn khóa hoạt động)";
                    }
                    else
                    {
                        BaseFrom.allPermission = CryptoHelper.Base64DecodeToObject<AllPermission>(MSETTING.Default.AllPermission);
                        if (BaseFrom.BanQuyenKeyInfo.TypeCode == TypeStatus.KHOACUNG)
                            this.Text += $" (Khóa hoạt động: {BaseFrom.BanQuyenKeyInfo.KeyCode})";
                        else if (BaseFrom.BanQuyenKeyInfo.TypeCode == TypeStatus.KHOAMEM)
                            this.Text += $" (Khóa hoạt động: {BaseFrom.BanQuyenKeyInfo.SerialNo} (Khóa mềm))";

                        //return;
                    }
                }
                else
                {
                    đăngKýSửDụngPhầnMềmQuảnLýThiCôngToolStripMenuItem.Enabled = true;
                    this.Text += $" (Tài khoản không hợp lệ)";
                }
            }
            if (BaseFrom.BanQuyenKeyInfo.IsSeverExpired)
            {
                this.Text += $" - (Server: Hết hạn)";
            }
            else
            {
                this.Text += $" - (Server: Còn {(BaseFrom.BanQuyenKeyInfo.EndSeverDate.Date - DateTime.Now.Date).Days + 1} Ngày)";
            }

#if DEBUG
            this.Text += "\t+++===DEBUG VERSION===+++";
#endif

            if (isResetVisiblePages)
            {
                TongHopHelper.SetControlsByPermission();
            }
        }*/

        private async Task checkLicense(bool isRecheck = false)
        {
            if (!isRecheck)
                WaitFormHelper.ShowWaitForm("Đang kiểm tra bản quyền", "Vui Lòng chờ!");

            #region CHECK LICENSE
            if (InternetConnection.IsConnectedToInternet())
            {
                TongHopHelper.ResetAllPermission();
                if (ce_Mode.Checked)
                {
                    if (await checkKhoa() == 360)
                    {
                        if (isRecheck)
                            WaitFormHelper.CloseWaitForm();
                        return;
                    }
                    MSETTING.Default.SerialNo = string.Empty;
                    MSETTING.Default.Save();
                }
                else
                {
                    CusHttpClient.InstanceCustomer.BaseAddress = "";
                    var user = await UserHelper.GetCurrentUser();
                    if (user is null)
                    {
                        BaseFrom.IsValidAccount = false;
                        btn_TT_HienThiThongTinMoi.Text = "Đăng nhập";

                        MSETTING.Default.SerialNo = string.Empty;
                        MSETTING.Default.Save();
                        TongHopHelper.ResetAllPermission();
                    }
                    else
                    {
                        BaseFrom.BanQuyenKeyInfo = new BanQuyenKeyInfo()
                        {
                            FullName = user.FullName,
                            Email = user.Email,
                            PhoneNumber = user.PhoneNumber,
                            UserId = user.Id
                        };
                        BaseFrom.IsValidAccount = true;
                        btn_TT_HienThiThongTinMoi.Text = user.FullName;
                        string serialNo = CryptoHelper.Base64Encode(MSETTING.Default.SerialNo);
                        string route = $"{RouteAPI.KEYSTORE_KeyContainingUserBySerialNo}/{user.Id}/{AppSettings.CategoryCode}/{serialNo}";
                        var ki = await CusHttpClient.InstanceTBT.MGetAsync<KeyInfoViewModel>(route);

                        if (!ki.MESSAGE_TYPECODE || ki.Dto is null)
                        {
                            CusHttpClient.InstanceCustomer.BaseAddress = string.Empty;
                            MSETTING.Default.SerialNo = string.Empty;
                            MSETTING.Default.Save();
                        }
                        else
                        {
                            CusHttpClient.InstanceCustomer.BaseAddress = ki.Dto.UrlAPI;
                            var allrole = await CusHttpClient.InstanceCustomer
                                .MGetAsync<AllPermission>($"{RouteAPI.TongDuAn_GetAllPermissionByUserId}/{user.Id}");

                            if (!allrole.MESSAGE_TYPECODE)
                            {
                                MessageShower.ShowError("Không thể đồng bộ quyền người dùng");
                                BaseFrom.allPermission = new AllPermission();
                            }
                            else
                            {
                                BaseFrom.allPermission = allrole.Dto;
                            }

                            MSETTING.Default.AllPermission = CryptoHelper.Base64EncodeObject(BaseFrom.allPermission);
                            MSETTING.Default.Save();

                            BaseFrom.BanQuyenKeyInfo.UrlAPI = ki.Dto.UrlAPI;
                            BaseFrom.BanQuyenKeyInfo.KeyCode = ki.Dto.KeyCode;
                            BaseFrom.BanQuyenKeyInfo.SerialNo = ki.Dto.SerialNo;
                            BaseFrom.BanQuyenKeyInfo.TypeCode = ki.Dto.TypeCode;
                            BaseFrom.BanQuyenKeyInfo.StartSeverDate = ki.Dto.StartSeverDate;
                            BaseFrom.BanQuyenKeyInfo.EndSeverDate = ki.Dto.EndSeverDate;

                            MSETTING.Default.SerialNo = ki.Dto.SerialNo;
                            MSETTING.Default.Save();
                        }
                    }
                }
            }
            try
            {
                TongHopHelper.fcn_updateCbbThongTinDuAnCongTrinh();
            }
            catch
            {

            }
            InitNotificationAndInitHubChat();
            TongHopHelper.SetTextFormByLicense(true);
            #endregion

            if (!isRecheck)
                WaitFormHelper.CloseWaitForm();

            return;
        }

        private async Task<int> checkKhoa()
        {

            var model = await PermissionHelper.CheckKeyInfoAsync();

            //if (!BaseFrom.)
            if (!model.MESSAGE_TYPECODE)
            {
                BaseFrom.BanQuyenKeyInfo = new BanQuyenKeyInfo();
            }
            else if (model.STATUS_CODE == 360)
                return model.STATUS_CODE;

            //PermissionHelper.WriteDataKey(model.Dto);
            if (BaseFrom.IsFullAccess)
            {
                BaseFrom.allPermission.HaveInitProjectPermission = true;
            }

            //if (BaseFrom.IsFullAccess/* && BaseFrom.BanQuyenKeyInfo.TypeCode == TypeStatus.KHOACUNG*/)
            //{

            //}
            else if (BaseFrom.IsFullAccess && BaseFrom.BanQuyenKeyInfo.IsDateLimit
                && BaseFrom.BanQuyenKeyInfo.TypeCode == TypeStatus.KHOAMEM
                && BaseFrom.BanQuyenKeyInfo.LimitDate == 0)
            {
                MessageShower.ShowError("Hạn dùng bản quyền đã hết hạn! Vui lòng liên hệ quản trị viên");
            }

            if (BaseFrom.IsFullAccess && !BaseFrom.BanQuyenKeyInfo.IsSeverExpired)
            {
                WaitFormHelper.ShowWaitForm("Đang đồng bộ dữ liệu người dùng");


                var response = await UserHelper.SyncUserFromTBTBySerialNo();

                WaitFormHelper.CloseWaitForm();
                if (!response.MESSAGE_TYPECODE)
                {
                    MessageShower.ShowInformation($"Không thể đồng bộ người dùng với sever chủ!");
                }
            }
            return 0;
            //SetTextFormByLicense();
        }

        private async void ce_Mode_CheckedChanged(object sender, EventArgs e)
        {
            MSETTING.Default.IsLicenseMode = ce_Mode.Checked;
            MSETTING.Default.Save();

            var response = await CusHttpClient.InstanceTBT.PostAsJsonAsync(RouteAPI.USER_LOGOUT, new { });

            MSETTING.Default.TokenTBT = string.Empty;
            MSETTING.Default.Save();// = string.Empty;
            if (ce_Mode.Checked)
            {
                ce_Mode.Text = "Bản quyền";
            }
            else
            {
                ce_Mode.Text = "Tài khoản";

            }
            await checkLicense();
            TongHopHelper.fcn_updateCbbThongTinDuAnCongTrinh();


            //TaoMoiTongDuAn();
            //slke_ThongTinDuAn_EditValueChanged(null, null);
        }

        private void initShareControl()
        {

            SharedControls.cbb_DBKH_ChonDot = cbb_DBKH_ChonDot;
            SharedControls.ce_NgoaiKeHoach = ce_NgoaiKeHoach;
            SharedControls.ce_GianNgay = ce_GianNgay;
            SharedControls.ce_RePlan = ce_replan;
            SharedControls.spsheet_TD_KH_LapKeHoach = spsheet_TD_KH_LapKeHoach;
            SharedControls.spsheet_GV_KH_ChiTietCacHMCongViec = spsheet_GV_KH_ChiTietCacHMCongViec;
            //SharedControls.cb_HienKeHoach = cb_HienKeHoach;
            SharedControls.slke_ThongTinDuAn = slke_ThongTinDuAn;
            SharedControls.rg_GV_DauViec = rg_GV_DauViec;
            SharedControls.tL_QLVC_TongHop = tL_QLVC_TongHop;
            SharedControls.rILUE_TenKhoTH = rILUE_TenKhoTH;
            //SharedControls.gc_ThuChiTamUng_DeXuat = gc_ThuChiTamUng_DeXuat;
            SharedControls.ctrl_DonViThucHienDuAnTDKH = ctrl_DonViThucHienDuAnTDKH;
            SharedControls.ctrl_DonViThucHienGiaoViec = ctrl_DonViThucHienGiaoViec;
            SharedControls.ce_CongTacNgoaiKeHoach = ce_CongTacNgoaiKeHoach;
            //SharedControls.splashWaitForm = splashWaitForm;
            SharedControls.alertControl = alertControl;
            SharedControls.toastNotificationManager1 = toastNotificationsManager1;
            SharedControls.openFileDialog = openFileDialog;
            SharedControls.saveFileDialog = saveFileDialog;
            SharedControls.tabMain = xtraTabControl_TabMain;
            SharedControls.xtraTab_KiemSoat = xtraTab_KiemSoat;
            SharedControls.xtraTab_KiemSoatTienDo = xtraTab_KiemSoatTienDo;
            SharedControls.xtraTabPage_CongVanDiDen = xtraTabPage_CongVanDiDen;
            SharedControls.xtraTabPage_DSDuAn_CT = xtraTabPage_DSDuAn_CT;
            SharedControls.xtraTabPage_NhanCong = xtraTabPage_NhanCong;
            SharedControls.xtraTabPage_QLMay_TB = xtraTabPage_QLMay_TB;
            SharedControls.xtraTabPage_GiaoViec = xtraTabPage_GiaoViec;
            SharedControls.xtraTabPage_ThuChi_TamUng = xtraTabPage_ThuChi_TamUng;
            SharedControls.xtraTab_QLVatLieu_VanChuyen = xtraTab_QLVatLieu_VanChuyen;
            SharedControls.xtraTab_VLMTCNC = xtraTab_VLMTCNC;
            SharedControls.xtraTab_ThamDinhDauVao = xtraTab_ThamDinhDauVao;
            SharedControls.ctrl_NhapKLHN = ctrl_NhapKLHN;
            SharedControls.watcher = watcher;
            SharedControls.Form = this;

            SharedControls.cb_TDKH_HienDienGiai = cb_TDKH_HienDienGiai;
            SharedControls.ce_TDKH_HienHTPD = ce_TDKH_HienHTPD;
            SharedControls.cb_TDKH_HienCongTac = cb_TDKH_HienCongTac;

            SharedControls.btn_TT_HienThiThongTinMoi = btn_TT_HienThiThongTinMoi;
            SharedControls.ce_Mode = ce_Mode;
            SharedControls.thôngTinPhiênBảnToolStripMenuItem = thôngTinPhiênBảnToolStripMenuItem;
            SharedControls.đăngKýSửDụngPhầnMềmQuảnLýThiCôngToolStripMenuItem = đăngKýSửDụngPhầnMềmQuảnLýThiCôngToolStripMenuItem;
            SharedControls.lb_ThongBaoBanQuyen = lb_ThongBaoBanQuyen;
            SharedControls.np_KhoiLuongHangNgay = np_KhoiLuongHangNgay;
            SharedControls.cbo_MeNuTenHopDong = cbo_MeNuTenHopDong;


            SharedControls.ce_LocTheoNgay = ce_LocTheoNgay;
            SharedControls.de_Loc_TuNgay = de_Loc_TuNgay;
            SharedControls.de_Loc_DenNgay = de_Loc_DenNgay;
            SharedControls.lb_HienTai = lb_HienTai;
            SharedControls.uc_ChatBox = uc_ChatBox;
            SharedControls.badge_Noti = badge_Noti;
            SharedControls.slke_ChonCTHM = slke_ChonCTHM;
            SharedControls.TabPageNameNotDependOnPrj = new string[]
            {
                nameof(xtraTab_KiemSoatChung),
                nameof(xtraTab_KiemSoatTienDo),
                nameof(xtraTabPage_NhanCong),
                nameof(xtraTab_DanhSachPhuongTien),
                nameof(xtraTab_BieuDoKiemSoatDuAn),

            };

            //SharedControls.TabPageNameDependOnPrj = new string[]
            //{
            //    nameof(xtraTab_Con),

            //};
            //SharedControls.main = this;
        }

        private void CheckingFileUnsaved()
        {
            var dirs = Directory.GetDirectories(BaseFrom.m_tempPath);
            WaitFormHelper.ShowWaitForm("Đang sao lưu file chưa lưu");
            foreach (string dir in dirs)
            {
                try
                {
                    if (!Directory.Exists(BaseFrom.m_UnsavedPath))
                        Directory.CreateDirectory(BaseFrom.m_UnsavedPath);

                    //string lastChange = Directory.GetLastWriteTime(dir).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE_WithTime);
                    string fileName = Path.GetFileName(dir);

                    string newFileGoc = Path.Combine(BaseFrom.m_UnsavedPath,
                                                    $"{fileName}_Backup{{0}}.qltc");
                    string newFile = string.Format(newFileGoc, "");
                    string newTemp = Path.Combine(BaseFrom.m_tempPath, Path.GetFileNameWithoutExtension(newFile));
                    int count = 0;
                    while (File.Exists(newFile) || File.Exists(newTemp))
                    {
                        newFile = string.Format(newFileGoc, (count++).ToString());
                        newTemp = Path.Combine(BaseFrom.m_tempPath, Path.GetFileNameWithoutExtension(newFile));
                    }
                    Directory.Move(dir, newTemp);
                    TongHopHelper.fcn_SaveTHDAToQLTC(newFile);
                    //MyFunction.DeleteDirectory(dir);
                    MyFunction.DirectoryDelete(newTemp);
                }
                catch (Exception ex)
                {
                    AlertShower.ShowInfo($"{ex.Message}__Inner: {ex.InnerException?.Message}", "Lỗi check Unsaved File");
                    continue;
                }
            }
            WaitFormHelper.CloseWaitForm();
        }

        private void UpdateChecker(bool showinfo = false)
        {
            //WebClient webClient = new WebClient();
            //var client = new WebClient();

            string urlChecker = AppSettings.UrlUpdateChecker;


            using (var webClient = new WebClient())
            {
                //webClient.DownloadProgressChanged += new DownloadProgressChangedEventHandler(DownloadProgressCallback4);
                try
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(VersionViewModel));

                    var xml = webClient.DownloadString($"{urlChecker}/Update.xml");
                    VersionViewModel vs = serializer.Deserialize(new StringReader(xml)) as VersionViewModel;

                    if (vs != null && vs.version != null && vs.version.CompareTo(Application.ProductVersion) > 0)
                    {
                        //if (MessageShower.ShowYesNoQuestion($"Có phiên bản phần mềm mới ({vs.version})\r\n" +
                        //    $"Phiên bản hiện tại là {Application.ProductVersion}!\r\n" +
                        //    $"Bạn có muốn cập nhật không?", "Cập nhật Quản lý thi công 360!") == DialogResult.Yes)
                        //{
                        WaitFormHelper.ShowWaitForm($"Đang tải bản cập nhật {vs.version}");
                        string filename = Path.Combine(BaseFrom.m_TempFilePath, $@"QLTC_V{vs.version}.msi");
                        string zipPath = Path.Combine(BaseFrom.m_TempFilePath, $@"QLTCSetup.zip");
                        if (File.Exists(filename)) { File.Delete(filename); }
                        webClient.DownloadFile($"{urlChecker}/QLTCSetup.zip", zipPath);
                        //string zipPath = @".\QLTCSetup.zip";
                        string extractPath = BaseFrom.m_TempFilePath;
                        System.IO.Compression.ZipFile.ExtractToDirectory(zipPath, extractPath);
                        Process process = new Process();
                        process.StartInfo.FileName = "msiexec.exe";
                        process.StartInfo.Arguments = string.Format($"/i {filename}");
                        Close();
                        process.Start();
                        //Environment.Exit(0);

                        //}
                    }
                    else if (showinfo)
                    {
                        MessageShower.ShowInformation("Bạn đang dùng phiên bản mới nhất rồi!");
                    }
                }
                catch (Exception ex)
                {
                    AlertShower.ShowInfo("Cập nhật thất bại!\r\n" +
                        $"{ex.Message}_Inner: {ex.InnerException?.Message}");

                }
                finally
                {
                    WaitFormHelper.CloseWaitForm();
                }
            }
        }

        //private static void DownloadProgressCallback4(object sender, DownloadProgressChangedEventArgs e)
        //{
        //    // Displays the operation identifier, and the transfer progress.
        //    Debug.WriteLine("{0}    downloaded {1} of {2} bytes. {3} % complete...",
        //        (string)e.UserState,
        //        e.BytesReceived,
        //        e.TotalBytesToReceive,
        //        e.ProgressPercentage);
        //}
        private async Task MainLoading()
        {
            pn_CTHM.Size = new Size(400, pn_CTHM.Height);
            pn_Contractor.Size = new Size(400, pn_Contractor.Height);
            SharedControls.uc_noti = new uc_Notification();
            SharedControls.uc_noti.Dock = DockStyle.Fill;
            SharedControls.uc_noti.Parent = popupContainerControl_noti;
            rg_LoaiMau.SelectedIndex = 1;
            initShareControl();

#if !DEBUG
            UpdateChecker();
#endif
            CheckingFileUnsaved();

            var ttHeThongs = EnumHelper.GetDisplayNames<EnumTrangThai>();
            cbb_State.DataSource = ttHeThongs;

            BaseFrom.allPermission = CryptoHelper.Base64DecodeToObject<AllPermission>(MSETTING.Default.AllPermission) ?? new AllPermission();

            ce_Mode.CheckedChanged -= ce_Mode_CheckedChanged;
            ce_Mode.Checked = MSETTING.Default.IsLicenseMode;
            if (ce_Mode.Checked)
            {
                ce_Mode.Text = "Bản quyền";
            }
            else
            {
                ce_Mode.Text = "Tài khoản";
            }
            ce_Mode.CheckedChanged += ce_Mode_CheckedChanged;

            await checkLicense();

            nud_ToanDuAn.Maximum = nud_VatLieu.Maximum =
                nud_NhanCong.Maximum = nud_MayThiCong.Maximum = Decimal.MaxValue;

            var obj = gv_DanhSachDACT.FocusedRowObject;

            SkinContainerCollection skins = SkinManager.Default.Skins;
            cbo_MTD_ChonMauTienDo.Items.Clear();
            foreach (SkinContainer skin in skins)
            {
                cbo_MTD_ChonMauTienDo.Items.Add(skin.SkinName);
            }
            fcn_init();
            this.Enabled = true;
            Fcn_SettingChartDuAn();
            //WaitFormHelper.ShowWaitForm("Checkinggg");

        }

        private async void PhanMemQuanLyThiCong360_Load(object sender, EventArgs e)
        {
            if (DesignMode)
            {
                return;
            }
            //Kiểm tra cập nhật

            //BaseFrom.DefautWaitFormErrorText = splashWaitForm.wa
            Dictionary<string, string> dicFcnCode = new Dictionary<string, string>();
            foreach (FunctionCode fun in Enum.GetValues(typeof(FunctionCode)))
            {
                string name = Enum.GetName(typeof(FunctionCode), fun);
                dicFcnCode.Add(name.Replace("__EX", ""), name);
            }
            BaseFrom.dicFcnCode = dicFcnCode;

            await MainLoading();


            //await fcn_SyncAllDataFromServer();
        }
        private void Fcn_SettingChartDuAn()
        {
            CustomRepositoryItemChartControl item = new CustomRepositoryItemChartControl();
            item.Control = chartControl_DanhSachDuAnCongTrinh;
            col_DanhSachDACT_Chart.View.GridControl.RepositoryItems.Add(item);
            Col_BieuDoTaiChinh.View.GridControl.RepositoryItems.Add(item);
            Col_BieuDoTaiChinh.ColumnEdit = item;
            col_DanhSachDACT_Chart.ColumnEdit = item;
            gv_DanhSachDACT.RowHeight = gc_DanhSachDuAnCongTrinh.Height / 10;
        }

        private void taofileter(SpreadsheetControl name, string range)
        {
            IWorkbook workbook = name.Document;
            Worksheet worksheet = workbook.Worksheets[0];
            CellRange rangeXD = worksheet.Range[range];
            worksheet.AutoFilter.Apply(rangeXD);
        }
        /*  private void testData()
          {
              SpreadsheetControl spSheet = new SpreadsheetControl();
              spSheet.LoadDocument(@"D:\1. Projects\1. PhanMemQuanLyThiCong\1. Winforms\1. PhanMemQuanLyThiCong\2. Document\Chuẩn bị đầu tư 22.1.22.xlsx");
              Worksheet ws = spSheet.Document.Worksheets[1];
              string dbString = "";
              for (int i = 2; i < 218; i++)
              {
                  if (!ws.Rows[i]["B"].Value.ToString().Contains('.'))
                  {
                      string codeCha = Guid.NewGuid().ToString();
                      dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCHA} (\"CodeDauMuc\", \"CodeCongViecCha\", \"TenCongViec\") VALUES " +
                          $"('Cập nhật sau', '{codeCha}', '{ws.Rows[i]["E"].Value}')";
                      DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                      while (ws.Rows[i + 1]["B"].Value.ToString().Contains('.'))
                      {
                          i++;
                          dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCON} (\"CodeCongViecCon\", \"CodeCongViecCha\", \"TenCongViec\") VALUES " +
                              $"('{Guid.NewGuid()}', '{codeCha}', '{ws.Rows[i]["E"].Value}')";
                          DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                      }
                  }
              }
          }*/

        private void init_DIC_QTMH()
        {
            DIC_QTMH_Map2Db = new Dictionary<Control, string>()
            {
                {date_QLVC_MH_ThoiDiemGuiDeXuat, "ThoiDiemGuiDeXuat" },
                //{date_QLVC_MH_TFhoiGianCanVatTu, "ThoiGianCanVatTu" },
                {cb_GV_QTMH_DeXuat_0, "Chon_1_DeXuat" },
                {cb_GV_QTMH_TimNCC_1, "Chon_1_TimNcc" },
                {cb_GV_QTMH_LuaChonNCC_2, "Chon_1_ChonNcc" },
                {cb_GV_QTMH_DuyetPA_3, "Chon_1_DuyetPhuongAn" },
                {cb_GV_QTMH_DX_DuyetDeXuat, "Chon_2_DeXuat_DuyetDeXuat" },
                {cb_GV_QTMH_DX_DuyetMua, "Chon_2_DeXuat_DuyetMua" },
                {cb_GV_QTMH_DX_DuyetThanhToan, "Chon_2_DeXuat_DuyetThanhToan" },
                {cb_GV_QTMH_TimNCC_ThucHien, "Chon_2_TimNcc_ThucHien" },
                {cb_GV_QTMH_TimNCC_GiamSat, "Chon_2_TimNcc_GiamSat" },
                {cb_GV_QTMH_LuaChonNCC_DanhGia, "Chon_2_ChonNcc_DanhGia" },
                {cb_GV_QTMH_LuaChonNCC_DuyetNCC, "Chon_2_ChonNcc_Duyet" },
                {cb_GV_QTMH_DuyetPA_Duyet, "Chon_2_DuyetPhuongAn_Duyet" },
                {cb_GV_QTMH_DuyetPA_Mua, "Chon_2_DuyetPhuongAn_Mua" },
                {cbo_QLVC_MH_NguoiDeXuat, "DeXuat_NguoiDeXuat" },
                {cbo_QLVC_MH_NguoiDuyetDeXuat, "DeXuat_NguoiDuyetDeXuat" },
                {nud_QTMH_TgDuyetDeXuat, "DeXuat_ThoiGianDuyetDeXuat" },
                {cbo_QLVC_MH_NguoiDuyetMua, "DeXuat_NguoiDuyetMua" },
                {nud_QTMH_TgDuyetMua, "DeXuat_ThoiGianDuyetMua" },
                {cbb_DX_DuyetMua_CongTacTruoc, "DeXuat_DuyetMua_CongTacTruoc" },
                {cbb_DX_DuyetMua_LoaiTuongQuan, "DeXuat_DuyetMua_LoaiTuongQuan" },
                {cbb_DX_DuyetMua_SoNgay, "DeXuat_DuyetMua_SoNgay" },
                {cbo_QLVC_MH_NguoiDuyetThanhToan, "DeXuat_NguoiDuyetThanhToan" },
                {nud_QTMH_TgDuyetThanhToan, "DeXuat_ThoiGianDuyetThanhToan" },
                {cbb_DX_DuyetThanhToan_CongTacTruoc, "DeXuat_DuyetThanhToan_CongTacTruoc" },
                {cbb_DX_DuyetThanhToan_LoaiTuongQuan, "DeXuat_DuyetThanhToan_LoaiTuongQuan" },
                {cbb_DX_DuyetThanhToan_SoNgay, "DeXuat_DuyetThanhToan_SoNgay" },
                {cbo_QLVC_MH_PhongThucHienBaoGia, "TimNcc_PhongThucHien" },
                {cbo_QLVC_MH_NguoiThucHienBaoGia, "TimNcc_NguoiThucHien" },
                {nud_QTMH_TgThucHienTimNCC, "TimNcc_ThoiGianThucHien" },
                {cbb_TimNCC_ThucHien_CongTacTruoc, "TimNcc_ThucHien_CongTacTruoc" },
                {cbb_TimNCC_ThucHien_LoaiTuongQuan, "TimNcc_ThucHien_LoaiTuongQuan" },
                {cbb_TimNCC_ThucHien_SoNgay, "TimNcc_ThucHien_SoNgay" },
                {cbo_QLVC_MH_PhongGiamSatBaoGia, "TimNcc_PhongThucHien" },
                {cbo_QLVC_MH_NguoiGiamSatBaoGia, "TimNcc_NguoiThucHien" },
                {nud_QTMH_TgGiamSatTimNCC, "TimNcc_ThoiGianThucHien" },
                {cbb_TimNCC_GiamSat_CongTacTruoc, "TimNcc_ThucHien_CongTacTruoc" },
                {cbb_TimNCC_GiamSat_LoaiTuongQuan, "TimNcc_ThucHien_LoaiTuongQuan" },
                {cbb_TimNCC_GiamSat_SoNgay, "TimNcc_ThucHien_SoNgay" },
                {cbo_QLVC_MH_PhongDanhGiaDeXuatNCC, "ChonNcc_PhongDanhGiaNcc" },
                {cbo_QLVC_MH_NguoiDanhGiaNCC, "ChonNcc_NguoiDanhGiaNcc" },
                {nud_QTMH_TgThucHienDanhGiaNCC, "ChonNcc_ThoiGianDanhGiaNcc" },
                {cbb_ChonNCC_DanhGia_CongTacTruoc, "ChonNcc_DanhGiaNcc_CongTacTruoc" },
                {cbb_ChonNCC_DanhGia_LoaiTuongQuan, "ChonNcc_DanhGiaNcc_LoaiTuongQuan" },
                {cbb_ChonNCC_DanhGia_SoNgay, "ChonNcc_DanhGiaNcc_SoNgay" },
                {cbo_QLVC_MH_PhongDuyetNhaCungCap, "ChonNcc_PhongDuyetNcc" },
                {cbo_QLVC_MH_NguoiDuyetNhaCungCap, "ChonNcc_NguoiDuyetNcc" },
                {nud_QTMH_TgDuyetLuaChonNCC, "ChonNcc_ThoiGianDuyetNcc" },
                {cbb_ChonNCC_Duyet_CongTacTruoc, "ChonNcc_DuyetNcc_CongTacTruoc" },
                {cbb_ChonNCC_Duyet_LoaiTuongQuan, "ChonNcc_DuyetNcc_LoaiTuongQuan" },
                {cbb_ChonNCC_Duyet_SoNgay, "ChonNcc_DuyetNcc_SoNgay" },
                {cbo_QLVC_MH_PhongBanPheDuyet, "DuyetPhuongAn_PhongDuyet" },
                {cbo_QLVC_MH_NguoiDuyet, "DuyetPhuongAn_NguoiDuyet" },
                {nud_QTMH_TgThucHienDuyetPA, "DuyetPhuongAn_ThoiGianDuyet" },
                {cbb_DuyetPA_Duyet_CongTacTruoc, "DuyetPhuongAn_Duyet_CongTacTruoc" },
                {cbb_DuyetPA_Duyet_LoaiTuongQuan, "DuyetPhuongAn_Duyet_LoaiTuongQuan" },
                {cbb_DuyetPA_Duyet_SoNgay, "DuyetPhuongAn_Duyet_SoNgay" },
                {cbo_QLVC_MH_PhongMuVatTu, "DuyetPhuongAn_PhongMua" },
                {NguoiMuaVatTu, "DuyetPhuongAn_NguoiMua" },
                {nud_DuyetPA_Mua_TgThucHien, "DuyetPhuongAn_ThoiGianMua" },
                {cbb_DuyetPA_Mua_CongTacTruoc, "DuyetPhuongAn_Mua_CongTacTruoc" },
                {cbb_DuyetPA_Mua_LoaiTuongQuan, "DuyetPhuongAn_Mua_LoaiTuongQuan" },
                {nud_DuyetPA_Mua_SoNgay, "DuyetPhuongAn_Mua_SoNgay" },
                {cbo_QLVC_MH_PhongNhanSanPham, "DuyetPhuongAn_PhongNhanSanPham" },
                {cbo_QLVC_MH_NguoiNhanSanPham, "DuyetPhuongAn_NguoiNhanSanPham" }

            };
        }
        /// <summary>
        /// Map datagridview vào table db
        /// </summary>
        private void fcn_initDicTPTG()
        {
            m_DicDataThanhPhanThamGia.Add(data_TPTG_ChuDauTu, MyConstant.TBL_THONGTINDUAN);
            m_DicDataThanhPhanThamGia.Add(data_TPTG_ThauChinh_AB, MyConstant.TBL_THONGTINNHATHAU);
            m_DicDataThanhPhanThamGia.Add(data_TPTG_Thauphu_BB, MyConstant.TBL_THONGTINNHATHAUPHU);
            m_DicDataThanhPhanThamGia.Add(data_TPTG_NhaCungCap_BC, MyConstant.TBL_THONGTINNHACUNGCAP);
            m_DicDataThanhPhanThamGia.Add(data_TPTG_ToDoi_BC, MyConstant.TBL_THONGTINTODOITHICONG);
        }

        private void fcn_init()
        {
            SetEnableByPermission(false);
            m_ctrlTKDM = new ctrlTimKiemDinhMuc();
            m_ctrlTKDM.m_DataChonDM = new ctrlTimKiemDinhMuc.DE_TRUYENDATADAUDINHMUC(fcn_DE_NhanDataDinhMuc);
            m_ctrlTKDM.Dock = DockStyle.None;
            this.Controls.Add(m_ctrlTKDM);
            m_ctrlTKDM.Hide();

            m_ctrlVatlieu = new ctrlTimKiemVatLieu();
            m_ctrlVatlieu.m_DataChonVL = new ctrlTimKiemVatLieu.DE_TRUYENDATAVATLIEU(fcn_DE_NhanDatVL);
            m_ctrlVatlieu.Dock = DockStyle.None;
            this.Controls.Add(m_ctrlVatlieu);
            m_ctrlVatlieu.Hide();

            m_ctrlVatlieuThuCong = new ctrl_TimKiemVatLieuThuCong();
            m_ctrlVatlieuThuCong.m_DataChonVL = new ctrl_TimKiemVatLieuThuCong.DE_TRUYENDATAVATLIEU(fcn_DE_NhanDataKHVT);
            m_ctrlVatlieuThuCong.Dock = DockStyle.None;
            this.Controls.Add(m_ctrlVatlieuThuCong);
            m_ctrlVatlieuThuCong.Hide();

            mtc = new Uc_ChonMuiThiCong();
            mtc.m_DataChonMuiTC = new Uc_ChonMuiThiCong.DE_TRUYENDATAMTC(fcn_DE_NhanDatamtc);
            mtc.Dock = DockStyle.None;
            this.Controls.Add(mtc);
            mtc.Hide();


            m_ctrlMTCs = new uc_MTCs();
            //m_ctrlMTCs.loadData(co)
            m_ctrlMTCs.sendData = new uc_MTCs.DE_SENDDATA(fcn_DE_NhanDataMTCs);
            m_ctrlMTCs.Dock = DockStyle.None;
            this.Controls.Add(m_ctrlMTCs);
            m_ctrlMTCs.Hide();



            init_DIC_QTMH();

            DataProvider.InstanceTBT.changePath($@"{BaseFrom.m_path}\Database\DatabaseTBT.sqlite3");
            //DataProvider.InstanceTHDA.changePath($@"{BaseFrom.m_path}\Database\DatabaseTBT.sqlite");
            //DataProvider.InstanceServer.changePath($@"{BaseFrom.m_path}\Database\ServerData.sqlite");
            DataProvider.InstanceBaoCao.changePath($@"{BaseFrom.m_path}\Database\BaoCao.sqlite3", false);

            fcn_initDicTPTG();
            fcn_initFile();


            //fcn_CapNhatHangMucCongViec(); // Hiển thị danh mục công việc trong giao việc
            //fcn_DanhMucMauPhieuThanhToan(); // Hiển thị tạm ứng thanh toán
            //fcn_DanhMucMauDonTu(); // Hiển thi đơn từ
            //fcn_loadListQTMH(-1);
            //Fcn_LoadDataQLVC();
            //Fcn_UpdateTCTU();
            fcn_InitControlChat();

            if (openFormUnsavedFile(true) != DialogResult.OK)
                fcn_initDA_CT();
        }

        private void fcn_InitControlChat()
        {
            //dictNotify.Add(tabChatDuyet, badge_Duyet);
            //dictNotify.Add(tabChatGuiDuyet, badge_GuiDuyet);
            //dictNotify.Add(tabChatDaDuyet, badge_DaDuyet);
            SharedControls.badge_Duyet = badge_Duyet;
            SharedControls.badge_GuiDuyet = badge_GuiDuyet;
            SharedControls.badge_DaDuyet = badge_DaDuyet;
            SharedControls.dictNotify = this.dictNotify;
            SharedControls.Form = this;
            SharedControls.xtraTabControl_TienDoKeHoach = xtraTabControl_TienDoKeHoach;


        }

        private void SetCalculateBadges()
        {
            //BaseTabHeaderViewInfo headerInfo = (tabChat as IXtraTab).ViewInfo.HeaderInfo;
            //foreach (BaseTabPageViewInfo page in headerInfo.AllPages)
            //{
            //    if (dictNotify.ContainsKey(page.Page))
            //    {
            //        Badge badge = dictNotify[page.Page];
            //        if (page.Content.IsEmpty)
            //        {
            //            badge.Visible = false;
            //        }
            //        else
            //        {
            //            if (!string.IsNullOrEmpty(badge.Properties.Text))
            //            {
            //                badge.Visible = true;
            //                badge.Properties.Offset = new Point(page.Bounds.X + page.Bounds.Width - 5, page.Bounds.Y);
            //            }
            //            else
            //            {
            //                badge.Visible = false;
            //            }    
            //        }
            //    }
            //}
        }

        private void Fcn_LoadDataQLVC()
        {
            RICBB_TrangThai.Items.Add("Chưa gửi duyệt", 1, 3);
            RICBB_TrangThai.Items.Add("Đã gửi duyệt", 2, 4);
            RICBB_TrangThai.Items.Add("Đang chờ duyệt", 3, 5);

            RICBB_TrangThai_XuatKho.Items.Add("Chưa xuất kho", 1, 3);
            RICBB_TrangThai_XuatKho.Items.Add("Đã xuất kho", 2, 4);
            RICBB_TrangThai_XuatKho.Items.Add("Đang chờ duyệt xuất kho", 3, 5);

            RICBB_TrangThai_NhapKho.Items.Add("Chờ xác nhận nhập kho đến", 5, 6);
            RICBB_TrangThai_NhapKho.Items.Add("Đang chờ duyệt", 4, 5);
            RICBB_TrangThai_NhapKho.Items.Add("Chưa gửi duyệt", 1, 3);
            RICBB_TrangThai_NhapKho.Items.Add("Đã nhập kho", 3, 4);
            RICBB_TrangThai_NhapKho.Items.Add("Chưa nhập kho", 2, 3);
            fcn_loadYeuCauVT_Thucong_TDKH(true, false, true, "CodeKHVT", "CodeTDKH");
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu phần Quản lý vận chuyển", "Vui Lòng chờ!");
            fcn_updateDeXuatVatLieu();
            fcn_UpdateXuatKho();
            fcn_UpdateNhapKho();
            fcn_UpdateChuyenKho();
            Fcn_UpdateTenKho();
            Fcn_UpdateVatLieuVC();
            fcn_UpdateXuatKhoTheoThang();
            WaitFormHelper.CloseWaitForm();
        }


        //private async Task fcn_SyncAllDataFromServer()
        //{
        //    ////SplashScreenManager.ShowForm(typeof(WaitForm("Vui lòng đợi", "Đang đồng bộ dữ liệu từ server"));
        //    ////splash
        //    ////splashScreenManager1
        //    ////DevExpress.XtraSplashScreen.SplashScreenManager splashScreenManager1 = new DevExpress.XtraSplashScreen.SplashScreenManager(this, null, true, true);
        //    ////SplashScreenManager1

        //    //splashScreenDongBoDuLieu.ShowWaitForm();
        //    //splashScreenDongBoDuLieu.SetWaitFormDescription("Đang đồng bộ dữ liệu từ server");
        //    //try
        //    //{
        //    //    await UserHelper.fcn_GetDataFromServer2Sqlite("users/allusers", "dbo.User");
        //    //    await UserHelper.fcn_GetDataFromServer2Sqlite("chatboards/allgroups", "dbo.Group");
        //    //}
        //    //catch (Exception)
        //    //{
        //    //    MessageShower.ShowInformation("Không thể đồng bộ dữ liệu mới nhất từ server! Vui lòng kiểm tra kết nối mạng hoặc website của bạn");
        //    //}
        //    ////await fcn_GetDataFromServer("user/allusers", "User");
        //    //fcn_loadUser2QTMH();
        //    //splashScreenDongBoDuLieu.CloseWaitForm();



        //    //SplashScreenManager.CloseDefaultWaitForm();
        //    //SplashScreenManager.CloseForm();

        //}

        /// <summary>
        /// Lấy dữ liệu trên server xuống sqlite
        /// </summary>
        private async Task fcn_GetDataFromServer(string APIuri, string tblToUpdate)
        {
            var response = await CusHttpClient.InstanceTBT.GetAsync(APIuri);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var content = response.Content.ReadAsStringAsync().Result;
                //var Users = JObject.Parse(JObject.Parse(content.ToString())["data"].ToString( 
                DataTable dt = JsonConvert.DeserializeObject<DataTable>(JObject.Parse(content.ToString())["data"].ToString());
                DataProvider.InstanceServer.UpdateDataTableFromSqliteSource(dt, tblToUpdate, true);
            }
            else
            {

            }

            //DataTable dt = BindGrid();
            //DataProvider.InstanceServer.UpdateDataTable(dt, "User");
            //dbFromServer.User.Select(x => x).ToList();


        }



        private void fcn_TDKH_CapNhatCongTacDoBoc(int firstRow, int lastRow, Dictionary<string, string> dicDoBoc = null)
        {
            //int KeHoach = 0, KLHangNgay = 1;
            spsheet_TD_KH_LapKeHoach.BeginUpdate();
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet wsDoBoc = wb.Worksheets[TDKH.SheetName_DoBocChuan];

            Guid guid;
            CellRange rangeDB = wb.Range[TDKH.RANGE_DoBocChuan];
            if (dicDoBoc == null)
            {
                dicDoBoc = MyFunction.fcn_getDicOfColumn(rangeDB);
            }

            Worksheet[] wss =
            {
                wsDoBoc,
                wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi],
            };


            Row crRowCha = null;
            List<int> lsIndChaCanCapNhat = new List<int>();
            List<string> lsCodeCha = new List<string>();
            string dbString = "";
            for (int i = firstRow; i <= lastRow; i++)
            {
                Row crRow = wsDoBoc.Rows[i];
                string code = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();

                if (!Guid.TryParse(code, out guid))
                    continue;

                string typeRow = crRow[dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();

                switch (typeRow)
                {
                    //case MyConstant.TYPEROW_Nhom:
                    //    break;
                    case MyConstant.TYPEROW_CVCha:
                        //if (crRow[dicDoBoc[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].Value.ToString() == true.ToString())
                        //{
                        lsCodeCha.Add(code);
                        lsIndChaCanCapNhat.Add(i);
                        crRowCha = crRow;
                        crRowCha[dicDoBoc[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = "";
                        //}
                        //else
                        //    crRowCha = null;
                        break;
                    case MyConstant.TYPEROW_NhomDienGiai:
                        break;
                    case MyConstant.TYPEROW_CVCON:
                        if (crRowCha != null)
                        {
                            crRowCha[dicDoBoc[TDKH.COL_DBC_KhoiLuongToanBo]].Formula += $"+ {dicDoBoc[TDKH.COL_DBC_KL1BoPhan]}{i + 1}";
                            int crIndCha = int.Parse(crRow[dicDoBoc[TDKH.COL_RowCha]].Value.ToString());
                            if (crIndCha != crRowCha.Index + 1)
                            {
                                crRow[dicDoBoc[TDKH.COL_RowCha]].Formula = $"ROW(A{crRowCha.Index + 1})";
                                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacCon} SET \"CodeCongTacCha\" = '{crRowCha[dicDoBoc[TDKH.COL_Code]].Value}', \"Row\" = '{i}' WHERE \"Code\" = '{code}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            }
                        }
                        break;
                    default:
                        break;
                }
            }

            wb.Calculate();
            string arrCode = MyFunction.fcn_Array2listQueryCondition(lsCodeCha.ToArray());
            dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"Code\" IN ({arrCode})";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //string[] rowInDb = new string[] { "RowDoBoc", "RowKeHoach", "RowKhoiLuongHangNgay" };
            //foreach (int ind in lsIndChaCanCapNhat)
            //{
            //    string code = wsDoBoc.Rows[ind][dicDoBoc[TDKH.COL_Code]].Value.ToString();
            //    DataRow row = dt.AsEnumerable().Where(x => x["Code"].ToString() == code).FirstOrDefault();
            //    if (row == null)
            //    {
            //        MessageShower.ShowInformation("Lỗi load công tác");
            //        continue;
            //    }

            //    int indKH = wss[1].Columns[dic_All[TDKH.COL_Code]].Search(code).First().RowIndex;
            //    int[] indArr = { ind, indKH };
            //    for (int i = 0; i < 2; i++)
            //    {
            //        row[rowInDb[i]] = indArr[i];
            //        Dictionary<string, string> dic = dics[i];

            //        foreach (var item in dic)
            //        {
            //            if (dt.Columns.Contains(item.Key))
            //            {
            //                try
            //                {
            //                    string val = (item.Key.Contains("Ngay")) ? DateTime.Parse(wss[i].Rows[indArr[i]][item.Value].Value.ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE) : wss[i].Rows[indArr[i]][item.Value].Value.ToString();
            //                    row[item.Key] = val;
            //                }
            //                catch
            //                {

            //                }
            //            }

            //            //string colCongThuc = $"{item.Key}{MyConstant.HAUTO_CONGTHUC}";
            //            //if (dt.Columns.Contains(colCongThuc))
            //            //{
            //            //    try
            //            //    {
            //            //        row[colCongThuc] = wss[i].Rows[indArr[i]][item.Value].Formula;
            //            //    }
            //            //    catch
            //            //    {

            //            //    }
            //            //}
            //        }
            //    }

            //MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(wss[1].Rows[indKH]);
            //}

            //rangeDB = wb.Range[TDKH.RANGE_DoBocChuan];
            //for (int ind = lastRow + 1; ind < rangeDB.BottomRowIndex; ind++)
            //{
            //    Row crRow = wsDoBoc.Rows[ind];
            //    string code = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();
            //    string typeRow = crRow[dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();
            //    if (typeRow == MyConstant.TYPEROW_CVCha)
            //    {
            //        dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"RowDoBoc\" = '{ind}', " +
            //            $"\"{TDKH.COL_DBC_KhoiLuongToanBo}{MyConstant.HAUTO_CONGTHUC}\" = '{crRow[dicDoBoc[TDKH.COL_DBC_KhoiLuongToanBo]].Formula}' WHERE \"Code\" = '{code}'";
            //        if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) != 1)
            //        {
            //            MessageShower.ShowInformation("Lỗi cập nhật công tác");
            //            continue;
            //        }
            //    }
            //}
            spsheet_TD_KH_LapKeHoach.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);
        }

        /// <summary>
        /// Nhận dữ liệu từ chọn định mức
        /// </summary>
        /// <param name="codeCVCha">Code công việc cha</param>
        /// <param name="dt"></param>
        private void fcn_DE_NhanDataDinhMuc(int type, DataTable dt, string codeHM, int indKeHoach2Insert, int indKLHangNgay2Insert, string prevCode, string nextCode, string codeNhom, string codePhanTuyen)
        {
            if (SharedControls.ctrl_DonViThucHienGiaoViec.SelectedDVTH is null)
                return;

            IWorkbook wb;
            Worksheet ws;
            int indRow;
            int crdtRowInd;
            int isPhatSinh;
            string dbString = "";
            switch (type)
            {
                case MyConstant.CONST_TYPE_DinhMuc_KHGV:
                    #region KHGV
                    wb = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
                    ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
                    var range = ws.Range[MyConstant.Range_KeHoach];
                    int firstIndRow = ws.SelectedCell.First().RowIndex;
                    var dic = MyFunction.fcn_getDicOfColumn(range);
                    string colFk = SharedControls.ctrl_DonViThucHienGiaoViec.SelectedDVTH.ColCodeFK;
                    string codeFk = SharedControls.ctrl_DonViThucHienGiaoViec.SelectedDVTH.Code;

                    int indColTypeRow = ws.Columns[dic[GiaoViec.COL_TypeRow]].Index;
                    int? indCha = ws.Range.FromLTRB(indColTypeRow, range.TopRowIndex, indColTypeRow, firstIndRow)
                                    .Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions).LastOrDefault()?.RowIndex;
                    int sortId = 0;

                    if (indCha.HasValue)
                    {
                        string codeCha = ws.Rows[indCha.Value][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                        DataTable dtCha = DataProvider.InstanceTHDA
                            .ExecuteQuery($"SELECT SortId FROM {GiaoViec.TBL_CONGVIECCHA} WHERE CodeCongViecCha = '{codeCha}'");

                        if (dtCha.Rows.Count == 0)
                        {
                            MessageShower.ShowError("Lỗi chèn công tác");
                            return;
                        }

                        sortId = (int)dtCha.Rows[0][0];
                    }

                    string updateString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET SortId = SortId + {dt.Rows.Count} WHERE {colFk} = '{codeFk}' AND SortId > {sortId}";
                    int num = DataProvider.InstanceTHDA
                            .ExecuteNonQuery(updateString);

                    //int ind = 0;
                    ws.Rows.Insert(firstIndRow, dt.Rows.Count);


                    List<string> lsDbString = new List<string>();
                    dt.Columns.Add("CodeCongViecCha", typeof(string));
                    List<object> objs = new List<object>();
                    foreach (DataRow row in dt.Rows)
                    {
                        row["CodeCongViecCha"] = Guid.NewGuid().ToString();
                        dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCHA} (\"CodeCongViecCha\", \"CodeHangMuc\", " +
                            $"\"MaDinhMuc\", \"TenCongViec\", \"DonVi\", \"NgayBatDau\", \"NgayKetThuc\", \"{colFk}\", SortId) VALUES " +
                            $"('{row["CodeCongViecCha"]}', '{codeHM}',@MaDinhMuc, @TenDinhMuc, @DonVi, " +
                            $"'{DateTime.Now.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}', " +
                            $"'{DateTime.Now.Date.AddDays(10).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}', " +
                            $"'{codeFk}', '{++sortId}')";

                        objs.Add(row["MaDinhMuc"]);
                        objs.Add(row["TenDinhMuc"]);
                        objs.Add(row["DonVi"]);

                        lsDbString.Add(dbString);
                        //ind++;
                    }
                    DataProvider.InstanceTHDA.ExecuteNonQuery(string.Join(";\r\n", lsDbString), parameter: objs.ToArray());

                    foreach (DataRow row in dt.Rows)
                    {
                        MyFunction.fcn_TDKH_ThemDinhMucMacDinhChoCongTac(TypeKLHN.GiaoViecCha, row["CodeCongViecCha"].ToString(), false);
                    }
                    //fcn_updateAllSheetKeHoachCongViec();
                    //fcn_GiaoViec_UpdateRowToDb(firstIndRow);
                    TDKHHelper.CapNhatAllVatTuHaoPhi(CodesHangMuc: new string[] { codeHM });
                    GiaoViecHelper.LoadAllKeHoachGiaoViecThiCong();
                    break;
                #endregion
                case MyConstant.CONST_TYPE_DinhMuc_DoBocChuan:
                    DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;

                    //if (dvth is null || !ctrl_DonViThucHienDuAnTDKH.IsGiaoThau)
                    //{
                    //    MessageShower.ShowError("Không thể thêm công tác!");
                    //    return;
                    //}
                    #region DoBocChuan
                    spsheet_TD_KH_LapKeHoach.BeginUpdate();
                    wb = spsheet_TD_KH_LapKeHoach.Document;
                    ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
                    //Worksheet wsKeHoach = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];

                    string colFkDb = SharedControls.ctrl_DonViThucHienDuAnTDKH.SelectedDVTH.ColCodeFK;
                    string codeFkDb = SharedControls.ctrl_DonViThucHienDuAnTDKH.SelectedDVTH.Code;

                    Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

                    spsheet_TD_KH_LapKeHoach.CloseCellEditor(CellEditorEnterValueMode.Cancel);
                    indRow = ws.SelectedCell[0].RowIndex;

                    var rangeDb = ws.Range[TDKH.RANGE_DoBocChuan];
                    int indColTypeRowDb = ws.Columns[dicDoBoc[TDKH.COL_TypeRow]].Index;
                    int? indChaDb = ws.Range.FromLTRB(indColTypeRowDb, rangeDb.TopRowIndex, indColTypeRowDb, indRow)
                                    .Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions).LastOrDefault()?.RowIndex;
                    int sortIdDb = 0;
                    int customOrder = 0;

                    if (indChaDb.HasValue)
                    {
                        string codeCha = ws.Rows[indChaDb.Value][dicDoBoc[TDKH.COL_Code]].Value.ToString();
                        DataTable dtCha = DataProvider.InstanceTHDA
                            .ExecuteQuery($"SELECT SortId, CustomOrder FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE Code = '{codeCha}'");

                        if (dtCha.Rows.Count == 0)
                        {
                            MessageShower.ShowError("Lỗi chèn công tác");
                            return;
                        }

                        sortIdDb = (int)dtCha.Rows[0][0];
                        //customOrder = (int)dtCha.Rows[0][1];
                    }

                    string dbStringNew = $"SELECT {TDKH.TBL_ChiTietCongTacTheoKy}.* " +
                        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                        $"JOIN {TDKH.TBL_DanhMucCongTac} " +
                        $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac = {TDKH.TBL_DanhMucCongTac}.Code " +
                        $"WHERE CodeGiaiDoan = '{SharedControls.cbb_DBKH_ChonDot.SelectedValue}' AND {colFkDb} = '{codeFkDb}' " +
                        $"AND {TDKH.TBL_DanhMucCongTac}.CodeHangMuc = '{codeHM}'";

                    DataTable dtNew = DataProvider.InstanceTHDA.ExecuteQuery(dbStringNew);

                    foreach (DataRow dr in dtNew.Rows)
                    {
                        if (int.TryParse(dr["SortId"].ToString(), out int sortIdParse) && sortIdParse > sortIdDb)
                            dr["SortId"] = sortIdParse + dt.Rows.Count;

                        if (int.TryParse(dr["CustomOrder"].ToString(), out int customOrderParse) && customOrderParse > customOrder)
                            dr["SortId"] = customOrderParse + dt.Rows.Count;
                    }

                    DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNew, TDKH.TBL_ChiTietCongTacTheoKy);
                    //string updateStringDb = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET SortId = SortId + {dt.Rows.Count} " +
                    //                        $"WHERE CodeGiaiDoan = '{SharedControls.cbb_DBKH_ChonDot.SelectedValue}' AND {colFkDb} = '{codeFkDb}' AND SortId > {sortIdDb};" +
                    //                        $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET CustomOrder = CustomOrder + {dt.Rows.Count} " +
                    //                        $"WHERE CodeGiaiDoan = '{SharedControls.cbb_DBKH_ChonDot.SelectedValue}' AND {colFkDb} = '{codeFkDb}' AND CustomOrder > {customOrder};";
                    //int numDb = DataProvider.InstanceTHDA
                    //        .ExecuteNonQuery(updateStringDb);


                    int IndcrRowHMDoBoc = ws.Columns[dicDoBoc[TDKH.COL_Code]].Search(codeHM).First().RowIndex;

                    int indColRowChaDb = ws.Columns[dicDoBoc[TDKH.COL_RowCha]].Index;

                    Row[] rowsCha = ws.Range.FromLTRB(indColRowChaDb, rangeDb.TopRowIndex, indColRowChaDb, rangeDb.BottomRowIndex)
                                    .Search((IndcrRowHMDoBoc + 1).ToString(), MyConstant.MySearchOptions).Select(x => ws.Rows[x.RowIndex]).ToArray();

                    foreach (Row rowSheet in rowsCha)
                    {
                        if (int.TryParse(rowSheet[dicDoBoc[TDKH.COL_CustomOrder]].Value.ToString(), out int ind))
                        {
                            if (ind > customOrder)
                                rowSheet[dicDoBoc[TDKH.COL_CustomOrder]].SetValue(ind + dt.Rows.Count);
                        }
                    }



                    int numRowWillInsert = (ws.Rows[indRow][dicDoBoc[TDKH.COL_Code]].Value.ToString() == "") ? dt.Rows.Count - 1 : dt.Rows.Count;
                    if (numRowWillInsert > 0)
                        ws.Rows.Insert(indRow, numRowWillInsert, RowFormatMode.FormatAsNext);

                    int indKLToanBo = ws.Columns[dicDoBoc[TDKH.COL_DBC_KhoiLuongToanBo]].Index;
                    int indLuyKe = ws.Columns[dicDoBoc[TDKH.COL_DBC_LuyKeDaThucHien]].Index;

                    int numPs = indLuyKe - indKLToanBo - 1;//Số lượng phát sinh
                    //wsKeHoach.Rows.Insert(indKeHoach2Insert, (numPs + 1) * dt.Rows.Count, RowFormatMode.FormatAsPrevious);

                    crdtRowInd = -1;
                    dt.Columns.Add("Code", typeof(string));
                    dt.Columns["MaDinhMuc"].ColumnName = "MaHieuCongTac";
                    dt.Columns["TenDinhMuc"].ColumnName = "TenCongTac";
                    isPhatSinh = (cbb_DBKH_ChonDot.SelectedIndex == 0) ? 0 : 1;

                    //Worksheet[] wss = { wsKeHoach, wsKLHangNgay };
                    string[] colsDonGia = { TDKH.COL_DonGia, TDKH.COL_DonGiaThiCong };
                    //Dictionary<string, string> dicRef = dic;
                    List<string> ListNewCode = new List<string>();
                    List<string> ListNewCodeHaoPhi = new List<string>();
                    foreach (DataRow row in dt.Rows)
                    {
                        crdtRowInd++;
                        string newCodeDanhMucCT = Guid.NewGuid().ToString();
                        string PhanTuyen = (!string.IsNullOrEmpty(codePhanTuyen)) ? $"'{codePhanTuyen}'" : "null";



                        string ngayBDdb = DateTime.Now.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                        string ngayKTdb = DateTime.Now.Date.AddDays(9).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

                        string newCodeCTTheoKy = Guid.NewGuid().ToString();
                        ListNewCode.Add(newCodeCTTheoKy);
                        string Nhom = (!string.IsNullOrEmpty(codeNhom)) ? $"'{codeNhom}'" : "null";
                        if (dvth.IsGiaoThau)
                        {
                            dbString = $"INSERT INTO {TDKH.TBL_DanhMucCongTac} " +
$"(\"Code\", \"MaHieuCongTac\", \"TenCongTac\", \"CodeHangMuc\", \"CodePhanTuyen\", \"DonVi\", \"PhatSinh\") VALUES " +
$"('{newCodeDanhMucCT}', @MaHieuCongTac, @TenCongTac, '{codeHM}', {PhanTuyen}, @DonVi, '{isPhatSinh}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { row["MaHieuCongTac"].ToString(), row["TenCongTac"], row["DonVi"].ToString() });

                            dbString = $"INSERT INTO {TDKH.TBL_ChiTietCongTacTheoKy} " +
                                $"(\"Code\", \"CodeCongTac\", \"CodeGiaiDoan\", \"NgayBatDau\", \"NgayKetThuc\", \"CodeNhom\", \"{dvth.ColCodeFK}\", SortId, CustomOrder, \"{TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh}\") VALUES " +
                                $"('{newCodeCTTheoKy}', '{newCodeDanhMucCT}', '{cbb_DBKH_ChonDot.SelectedValue}', " +
                                $"'{ngayBDdb}', '{ngayKTdb}', {Nhom}, '{dvth.Code}', '{++sortIdDb}', '{++customOrder}', '1')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }
                        else
                        {
                            dbString = $"INSERT INTO {TDKH.TBL_ChiTietCongTacTheoKy} " +
$"( \"HasHopDongAB\",\"PhanTichVatTu\",\"MaHieuCongTac\", \"TenCongTac\", \"CodeHangMuc\", \"CodePhanTuyen\", \"DonVi\", \"Code\",\"CodeGiaiDoan\", \"NgayBatDau\", \"NgayKetThuc\", \"CodeNhom\", \"{dvth.ColCodeFK}\", SortId, CustomOrder, \"{TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh}\") VALUES " +
$"('{true}','{false}', @MaHieuCongTac, @TenCongTac, '{codeHM}', {PhanTuyen}, @DonVi,'{newCodeCTTheoKy}', '{cbb_DBKH_ChonDot.SelectedValue}', " +
$"'{ngayBDdb}', '{ngayKTdb}', {Nhom}, '{dvth.Code}', '{++sortIdDb}', '{++customOrder}', '1')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { row["MaHieuCongTac"].ToString(), row["TenCongTac"], row["DonVi"].ToString() });
                        }

                        //Cập nhật vào sheet
                        row["Code"] = newCodeCTTheoKy;
                        //row["CustomOrder"] = customOrder;

                        foreach (var item in dicDoBoc)
                        {
                            if (dt.Columns.Contains(item.Key) && item.Key != TDKH.COL_GhiChu)
                                ws.Rows[indRow + crdtRowInd][item.Value].SetValue(row[item.Key]);
                        }

                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_Code]].SetValue(newCodeCTTheoKy);
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_CustomOrder]].SetValue(customOrder);
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_MaHieuCongTac]].SetValue(row["MaHieuCongTac"].ToString());
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_DanhMucCongTac]].SetValue(row["TenCongTac"].ToString());
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_DonVi]].SetValue(row["DonVi"].ToString());
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCha);
                        //ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].SetValue(true);

                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(0);
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_KhoiLuongHopDongChiTiet]].SetValue(0);
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_KhoiLuongHopDongDuAn]].SetValue(0);
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh]].SetValue(true);
                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_IsCongTacPhatSinh]].SetValue((isPhatSinh == 1) ? true : false);
                        if (Nhom != "null")
                        {
                            ws.Rows[indRow + crdtRowInd].Font.Color = MyConstant.color_Row_NhomCongTac;
                        }
                        //ws.Rows[indRow + crdtRowInd][TDKH_DBC.dic_Dbc[MyConstant.COL_TDKH_DBC_TypeRow]].SetValue(yConstant.TYPEROW_TDKH_DBC_CVCha);
                        DataTable dtHaoPhi = MyFunction.fcn_TDKH_ThemDinhMucMacDinhChoCongTac(TypeKLHN.CongTac, newCodeCTTheoKy, false);
                        if (dtHaoPhi != null)
                            ListNewCodeHaoPhi.AddRange(dtHaoPhi.AsEnumerable().Select(x => x["Code"].ToString()));

                        ws.Rows[indRow + crdtRowInd][dicDoBoc[TDKH.COL_RowCha]].Formula = $"ROW(A{IndcrRowHMDoBoc + 1})";

                    }
                    //MyFunction.Fcn_CalKLKHNew(TypeKLHN.CongTac, ListNewCode.ToArray());
                    //MyFunction.Fcn_CalKLKHNew(TypeKLHN.HaoPhiVatTu, ListNewCodeHaoPhi.ToArray());
                    //TDKHHelper.CapNhatAllVatTuByCodesHaoPhi(ListNewCodeHaoPhi.ToArray());


                    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(ListNewCode.ToArray());
                    spsheet_TD_KH_LapKeHoach.EndUpdate();

                    int prevInd = (prevCode == "") ? indRow : ws.Columns[dicDoBoc[TDKH.COL_Code]].Search(prevCode).First().RowIndex;
                    int nextInd = (nextCode == "") ? ws.Range[TDKH.RANGE_DoBocChuan].BottomRowIndex - 1 : ws.Columns[dicDoBoc[TDKH.COL_Code]].Search(nextCode).First().RowIndex - 1;
                    fcn_TDKH_CapNhatCongTacDoBoc(prevInd, nextInd, dicDoBoc);
                    break;
                #endregion
                case MyConstant.CONST_TYPE_DinhMuc_TDKH_KeHoach:
                case MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL:
                case MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL_MTC:
                    wb = spsheet_TD_KH_LapKeHoach.Document;
                    CellRange crRange;
                    if (type == MyConstant.CONST_TYPE_DinhMuc_TDKH_KeHoach)
                    {
                        ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
                        crRange = wb.Range[TDKH.RANGE_KeHoach];
                        dt.Columns["TenDinhMuc"].ColumnName = "TenCongTac";
                    }
                    else
                    {
                        return;
                    }
                    spsheet_TD_KH_LapKeHoach.BeginUpdate();
                    spsheet_TD_KH_LapKeHoach.CloseCellEditor(CellEditorEnterValueMode.Cancel);
                    indRow = ws.SelectedCell[0].RowIndex;
                    ws.Rows.Insert(indRow, dt.Rows.Count, RowFormatMode.FormatAsNext);
                    crdtRowInd = -1;
                    dt.Columns.Add("Code", typeof(string));
                    dt.Columns.Add("CodeCongTac", typeof(string));
                    dt.Columns.Add("SoNgayThucHien", typeof(string));
                    dt.Columns.Add("NgayBatDau", typeof(string));
                    dt.Columns.Add("NgayKetThuc", typeof(string));
                    dt.Columns["MaDinhMuc"].ColumnName = "MaHieuCongTac";

                    isPhatSinh = (cbb_DBKH_ChonDot.SelectedIndex == 0) ? 0 : 1;

                    string ngayBD = DateTime.Now.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                    string ngayKT = DateTime.Now.Date.AddDays(10 - 1).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                    foreach (DataRow row in dt.Rows)
                    {
                        crdtRowInd++;
                        row["Code"] = Guid.NewGuid().ToString();
                        row["CodeCongTac"] = Guid.NewGuid().ToString();
                        row["SoNgayThucHien"] = 10;
                        row["NgayBatDau"] = ngayBD;
                        row["NgayKetThuc"] = ngayKT;


                        int ind = indRow + crdtRowInd;
                        var dic_Kh = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
                        foreach (var item in dic_Kh)
                        {
                            if (dt.Columns.Contains(item.Key))
                                ws.Rows[ind][item.Value].SetValueFromText(row[item.Key].ToString(), true);
                        }

                        if (type == MyConstant.CONST_TYPE_DinhMuc_TDKH_KeHoach)
                        {
                            ws.Rows[ind][dic_Kh[TDKH.COL_KhoiLuongHopDongDuAn]].SetValue(0);
                            ws.Rows[ind][dic_Kh[TDKH.COL_DonGia]].SetValue(0);
                            ws.Rows[ind][dic_Kh[TDKH.COL_PhanTramThucHien]].Formula = $"{dic_Kh[TDKH.COL_DBC_KhoiLuongToanBo]}{ind + 1}/{dic_Kh[TDKH.COL_KhoiLuongHopDongDuAn]}{ind + 1}";
                            ws.Rows[ind][dic_Kh[TDKH.COL_GiaTri]].Formula = $"{dic_Kh[TDKH.COL_DBC_KhoiLuongToanBo]}{ind + 1}*{dic_Kh[TDKH.COL_DonGia]}{ind + 1}";

                            dbString = $"SELECT \"MaVatLieu\", \"ThiCong\", \"DinhMuc\", \"VatTu\", \"HeSo\", \"LoaiVatTu\" FROM {MyConstant.TBL_HaoPhiVatTu} WHERE \"MaDinhMuc\"=@MaHieu AND \"LoaiVatTu\"='Nhân công'";
                            DataTable dtNhanCong = DataProvider.InstanceTBT.ExecuteQuery(dbString, parameter: new object[] { row["MaHieuCongTac"] });

                            double HPNhanCong = DinhMucHelper.GetHPNhanCong(row["MaHieuCongTac"].ToString());

                            ws.Rows[ind][dic_Kh[TDKH.COL_NhanCong]].Formula = $"ROUNDUP({dic_Kh[TDKH.COL_DBC_KhoiLuongToanBo]}{ind + 1}*({HPNhanCong}); 0)";
                        }

                        ws.Rows[ind][dic_Kh[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(0);
                    }
                    fcn_TDKH_GhiTenNgayTienDoKeHoachKinhPhi(crRange);
                    spsheet_TD_KH_LapKeHoach.EndUpdate();
                    break;
                default:
                    break;
            }

        }
        private void fcn_DE_NhanDatamtc(ChonMuiThiCong MTC, string CodeCT, bool BoChonMui, bool All)
        {
            if (MTC is null)
                return;
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            Cell cell = ws.SelectedCell[0];
            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);
            string dbString = "";
            List<string> lstCode = new List<string>();
            if (All)
            {
                CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
                WaitFormHelper.ShowWaitForm("Đang đẩy dữ liệu Mũi thi công vào công tác!!!!");
                for (int i = range.TopRowIndex; i <= range.BottomRowIndex; i++)
                {
                    Row Crow = ws.Rows[i];
                    bool Chon = Crow[dicDoBoc["Chon"]].Value.BooleanValue;
                    if (Chon)
                    {
                        string TypeRow = Crow[dicDoBoc[TDKH.COL_TypeRow]].Value.TextValue;
                        if (TypeRow == MyConstant.TYPEROW_CVCha || TypeRow == MyConstant.TYPEROW_CVCHIA)
                        {
                            string Code = Crow[dicDoBoc[TDKH.COL_Code]].Value.TextValue;
                            //string CodeUpdate = BoChonMui ? "NULL" : MTC.Code;
                            dbString = BoChonMui ? $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET CodeMuiThiCong =NULL WHERE Code = '{Code}'" :
                                 $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET CodeMuiThiCong = '{ MTC.Code}' WHERE Code = '{Code}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            lstCode.Add(Code);
                        }
                    }
                }
                TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(lstCode);
                WaitFormHelper.CloseWaitForm();
                TDKHHelper.LoadCongTacDoBoc();
            }
            else
            {
                if (BoChonMui)
                {
                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET CodeMuiThiCong =NULL WHERE Code = '{CodeCT}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    ws.Rows[cell.TopRowIndex][cell.RightColumnIndex].SetValueFromText("");
                    ws.Rows[cell.TopRowIndex][dicDoBoc["CodeMuiThiCong"]].SetValueFromText("");
                    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { CodeCT });
                }
                if (MTC is null)
                    return;
                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET CodeMuiThiCong = '{MTC.Code}' WHERE Code = '{CodeCT}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                ws.Rows[cell.TopRowIndex][dicDoBoc["MuiThiCong"]].SetValueFromText(MTC.Ten);
                ws.Rows[cell.TopRowIndex][dicDoBoc["CodeMuiThiCong"]].SetValueFromText(MTC.Code);
                TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { CodeCT });
            }
        }
        private void fcn_DE_NhanDataKHVT(DataTable dt)
        {
            if (dt == null)
            {
                return;
            }
            spsheet_KeHachVatTu.CloseCellEditor(CellEditorEnterValueMode.Cancel);
            Worksheet ws = spsheet_KeHachVatTu.Document.Worksheets.ActiveWorksheet;
            CellRange Select = ws.SelectedCell;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETDICWS]);
            double STT = 1;
            double RowCha = 0;
            Row copy = ws.Rows[2];
            for (int i = Select.TopRowIndex - 1; i >= 0; i--)
            {
                Row Crow = ws.Rows[i];
                string MaHieu = Crow[Name["MaVatTu"]].Value.ToString();
                string Code = Crow[Name["Code"]].Value.ToString();
                double Stt = Crow[Name["STT"]].Value.IsNumeric ? Crow[Name["STT"]].Value.NumericValue : 0;
                if (MaHieu == MyConstant.CONST_TYPE_HANGMUC)
                {
                    STT = 1;
                    RowCha = i + 1;
                    break;
                }
                else if (MaHieu == "")
                    continue;
                else if (Stt > 0)
                {
                    STT = Stt + 1;
                    RowCha = Crow[Name[MyConstant.COL_KHVT_RowCha]].Value.NumericValue;
                    break;
                }
            }
            spsheet_KeHachVatTu.BeginUpdate();
            ws.Rows.Insert(Select.TopRowIndex, dt.Rows.Count, RowFormatMode.FormatAsNext);
            int Index = Select.TopRowIndex;
            foreach (DataRow row in dt.Rows)
            {
                string Code = Guid.NewGuid().ToString();
                Row crRowWs = ws.Rows[Index++];
                crRowWs.CopyFrom(copy, PasteSpecial.All);
                crRowWs.Visible = true;
                if (row["MaVatLieu"].ToString() == "TT")
                    crRowWs.Font.Color = Color.Red;
                crRowWs[Name[MyConstant.COL_KHVT_CodeCT]].SetValueFromText(Code);
                crRowWs[Name[MyConstant.COL_KHVT_STT]].SetValue(STT++);
                crRowWs[Name[MyConstant.COL_KHVT_RowCha]].SetValue(RowCha);
                crRowWs[Name[MyConstant.COL_KHVT_MaVatTu]].SetValueFromText(row["MaVatLieu"].ToString());
                crRowWs[Name[MyConstant.COL_KHVT_TenVatTu]].SetValueFromText(row["VatTu"].ToString());
                crRowWs[Name[MyConstant.COL_KHVT_DonVi]].SetValueFromText(row["DonVi"].ToString());

                string db_string = $"INSERT INTO {QLVT.TBL_QLVT_KHVT} (\"Code\",\"CodeHangMuc\",\"VatTu\",\"DonVi\",\"MaVatLieu\") " +
                    $"VALUES ('{Code}','{m_ctrlVatlieuThuCong.m_codeHM}',@VatTu, @DonVi, @MaVatLieu)";
                DataProvider.InstanceTHDA.ExecuteNonQuery(db_string, parameter: new object[] { row["VatTu"], row["DonVi"], row["MaVatLieu"] });
            }
            spsheet_KeHachVatTu.EndUpdate();
        }

        private void fcn_DE_NhanDataMTCs(Tbl_MTC_DanhSachMayViewModel MTC)
        {
            var wb = spsheet_TD_KH_LapKeHoach.Document;
            var ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            if (ws.Name != TDKH.SheetName_MayThiCong)
                return;

            var crRow = ws.Rows[ws.SelectedCell.TopRowIndex];
            var typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (typeRow != MyConstant.TYPEROW_CVCha)
                return;

            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();


            string dbString = $"UPDATE {TDKH.TBL_KHVT_VatTu} SET CodeMay = '{MTC.Code}' WHERE Code = '{code}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            crRow[dic[TDKH.COL_MayQuyDoi]].SetValue(MTC.Ten);

        }
        private void fcn_DE_NhanDatVL(DataTable dt)
        {
            if (dt == null)
            {
                tL_YeuCauVatTu.CancelCurrentEdit();
                return;
            }
            switch (m_ctrlVatlieu._type)
            {
                //case 1:
                //    fcn_UpdateVatLieu(dt);
                //    break;
                case 2:
                    fcn_UpdateVatLieu_ThuCong(dt);
                    break;
                case 3:
                    //fcn_UpdateVatLieu_KHVT(dt);
                    break;
            }
        }
        private void fcn_TDKH_GhiTenNgayTienDoKeHoachKinhPhi(CellRange range)
        {
            Worksheet ws = range.Worksheet;
            IWorkbook wb = ws.Workbook;

            int ind = wb.Range[TDKH.RANGE_KeHoach].TopRowIndex;
            for (int i = range.RightColumnIndex + 1; i <= ws.GetUsedRange().RightColumnIndex; i++)
            {
                ws.Rows[range.TopRowIndex][i].SetValue($"Ngày {i - range.RightColumnIndex}");
            }
        }

        private void fcn_initFile()
        {
            // Nhập thông tin công trình //
            WaitFormHelper.ShowWaitForm("Đang khởi tạo file");
            FileHelper.fcn_spSheetStreamDocument(spsheet_Thongtinchinh, $@"{BaseFrom.m_templatePath}\FileExcel\1.aThongTinDuTanDayDu.xls"); // Tên lưới excel trong bảng (tự đặt ví dụ spsheet_Thongtinchinh) và tên file excel đọc vào (ví dụ:1.aThongTinCoBan.xlsx). 
                                                                                                                                            //---------// PHAN THANH TOÁN --//
            FileHelper.fcn_spSheetStreamDocument(spread_PhuLucHopDong_Full, $@"{BaseFrom.m_templatePath}\FileExcel\4.aPhuLucHopDong_Full.xlsx"); // Phụ lục hợp đồng đầy đủ
            FileHelper.fcn_spSheetStreamDocument(spsheet_ThanhToanA_B, $@"{BaseFrom.m_templatePath}\FileExcel\3.aBangThanhToanTongHop_A_B.xls"); // Thanh toán thàu chính A-B
            FileHelper.fcn_spSheetStreamDocument(spsheet_ThanhToanB_B, $@"{BaseFrom.m_templatePath}\FileExcel\3.bBangThanhToanTongHop_B_B.xls"); // Thanh toán tầu phụ B-B'
            //spsheet_ThanhToanB_B.WorksheetDisplayArea.SetSize(0, 10, 8);
            FileHelper.fcn_spSheetStreamDocument(spsheet_ThanhToan_ToDoi, $@"{BaseFrom.m_templatePath}\FileExcel\3.cBangThanhToanTongHop_ToDoi.xls"); // Thanh toán tổ đội
            FileHelper.fcn_spSheetStreamDocument(spsheet_ThanhToan_NhaCungCap, $@"{BaseFrom.m_templatePath}\FileExcel\3.dBangThanhToanTongHop_NhaCungCap.xls"); // Thah toán nhà cung cấp
            //FileHelper.fcn_spSheetStreamDocument(spsheet_ThanhToan_GiamSat, $@"{BaseFrom.m_templatePath}\FileExcel\3.eBangThanhToanTongHop_GiamSat.xls"); // Thanh toán giám sát
            //FileHelper.fcn_spSheetStreamDocument(spsheet_ThanhToan_ThiNghiem, $@"{BaseFrom.m_templatePath}\FileExcel\3.fBangThanhToanTongHop_ThiNghiem.xls"); // Thanh toán thí nghiệm
            FileHelper.fcn_spSheetStreamDocument(spsheet_TuThucHien, $@"{BaseFrom.m_templatePath}\FileExcel\3.aBangThanhToanTongHopTuThucHien.xls"); // Thanh toán tự thực hiện
                                                                                                                                                     //---- PHẦN KẾ HOẠCH ---//
                                                                                                                                                     //Files.fcn_spSheetStreamDocument(spsheet_TD_KH_LapKeHoach, $@"{ BaseFrom.m_templatePath}\FileExcel\6.aBangNhapKeHachDanhGiaLoiNhuan.xls"); // Bảng nhập số liệu lập kế hoạch
                                                                                                                                                     // ---- TIẾN ĐỘ THỰC HIỆN - THAY LẠI BẰNG CÔNG NGHỆ KHÁC PHÙ HỢP CÁCH LẬP TIẾN ĐỘ ---// 
                                                                                                                                                     //Files.fcn_spSheetStreamDocument(spsheet_TDKH_DoBocKLKeHoach, $@"{ BaseFrom.m_templatePath}\FileExcel\8.aTienDoThucHien.xls"); // Vẽ tiến độ tỏng thể, bản nháp, khi dùng cần phải xem lại công cụ và công nghệ cho phù hợp
                                                                                                                                                     //Files.fcn_spSheetStreamDocument(spsheet_TDKH_VatTu, $@"{BaseFrom.m_templatePath}\FileExcel\6b.KeHoachVatLieu.xlsx"); // Bảng đo bóc số liệu lập kế hoạch
                                                                                                                                                     //FileHelper.fcn_spSheetStreamDocument(spsheet_TD_KH_LapKeHoach, $@"{BaseFrom.m_templatePath}\FileExcel\6.aBangNhapKeHachDanhGiaLoiNhuan.xlsx"); // Bảng đo bóc số liệu lập kế hoạch
                                                                                                                                                     //Files.fcn_spSheetStreamDocument(spsheet_TD_DeMo_VatLieu, $@"{ BaseFrom.m_templatePath}\FileExcel\8.bTienDoThucHien_VatLieu.xls");
                                                                                                                                                     //--- PHỤ LỤC BÁO CÁO TUẦN - THÁNG --//
                                                                                                                                                     //---- BẢNG YÊU CẦU VẬT TƯ ----//
            FileHelper.fcn_spSheetStreamDocument(spsheet_KeHachVatTu, $@"{BaseFrom.m_templatePath}\FileExcel\10.eKeHoachVatTu.xls"); // Kế hoạch vật tư                                                                                                                        //Files.fcn_spSheetStreamDocument(spsheet_GV_KH_ChiTietCacHMCongViec, $@"C:\Users\buiva\OneDrive\Desktop\Book1.xlsx"); // Hiển thị bảng chi tiết giao việc trong kế hoạch
            FileHelper.fcn_spSheetStreamDocument(SharedControls.spsheet_TD_KH_LapKeHoach, $@"{BaseFrom.m_templatePath}\FileExcel\6.aBangNhapKeHachDanhGiaLoiNhuan.xlsx");
            //FileHelper.fcn_spSheetStreamDocument(spsheet_GV_KH_ChiTietCacHMCongViec, $@"{BaseFrom.m_templatePath}\FileExcel\13.aKeHoachGiaoViec.xlsx");
            //Files.fcn_spSheetStreamDocument(spsheet_GV_CVHN_TheoDoiCongViecHangNgay, $@"{BaseFrom.m_templatePath}\FileExcel\13.bChiTietCongViecHangNgay.xlsx"); //Bảng chấm công ngày hàng 
            FileHelper.fcn_spSheetStreamDocument(spsheet_QLMTB_DuLieuThamKhao, $@"{BaseFrom.m_templatePath}\FileExcel\14.aDuLieuMayThiCongThamKhao.xls");
            //Files.fcn_spSheetStreamDocument(spsheet_BangKhoanchi, $@"{BaseFrom.m_templatePath}\FileExcel\15.2Thuchitamungkhoanchi.xlsx");
            FileHelper.fcn_spSheetStreamDocument(spread_Tonghopduan_HD, $@"{BaseFrom.m_templatePath}\FileExcel\3.(TH)BangThanhToanTongHop_DuAn.xls");
            //Files.fcn_spSheetStreamDocument(spsheet_GV_CVHN_TheoDoiCongViecHangNgay, $@"{ BaseFrom.m_templatePath}\FileExcel\13.bChiTietCongViecHangNgay.xls");
            WaitFormHelper.CloseWaitForm();
        }

        private void SetEnableByPermission(bool IsEnable)
        {
            scrollCtrl_Menu.Enabled
                //= xtraTabControl_TabMain.Enabled
                = pn_Contractor.Enabled
                = pc_HopDong.Enabled
                = panel_GeneralFunc.Enabled
                = IsEnable;

            //if (!IsEnable)
            //{

            //}

        }
        private void fcn_initDA_CT()
        {
            if (MSETTING.Default.PathHienTai == "" || !File.Exists(MSETTING.Default.PathHienTai))
            {
                MSETTING.Default.PathHienTai = "";
                MSETTING.Default.Save();

                int STT_TempDA = 0;
                bool isExist = false;//Kiểm tra số thứ tự công trình tạm
                do
                {
                    isExist = Directory.Exists($@"{BaseFrom.m_tempPath}\TongHopDuAn_{++STT_TempDA}");
                } while (isExist);
                //m_crFileDA = "";
                string crTempDATH = $"TongHopDuAn_{STT_TempDA}";


                Directory.CreateDirectory($@"{BaseFrom.m_tempPath}\{crTempDATH}");
                MyFunction.DirectoryCopy($@"{BaseFrom.m_templatePath}\DuAnMau", $@"{BaseFrom.m_tempPath}\{crTempDATH}", true);
                DataProvider.InstanceTHDA.changePath($@"{BaseFrom.m_tempPath}\{crTempDATH}\{MyConstant.CONST_DbFromPathDA}");


                string dbString = $"INSERT INTO Tbl_ThongTinTHDA " +
                            $"(Code, OriginalVersion, CreateBySerialNo, LastMigrationVersion) VALUES " +
                            $"(@Code, @OriginalVersion, @CreateBySerialNo, @LastMigrationVersion)";

                object[] mParams =
                {
                    1,
                    Application.ProductVersion,
                    BaseFrom.BanQuyenKeyInfo.SerialNo,
                    Application.ProductVersion,

                };
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: mParams);


                BaseFrom.m_crTempDATH = crTempDATH;
                TongHopHelper.SetTextFormByLicense();

                //fcn_AddThongTinKemDuAnMoi("Dự án 1");


                TongHopHelper.fcn_updateCbbThongTinDuAnCongTrinh();
                //tabGIAODIENCHINHQLTC.SelectedIndex = 2;
                m_isThongTinChinhChanged = true;
                m_isTPTGChanged = true;
            }
            else
            {
                fcn_openDAwithPath(MSETTING.Default.PathHienTai);
            }

        }

        private bool fcn_openDA()
        {
            openFileDialog.DefaultExt = "qltc";
            openFileDialog.Filter = "TBT QLTC (*.qltc)|*.qltc";
            openFileDialog.AddExtension = false;
            DialogResult rs = openFileDialog.ShowDialog();

            if (rs == DialogResult.Cancel)
                return false;

            try
            {
                MyFunction.DirectoryDelete($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}");
            }
            catch (Exception ex)
            {
                MessageShower.ShowInformation("Không thể xóa thư mục" + ex.ToString());
            }
            MSETTING.Default.PathHienTai = "";
            MSETTING.Default.Save();

            fcn_openDAwithPath(openFileDialog.FileName);



            return true;
        }

        private bool fcn_openDAwithPath(string pathFile)
        {
            try
            {
                MSETTING.Default.PathHienTai = pathFile;
                MSETTING.Default.Save();
                //this.Text = Path.GetFileName(pathFile);
                string fileName = Path.GetFileNameWithoutExtension(pathFile);
                string fullPath = $@"{BaseFrom.m_tempPath}\{fileName}";


                MyFunction.DirectoryDelete(fullPath);
                //slke_ThongTinDuAn.Properties.DataSource = null;
                //cbb_DauViecLon.DataSource = null;
                //cbb_DauViecNho.DataSource = null;
                //cbb_MenuCongTrinhThucHien.Items.Clear();
                //m_crFileDA = MSETTING.Default.PathHienTai = mopenFileDialog.FileName;
                //MSETTING.Default.Save();
                using (ZipArchive archive = ZipArchive.Read(pathFile))
                {
                    //DevExpress.Compression.EncryptionType encryptionType = DevExpress.Compression.EncryptionType.PkZip;
                    //archive.EncryptionType = encryptionType;
                    //archive.Password = m_pw;
                    //if (!Directory.Exists($@"{BaseFrom.m_tempPath}\{fileName}"))
                    //    Directory.CreateDirectory($@"{BaseFrom.m_tempPath}\{fileName}");
                    foreach (ZipItem item in archive)
                    {

                        item.Extract(fullPath);
                    }
                    BaseFrom.m_crTempDATH = fileName;
                    //fcn_getPrvDA();
                    //fcn_getPrvDA();
                    //fcn_loadAllSpSheet();
                    //fcn_updateThongTinCongTrinh();
                    //fcn_updateThongTinHangMuc();

                }
                DataProvider.InstanceTHDA.changePath($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\{MyConstant.CONST_DbFromPathDA}");

                THDAHelper.MigrationSQLite();

                //var GiaoViecCha = MyFunction.Fcn_CalKLKHNew(TypeKLHN.GiaoViecCha);
                //var GiaoViecCon = MyFunction.Fcn_CalKLKHNew(TypeKLHN.GiaoViecCon);
                //var CongTac = MyFunction.Fcn_CalKLKHNew(TypeKLHN.CongTac);
                //var HaoPhiVatTu = MyFunction.Fcn_CalKLKHNew(TypeKLHN.HaoPhiVatTu);
                //var VatLieu = MyFunction.Fcn_CalKLKHNew(TypeKLHN.VatLieu);



                //DataProvider.InstanceTHDA.ExecuteNonQuery($"UPDATE {MyConstant.TBL_THONGTINTHDA} SET \"Tentonghopduan\"='{BaseFrom.m_crTempDATH}'");
                TongHopHelper.fcn_updateCbbThongTinDuAnCongTrinh();
                TongHopHelper.SetTextFormByLicense();
                //Fcn_LoadDataQLVC();
                return true;
            }
            catch (Exception ex)
            {
                string err = $"{ex.Message}_Inner: {ex.InnerException?.Message}";
                AlertShower.ShowInfo(err, "Lỗi mở dự án!");
                MSETTING.Default.PathHienTai = "";
                MSETTING.Default.Save();
                fcn_initDA_CT();
                return false;

            }
        }



        private void PhanMemQuanLyThiCong360_FormClosing(object sender, FormClosingEventArgs e)
        {
            //Properties.Settings.Default[]
            Debug.WriteLine("Closing....");

            if (!TongHopHelper.CheckSaveDA())
                e.Cancel = true;

        }


        private void btn_DocFileKhoiLuongExcel_Click(object sender, EventArgs e)
        {
            XtraMessageBoxArgs args = new XtraMessageBoxArgs();
            args.Caption = "Lựa chọn Nhà thầu muốn đọc Excel";
            args.Buttons = new DialogResult[] { DialogResult.OK, DialogResult.No, DialogResult.Yes, DialogResult.Cancel };
            args.Showing += Args_Showing_DocExcel;
            DevExpress.XtraEditors.XtraMessageBox.Show(args);

        }
        private void Args_Showing_DocExcel(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Appearance.FontStyleDelta = FontStyle.Bold;
            e.Form.Appearance.FontSizeDelta = 2;
            foreach (var control in e.Form.Controls)
            {
                SimpleButton button = control as SimpleButton;
                if (button != null)
                {
                    button.ImageOptions.SvgImageSize = new Size(16, 16);
                    // button.Height = 25;
                    switch (button.DialogResult.ToString())
                    {
                        case ("OK"):
                            button.ImageOptions.SvgImage = svgImageCollection1[5];
                            button.Text = "Nhà thầu chính";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                e.Form.Close();
                                var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
                                if (DA is null)
                                {
                                    MessageShower.ShowWarning("Vui lòng chọn dự án hoặc tạo dự án mới để đọc excel vào!");
                                    return;
                                }
                                openFileDialog.DefaultExt = "xls";
                                openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
                                openFileDialog.Title = "Chọn file Excel";
                                DialogResult rs = openFileDialog.ShowDialog();
                                if (rs == DialogResult.OK)
                                {
                                    // Mở fom đọc excel từ màn hình chính
                                    string queryStr = $"SELECT \"Code\" FROM {MyConstant.TBL_THONGTINNHATHAU} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
                                    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                                    Form_ImportExcel Import = new Form_ImportExcel();
                                    Import.filePath = openFileDialog.FileName;
                                    Import.m_codenhathau = dt.AsEnumerable().FirstOrDefault()[0].ToString();
                                    Import.ShowDialog();
                                    fcn_updateSheetThongTinChinh();
                                    fcn_LoadCongTrinhHangMuc();
                                    //fcn_LoadCongTacDoBoc();
                                    Fcn_LoadDataQLVC();
                                }
                            };
                            break;
                        //case ("Yes"):
                        //    button.ImageOptions.SvgImage = svgImageCollection1[6];
                        //    button.Text = "Nhà thầu phụ";
                        //    button.Width = 200;
                        //    button.Height = 50;
                        //    button.Click += (ss, ee) =>
                        //    {
                        //e.Form.Close();
                        //        openFileDialog.DefaultExt = "xls";
                        //        openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
                        //        openFileDialog.Title = "Chọn file Excel";
                        //        DialogResult rs = openFileDialog.ShowDialog();
                        //        if (rs == DialogResult.OK)
                        //        {
                        //            XtraForm_ImportExcelNhaThauPhu Import = new XtraForm_ImportExcelNhaThauPhu();
                        //            Import.filePath = openFileDialog.FileName;
                        //            Import.ShowDialog();
                        //            fcn_updateSheetThongTinChinh();
                        //            fcn_LoadCongTacDoBoc();
                        //            Fcn_LoadDataQLVC();
                        //        }
                        //    };
                        //    break;       
                        case ("Yes"):
                            button.ImageOptions.SvgImage = svgImageCollection1[6];
                            button.Text = "Đọc phân khai";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                e.Form.Close();
                                var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
                                if (DA is null)
                                {
                                    MessageShower.ShowWarning("Vui lòng chọn dự án hoặc tạo dự án mới để đọc excel vào!");
                                    return;
                                }
                                openFileDialog.DefaultExt = "xls";
                                openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
                                openFileDialog.Title = "Chọn file Excel";
                                DialogResult rs = openFileDialog.ShowDialog();
                                if (rs == DialogResult.OK)
                                {
                                    string queryStr = $"SELECT \"Code\" FROM {MyConstant.TBL_THONGTINNHATHAU} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
                                    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                                    XtraForm_DocPhanKhaiNhaThau Import = new XtraForm_DocPhanKhaiNhaThau();
                                    Import.filePath = openFileDialog.FileName;
                                    Import.m_codenhathau = dt.AsEnumerable().FirstOrDefault()[0].ToString();
                                    Import.ShowDialog();
                                    fcn_updateListCbb();
                                    fcn_updateSheetThongTinChinh();
                                    fcn_LoadCongTacDoBoc();
                                    Fcn_LoadDataQLVC();
                                }
                            };
                            break;
                        case ("No"):
                            button.ImageOptions.SvgImage = svgImageCollection1[0];
                            button.Text = "Kế hoạch năm";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                e.Form.Close();
                                openFileDialog.DefaultExt = "xls";
                                openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
                                openFileDialog.Title = "Chọn file Excel";
                                DialogResult rs = openFileDialog.ShowDialog();
                                if (rs == DialogResult.OK)
                                {
                                    // Mở fom đọc excel từ màn hình chính
                                    XtraForm_DocDuLieuKeHoachNam Import = new XtraForm_DocDuLieuKeHoachNam();
                                    Import.filePath = openFileDialog.FileName;
                                    Import.ShowDialog();
                                }
                            };
                            break;
                        default:
                            button.ImageOptions.SvgImage = svgImageCollection1[3];
                            button.Text = "Thoát";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) => { e.Form.Close(); };
                            break;
                    }
                }
            }
        }
        private void fcn_NhanDataTuExcel(DataTable dt, DataTable dt_congtactheogiaidoan, int type)
        {

            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;
            IWorkbook wb;
            //CellRange range2Insert;
            Dictionary<string, string> DIC_TD_KH_Map;
            int firsrInd2Insert, crdtRowInd;
            string rangeName2Insert = "";

            switch (type)
            {
                case MyConstant.CONST_TYPE_DinhMuc_DoBocChuan:
                    rangeName2Insert = TDKH.RANGE_DoBocChuan;
                    break;
                case MyConstant.CONST_TYPE_DANHMUCCONGTAC_DUTHAU:
                    DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, MyConstant.Tbl_DANHMUCCONGTAC_DUTHAU);
                    return;
                case MyConstant.CONST_TYPE_DANHMUCCONGTAC_VATLIEU:
                    DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_KHVT_VatTu);
                    return;
                case MyConstant.CONST_TYPE_DANHMUCCONGTAC_VL:
                    DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, MyConstant.Tbl_DANHMUCCONGTAC_VL);
                    return;
                case MyConstant.CONST_TYPE_DANHMUCCONGTAC_CONGTRINH:
                    return;
                case MyConstant.CONST_TYPE_DANHMUCCONGTAC_TONGMUCDAUTU:
                    dt.Columns.Add("Code");
                    dt.Columns.Add("CodeDuAn");
                    foreach (DataRow row in dt.Rows)
                    {
                        row["Code"] = Guid.NewGuid().ToString();
                        row["CodeDuAn"] = slke_ThongTinDuAn.EditValue.ToString();
                    }
                    DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, MyConstant.Tbl_DANHMUCCONGTAC_TONGDAUTU);
                    return;
                case MyConstant.CONST_TYPE_DinhMuc_TDKH_KeHoach:
                    break;
                case MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL:
                    break;

                case MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL_MTC:
                    break;
                default:
                    return;
            }



            //Cập nhật Dic

            //CellRange range2Insert = wb.Range[rangeName2Insert];
            //Worksheet ws = range2Insert.Worksheet;
            //DIC_TD_KH_Map = MyFunction.fcn_getDicOfColumn(range2Insert);
            //spsheet_TDKH_DoBocKLKeHoach.CloseCellEditor(CellEditorEnterValueMode.Cancel);

            //firsrInd2Insert = range2Insert.BottomRowIndex;
            //ws.Rows.Insert(firsrInd2Insert, dt.Rows.Count, RowFormatMode.FormatAsPrevious);

            //crdtRowInd = -1;
            //dt.Columns.Add("Code", typeof(string));

            //foreach (DataRow row in dt.Rows)
            //{
            //    crdtRowInd++;
            //    foreach (var item in DIC_TD_KH_Map)
            //    {

            //        if (dt.Columns.Contains(item.Key))
            //        {
            //            ws.Rows[firsrInd2Insert + crdtRowInd][item.Value].SetValueFromText(row[item.Key].ToString(), true);
            //        }
            //    }
            //}
            //CellRange rangUpdate = ws.Range[$"{firsrInd2Insert + 1}:{firsrInd2Insert + dt.Rows.Count}"];

            //switch (type)
            //{
            //    case MyConstant.CONST_TYPE_DinhMuc_DoBocChuan:
            //        fcn_TDKH_UpdateChaInRange(rangUpdate);
            //        spsheet_TDKH_DoBocKLKeHoach.EndUpdate();
            //        fcn_UpdateCongTacDoBoc();
            //        break;
            //    case MyConstant.CONST_TYPE_DinhMuc_TDKH_KeHoach:
            //    case MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL:
            //    case MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL_MTC:
            //        for (int i = rangUpdate.TopRowIndex; i <= rangUpdate.BottomRowIndex; i++)
            //        {
            //            //MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(range2Insert, i);
            //        }
            //        spsheet_TD_KH_LapKeHoach.EndUpdate();
            //        break;
            //    default:
            //        break;
            //}

        }



        private void btn_NutXuatBaoCaoWord_Click(object sender, EventArgs e)
        {
            // Mở Fom xuất tất cả các loại báo cáo
            FormXuatBaoCaoTongHop_FomChinh Fom_XuatTatCaBaoCao = new FormXuatBaoCaoTongHop_FomChinh();
            Fom_XuatTatCaBaoCao.ShowDialog();
        }

        private void btn_NutChonDinhMucLapKeHoach_Click(object sender, EventArgs e)
        {
            // Nút chọn định mức lập kế hoạch tại menu bảng chính
            frmChonDinhMuc ChonDinhMucKeHoach = new frmChonDinhMuc();
            ChonDinhMucKeHoach.ShowDialog();
        }

        private void btn_TaoDuAnMoi_Click(object sender, EventArgs e)
        {
            TaoDuAnMoi();
        }

        private bool TaoDuAnMoi()
        {
            if (!BaseFrom.IsFullAccess && !BaseFrom.allPermission.HaveInitProjectPermission
                && !BaseFrom.allPermission.HaveCreateProjectPermission)
            {
                MessageShower.ShowError("Bạn không có quyền khởi tạo dự án!");
                return false;
            }
            WaitFormHelper.ShowWaitForm("Đang tạo dự án mới");
            IWorkbook workbook = spsheet_Thongtinchinh.Document;
            Worksheet sheetThongTin = workbook.Worksheets["Thông tin Dự án - Công trình"];

            MSETTING.Default.CongTrinhHienTai = "Công trình 1";
            //MSETTING.Default.PathHienTai = "";
            MSETTING.Default.Save();

            int STT_TempDA = 0;
            bool isExist = false;//Kiểm tra số thứ tự công trình tạm
            string db_string = $"Select \"TenDuAn\" from {MyConstant.TBL_THONGTINDUAN}";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
            SharedControls._PhanKhai = false;
            do
            {
                isExist = false;
                STT_TempDA++;
                if (dt.AsEnumerable().Where(x => x.Field<string>("TenDuAn") == $"Dự án {STT_TempDA}").Count() > 0)
                    isExist = true;

            } while (isExist);

            string tenDuAn = $"Dự án {STT_TempDA}";

            fcn_AddThongTinKemDuAnMoi(tenDuAn);
            TongHopHelper.fcn_updateCbbThongTinDuAnCongTrinh();

            //fcn_GV_CapNhatHangMucCongViec();

            // Mở giao diện thông tin công trình để nhập số liệu trên excel - Tại nút ngang trên giao diện chính
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabTHONGTINCHINH"];
            //tab_THONGTINDUAN_THANHPHAN.SelectedTab = tab_THONGTINDUAN_THANHPHAN.TabPages["tab_TTDA_ThongTin"];

            if (xtraTabPage_ThongTinDuAn.PageVisible)
            {
                xtraTabControl_TabMain.SelectedTabPage = xtraTabPage_ThongTinDuAn;
                if (xtraTab_ThongTin.PageVisible)
                    xtraTabControl_ThongTinDA.SelectedTabPage = xtraTab_ThongTin;
            }
            WaitFormHelper.CloseWaitForm();
            return true;


        }

        private void fcn_AddThongTinKemDuAnMoi(string tenDuAn)
        {
            string codeDA = Guid.NewGuid().ToString();
            MSETTING.Default.DuAnHienTai = codeDA;

            MSETTING.Default.CongTrinhHienTai = "Công trình 1";
            MSETTING.Default.Save();
            MSETTING.Default.DuAnHienTai = codeDA;
            string ngayBD = DateTime.Now.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string ngaykt = DateTime.Now.AddDays(30).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string codeCT = Guid.NewGuid().ToString();
            string codeCTKHVT = Guid.NewGuid().ToString();
            string codeTTH = Guid.NewGuid().ToString();
            string SoHopDong = $"01-{DateTime.Now.Date.ToString("MM/dd/yyyy")}-HĐTTH";
            string db_string = $"INSERT INTO {MyConstant.TBL_THONGTINDUAN} (\"Code\",\"TenDuAn\",\"NgayBatDau\",\"NgayKetThuc\", \"CreatedBy\", IsLayCongTacTuDong, CreatedBySerialNo) " +
                $"VALUES ('{codeDA}','{tenDuAn}','{ngayBD}','{ngaykt}','{BaseFrom.BanQuyenKeyInfo.Email}', 1, '{BaseFrom.BanQuyenKeyInfo.SerialNo}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINCONGTRINH} (\"Code\",\"CodeDuAn\",\"Ten\") VALUES ('{codeCT}','{codeDA}','Công trình 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO {QLVT.TBL_QLVT_KHVT_CongTrinh} (\"Code\",\"CodeDuAn\",\"Ten\") VALUES ('{codeCTKHVT}','{codeDA}','Công trình 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO {QLVT.TBL_QLVT_KHVT_HangMuc} (\"Code\",\"CodeCongTrinh\",\"Ten\") VALUES ('{Guid.NewGuid()}','{codeCTKHVT}','Hạng mục 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            string codeNhaThau = Guid.NewGuid().ToString();
            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINNHATHAU} (\"Code\",\"CodeDuAn\",\"Ten\") VALUES ('{codeNhaThau}','{codeDA}','Nhà thầu 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINNHACUNGCAP} (\"Code\",\"CodeDuAn\",\"Ten\") VALUES ('{Guid.NewGuid()}','{codeDA}','Nhà cung cấp 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINTODOITHICONG} (\"Code\",\"CodeDuAn\",\"Ten\") VALUES ('{Guid.NewGuid()}','{codeDA}','Tổ đội 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);
            string CodeTTH = Guid.NewGuid().ToString();
            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINNHATHAUPHU} (\"Code\", \"CodeTongThau\",\"CodeDuAn\",\"Ten\") VALUES ('{CodeTTH}', '{codeNhaThau}','{codeDA}','Đơn vị tự thực hiện')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);
            db_string = $"INSERT INTO {MyConstant.Tbl_TAOMOIHOPDONG} (\"CodeLoaiHopDong\",\"CodeNhaThauPhu\",\"CodeDuAn\",\"GiaTriHopDong\",\"TrangThai\",\"NgayBatDau\",\"NgayKetThuc\",\"Code\",\"TenHopDong\",\"SoHopDong\",\"CodeDonViThucHien\") " +
            $"VALUES ('{1}','{CodeTTH}','{codeDA}','{0}','{"Đang thực hiện"}','{ngayBD}','{ngaykt}','{codeTTH}','{"TTH-HĐTC  Giao Thầu"}','{SoHopDong}','{CodeTTH}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);
            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINNHATHAUPHU} (\"Code\",\"CodeDuAn\",\"Ten\") VALUES ('{Guid.NewGuid()}','{codeDA}','Nhà thầu phụ 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (\"Code\",\"CodeCongTrinh\",\"Ten\") VALUES ('{Guid.NewGuid()}','{codeCT}','Hạng mục 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            //Thêm thông tin Tiến độ - Kế hoạch
            string codeGD = Guid.NewGuid().ToString();
            string codeTH = Guid.NewGuid().ToString();
            db_string = $"INSERT INTO {TDKH.TBL_GiaiDoanThucHien} (\"Code\",\"CodeDuAn\",\"Ten\") VALUES ('{codeGD}','{codeDA}','Giai đoạn 1')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO {MyConstant.TBL_HopDong_DotHopDong} (\"TrangThai\",\"Code\",\"CodeGiaiDoan\",\"Ten\",\"NgayBatDau\",\"NgayKetThuc\",\"CodeHd\") " +
                $"VALUES ('Đang thực hiện','{Guid.NewGuid()}','{codeGD}','Đợt 1','{ngayBD}','{ngaykt}','{codeTTH}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO '{MyConstant.TBL_Tonghopdanhsachhopdong}' (\"CodeHopDong\",\"Code\",\"CodeDuAn\") VALUES ('{codeTTH}','{codeTH}','{codeDA}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);

            db_string = $"INSERT INTO '{MyConstant.TBL_ThongtinphulucHD}' (\"PhatSinh\",\"Code\",\"CodeLoaiHd\",\"CodeHd\",\"TenPl\") VALUES ('{0}','{Guid.NewGuid()}','{MyConstant.DIC_LOAIHOPDONG["HỢP ĐỒNG THEO DỰ ÁN"]}','{codeTH}','{"Phụ lục 1"}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);
            fcn_GV_InitDauViec(codeDA);

            /// Thêm thông tin Chấm công
            /// 
            Fcn_InsertHeSoChamCong(codeDA);

        }
        private void StripCapNhatDuLieuHienThoi_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(BaseFrom.BanQuyenKeyInfo.UrlAPI))
            {
                MessageShower.ShowError("Bạn không có quyền cập nhật dữ liệu. Kiểm tra lại bản quyền và khóa hoạt động!");
            }
            // Mở nút cập nhật hiện thời từ menu Strip
            FormCapNhatDuLieuHienThoi TatCapNhatHienThoi = new FormCapNhatDuLieuHienThoi();
            var dr = TatCapNhatHienThoi.ShowDialog();

            //if (dr == DialogResult.Yes || dr == DialogResult.No) //Yes: Cập nhật vào file Tổng dự án hiện tại (Giữ nguyên các dự án cũ), No: Lưu lại file dự án hiện tại và cập nhật dữ liệu vào file mới
            //{
            //    WaitFormHelper.ShowWaitForm("Đang cập nhật danh sách dự án");
            //    if (dr == DialogResult.No && (slke_ThongTinDuAn.Properties.DataSource as IList).Count > 0)
            //    {
            //        fcn_saveDA(false);
            //        TaoMoiTongDuAn(false);
            //    }

            //    string api = (BaseFrom.IsFullAccess || BaseFrom.allPermission.HaveInitProjectPermission)
            //        ? $"{Server.Tbl_ThongTinDuAn}/{RouteAPI.SUFFIX_GetAll}"
            //        : $"{RouteAPI.TongDuAn_GetAllDAByCurrentUser}";

            //    var result = await CusHttpClient.InstanceCustomer.MGetAsync<List<Tbl_ThongTinDuAnViewModel>>(api);
            //    if (!result.MESSAGE_TYPECODE)
            //    {
            //        MessageShower.ShowError("Lỗi tải danh sách dự án");
            //        WaitFormHelper.CloseWaitForm();
            //        return;
            //    }

            //    var lsTTDA = result.Dto;
            //    DataTable dt = lsTTDA.fcn_ObjToDataTable();

            //    DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(dt, MyConstant.TBL_THONGTINDUAN, "Code");
            //    fcn_updateCbbThongTinDuAnCongTrinh();
            //    WaitFormHelper.CloseWaitForm();
            //}
            //else if (dr == DialogResult.OK)
            //{
            //    slke_ThongTinDuAn_EditValueChanged(null, null);
            //}

        }

        private void btnMeNuTraiQLHopDong_Click(object sender, EventArgs e)
        {
            xtraTabControl_TabMain.SelectedTabPage = xtraTab_QLTienDo_KeHoach;
            //// Mở bảng hợp đồng để nhập mới hợp đồng - Tại Menu đứng của bảng chính
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            ////Mở file đến chi tiết tạo hợp đồng
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tabTongHopDanhSachHopDong"];
        }

        private void btnMeNuTraiDanhMucCongTrinh_Click(object sender, EventArgs e)
        {
            //// Mở danh mục tất cả công trình - Tại Menu đứng của bảng chính
            xtraTabControl_TabMain.SelectedTabPage = xtraTabPage_ThongTinDuAn;
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabDanhMuc_DUAN_CONGTRINH"];
        }

        private void btnMeNuTraiQLThanhToan_Click(object sender, EventArgs e)
        {
            //// Mở bảng con của thanh toán A-B - Tại Menu đứng của bảng chính
            //// Mở bảng lớn chính ngoài cùng trước
            xtraTabControl_TabMain.SelectedTabPage = xtraTabPage_QLHDong_TT;
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            //// Mở bảng con ở Ship 2 trong sau, nếu có nhiều bảng con thì mở nhiều lần
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tabQLHD_TT_TongHopThanhToan"];
        }


        private void btnMeNuTraiThietBi_MayThiCong_Click(object sender, EventArgs e)
        {
            // Mở giao diện máy thi công từ bảng chính - Tại Menu đứng của bảng chính
            xtraTabControl_TabMain.SelectedTabPage = xtraTabPage_GiaoViec;
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabMAY_THIETBI"];
        }

        private void btnMeNuTraiVanChuyen_Click(object sender, EventArgs e)
        {
            //// Mở giao diện vận chuyển tại giao diện chính - Tại Menu đứng của bảng chính
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabVATLIEU_VANCHUYEN"];
            //// Vào bảng vận chuyển của trang con
            xtraTabControl_TabMain.SelectedTabPage = xtraTabPage_DSDuAn_CT;
            //tabNhap_Xuat_Ton_VanChuyen.SelectedTab = tabNhap_Xuat_Ton_VanChuyen.TabPages["tabQLVanChuyen"];
        }

        private void btnMeNuTraiChamCong_Click(object sender, EventArgs e)
        {
            xtraTabControl_TabMain.SelectedTabPage = xtraTabPage_KiemSoat;
            //// Mở bảng nhân công tại giao diện chính - Tại Menu đứng của bảng chính
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabCHAMCONG"];
        }
        private void btnMeNuTraiTamUngThuChi_Click(object sender, EventArgs e)
        {
            //// Mở bảng thu chi tạm ứng giao diện chính - Tại Menu đứng của bảng chính
            xtraTabControl_TabMain.SelectedTabPage = xtraTabPage_ThuChi_TamUng;
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabTHU_CHI_TAMUNG"];

        }
        private void btn_TTChinh_DanhMucNhaThau_Click(object sender, EventArgs e)
        {

            // Mở bảng chi tiết công trình, thầu phụ, chính, CC .... tại bảng rời
            FormChiTietThongTinCongTrinh XemChiTietCongrinh_NutTam = new FormChiTietThongTinCongTrinh();
            XemChiTietCongrinh_NutTam.ShowDialog();
        }

        private void btn_TTChinh_TaoMoiHopDong_Click(object sender, EventArgs e)
        {
            //// Mở bảng hợp đồng để nhập mới hợp đồng - Tại Menu đứng của "Thông tin chính"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tab_HDTT_TaoHopDong"];
        }

        private void btn_TTChinh_ThemThanhToan_Click(object sender, EventArgs e)
        {
            //// Mở bảng con của thanh toán A-B - Tại Menu đứng của "Thông tin chính"
            //// Mở bảng lớn chính ngoài cùng trước
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            //// Mở bảng con ở Ship 2 trong sau, nếu có nhiều bảng con thì mở nhiều lần
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tabQLHD_TT_ThanhToanAB"];
        }

        private void btn_TTChinh_ThemKhoiLuong_Click(object sender, EventArgs e)
        {
            //// Mở bảng lớn chính ngoài cùng trước - Tại Menu đứng của "Thông tin chính"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            //// Mở bảng con ở Ship 2 trong sau, nếu có nhiều bảng con thì mở nhiều lần
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tabTongKhoiLuongNghiemThu"];
            //// Mở bảng chi tiết con cuối
        }

        private void btn_TTChinh_ThemMayThiCong_Click(object sender, EventArgs e)
        {
            ////Mở bảng máy - thiết bị thi công  - Tại Menu đứng của "Thông tin chính"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabMAY_THIETBI"];
        }

        private void btn_TTChinh_ThemVanChuyen_Click(object sender, EventArgs e)
        {
            ////// Mở giao diện vận chuyển tại giao diện chính - Tại Menu đứng của bảng chính
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabVATLIEU_VANCHUYEN"];
            //// Vào bảng vận chuyển của trang con
            //tabNhap_Xuat_Ton_VanChuyen.SelectedTab = tabNhap_Xuat_Ton_VanChuyen.TabPages["tabQLVanChuyen"];

        }
        private void btnMeNuTraiDeXuatVatTu_Click(object sender, EventArgs e)
        {
            //// Đề xuất vật tư thi công, mở giao diện chính - Tại Menu đứng của bảng chính
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabVATLIEU_VANCHUYEN"];
            xtraTabControl_TabMain.SelectedTabPage = xtraTab_QLVatLieu_VanChuyen;
            //// Vào bảng đề xuất vật tư - Bảng vật tư vận chuyển
            //tabNhap_Xuat_Ton_VanChuyen.SelectedTab = tabNhap_Xuat_Ton_VanChuyen.TabPages["tabDeXuaKhoiLuong"];
        }
        private void btn_TTChinh_TaoMoiNhanLuc_Click(object sender, EventArgs e)
        {
            //// Thêm bảng nhân lực - Tại Menu đứng của "Thông tin chính"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabNHANLUC"];
        }

        private void btn_TTChinh_LapKeHoach_Click(object sender, EventArgs e)
        {
            //// Thêm bảng lập kế hoạch - Tại Menu đứng của "Thông tin chính"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabLAPTIENDO_KEHOACH"];
        }

        private void btn_TTChinh_TamUng_ThuChi_Click(object sender, EventArgs e)
        {
            //// Thêm bảng Tạm ứng - thu chi - Tại Menu đứng của "Thông tin chính"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabTHU_CHI_TAMUNG"];
            //// Vào bảng chi tiết thu chi
            //tabDeXuat_KhoanThu_KhoanChi.SelectedTab = tabDeXuat_KhoanThu_KhoanChi.TabPages["tabTCCT_DeXuat_TamUng"];
        }

        private void btn_TTChinh_GiaoViec_Click(object sender, EventArgs e)
        {
            // Thêm bảng giao việc - Tại Menu đứng của "Thông tin chính"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabGIAOVIEC"];
        }

        private void btn_KeHoach_DoBocChiTietLamKeHoach_Click(object sender, EventArgs e)
        {
            //// Thực hiện nút đo bóc lập khối lượng
            //// Mở bảng chính đến bảng đầu tiên
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            //// Bản trong
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tabTongKhoiLuongNghiemThu"];
            //// Mở bảng đo bóc khối lượng kế hoạch
        }

        private void btn_DocKhoiLuongExcelLamKeHoach_Click(object sender, EventArgs e)
        {
            //// Thực hiện nút đọc khối lượng excel vào làm kế hoạch
            //// Mở bảng chính đến bảng đầu tiên
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            //// Bản trong
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tabQLHD_TT_GiaTrifileExcelDocVao"];

        }

        private void btn_QuayLaiBangDoBocKeHoach_Click(object sender, EventArgs e)
        {
            ////Quay lại bảng kế hoạch từ bảng Nghiệm thu khối lượng
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabLAPTIENDO_KEHOACH"];
        }

        private void Strip_HDSD_BangDuAn_CongTrinh_Click(object sender, EventArgs e)
        {

        }

        private void StripTinhHinhHoatDongTaiCongTruong_Click(object sender, EventArgs e)
        {
            // Các hình ảnh cập nhật từ hiện trường - Tại nút Menu Strip
            FormThuVienAnhGuiBaoCaoHangNgay AnhHangNgay = new FormThuVienAnhGuiBaoCaoHangNgay();
            AnhHangNgay.Show();
        }
        // NÚT XEM ẢNH TẠM - XÓA SAU KHI HIỂU NỘI DUNG //
        private void btn_XemAnh_BaoCao_Tam_Click_1(object sender, EventArgs e)
        {
            // Các hình ảnh cập nhật từ hiện trường - Tại nút TẠM - XÓA SAU KHI HOÀN THÀNH
            FormThuVienAnhGuiBaoCaoHangNgay AnhHangNgay = new FormThuVienAnhGuiBaoCaoHangNgay();
            AnhHangNgay.Show();
        }
        //----------------------------//

        // TẠO ĐƯỜNG DẪN TẮT TẠI BẢNG ĐỌC EXCEL
        private void btn_LuuExcel_LapKeHoach_Click(object sender, EventArgs e)
        {
            //// Thêm bảng lập kế hoạch - Tại Menu đứng của "Đọc excel"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabLAPTIENDO_KEHOACH"];
        }

        private void btn_LuuExcel_XuatBaoCao_Click(object sender, EventArgs e)
        {

        }

        private void btn_LuuExcel_DanhSachNhaThau_Click(object sender, EventArgs e)
        {
            // Mở danh mục tất cả công trình - Tại Menu đứng của "Đọc excel"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabDanhMuc_DUAN_CONGTRINH"];
        }

        private void btn_LuuExcel_TaoHopDongMoi_Click(object sender, EventArgs e)
        {
            //// Mở bảng hợp đồng để nhập mới hợp đồng - Tại Menu đứng của "Đọc excel"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tab_HDTT_TaoHopDong"];

        }
        private void btn_LuuExcel_ThemKhoiLuong_Click(object sender, EventArgs e)
        {
            //// Mở bảng lớn chính ngoài cùng trước - Tại Menu đứng của "Đọc excel"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabQLHOPDONG_THANHTOAN"];
            //// Mở bảng con ở Ship 2 trong sau, nếu có nhiều bảng con thì mở nhiều lần
            //tabHopDong_ThanhToan_AB_BB.SelectedTab = tabHopDong_ThanhToan_AB_BB.TabPages["tabTongKhoiLuongNghiemThu"];
            //// Mở bảng chi tiết con cuối
        }
        private void btn_LuuExcel_GiaoViec_Click(object sender, EventArgs e)
        {
            // Thêm bảng giao việc - Tại Menu đứng của "Đọc excel"
            //tabGIAODIENCHINHQLTC.SelectedTab = tabGIAODIENCHINHQLTC.TabPages["tabGIAOVIEC"];
        }

        private void StripThongTinCaNhan_Click(object sender, EventArgs e)
        {
            // Đăng nhập fom đăng ký, đăng nhập
            //FormDangNhap_ThongTinCaNhan Dangky_DangNhap = new FormDangNhap_ThongTinCaNhan();
            //Dangky_DangNhap.ShowDialog();
        }

        private void StripCacCongViecThuocCaNhanThucHien_Click(object sender, EventArgs e)
        {
            // Xem xuất số liệu riêng cho mỗi cá nhân
            FormCacCongViecCaNhanThucHien CongViecNhanVien = new FormCacCongViecCaNhanThucHien();
            CongViecNhanVien.Show();
        }

        private void btn_XemChiTietCongTrinh_NutTam_Click(object sender, EventArgs e)
        {
            // Nút tạm, sau xóa khi thực hiện nút check
            FormChiTietThongTinCongTrinh XemChiTietCongrinh_NutTam = new FormChiTietThongTinCongTrinh();
            XemChiTietCongrinh_NutTam.ShowDialog();
        }

        private void btn_XemAnh_BaoCao_Tam_Click(object sender, EventArgs e)
        {
            // Nút gắn tạmđể định vị nội dung, làm xong xóa nút
            FormThuVienAnhGuiBaoCaoHangNgay XemAnh_NutTam = new FormThuVienAnhGuiBaoCaoHangNgay();
            XemAnh_NutTam.ShowDialog();
        }



        private void Strip_ChatRoom_DangKyThanhVien_Click(object sender, EventArgs e)
        {
            // Đăng nhập fom đăng ký tại Chat room
            //FormDangNhap_ThongTinCaNhan Dangky_DangNhap = new FormDangNhap_ThongTinCaNhan();
            //Dangky_DangNhap.ShowDialog();
        }


        //private void btn_TT_HienThiThongTinCaNha_Click(object sender, EventArgs e)
        //{
        //    // Đăng nhập fom  đăng nhập
        //    FormDangNhap_HeThong_ChatRoom DangNhap = new FormDangNhap_HeThong_ChatRoom();
        //    DangNhap.ShowDialog();
        //}

        private void StripHuongDanSuDungBanIn_Word_Click(object sender, EventArgs e)
        {
            // Hứơng dẫn sử dụng - Tạm mở tại nút word
            Process.Start("https://www.youtube.com/watch?v=mcQ3U4gojdk");
        }

        private void cbo_MHD_ChonLoaiHopDong_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            //--- MỞ FILE SỬA HỢP ĐỒNG ---//
            // Thoát khi không tìm được
            if (cbo_MHD_ChonLoaiHopDong.SelectedIndex < 0)
                return;
            // Tạo đường dẫn thư mục file từ ComBobox
            string filePath = $@"{BaseFrom.m_path}\FileWord\{cbo_MHD_ChonLoaiHopDong.SelectedItem.ToString()}.doc"; // Tạo hợp đồng
            // Điều kiện mở thoát file
            if (File.Exists(filePath))
            {
                word_loaiHD.LoadDocument(filePath);
            }
            // Thông báo file không tồn tại
            else
            {
                MessageShower.ShowInformation("File không tồn tại");
            }
        }
        private void cbo_BCTD_MauBaoCaoTienDo_KeHoach_SelectedIndexChanged(object sender, EventArgs e)
        {
            //--- MỞ FILE TẠO KẾ HOẠCH - TIẾN ĐỘ --//
            // Sự kiện thoát khi không tìm được file tương ứng
            //if (cbo_BCTD_MauBaoCaoTienDo_KeHoach.SelectedIndex < 0)
            //    return;
            //// Tạo đường dẫn từ cbo tìm đọc file lên
            //string filePath = $@"{BaseFrom.m_templatePath}\FileWord\{cbo_BCTD_MauBaoCaoTienDo_KeHoach.SelectedItem.ToString()}.doc";// Tạo đường dẫn đọc file
            //                                                                                                                        // Điều kiện mở file lên

            //if (File.Exists(filePath))
            //{
            //    word_TaoBangBCTienDo_KeHoach.LoadDocument(filePath);
            //}
            //else
            //{
            //    MessageShower.ShowInformation("File không tồn tại");
            //}

        }

        private void btn_BCTD_XemBaoCaoMau_Click(object sender, EventArgs e)
        {
            // Xem trước mẫu báo cáo tham khảo
            FormXemMauBaoCao_TienDo_KeHoach XemMauBaoCaoTienDo = new FormXemMauBaoCao_TienDo_KeHoach();
            XemMauBaoCaoTienDo.Show();
        }

        private void StripCacNoiDungThamKhaoKhacCuaDuAn_Click(object sender, EventArgs e)
        {
            // Các nội dung tham khảo khác của dự án cần kiểm tra trong quá trình thi công như vật liệu, tiêu chuẩn dự án
            FormCacNoiDungThamKhaorKhacTrongDuAn CacNoiDungThamKhaoKhac = new FormCacNoiDungThamKhaorKhacTrongDuAn();
            CacNoiDungThamKhaoKhac.ShowDialog();
        }

        private void btn_TDKH_NhapSoLieu_Click(object sender, EventArgs e)
        {
            // Mở fom đọc số liệu làm tiến độ - File đọc excel và fom đo bóc thủ công
            Form_NhapSoLieu_TuBangKhac DocFileLamTienDo = new Form_NhapSoLieu_TuBangKhac();
            DocFileLamTienDo.ShowDialog();
        }

        private void btn_TDKH_VL_DocExcel_Click(object sender, EventArgs e)
        {
            // Mở fom đọc số liệu làm tiến độ - File đọc excel và fom đo bóc thủ công cho bảng vật liệu
            Form_NhapSoLieu_TuBangKhac DocFileLamTienDoVatLieu = new Form_NhapSoLieu_TuBangKhac();
            DocFileLamTienDoVatLieu.ShowDialog();
        }
        private void Fcn_LoadTienDoNewSoSanh(DateTime? NBD = null, DateTime? NKT = null)
        {
            bool HienKH = cbo_HienThiTienDo.Text.Contains("kế hoạch") ? true : false;
            bool HienTC = cbo_HienThiTienDo.Text.Contains("thi công") ? true : false;
            List<KLHN> dtTheoNgay, dtTheoNgayCongtac, dtTheoNgayNT, dtTheoNgayCongtacNT;
            TDKHHelper.GetCodeCongTrinhHangMuc(out string codeHM, out string codeCT);
            List<DonViThucHien> DVTH = ctrl_DonViThucHienDuAnTienDo.DataSource.Where(x => x.IsSoSanh).ToList();
            string conditiontp = string.Empty;
            string conditiontd = string.Empty;
            gc_Tiendo.RefreshDataSource();
            gc_Tiendo.DataSource = null;
            if (!DVTH.Any())
            {
                conditiontd = $"AND cttk{{0}}.Code IS NULL ";
                conditiontp = $"AND cttk{{0}}.Code IS NULL ";
                goto LabelTH;
            }
            List<DonViThucHien> DVTHTD = DVTH.Where(x => x.Table == MyConstant.TBL_THONGTINTODOITHICONG).ToList();
            List<DonViThucHien> DVTHTP = DVTH.Where(x => x.Table == MyConstant.TBL_THONGTINNHATHAUPHU).ToList();
            if (DVTHTD.Any())
                conditiontd += $"AND cttk{{0}}.CodeToDoi IN ({MyFunction.fcn_Array2listQueryCondition(DVTHTD.Select(x => x.Code).ToArray())})";
            else
                conditiontd = $"AND cttk{{0}}.Code IS NULL";

            if (DVTHTP.Any())
                conditiontp += $"AND cttk{{0}}.CodeNhaThauPhu IN ({MyFunction.fcn_Array2listQueryCondition(DVTHTP.Select(x => x.Code).ToArray())})";
            else
                conditiontp = $"AND cttk{{0}}.Code IS NULL";
            LabelTH:
            string dbString = $"SELECT cttk.CodeNhom AS CodeNhom," +
                              $"mtc.Ten as TenMuiThiCong,nct.Ten as TenNhom,nct.KhoiLuongKeHoach as KhoiLuongKeHoachNhom," +
                              $"nct.DonVi as DonViNhom,nct.NgayBatDau as NgayBatDauNhom,nct.NgayKetThuc as" +
                              $" NgayKetThucNhom," +
                              $"COALESCE(cttk.CodePhanTuyen, hm.CodePhanTuyen) AS CodePhanTuyen,COALESCE(TuyenCT.Ten, hm.TenPhanTuyen) AS TenTuyen," +
                              $" COALESCE(hm.Code, hmct.Code) AS CodeHangMuc,COALESCE(hm.Ten, hmct.Ten) AS TenHangMuc," +
                              $"COALESCE(ctrinh.Code, ctrinhct.Code) AS CodeCongTrinh,COALESCE(ctrinh.Ten, ctrinhct.Ten) AS TenCongTrinh," +
                              $"COALESCE(cttk.DonVi, dmct.DonVi) AS DonVi,COALESCE(cttk.TenCongTac, dmct.TenCongTac) AS TenCongTac," +
                              $"COALESCE(cttk.MaHieuCongTac, dmct.MaHieuCongTac) AS MaHieuCongTac, \r\n" +
                              $"hm.CodeCongTrinh, \r\n" +
                              $"COALESCE(ctrinh.CodeDuAn, ctrinhct.CodeDuAn) AS CodeDuAn" +
                              $",nt.Ten as TenNhaThauChinh,nt.Code as CodeNhaThauChinh," +
                              $"nttd.Ten as TenNhaThauTD,nttd.Code as CodeNhaThauTD" +
                              $",nttp.Ten as TenNhaThauTP,nttp.Code as CodeNhaThauTP, \r\n" +
                              $"COALESCE(ctrinh.SortId, ctrinhct.SortId) AS SortIdCtrinh,COALESCE(hm.SortId, hmct.SortId) AS SortIdHM," +
                              $"cttktd.Code as CodeCongTacTD,cttktd.NgayBatDau as NBDTD,cttktd.NgayKetThuc as NKTTD,cttktd.KhoiLuongToanBo as KhoiLuongToanBotd," +
                              $"cttktp.Code as CodeCongTacTP,cttktp.NgayBatDau as NBDTP,cttktp.NgayKetThuc as NKTTP,cttktp.KhoiLuongToanBo as KhoiLuongToanBotp," +
                              $"cttk.* \r\n" +
                              $"FROM {TDKH.TBL_DanhMucCongTac} dmct\r\n" +
                              $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk\r\n" +
                              $"ON cttk.CodeCongTac = dmct.Code \r\n" +
                              $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttktd\r\n" +
                              $"ON cttk.CodeCongTac = cttktd.CodeCongTac {string.Format(conditiontd, "td")} \r\n" +
                              $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttktp\r\n" +
                              $"ON cttk.CodeCongTac = cttktp.CodeCongTac {string.Format(conditiontp, "tp")}\r\n" +
                              $"LEFT JOIN {TDKH.Tbl_TDKH_MuiThiCong} mtc\r\n" +
                              $"ON cttk.CodeMuiThiCong = mtc.Code \r\n" +
                              $"LEFT JOIN {TDKH.TBL_NhomCongTac} nct\r\n" +
                              $"ON cttk.CodeNhom = nct.Code \r\n" +
                              $" JOIN {MyConstant.view_HangMucWithPhanTuyen} hm\r\n" +
                             $"ON (hm.Code = dmct.CodeHangMuc AND ((dmct.CodePhanTuyen IS NOT NULL AND hm.CodePhanTuyen = dmct.CodePhanTuyen) " +
                             $"OR (dmct.CodePhanTuyen IS NULL AND hm.CodePhanTuyen IS NULL)))\r\n" +
                              ((codeHM.HasValue()) ? $"AND hm.Code = '{codeHM}'\r\n" : "") +
                              $" LEFT JOIN {MyConstant.view_HangMucWithPhanTuyen} TuyenCT  " +
                              $"ON (hm.Code = cttk.CodeHangMuc AND ((cttk.CodePhanTuyen IS NOT NULL AND TuyenCT.CodePhanTuyen = cttk.CodePhanTuyen) " +
                             $"OR (cttk.CodePhanTuyen IS NULL AND TuyenCT.CodePhanTuyen IS NULL)))\r\n" +
                              ((codeHM.HasValue()) ? $"AND TuyenCT.Code = '{codeHM}'\r\n" : "") +
                              $"INNER JOIN {MyConstant.TBL_THONGTINCONGTRINH} ctrinh\r\n" +
                              $"ON hm.CodeCongTrinh = ctrinh.Code \r\n" +
                              $"INNER JOIN {MyConstant.TBL_THONGTINDUAN} da\r\n" +
                              $"ON ctrinh.CodeDuAn = da.Code \r\n" +
                              $"LEFT JOIN {MyConstant.view_DonViThucHien} nt\r\n" +
                              $"ON cttk.CodeNhaThau= nt.Code \r\n" +
                              $"LEFT JOIN {MyConstant.view_DonViThucHien} nttd\r\n" +
                              $"ON cttktd.CodeToDoi= nttd.Code \r\n" +
                              $"LEFT JOIN {MyConstant.view_DonViThucHien} nttp\r\n" +
                              $"ON cttktp.CodeNhaThauPhu= nttp.Code \r\n" +
                              $"LEFT JOIN Tbl_ThongTinHangMuc hmct  ON cttk.CodeHangMuc = hmct.Code " +
                              $"LEFT JOIN Tbl_ThongTinCongTrinh ctrinhct  ON hmct.CodeCongTrinh = ctrinhct.Code " +
                              $"LEFT JOIN Tbl_ThongTinDuAn dact  ON ctrinhct.CodeDuAn = dact.Code " +
                              $"WHERE (da.Code = '{SharedControls.slke_ThongTinDuAn.EditValue}' OR dact.Code = '{SharedControls.slke_ThongTinDuAn.EditValue}') \r\n" +
                              $"AND cttk.CodeNhaThau IS NOT NULL " +
                             ((codeHM.HasValue()) ? $"AND dmct.CodeHangMuc = '{codeHM}'\r\n" : "") +
                              //$"GROUP BY hm.Code, hm.CodePhanTuyen, cttk.Code \r\n" +
                              $"ORDER BY SortIdCtrinh ASC,SortIdHM ASC, cttk.SortId ,cttk.CodeNhaThau ASC\r\n";
            DataTable dtCongTacTheoKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dtCongTacTheoKy.AddIndPhanTuyenNhom();
            string[] lstCodeCha = dtCongTacTheoKy.AsEnumerable().Select(x => x["CodeCha"].ToString()).ToArray();
            var codesTD = dtCongTacTheoKy.AsEnumerable().Where(x => x["CodeCongTacTD"] != DBNull.Value)
                  .Select(x => x["CodeCongTacTD"].ToString()).Distinct();
            var codesTP = dtCongTacTheoKy.AsEnumerable().Where(x => x["CodeCongTacTP"] != DBNull.Value)
                              .Select(x => x["CodeCongTacTP"].ToString()).Distinct();
            var lstCodeNT = codesTD.Concat(codesTP);

            var codesNhomGT = dtCongTacTheoKy.AsEnumerable().Where(x => x["CodeNhom"] != DBNull.Value)
                   .Select(x => x["CodeNhom"].ToString()).Distinct();
            List<KLHN> KLHNNhoms = MyFunction.Fcn_CalKLKHNew(TypeKLHN.Nhom, codesNhomGT, ignoreKLKH: true);
            dbString = $"SELECT nctnt.*,nct.Code as CodeNhomGT,nt.Ten as TenNhaThau,nt.Code as CodeNhaThau FROM {TDKH.TBL_NhomCongTac} nct " +
                $" JOIN {TDKH.TBL_NhomCongTac} nctnt ON nctnt.CodeNhomGiaoThau=nct.Code " +
                $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk ON cttk.CodeNhom=nctnt.Code AND ({string.Format(conditiontd, string.Empty).Remove(0, 3)} OR" +
                $"{string.Format(conditiontp, string.Empty).Remove(0, 3)}) " +
                $"  JOIN {MyConstant.view_DonViThucHien} nt ON nt.Code=COALESCE(cttk.CodeNhaThauPhu,cttk.CodeToDoi) " +
                $"WHERE nct.Code IN ({MyFunction.fcn_Array2listQueryCondition(codesNhomGT)}) ORDER BY cttk.Code,nct.Code";
            DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            var codesNhomNT = dtNhom.AsEnumerable().Where(x => x["Code"] != DBNull.Value)
                   .Select(x => x["Code"].ToString()).Distinct();
            List<KLHN> KLHNNhomsNT = MyFunction.Fcn_CalKLKHNew(TypeKLHN.Nhom, codesNhomNT, ignoreKLKH: true);
            bool NhomAny = dtNhom.Rows.Count > 0 ? true : false;
            List<TaskDataItem> tasks = new List<TaskDataItem>();
            string[] lsCodeCongTac = dtCongTacTheoKy.AsEnumerable().Select(x => x["Code"].ToString()).ToArray();
            dtTheoNgay = MyFunction.Fcn_CalKLKHNew(Common.Enums.TypeKLHN.CongTac, lsCodeCongTac, ignoreKLKH: true);
            dtTheoNgayNT = MyFunction.Fcn_CalKLKHNew(Common.Enums.TypeKLHN.CongTac, lstCodeNT, ignoreKLKH: true);

            var grCongTrinh = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["CodeCongTrinh"].ToString());
            string crCodeCT, crCodeHM, crCodeTuyen, crCodeNhom, CodeCTKH, CodeCTTC, CodeMuiThiCong;
            string DescKH = "", DescTC = "", CodeNhaThau;
            DateTime? dateBDTC = null, dateBDKH = null, dateKTKH = null, dateKTTC = null;
            int Type = 0;
            bool _MTC = false;
            bool _mCheckNewNhom = false;
            tasks.Add(new TaskDataItem()
            {
                UID = "0",
                Name = slke_ThongTinDuAn.Text,
                TaskType = TDKH.TYPE_TaskTienDo_DuAn_New
            });
            long STT = 1;
            int STTCT = 1, STTHM = 1, STTMTC = 1, STTTuyen = 1, STTNhom = 1;
            foreach (var Ctrinh in grCongTrinh)
            {
                crCodeCT = $"{Ctrinh.Key}_CTR";
                tasks.Add(new TaskDataItem()
                {
                    UID = crCodeCT,
                    ParentUID = "0",
                    STT = $"CTR_{STTCT++}",
                    Name = Ctrinh.First()["TenCongTrinh"].ToString().ToUpper(),
                    TaskType = TDKH.TYPE_TaskTienDo_CongTrinh_New

                });
                var grMuiThiCong = Ctrinh.GroupBy(x => x["CodeMuiThiCong"]).OrderByDescending(x => x.Key.ToString());
                foreach (var mtc in grMuiThiCong)
                {
                    CodeMuiThiCong = string.IsNullOrEmpty(mtc.Key.ToString()) ? "" : $"{Guid.NewGuid()}_MuiTC";
                    _MTC = false;
                    if (!string.IsNullOrEmpty(mtc.Key.ToString()))
                    {
                        _MTC = true;
                        tasks.Add(new TaskDataItem()
                        {
                            UID = CodeMuiThiCong,
                            STT = $"MTC_{STTMTC++}",
                            ParentUID = crCodeCT,
                            Name = mtc.First()["TenMuiThiCong"].ToString().ToUpper(),
                            TaskType = TDKH.TYPE_TaskTienDo_MTC_New,
                        });
                    }
                    var grHangMuc = mtc.GroupBy(x => x["CodeHangMuc"].ToString());
                    foreach (var HM in grHangMuc)
                    {
                        crCodeHM = $"{HM.Key}_{mtc.Key}_HM";
                        tasks.Add(new TaskDataItem()
                        {
                            UID = crCodeHM,
                            ParentUID = !_MTC ? crCodeCT : CodeMuiThiCong,
                            STT = $"HM_{STTHM++}",
                            Name = HM.First()["TenHangMuc"].ToString().ToUpper(),
                            TaskType = _MTC ? TDKH.TYPE_TaskTienDo_HangMuc_New + 1 : TDKH.TYPE_TaskTienDo_HangMuc_New,
                        });
                        var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"])
                              .OrderBy(x => x.Key);
                        foreach (var Tuyen in grPhanTuyen)
                        {
                            var fstTuyen = Tuyen.First();
                            crCodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : $"{fstTuyen["CodePhanTuyen"]}_{Guid.NewGuid()}_CodeTuyen";
                            if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                            {
                                tasks.Add(new TaskDataItem()
                                {
                                    UID = crCodeTuyen,
                                    ParentUID = crCodeHM,
                                    STT = $"Tuyen_{STTTuyen++}",
                                    Name = fstTuyen["TenTuyen"].ToString().ToUpper(),
                                    TaskType = _MTC ? TDKH.TYPE_TaskTienDo_Tuyen_New - 1 + 1 : TDKH.TYPE_TaskTienDo_Tuyen_New - 1,
                                });
                            }
                            var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"])
                                                .OrderBy(x => x.Key);
                            foreach (var NhomTuyen in grTuyenNhom)
                            {
                                var fstNhom = NhomTuyen.First();

                                crCodeNhom = (fstNhom["CodeNhom"] == DBNull.Value) ? null : $"{fstNhom["CodeNhom"]}_{Guid.NewGuid()}_CodeNhom";
                                if (ce_ChiVeCongTac.Checked)
                                {
                                    crCodeNhom = null;
                                    goto LabelCongTac;
                                }
                                if (fstNhom["CodeNhom"] != DBNull.Value)
                                {
                                    _mCheckNewNhom = true;
                                    Type = crCodeTuyen is null ? TDKH.TYPE_TaskTienDo_NhomKhongThuocTuyen - 1 : TDKH.TYPE_TaskTienDo_NhomThuocTuyen - 1;
                                    if (fstNhom["KhoiLuongKeHoachNhom"] != DBNull.Value)
                                    {
                                        tasks.Add(new TaskDataItem()
                                        {
                                            UID = crCodeNhom,
                                            ParentUID = crCodeTuyen ?? crCodeHM,
                                            Name = NhomTuyen.First()["TenNhom"].ToString(),
                                            STT = $"Nhom_{STTNhom++}",
                                            DonVi = NhomTuyen.First()["DonViNhom"].ToString(),
                                            KhoiLuongHD = NhomTuyen.First()["KhoiLuongKeHoachNhom"].ToString(),
                                            TaskType = _MTC ? Type + 1 : Type,
                                        });
                                        if (HienKH)
                                        {
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = $"{Guid.NewGuid()}_Kế hoạch",
                                                ParentUID = crCodeNhom,
                                                Name = "Kế hoạch",
                                                KhoiLuongHD = NhomTuyen.First()["KhoiLuongKeHoachNhom"].ToString(),
                                                StartDate = DateTime.Parse(NhomTuyen.First()["NgayBatDauNhom"].ToString()).Date.AddHours(1),
                                                FinishDate = DateTime.Parse(NhomTuyen.First()["NgayKetThucNhom"].ToString()).Date.AddHours(23),
                                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 - 1 : TDKH.TYPE_TaskTienDo_KeHoach_New - 1,
                                            });
                                        }
                                        if (HienTC)
                                        {
                                            dateKTTC = null;
                                            dateBDTC = null;
                                            double? KLTC = 0;
                                            var kltchnsInNhom = KLHNNhoms.Where(x => x.KhoiLuongThiCong > 0 && x.CodeCha == fstNhom["CodeNhom"].ToString());
                                            if (kltchnsInNhom.Any())
                                            {
                                                dateBDTC = kltchnsInNhom.Min(x => x.Ngay).Date.AddHours(1);
                                                dateKTTC = kltchnsInNhom.Max(x => x.Ngay).Date.AddHours(23);
                                                KLTC = kltchnsInNhom.Sum(x => x.KhoiLuongThiCong);
                                            }
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = $"{Guid.NewGuid()}_Thi công",
                                                ParentUID = crCodeNhom,
                                                Name = "Thi công",
                                                StartDate = dateBDTC,
                                                FinishDate = dateKTTC,
                                                KhoiLuongHD = KLTC.ToString(),
                                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 - 1 : TDKH.TYPE_TaskTienDo_KeHoach_New - 1,
                                            });
                                        }
                                        if (NhomAny)
                                        {
                                            DataRow[] NhomNhanThau = dtNhom.AsEnumerable().Where(x => x["CodeNhomGT"].ToString() == fstNhom["CodeNhom"].ToString()).ToArray();
                                            var grntNhom = NhomNhanThau.GroupBy(x => x["CodeNhaThau"]).OrderBy(x => x.Key);
                                            foreach (var nhomnt in grntNhom)
                                            {
                                                var fstNt = nhomnt.FirstOrDefault();
                                                string CodeNt = $"{Guid.NewGuid()}_NhaThau";
                                                tasks.Add(new TaskDataItem()
                                                {
                                                    UID = CodeNt,
                                                    ParentUID = crCodeNhom,
                                                    Name = fstNt["TenNhaThau"].ToString(),
                                                    TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 - 1 : TDKH.TYPE_TaskTienDo_KeHoach_New - 1,
                                                });
                                                if (HienKH)
                                                {
                                                    tasks.Add(new TaskDataItem()
                                                    {
                                                        UID = $"{Guid.NewGuid()}_KHNT_NhaThau",
                                                        ParentUID = CodeNt,
                                                        Name = "Kế hoạch",
                                                        StartDate = DateTime.Parse(fstNt["NgayBatDau"].ToString()).Date.AddHours(1),
                                                        FinishDate = DateTime.Parse(fstNt["NgayKetThuc"].ToString()).Date.AddHours(23),
                                                        TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 - 2 : TDKH.TYPE_TaskTienDo_KeHoach_New - 2,
                                                    });
                                                }
                                                if (HienTC)
                                                {
                                                    dateKTTC = null;
                                                    dateBDTC = null;
                                                    var kltchnsInNhomnt = KLHNNhomsNT.Where(x => x.KhoiLuongThiCong > 0 && x.CodeCha == fstNt["Code"].ToString());
                                                    if (kltchnsInNhomnt.Any())
                                                    {
                                                        dateBDTC = kltchnsInNhomnt.Min(x => x.Ngay).Date.AddHours(1);
                                                        dateKTTC = kltchnsInNhomnt.Max(x => x.Ngay).Date.AddHours(23);
                                                    }
                                                    tasks.Add(new TaskDataItem()
                                                    {
                                                        UID = $"{Guid.NewGuid()}_TCNT_NhaThau",
                                                        ParentUID = CodeNt,
                                                        Name = "Thi công",
                                                        StartDate = dateBDTC,
                                                        FinishDate = dateKTTC,
                                                        TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 - 2 : TDKH.TYPE_TaskTienDo_KeHoach_New - 2,
                                                    });
                                                }
                                            }
                                        }
                                        continue;
                                    }
                                    else
                                    {
                                        tasks.Add(new TaskDataItem()
                                        {
                                            UID = crCodeNhom,
                                            ParentUID = crCodeTuyen ?? crCodeHM,
                                            STT = $"Nhom_{STTNhom++}",
                                            Name = NhomTuyen.First()["TenNhom"].ToString(),
                                            TaskType = _MTC ? Type + 1 : Type
                                        });
                                    }
                                }
                                LabelCongTac:
                                var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"]);
                                var _CheckNhom = grCongTacTuyen.AsEnumerable().Select(x => x.Key.ToString()).ToArray();
                                foreach (var CT in grCongTacTuyen)
                                {
                                    var CongTac = CT.FirstOrDefault();
                                    string CodeCT = CongTac["Code"].ToString();
                                    if (lstCodeCha.Contains(CodeCT))
                                    {
                                        if (crCodeNhom != null && _mCheckNewNhom)
                                        {
                                            _mCheckNewNhom = false;
                                            int count = _CheckNhom.Intersect(lstCodeCha).Count();
                                            if (count == _CheckNhom.Count())
                                            {
                                                TaskDataItem RemoveNhom = tasks.Where(x => x.UID == crCodeNhom).FirstOrDefault();
                                                tasks.Remove(RemoveNhom);
                                                crCodeNhom = null;
                                            }
                                        }
                                        continue;
                                    }
                                    Type = crCodeNhom is null && crCodeTuyen is null ?
                                            TDKH.TYPE_TaskTienDo_CongViecKhongThuocTuyenNhom :
                                            (crCodeNhom != null && crCodeTuyen != null ? TDKH.TYPE_TaskTienDo_CongViecThuocNhomTrongTuyen - 1 :
                                            (crCodeNhom != null && crCodeTuyen is null ? TDKH.TYPE_TaskTienDo_CongViecThuocNhom - 1 : TDKH.TYPE_TaskTienDo_CongViecThuocTuyen - 1));
                                    CodeCTKH = CodeCT;
                                    tasks.Add(new TaskDataItem()
                                    {
                                        UID = CodeCTKH,
                                        ParentUID = crCodeNhom ?? crCodeTuyen ?? crCodeHM,
                                        STT = $"{STT++}",
                                        Name = CongTac["TenCongTac"].ToString(),
                                        DonVi = CongTac["DonVi"].ToString(),
                                        KhoiLuongHD = CongTac["KhoiLuongToanBo"].ToString(),
                                        TaskType = _MTC ? Type + 1 : Type
                                    });
                                    if (HienKH)
                                    {
                                        tasks.Add(new TaskDataItem()
                                        {
                                            UID = $"{Guid.NewGuid()}_Kế hoạch",
                                            ParentUID = CodeCTKH,
                                            Name = "Kế hoạch",
                                            KhoiLuongHD = CongTac["KhoiLuongToanBo"].ToString(),
                                            StartDate = NBD == null ? (DateTime.TryParse(CongTac["NgayBatDau"].ToString(), out DateTime dateBD) ? (DateTime?)dateBD.AddHours(1) : null) :
(DateTime.TryParse(CongTac["NgayBatDau"].ToString(), out DateTime dateBDNew) ? ((DateTime?)dateBDNew < (DateTime?)De_BeginTienDo.DateTime ? (DateTime?)De_BeginTienDo.DateTime.AddHours(1) : (DateTime?)dateBDNew.AddHours(1)) : null),
                                            FinishDate = NKT == null ? (DateTime.TryParse(CongTac["NgayKetThuc"].ToString(), out DateTime dateKT) ? (DateTime?)(dateKT.Date.AddHours(23)) : null) :
(DateTime.TryParse(CongTac["NgayKetThuc"].ToString(), out DateTime dateKTNew) ? ((DateTime?)dateKTNew > (DateTime?)De_EndTienDO.DateTime ? (DateTime?)De_EndTienDO.DateTime.Date.AddHours(23) : (DateTime?)dateKTNew.Date.AddHours(23)) : null),
                                            TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 : TDKH.TYPE_TaskTienDo_KeHoach_New,
                                        });
                                    }
                                    if (HienTC)
                                    {
                                        double? KLTC = 0;
                                        CodeCTTC = $"{Guid.NewGuid()}_Thi công";
                                        dtTheoNgayCongtac = dtTheoNgay.Where(x => x.CodeCha == CodeCT).ToList();
                                        if (dtTheoNgayCongtac.Any())
                                        {
                                            dateKTTC = NKT is null ? dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(23) : (dtTheoNgayCongtac.Max(x => x.Ngay).Date > De_EndTienDO.DateTime.Date ?
                                              dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(23) : De_EndTienDO.DateTime.Date.AddHours(23));
                                            dateBDTC = NBD is null ? dtTheoNgayCongtac.Min(x => x.Ngay).Date.AddHours(1) : (dtTheoNgayCongtac.Min(x => x.Ngay).Date < De_BeginTienDo.DateTime.Date ?
                                                dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(1) : De_BeginTienDo.DateTime.Date.AddHours(1));
                                            KLTC = dtTheoNgayCongtac.Sum(x => x.KhoiLuongThiCong);
                                        }
                                        else
                                            dateKTTC = dateBDTC = null;
                                        tasks.Add(new TaskDataItem()
                                        {
                                            UID = CodeCTTC,
                                            ParentUID = CodeCTKH,
                                            Name = "Thi công",
                                            KhoiLuongHD = KLTC.ToString(),
                                            StartDate = dateBDTC is null ? null : dateBDTC,
                                            FinishDate = dateKTTC is null ? null : dateKTTC,
                                            TaskType = _MTC ? TDKH.TYPE_TaskTienDo_ThiCong_New + 1 : TDKH.TYPE_TaskTienDo_ThiCong_New
                                        });
                                    }
                                    var grNhanThauTP = CT.Where(x => x["CodeNhaThauTP"] != DBNull.Value).GroupBy(x => x["CodeNhaThauTP"]);
                                    foreach (var itemTP in grNhanThauTP)
                                    {
                                        var fstTp = itemTP.FirstOrDefault();
                                        string Codent = $"{Guid.NewGuid()}_NhaThau";
                                        tasks.Add(new TaskDataItem()
                                        {
                                            UID = Codent,
                                            ParentUID = CodeCTKH,
                                            Name = fstTp["TenNhaThauTP"].ToString(),
                                            TaskType = _MTC ? TDKH.TYPE_TaskTienDo_ThiCong_New + 1 : TDKH.TYPE_TaskTienDo_ThiCong_New
                                        });
                                        if (HienKH)
                                        {
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = $"{Guid.NewGuid()}_KHNT_NhaThau",
                                                ParentUID = Codent,
                                                Name = "Kế hoạch",
                                                KhoiLuongHD = fstTp["KhoiLuongToanBotp"].ToString(),
                                                StartDate = NBD == null ? (DateTime.TryParse(fstTp["NBDTP"].ToString(), out DateTime dateBDTP) ? (DateTime?)dateBDTP.AddHours(1) : null) :
(DateTime.TryParse(fstTp["NBDTP"].ToString(), out DateTime dateBDNewTP) ? ((DateTime?)dateBDNewTP < (DateTime?)De_BeginTienDo.DateTime ? (DateTime?)De_BeginTienDo.DateTime.AddHours(1) : (DateTime?)dateBDNewTP.AddHours(1)) : null),
                                                FinishDate = NKT == null ? (DateTime.TryParse(fstTp["NKTTP"].ToString(), out DateTime dateKTTP) ? (DateTime?)(dateKTTP.Date.AddHours(23)) : null) :
(DateTime.TryParse(fstTp["NKTTP"].ToString(), out DateTime dateKTNewTP) ? ((DateTime?)dateKTNewTP > (DateTime?)De_EndTienDO.DateTime ? (DateTime?)De_EndTienDO.DateTime.Date.AddHours(23) : (DateTime?)dateKTNewTP.Date.AddHours(23)) : null),
                                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 : TDKH.TYPE_TaskTienDo_KeHoach_New,
                                            });
                                        }
                                        if (HienTC)
                                        {
                                            double? KLTC = 0;
                                            CodeCTTC = $"{Guid.NewGuid()}_TCNT_NhaThau";
                                            dtTheoNgayCongtacNT = dtTheoNgayNT.Where(x => x.CodeCha == fstTp["CodeCongTacTP"].ToString()).ToList();
                                            if (dtTheoNgayCongtacNT.Any())
                                            {
                                                dateKTTC = NKT is null ? dtTheoNgayCongtacNT.Max(x => x.Ngay).Date.AddHours(23) : (dtTheoNgayCongtacNT.Max(x => x.Ngay).Date > De_EndTienDO.DateTime.Date ?
                                                  dtTheoNgayCongtacNT.Max(x => x.Ngay).Date.AddHours(23) : De_EndTienDO.DateTime.Date.AddHours(23));
                                                dateBDTC = NBD is null ? dtTheoNgayCongtacNT.Min(x => x.Ngay).Date.AddHours(1) : (dtTheoNgayCongtacNT.Min(x => x.Ngay).Date < De_BeginTienDo.DateTime.Date ?
                                                    dtTheoNgayCongtacNT.Max(x => x.Ngay).Date.AddHours(1) : De_BeginTienDo.DateTime.Date.AddHours(1));
                                                KLTC = dtTheoNgayCongtacNT.Sum(x => x.KhoiLuongThiCong);
                                            }
                                            else
                                                dateKTTC = dateBDTC = null;
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = CodeCTTC,
                                                ParentUID = Codent,
                                                Name = "Thi công",
                                                KhoiLuongHD = KLTC.ToString(),
                                                StartDate = dateBDTC is null ? null : dateBDTC,
                                                FinishDate = dateKTTC is null ? null : dateKTTC,
                                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_ThiCong_New + 1 : TDKH.TYPE_TaskTienDo_ThiCong_New
                                            });
                                        }
                                    }
                                    var grNhanThauTD = CT.Where(x => x["CodeNhaThauTD"] != DBNull.Value).GroupBy(x => x["CodeNhaThauTD"]);
                                    foreach (var itemTD in grNhanThauTD)
                                    {
                                        var fstTD = itemTD.FirstOrDefault();
                                        string Codent = $"{Guid.NewGuid()}_NhaThau";
                                        tasks.Add(new TaskDataItem()
                                        {
                                            UID = Codent,
                                            ParentUID = CodeCTKH,
                                            Name = fstTD["TenNhaThauTD"].ToString(),
                                            TaskType = _MTC ? TDKH.TYPE_TaskTienDo_ThiCong_New + 1 : TDKH.TYPE_TaskTienDo_ThiCong_New
                                        });
                                        if (HienKH)
                                        {
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = $"{Guid.NewGuid()}_KHNT_NhaThau",
                                                ParentUID = Codent,
                                                Name = "Kế hoạch",
                                                KhoiLuongHD = fstTD["KhoiLuongToanBotd"].ToString(),
                                                StartDate = NBD == null ? (DateTime.TryParse(fstTD["NBDTD"].ToString(), out DateTime dateBDTP) ? (DateTime?)dateBDTP.AddHours(1) : null) :
(DateTime.TryParse(fstTD["NBDTD"].ToString(), out DateTime dateBDNewTP) ? ((DateTime?)dateBDNewTP < (DateTime?)De_BeginTienDo.DateTime ? (DateTime?)De_BeginTienDo.DateTime.AddHours(1) : (DateTime?)dateBDNewTP.AddHours(1)) : null),
                                                FinishDate = NKT == null ? (DateTime.TryParse(fstTD["NKTTD"].ToString(), out DateTime dateKTTP) ? (DateTime?)(dateKTTP.Date.AddHours(23)) : null) :
(DateTime.TryParse(fstTD["NKTTD"].ToString(), out DateTime dateKTNewTP) ? ((DateTime?)dateKTNewTP > (DateTime?)De_EndTienDO.DateTime ? (DateTime?)De_EndTienDO.DateTime.Date.AddHours(23) : (DateTime?)dateKTNewTP.Date.AddHours(23)) : null),
                                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 : TDKH.TYPE_TaskTienDo_KeHoach_New,
                                            });
                                        }
                                        if (HienTC)
                                        {
                                            double? KLTC = 0;
                                            CodeCTTC = $"{Guid.NewGuid()}_TCNT_NhaThau";
                                            dtTheoNgayCongtacNT = dtTheoNgayNT.Where(x => x.CodeCha == fstTD["CodeCongTacTD"].ToString()).ToList();
                                            if (dtTheoNgayCongtacNT.Any())
                                            {
                                                dateKTTC = NKT is null ? dtTheoNgayCongtacNT.Max(x => x.Ngay).Date.AddHours(23) : (dtTheoNgayCongtacNT.Max(x => x.Ngay).Date > De_EndTienDO.DateTime.Date ?
                                                  dtTheoNgayCongtacNT.Max(x => x.Ngay).Date.AddHours(23) : De_EndTienDO.DateTime.Date.AddHours(23));
                                                dateBDTC = NBD is null ? dtTheoNgayCongtacNT.Min(x => x.Ngay).Date.AddHours(1) : (dtTheoNgayCongtacNT.Min(x => x.Ngay).Date < De_BeginTienDo.DateTime.Date ?
                                                    dtTheoNgayCongtacNT.Max(x => x.Ngay).Date.AddHours(1) : De_BeginTienDo.DateTime.Date.AddHours(1));
                                                KLTC = dtTheoNgayCongtacNT.Sum(x => x.KhoiLuongThiCong);
                                            }
                                            else
                                                dateKTTC = dateBDTC = null;
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = CodeCTTC,
                                                ParentUID = Codent,
                                                KhoiLuongHD = KLTC.ToString(),
                                                Name = "Thi công",
                                                StartDate = dateBDTC is null ? null : dateBDTC,
                                                FinishDate = dateKTTC is null ? null : dateKTTC,
                                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_ThiCong_New + 1 : TDKH.TYPE_TaskTienDo_ThiCong_New
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (int i = 10; i >= TDKH.TYPE_TaskTienDo_DuAn; i--)
            {
                tasks.Where(x => x.TaskType == i && !x.StartDate.HasValue).ForEach(y =>
                {
                    y.StartDate = tasks.Where(z => z.ParentUID == y.UID).Min(t => t.StartDate);
                    y.FinishDate = tasks.Where(z => z.ParentUID == y.UID).Max(t => t.FinishDate);
                });
            }
            gc_Tiendo.DataSource = tasks;
            gc_Tiendo.EndUpdate();
            gc_Tiendo.RefreshDataSource();
            gc_Tiendo.ExpandAll();
            Fcn_AnHienTienDo();
        }
        private void Fcn_LoadTienDoNew(DateTime? NBD = null, DateTime? NKT = null, bool ThiCong = false)
        {
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu");
            bool isSoSanh = cbo_HienThiTienDo.Text.Contains("So sánh");
            if (isSoSanh)
            {
                try
                {
                    Fcn_LoadTienDoNewSoSanh(NBD, NKT);
                    WaitFormHelper.CloseWaitForm();
                    return;
                }
                catch (Exception ex)
                {

                }
            }
            TDKHHelper.ReCalcNhomPeriod();
            cbo_HienHaoPhi.SelectedIndex = 0;
            gc_Tiendo.RefreshDataSource();
            gc_Tiendo.DataSource = null;
            List<TaskDataItem> tasks = new List<TaskDataItem>();
            List<TaskSplitInfo> splitTasks = new List<TaskSplitInfo>();
            List<KLHN> dtTheoNgay, dtTheoNgayCongtac, KLHNNhoms = null;
            List<DateTime> DateTC;
            DataTable dtCongTacTheoKy = null, dtDependency = null;
            bool isCongTac = cbo_LoaiTienDo.SelectedIndex == 0;
            string loaiVatTu = (isCongTac) ? null : cbo_LoaiTienDo.Text;
            string dbString = "";
            int TypeSamne = 0;
            TDKHHelper.GetCodeCongTrinhHangMuc(out string codeHM, out string codeCT);
            DinhMucHelper.fcn_CTac(loaiVatTu, out dtCongTacTheoKy, out dtDependency, out dtTheoNgay, false, ThiCong, codeHM);
            if (cbo_HienThiTienDo.Text != "Kế hoạch")
            {
                var codesNhom = dtCongTacTheoKy.AsEnumerable().Where(x => x["CodeNhom"] != DBNull.Value)
    .Select(x => x["CodeNhom"].ToString()).Distinct();
                KLHNNhoms = MyFunction.Fcn_CalKLKHNew(TypeKLHN.Nhom, codesNhom, ignoreKLKH: true);
            }
            if (dtCongTacTheoKy is null)
            {
                gc_Tiendo.DataSource = null;
                goto Label;
            }
            gc_Tiendo.BeginUpdate();
            long STT = 1;
            int STTCT = 1, STTHM = 1, STTMTC = 1, STTTuyen = 1, STTNhom = 1;
            string[] lstCodeCha = dtCongTacTheoKy.AsEnumerable().Select(x => x["CodeCha"].ToString()).ToArray();

            tasks.Add(new TaskDataItem()
            {
                UID = "0",
                Name = slke_ThongTinDuAn.Text,
                TaskType = TDKH.TYPE_TaskTienDo_DuAn_New
            });
            var grCongTrinh = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["CodeCongTrinh"].ToString());
            string crCodeCT, crCodeHM, crCodeTuyen, crCodeNhom, CodeCTKH, CodeCTTC, CodeMuiThiCong;
            string /*DescKH = "", DescTC = "",*/ CodeNhaThau=string.Empty;
            DateTime? dateBDTC, /*dateBDKH, dateKTKH,*/ dateKTTC;
            int Type = 0;
            bool _MTC = false;
            bool _mCheckNewNhom = false;
            bool KH = cbo_HienThiTienDo.Text == "Kế hoạch" && cbo_LoaiTienDo.SelectedIndex == 0;
            foreach (var Ctrinh in grCongTrinh)
            {
                crCodeCT = $"{Ctrinh.Key}_CTR";
                tasks.Add(new TaskDataItem()
                {
                    UID = crCodeCT,
                    STT = $"CTR_{STTCT++}",
                    ParentUID = "0",
                    Name = Ctrinh.First()["TenCongTrinh"].ToString().ToUpper(),
                    TaskType = TDKH.TYPE_TaskTienDo_CongTrinh_New

                });
                var grMuiThiCong = Ctrinh.GroupBy(x => x["CodeMuiThiCong"]).OrderByDescending(x => x.Key.ToString());
                foreach (var mtc in grMuiThiCong)
                {
                    CodeMuiThiCong = string.IsNullOrEmpty(mtc.Key.ToString()) ? "" : $"{Guid.NewGuid()}_MuiTC";
                    _MTC = false;
                    if (!string.IsNullOrEmpty(mtc.Key.ToString()))
                    {
                        _MTC = true;
                        tasks.Add(new TaskDataItem()
                        {
                            UID = CodeMuiThiCong,
                            STT = $"MTC_{STTMTC++}",
                            ParentUID = crCodeCT,
                            Name = mtc.First()["TenMuiThiCong"].ToString().ToUpper(),
                            TaskType = TDKH.TYPE_TaskTienDo_MTC_New,
                            //TypeSamne = TypeSamne
                        });
                    }
                    var grHangMuc = mtc.GroupBy(x => x["CodeHangMuc"].ToString());
                    foreach (var HM in grHangMuc)
                    {
                        crCodeHM = _MTC ? $"{HM.Key}_{mtc.Key}_HM" : $"{HM.Key}_HM";
                        tasks.Add(new TaskDataItem()
                        {
                            UID = crCodeHM,
                            STT = $"HM_{STTHM++}",
                            ParentUID = !_MTC ? crCodeCT : CodeMuiThiCong,
                            Name = HM.First()["TenHangMuc"].ToString().ToUpper(),
                            TaskType = _MTC ? TDKH.TYPE_TaskTienDo_HangMuc_New + 1 : TDKH.TYPE_TaskTienDo_HangMuc_New,
                            TypeSamne = TypeSamne
                        });
                        var grnt = HM.GroupBy(x => x["CodeNhaThau"].ToString());
                        foreach (var nt in grnt)
                        {
                            TypeSamne++;
                            CodeNhaThau = $"{Guid.NewGuid()}_NhaThau";
                            tasks.Add(new TaskDataItem()
                            {
                                UID = CodeNhaThau,
                                ParentUID = crCodeHM,
                                Name = nt.FirstOrDefault()["TenNhaThau"].ToString(),
                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_NhaThau + 1 : TDKH.TYPE_TaskTienDo_NhaThau,
                                //TypeSamne = TypeSamne
                            });

                            //var grPhanTuyen = HM.Where(x=>x["CodePhanTuyen"]!=DBNull.Value).GroupBy(x => x["CodePhanTuyen"].ToString()).OrderBy(x => (int)x["IndPT"]);
                            //var grPhanTuyen = HM.Where(x=>x["CodePhanTuyen"]!=DBNull.Value).GroupBy(x => (int)x["IndPT"]).OrderBy(x=>x.Key);
                            var grPhanTuyen = nt.GroupBy(x => (int)x["IndPT"])
                                .OrderBy(x => x.Key);

                            foreach (var Tuyen in grPhanTuyen)
                            {
                                //crCodeTuyen = $"{Tuyen.Key}_CodeTuyen";
                                //
                                var fstTuyen = Tuyen.First();
                                //string cpt = (fstTuyen["CodePhanTuyen"] == DBNull.Value)? null : fstTuyen["CodePhanTuyen"].ToString();
                                crCodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : KH ?
                                    $"{fstTuyen["CodePhanTuyen"]}_CodeTuyen" : $"{fstTuyen["CodePhanTuyen"]}_{Guid.NewGuid()}_CodeTuyen";
                                if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                                {
                                    TypeSamne++;
                                    tasks.Add(new TaskDataItem()
                                    {
                                        UID = crCodeTuyen,
                                        ParentUID = CodeNhaThau,
                                        STT = $"Tuyen_{STTTuyen++}",
                                        Name = fstTuyen["TenTuyen"].ToString().ToUpper(),
                                        TaskType = _MTC ? TDKH.TYPE_TaskTienDo_Tuyen_New + 1 : TDKH.TYPE_TaskTienDo_Tuyen_New,
                                        TypeSamne = TypeSamne
                                    });
                                }


                                var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"])
                                                    .OrderBy(x => x.Key);
                                foreach (var NhomTuyen in grTuyenNhom)
                                {
                                    var fstNhom = NhomTuyen.First();

                                    crCodeNhom = (fstNhom["CodeNhom"] == DBNull.Value) ? null : KH ?
                                        $"{fstNhom["CodeNhom"]}_CodeNhom" : $"{fstNhom["CodeNhom"]}_{Guid.NewGuid()}_CodeNhom";
                                    if (ce_ChiVeCongTac.Checked)
                                    {
                                        crCodeNhom = null;
                                        goto LabelCongTac;
                                    }
                                    if (fstNhom["CodeNhom"] != DBNull.Value)
                                    {
                                        _mCheckNewNhom = true;
                                        Type = crCodeTuyen is null ? TDKH.TYPE_TaskTienDo_NhomKhongThuocTuyen : TDKH.TYPE_TaskTienDo_NhomThuocTuyen;
                                        if (fstNhom["KhoiLuongKeHoachNhom"] != DBNull.Value)
                                        {
                                            if (cbo_HienThiTienDo.Text == "Kế hoạch")
                                            {
                                                tasks.Add(new TaskDataItem()
                                                {
                                                    UID = crCodeNhom,
                                                    ParentUID = crCodeTuyen ?? CodeNhaThau,
                                                    STT = $"Nhom_{STTNhom++}",
                                                    Name = NhomTuyen.First()["TenNhom"].ToString(),
                                                    DonVi = NhomTuyen.First()["DonViNhom"].ToString(),
                                                    TaskType = _MTC ? Type + 1 : Type,
                                                    IsSum = false,
                                                    KhoiLuongHD = NhomTuyen.First()["KhoiLuongKeHoachNhom"].ToString(),
                                                    StartDate = DateTime.Parse(NhomTuyen.First()["NgayBatDauNhom"].ToString()).Date.AddHours(1),
                                                    FinishDate = DateTime.Parse(NhomTuyen.First()["NgayKetThucNhom"].ToString()).Date.AddHours(23),
                                                    TypeSamne = TypeSamne
                                                });
                                            }
                                            else if (cbo_HienThiTienDo.Text == "Thi công")
                                            {
                                                var kltchnsInNhom = KLHNNhoms.Where(x => x.KhoiLuongThiCong > 0 && x.CodeCha == fstNhom["CodeNhom"].ToString());
                                                if (kltchnsInNhom.Any())
                                                {
                                                    tasks.Add(new TaskDataItem()
                                                    {
                                                        UID = crCodeNhom,
                                                        STT = $"Nhom_{STTNhom++}",
                                                        ParentUID = crCodeTuyen ?? CodeNhaThau,
                                                        Name = NhomTuyen.First()["TenNhom"].ToString(),
                                                        DonVi = NhomTuyen.First()["DonViNhom"].ToString(),
                                                        TaskType = _MTC ? Type + 1 : Type,
                                                        IsSum = false,
                                                        KhoiLuongHD = NhomTuyen.First()["KhoiLuongKeHoachNhom"].ToString(),
                                                        StartDate = kltchnsInNhom.Min(x => x.Ngay).Date.AddHours(1),
                                                        FinishDate = kltchnsInNhom.Max(x => x.Ngay).Date.AddHours(23),
                                                        TypeSamne = TypeSamne

                                                    });
                                                }
                                                else
                                                {
                                                    tasks.Add(new TaskDataItem()
                                                    {
                                                        UID = crCodeNhom,
                                                        ParentUID = crCodeTuyen ?? CodeNhaThau,
                                                        Name = NhomTuyen.First()["TenNhom"].ToString(),
                                                        DonVi = NhomTuyen.First()["DonViNhom"].ToString(),
                                                        TaskType = _MTC ? Type + 1 : Type,
                                                    });
                                                }
                                            }
                                            else
                                            {
                                                tasks.Add(new TaskDataItem()
                                                {
                                                    UID = crCodeNhom,
                                                    ParentUID = crCodeTuyen ?? CodeNhaThau,
                                                    STT = $"Nhom_{STTNhom++}",
                                                    Name = NhomTuyen.First()["TenNhom"].ToString(),
                                                    DonVi = NhomTuyen.First()["DonViNhom"].ToString(),
                                                    KhoiLuongHD = NhomTuyen.First()["KhoiLuongKeHoachNhom"].ToString(),
                                                    TaskType = _MTC ? Type + 1 : Type,
                                                    TypeSamne = TypeSamne
                                                });
                                                tasks.Add(new TaskDataItem()
                                                {
                                                    UID = $"{Guid.NewGuid()}_Kế hoạch",
                                                    ParentUID = crCodeNhom,
                                                    Name = "Kế hoạch",
                                                    KhoiLuongHD = NhomTuyen.First()["KhoiLuongKeHoachNhom"].ToString(),
                                                    StartDate = DateTime.Parse(NhomTuyen.First()["NgayBatDauNhom"].ToString()).Date.AddHours(1),
                                                    FinishDate = DateTime.Parse(NhomTuyen.First()["NgayKetThucNhom"].ToString()).Date.AddHours(23),
                                                    TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 : TDKH.TYPE_TaskTienDo_KeHoach_New,
                                                    TypeSamne = TypeSamne
                                                });
                                                dateKTTC = null;
                                                dateBDTC = null;
                                                double? KLTC = 0;
                                                var kltchnsInNhom = KLHNNhoms.Where(x => x.KhoiLuongThiCong > 0 && x.CodeCha == fstNhom["CodeNhom"].ToString());
                                                if (kltchnsInNhom.Any())
                                                {
                                                    dateBDTC = kltchnsInNhom.Min(x => x.Ngay).Date.AddHours(1);
                                                    dateKTTC = kltchnsInNhom.Max(x => x.Ngay).Date.AddHours(23);
                                                    KLTC = kltchnsInNhom.Sum(x => x.KhoiLuongThiCong);
                                                }
                                                tasks.Add(new TaskDataItem()
                                                {
                                                    UID = $"{Guid.NewGuid()}_Thi công",
                                                    ParentUID = crCodeNhom,
                                                    Name = "Thi công",
                                                    StartDate = dateBDTC,
                                                    FinishDate = dateKTTC,
                                                    KhoiLuongHD = KLTC.ToString(),
                                                    TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 : TDKH.TYPE_TaskTienDo_KeHoach_New,
                                                    TypeSamne = TypeSamne
                                                });
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = crCodeNhom,
                                                ParentUID = crCodeTuyen ?? CodeNhaThau,
                                                STT = $"Nhom_{STTNhom++}",
                                                Name = NhomTuyen.First()["TenNhom"].ToString(),
                                                TaskType = _MTC ? Type + 1 : Type
                                            });
                                        }

                                    }
                                    LabelCongTac:
                                    var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"]);
                                    foreach (var CongTac in NhomTuyen)
                                    {
                                        string CodeCT = CongTac["Code"].ToString();
                                        if (lstCodeCha.Contains(CodeCT))
                                        {
                                            if (crCodeNhom != null && _mCheckNewNhom)
                                            {
                                                _mCheckNewNhom = false;
                                                var _CheckNhom = grCongTacTuyen.AsEnumerable().Select(x => x.Key.ToString()).ToArray();
                                                int count = _CheckNhom.Intersect(lstCodeCha).Count();
                                                if (count == _CheckNhom.Count())
                                                {
                                                    TaskDataItem RemoveNhom = tasks.Where(x => x.UID == crCodeNhom).FirstOrDefault();
                                                    tasks.Remove(RemoveNhom);
                                                    crCodeNhom = null;
                                                }
                                            }
                                            continue;
                                        }
                                        Type = crCodeNhom is null && crCodeTuyen is null ?
                                            TDKH.TYPE_TaskTienDo_CongViecKhongThuocTuyenNhom :
                                            (crCodeNhom != null && crCodeTuyen != null ? TDKH.TYPE_TaskTienDo_CongViecThuocNhomTrongTuyen :
                                            (crCodeNhom != null && crCodeTuyen is null ? TDKH.TYPE_TaskTienDo_CongViecThuocNhom : TDKH.TYPE_TaskTienDo_CongViecThuocTuyen));
                                        if (cbo_HienThiTienDo.Text == "Kế hoạch")
                                        {
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = $"{CodeCT}_KeHoach",
                                                STT = $"{STT++}",
                                                ParentUID = crCodeNhom ?? crCodeTuyen ?? CodeNhaThau,
                                                GhiChu = isCongTac ? CongTac["GhiChu"].ToString() : null,
                                                Name = CongTac["TenCongTac"].ToString(),
                                                StartDate = NBD == null ? (DateTime.TryParse(CongTac["NgayBatDau"].ToString(), out DateTime dateBD) ? (DateTime?)dateBD.Date.AddHours(1) : null) :
                                            (DateTime.TryParse(CongTac["NgayBatDau"].ToString(), out DateTime dateBDNew) ? ((DateTime?)dateBDNew < (DateTime?)De_BeginTienDo.DateTime ? (DateTime?)De_BeginTienDo.DateTime.AddHours(1) : (DateTime?)dateBDNew.Date.AddHours(1)) : null),
                                                DonVi = CongTac["DonVi"].ToString(),
                                                KhoiLuongHD = CongTac["KhoiLuongToanBo"].ToString(),
                                                FinishDate = NKT == null ? (DateTime.TryParse(CongTac["NgayKetThuc"].ToString(), out DateTime dateKT) ? (DateTime?)(dateKT.Date.AddHours(23)) : null) :
                                              (DateTime.TryParse(CongTac["NgayKetThuc"].ToString(), out DateTime dateKTNew) ? ((DateTime?)dateKTNew > (DateTime?)De_EndTienDO.DateTime ? (DateTime?)De_EndTienDO.DateTime.Date.AddHours(23) : (DateTime?)dateKTNew.Date.AddHours(23)) : null),
                                                //Description = DescKH,
                                                TaskType = _MTC ? Type + 1 : Type,
                                                TypeSamne = TypeSamne
                                            });
                                        }
                                        else if (cbo_HienThiTienDo.Text == "Thi công")
                                        {
                                            dtTheoNgayCongtac = dtTheoNgay.Where(x => x.CodeCha == CodeCT).ToList();
                                            if (dtTheoNgayCongtac.Any())
                                            {
                                                dateKTTC = NKT is null ? dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(23) : (dtTheoNgayCongtac.Max(x => x.Ngay).Date > De_EndTienDO.DateTime.Date ?
                                                    dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(23) : De_EndTienDO.DateTime.Date.AddHours(23));
                                                dateBDTC = NBD is null ? dtTheoNgayCongtac.Min(x => x.Ngay).Date.AddHours(1) : (dtTheoNgayCongtac.Min(x => x.Ngay).Date < De_BeginTienDo.DateTime.Date ?
                                                    dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(1) : De_BeginTienDo.DateTime.Date.AddHours(1));
                                                CodeCTTC = $"{CodeCT}_ThiCong";
                                                tasks.Add(new TaskDataItem()
                                                {
                                                    UID = CodeCTTC,
                                                    STT = $"{STT++}",
                                                    ParentUID = crCodeNhom ?? crCodeTuyen ?? CodeNhaThau,
                                                    Name = CongTac["TenCongTac"].ToString(),
                                                    StartDate = dateBDTC,
                                                    DonVi = CongTac["DonVi"].ToString(),
                                                    KhoiLuongHD = CongTac["KhoiLuongToanBo"].ToString(),
                                                    FinishDate = dateKTTC,
                                                    //Description = DescKH,
                                                    TaskType = _MTC ? Type + 1 : Type,
                                                    TypeSamne = TypeSamne
                                                });
                                                DateTC = dtTheoNgayCongtac.Where(x => x.KhoiLuongThiCong == 0 || !x.KhoiLuongThiCong.HasValue).Any()
                                                    ? dtTheoNgayCongtac.Where(x => x.KhoiLuongThiCong == 0 || !x.KhoiLuongThiCong.HasValue).Select(x => x.Ngay)
                                                    .Distinct().ToList() : null;
                                                if (DateTC != null)
                                                {
                                                    foreach (var item in DateTC)
                                                    {
                                                        splitTasks.Add(new TaskSplitInfo()
                                                        {
                                                            UID = CodeCTTC,
                                                            StartDate = item.Date + TimeSpan.FromHours(0.00001),
                                                            Duration = TimeSpan.FromDays(0.999999)
                                                        });
                                                    }
                                                }

                                            }

                                        }
                                        else
                                        {
                                            CodeCTKH = CodeCT;
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = CodeCTKH,
                                                ParentUID = crCodeNhom ?? crCodeTuyen ?? CodeNhaThau,
                                                STT = $"{STT++}",
                                                Name = CongTac["TenCongTac"].ToString(),
                                                DonVi = CongTac["DonVi"].ToString(),
                                                KhoiLuongHD = CongTac["KhoiLuongToanBo"].ToString(),
                                                TaskType = _MTC ? Type + 1 : Type
                                            });
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = $"{Guid.NewGuid()}_Kế hoạch",
                                                ParentUID = CodeCTKH,
                                                Name = "Kế hoạch",
                                                KhoiLuongHD = CongTac["KhoiLuongToanBo"].ToString(),
                                                StartDate = NBD == null ? (DateTime.TryParse(CongTac["NgayBatDau"].ToString(), out DateTime dateBD) ? (DateTime?)dateBD.AddHours(1) : null) :
        (DateTime.TryParse(CongTac["NgayBatDau"].ToString(), out DateTime dateBDNew) ? ((DateTime?)dateBDNew < (DateTime?)De_BeginTienDo.DateTime ? (DateTime?)De_BeginTienDo.DateTime.AddHours(1) : (DateTime?)dateBDNew.AddHours(1)) : null),
                                                FinishDate = NKT == null ? (DateTime.TryParse(CongTac["NgayKetThuc"].ToString(), out DateTime dateKT) ? (DateTime?)(dateKT.Date.AddHours(23)) : null) :
          (DateTime.TryParse(CongTac["NgayKetThuc"].ToString(), out DateTime dateKTNew) ? ((DateTime?)dateKTNew > (DateTime?)De_EndTienDO.DateTime ? (DateTime?)De_EndTienDO.DateTime.Date.AddHours(23) : (DateTime?)dateKTNew.Date.AddHours(23)) : null),
                                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_KeHoach_New + 1 : TDKH.TYPE_TaskTienDo_KeHoach_New,
                                                TypeSamne = TypeSamne
                                            });
                                            CodeCTTC = $"{Guid.NewGuid()}_Thi công";
                                            DateTC = null;
                                            dtTheoNgayCongtac = dtTheoNgay.Where(x => x.CodeCha == CodeCT).ToList();
                                            double? KLTC = 0;
                                            if (dtTheoNgayCongtac.Any())
                                            {
                                                dateKTTC = NKT is null ? dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(23) : (dtTheoNgayCongtac.Max(x => x.Ngay).Date > De_EndTienDO.DateTime.Date ?
                                                  dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(23) : De_EndTienDO.DateTime.Date.AddHours(23));
                                                dateBDTC = NBD is null ? dtTheoNgayCongtac.Min(x => x.Ngay).Date.AddHours(1) : (dtTheoNgayCongtac.Min(x => x.Ngay).Date < De_BeginTienDo.DateTime.Date ?
                                                    dtTheoNgayCongtac.Max(x => x.Ngay).Date.AddHours(1) : De_BeginTienDo.DateTime.Date.AddHours(1));
                                                DateTC = dtTheoNgayCongtac.Where(x => x.KhoiLuongThiCong == 0 || !x.KhoiLuongThiCong.HasValue).Any()
            ? dtTheoNgayCongtac.Where(x => x.KhoiLuongThiCong == 0 || !x.KhoiLuongThiCong.HasValue).Select(x => x.Ngay)
            .Distinct().ToList() : null;
                                                KLTC = dtTheoNgayCongtac.Sum(x => x.KhoiLuongThiCong);
                                            }
                                            else
                                                dateKTTC = dateBDTC = null;
                                            tasks.Add(new TaskDataItem()
                                            {
                                                UID = CodeCTTC,
                                                ParentUID = CodeCTKH,
                                                Name = "Thi công",
                                                StartDate = dateBDTC is null ? null : dateBDTC,
                                                FinishDate = dateKTTC is null ? null : dateKTTC,
                                                TaskType = _MTC ? TDKH.TYPE_TaskTienDo_ThiCong_New + 1 : TDKH.TYPE_TaskTienDo_ThiCong_New,
                                                KhoiLuongHD = KLTC.ToString(),
                                                TypeSamne = TypeSamne
                                            });
                                            if (DateTC != null)
                                            {
                                                foreach (var item in DateTC)
                                                {
                                                    splitTasks.Add(new TaskSplitInfo()
                                                    {
                                                        UID = CodeCTTC,
                                                        StartDate = item.Date + TimeSpan.FromHours(0.00001),
                                                        Duration = TimeSpan.FromDays(0.999999)
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }




                }
            }
            //Lấy ngày tháng cho Summary task.
            for (int i = TDKH.TYPE_TaskTienDo_CongViecThuocNhomTrongTuyen; i >= TDKH.TYPE_TaskTienDo_DuAn; i--)
            {
                tasks.Where(x => x.TaskType == i && !x.StartDate.HasValue && x.IsSum).ForEach(y =>
                {
                    y.StartDate = tasks.Where(z => z.ParentUID == y.UID).Min(t => t.StartDate);
                    y.FinishDate = tasks.Where(z => z.ParentUID == y.UID).Max(t => t.FinishDate);
                    //y.StartDate = tasks.Where(z => z.ParentUID == y.UID || z.TypeSamne == y.TypeSamne).Min(t => t.StartDate);
                    //y.FinishDate = tasks.Where(z => z.ParentUID == y.UID || z.TypeSamne == y.TypeSamne).Max(t => t.FinishDate);
                });
            }
            //else
            //{
            //    DateTime? BD;
            //    DateTime? KT;
            //    for (int i = TDKH.TYPE_TaskTienDo_CongViecThuocNhomTrongTuyen; i >= TDKH.TYPE_TaskTienDo_DuAn; i--)
            //    {
            //        tasks.Where(x => x.TaskType == i && !x.StartDate.HasValue && x.IsSum).ForEach(y =>
            //        {
            //            BD = tasks.Where(z => z.ParentUID == y.UID).Min(t => t.StartDate);
            //            KT = tasks.Where(z => z.ParentUID == y.UID).Min(t => t.FinishDate);
            //            y.StartDate = DateTime.Now;
            //            y.FinishDate = DateTime.Now.AddDays(20);
            //            //y.StartDate = tasks.Where(z => z.ParentUID == y.UID).Min(t => t.StartDate);
            //            //y.FinishDate = tasks.Where(z => z.ParentUID == y.UID).Max(t => t.FinishDate);
            //        });
            //    }
            //}
            List<TaskDataItem> tasks_Depen = new List<TaskDataItem>();
            if (KH)
            {
                string MoiLienKet = string.Empty, LoaiLK = string.Empty;
                double NumBer = 0;
                foreach (DataRow drDepend in dtDependency.Rows)
                {
                    string LoaiCT = drDepend["LoaiCongTac"].ToString();
                    string codePre = "";
                    string codeSuc = "";
                    int depen = int.Parse(drDepend["Dependencytype"].ToString());
                    switch (LoaiCT)
                    {
                        case "Kế Hoạch":
                            codePre = $"{drDepend["Predecessorcode_KeHoach"]}_KeHoach";
                            codeSuc = $"{drDepend["Successorcode_KeHoach"]}_KeHoach";
                            break;
                        case "Công trình":
                            codePre = $"{drDepend["Predecessorcode"]}_CTR";
                            codeSuc = $"{drDepend["Successorcode"]}_CTR";
                            break;
                        case "Hạng mục":
                            codePre = $"{drDepend["Predecessorcode_HM"]}_HM";
                            codeSuc = $"{drDepend["Successorcode_HM"]}_HM";
                            break;
                        case "Nhóm":
                            codePre = $"{drDepend["Predecessorcode_CodeNhom"]}_CodeNhom";
                            codeSuc = $"{drDepend["Successorcode_CodeNhom"]}_CodeNhom";
                            break;
                        case "Tuyến":
                            codePre = $"{drDepend["Predecessorcode_CodeTuyen"]}_CodeTuyen";
                            codeSuc = $"{drDepend["Successorcode_CodeTuyen"]}_CodeTuyen";
                            break;
                        default:
                            break;
                    }
                    tasks_Depen.Add(new TaskDataItem()
                    {
                        PredecessorCode = codePre,
                        SuccessorCode = codeSuc,
                        DependencyType = (DependencyType)depen
                    });
                    if (ce_HienLienKet.Checked)
                    {
                        TaskDataItem BeGin = tasks.Where(x => x.UID == codePre).FirstOrDefault();
                        TaskDataItem End = tasks.Where(x => x.UID == codeSuc).FirstOrDefault();
                        switch (depen)
                        {
                            case 0:
                                LoaiLK = MyConstant.FS;
                                if (LoaiCT == "Kế Hoạch")
                                {
                                    NumBer = (End.StartDate.Value.Date - BeGin.FinishDate.Value.Date).TotalDays;
                                }
                                break;
                            case 1:
                                LoaiLK = MyConstant.FF;
                                if (LoaiCT == "Kế Hoạch")
                                {
                                    NumBer = (End.FinishDate.Value.Date - BeGin.FinishDate.Value.Date).TotalDays;
                                }
                                break;
                            case 2:
                                LoaiLK = MyConstant.SF;
                                if (LoaiCT == "Kế Hoạch")
                                {
                                    NumBer = (End.FinishDate.Value.Date - BeGin.StartDate.Value.Date).TotalDays;
                                }
                                break;
                            case 3:
                                LoaiLK = MyConstant.SS;
                                if (LoaiCT == "Kế Hoạch")
                                {
                                    NumBer = (End.StartDate.Value.Date - BeGin.StartDate.Value.Date).TotalDays;
                                }
                                break;
                            default:
                                break;
                        }
                        string IsNumBer = NumBer > 0 ? $"+{NumBer}" : NumBer.ToString();
                        End.NhapLienKet = NumBer != 0 ? $"{BeGin.STT}{LoaiLK}{IsNumBer}days" : $"{BeGin.STT}{LoaiLK}";
                    }
                }
            }
            gc_Tiendo.DataSource = tasks;
            gc_Tiendo.SplitTaskSource = splitTasks;
            gc_Tiendo.DependencySource = tasks_Depen;
            if (tasks.Count() != 0 && NBD is null)
            {
                List<TaskDataItem> task = gc_Tiendo.DataSource as List<TaskDataItem>;
                De_BeginTienDo.DateTime = task.Where(x => x.StartDate != null).Any() ? (DateTime)task.Where(x => x.StartDate != null).Min(x => x.StartDate) : DateTime.Now;
                De_EndTienDO.DateTime = task.Where(x => x.FinishDate != null).Any() ? (DateTime)task.Where(x => x.FinishDate != null).Max(x => x.FinishDate) : DateTime.Now;
            }
            Label:
            gc_Tiendo.EndUpdate();
            gc_Tiendo.RefreshDataSource();
            gc_TenKhoDen.Refresh();
            gc_Tiendo.ExpandAll();
            Fcn_AnHienTienDo();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_TDKH_loadTienDo(DateTime? NBD = null, DateTime? NKT = null, bool isLoaLaiTaiChinhNhanCong = true)
        {
            bool ThiCong = cbo_HienThiTienDo.Text != "Kế hoạch" ? true : false;
            Fcn_LoadTienDoNew(NBD, NKT, ThiCong);
            if (isLoaLaiTaiChinhNhanCong)
            {
                navigationPane1_SelectedPageChanged(null, null);
            }
        }

        private Dictionary<DateTime, int> LoadBieuDoNhanCong()
        {
            Dictionary<DateTime, int> dicNC = new Dictionary<DateTime, int>();
            var DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
            //if (DVTH is null)
            //    return;
            string dbString = $"SELECT hp.Code FROM {TDKH.Tbl_HaoPhiVatTu} hp " +
                $"JOIN {TDKH.TBL_ChiTietCongTacTheoKy} ct " +
                $"ON hp.CodeCongTac = ct.Code " +
                $"WHERE {DVTH.ColCodeFK} = '{DVTH.Code}' " +
                $"AND CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
                $"AND LoaiVatTu = 'Nhân công'";

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            var codesVt = dt.AsEnumerable().Select(x => (string)x["Code"]).ToArray();

            var hangNgays = MyFunction.Fcn_CalKLKHModel(TypeKLHN.HaoPhiVatTu, codesVt);
            if (hangNgays == null)
            {
                chartControl_NhanCong.DataSource = dicNC;
                return dicNC;
            }

            var grs = hangNgays.GroupBy(x => x.Ngay.Value);
            foreach (var gr in grs)
            {
                int nc = gr.Where(x => x.KhoiLuongKeHoach.HasValue).Any() ? (int)Math.Ceiling(gr.Where(x => x.KhoiLuongKeHoach.HasValue).Sum(x => x.KhoiLuongKeHoach.Value)) : 0;
                dicNC.Add(gr.Key.Date, nc);
            }

            chartControl_NhanCong.DataSource = dicNC;
            return dicNC;
        }
        private void Fcn_LoadTienDoSoSanh(DataTable dtCT, DataTable dtHM, DataTable dtCongTacTheoKy, bool isCongTac)
        {
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu");
            List<TaskDataItem> tasks = new List<TaskDataItem>();
            string CodeNhaThau = "";
            var gr = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["Code"]).ToList();
            tasks.Add(new TaskDataItem()
            {
                UID = "0",
                Name = slke_ThongTinDuAn.Text,
                TaskType = TDKH.TYPE_TaskTienDo_DuAn
            });

            string crCodeCT, crCodeHM;
            foreach (DataRow CT in dtCT.Rows)
            {
                crCodeCT = CT["Code"].ToString();
                tasks.Add(new TaskDataItem()
                {
                    UID = crCodeCT,
                    ParentUID = "0",
                    Name = CT["Ten"].ToString().ToUpper(),
                    TaskType = TDKH.TYPE_TaskTienDo_CongTrinh

                });
                DataRow[] HMs = dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'");
                foreach (var HM in HMs)
                {
                    crCodeHM = HM["Code"].ToString();
                    tasks.Add(new TaskDataItem()
                    {
                        UID = crCodeHM,
                        ParentUID = crCodeCT,
                        Name = HM["Ten"].ToString().ToUpper(),
                        TaskType = TDKH.TYPE_TaskTienDo_HangMuc

                    });
                    List<IGrouping<string, DataRow>> rowsDanhMucCongTac;
                    if (isCongTac)
                        rowsDanhMucCongTac = dtCongTacTheoKy.AsEnumerable()
                            .Where(x => x["CodeHangMuc"].ToString() == crCodeHM)
                            .GroupBy(x => x["CodeCongTac"].ToString()).ToList();
                    else
                    {
                        rowsDanhMucCongTac = dtCongTacTheoKy.AsEnumerable()
                            .Where(x => x["CodeHangMuc"].ToString() == crCodeHM)
                            .GroupBy(x => $"{crCodeHM};{x["MaHieuCongtac"]};{x["TenCongTac"]};{x["DonVi"]};{x["KhoiLuongToanBo"]};{x["DonGia"]}").ToList();
                    }
                    foreach (var grCT in rowsDanhMucCongTac)
                    {
                        DataRow drFirst = grCT.First();
                        tasks.Add(new TaskDataItem()
                        {
                            UID = grCT.Key.ToString(),
                            ParentUID = crCodeHM,
                            Name = drFirst["TenCongTac"].ToString(),
                            //MaHieuCongTac = drFirst["MaHieuCongTac"].ToString(),
                            TaskType = TDKH.TYPE_TaskTienDo_CongViecTong,
                            DonVi = drFirst["DonVi"].ToString(),
                            KhoiLuongHD = drFirst["KhoiLuongToanBo"].ToString()
                        });
                        string DescKH, DescTC;

                        foreach (DataRow rowCT in grCT.AsList())
                        {
                            string name = (rowCT["CodeNhaThau"] != DBNull.Value) ? rowCT["TenNhaThau"].ToString() :
                              (rowCT["CodeToDoi"] != DBNull.Value) ? rowCT["TenToDoi"].ToString() :
                              (rowCT["CodeNhaThauPhu"] != DBNull.Value) ? rowCT["TenNhaThauPhu"].ToString() : "Tổng thể";
                            if (rowCT["CodeNhaThau"] != DBNull.Value)
                            {
                                CodeNhaThau = $"{rowCT["Code"]}_KeHoach";
                                tasks.Add(new TaskDataItem()
                                {
                                    UID = CodeNhaThau,
                                    ParentUID = grCT.Key.ToString(),
                                    Name = name,
                                    TaskType = TDKH.TYPE_TaskTienDo_KeHoach,
                                    Description = $"KH: {rowCT["KhoiLuongToanBo"]}",
                                    StartDate = DateTime.TryParse(rowCT["NgayBatDau"].ToString(), out DateTime dateBD) ? (DateTime?)dateBD : null,
                                    FinishDate = DateTime.TryParse(rowCT["NgayKetThuc"].ToString(), out DateTime dateKT) ? (DateTime?)(dateKT.Date.AddDays(1)) : null
                                });
                            }
                            else
                            {
                                if (isCongTac)
                                {
                                    //DescKH = DinhMucHelper.getDescriptionGanttChartCongtac(rowCT["Code"].ToString(),
                                    //            double.Parse(rowCT["KhoiLuongToanBo"].ToString()));
                                    string dbString = $"SELECT \"KhoiLuongKeHoach\", \"KhoiLuongThiCong\" FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} " +
                                    $"WHERE \"CodeCongTacTheoGiaiDoan\" = '{rowCT["Code"]}'";
                                    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                    DescTC = $"{DateTime.Parse(rowCT["NgayKetThuc"].ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET)}";
                                    if (dt.Rows.Count != 0)
                                    {
                                        double KLTC = dt.AsEnumerable().Where(x => x["KhoiLuongThiCong"] != DBNull.Value).Sum(x => double.Parse(x["KhoiLuongThiCong"].ToString()));
                                        tasks.Add(new TaskDataItem()
                                        {
                                            UID = $"{rowCT["Code"]}_ThiCong",
                                            ParentUID = grCT.Key.ToString(),
                                            Name = name,
                                            TaskType = TDKH.TYPE_TaskTienDo_ThiCong,
                                            Description = $"TC: {KLTC}",
                                            StartDate = DateTime.TryParse(rowCT["NgayBatDauThiCong"].ToString(), out DateTime dateBDTC) ? (DateTime?)dateBDTC : null,
                                            FinishDate = DateTime.TryParse(rowCT["NgayKetThucThiCong"].ToString(), out DateTime dateKTTC) ? (DateTime?)(dateKTTC.Date.AddDays(1)) : null
                                        });
                                    }


                                }
                            }
                        }
                        tasks.Add(new TaskDataItem()
                        {
                            UID = Guid.NewGuid().ToString(),
                            ParentUID = grCT.Key.ToString(),
                        });
                    }
                }
            }
            gc_Tiendo.DataSource = tasks;
            gc_Tiendo.ExpandAll();
            fcn_UpdateNgayNghi();
            WaitFormHelper.CloseWaitForm();
        }
        private void ToolStrip_BangLuongCongTy_Click(object sender, EventArgs e)
        {
            // Bảng chi lương công ty
            FormBangLuongCongTy BangLuongCongTy = new FormBangLuongCongTy();
            BangLuongCongTy.ShowDialog();
        }

        private void btn_TTL_BangLuongCongTy_Click(object sender, EventArgs e)
        {
            // Mở bảng lương công ty tại bảng lương chính
            FormBangLuongCongTy BangLuongCongTy = new FormBangLuongCongTy();
            BangLuongCongTy.ShowDialog();
        }

        private void StripChiTietGiaoViecCaNhan_Click(object sender, EventArgs e)
        {
            // Mở fom giao việc từ Menu Strip
            FormChiTietThucHienGiaoViec ChiTietGiaoViecCaNhan = new FormChiTietThucHienGiaoViec("");
            ChiTietGiaoViecCaNhan.ShowDialog();
        }

        private void btn_CVDTH_XemChiTiet_Click(object sender, EventArgs e)
        {
            // Mở fom giao việc từ bảng tạm của giao việc - XÓA KHI HOÀN THÀNH NÚT GÁ TẠM NÀY
            FormChiTietThucHienGiaoViec ChiTietGiaoViecCaNhan = new FormChiTietThucHienGiaoViec("");
            ChiTietGiaoViecCaNhan.ShowDialog();
        }

        private void PhanMemQuanLyThiCong360_Activated(object sender, EventArgs e)
        {
            // Chạy mạc định phần Tạo hạng mục công việc trong Giao việc lên khi khởi động

        }

        /// <summary>
        /// Khởi tạo đầu việc cho dự án
        /// </summary>
        private void fcn_GV_InitDauViec(string codeDA)
        {
            XtraForm_ImportMauDuAn form = new XtraForm_ImportMauDuAn();
            string fileMau = Path.Combine(BaseFrom.m_templatePath, "FileExcel", $"17.GiaoViecMau.xlsx");
            form.ForceRead(codeDA, fileMau);
            form.Dispose();
            //DataTable dtDauViecLon = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT * FROM {GiaoViec.TBL_DAUVIECLON} WHERE \"CodeDuAn\" = '{codeDA}'");
            //DataTable dtDauViecNho = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT * FROM {GiaoViec.TBL_DAUVIECNho} WHERE \"CodeDuAn\" = '{codeDA}'");

            //if (dtDauViecLon.Rows.Count > 0)
            //{
            //    MessageShower.ShowInformation("Lỗi logic init đầu việc");
            //    return;
            //}
            //Dictionary<string, string[]> dicDauViecLon = new Dictionary<string, string[]>();

            //dicDauViecLon.Add("CHUẨN BỊ PHÁP LÝ ĐẦU TƯ",
            //    new string[]
            //    {
            //        "+ BÁO CÁO ĐẦU TƯ",
            //        "+ CHUẨN BỊ DỰ ÁN",
            //        "- LẬP DỰ ÁN",
            //        "- LẬP BÁO CÁO KINH TẾ KỸ THUẬT",
            //        "- ĐÁNH GIÁ TÁC ĐỘNG MÔI TRƯỜNG",
            //        "- KẾ HOẠCH BẢO VỆ MÔI TRƯỜNG",
            //        "+ THỰC HIỆN PHÁP LÝ DỰ ÁN",
            //        "- KẾ HOẠCH LỰA CHỌN NHÀ THẦU",
            //        "- THIẾT KẾ BẢN VẼ THI CÔNG",
            //        "- GIẢI PHÓNG MẶT BẰNG",
            //        "- DI DỜI HẠ TẦNG KỸ THUẬT",
            //        "- RÀ PHÁ BOM MÌN",
            //        "- THỰC HIỆN THI CÔNG XÂY DỰNG",
            //        "- KẾT THÚC THI CÔNG, ĐƯA CÔNG TRÌNH VÀO SỬ DỤNG",
            //        "- BÁO CÁO GIÁM SÁT ĐÁNH GIÁ TRONG CẢ QUÁ TRÌNH ĐẦU TƯ"
            //    });

            //dicDauViecLon.Add("KHẢO SÁT",
            //    new string[]
            //    {
            //        "+ KHẢO SÁT ĐỊA CHẤT",
            //        "+ KHẢO SÁT ĐỊA HÌNH"
            //    });

            //dicDauViecLon.Add("THIẾT KẾ KIẾN TRÚC",
            //    new string[]
            //    {
            //        "+ THIẾT KẾ KIẾN TRÚC SƠ BỘ",
            //        "+ THIẾT KẾ KIẾN TRÚC CHI TIẾT"
            //    });

            //dicDauViecLon.Add("THIẾT KẾ KẾT CẤU",
            //    new string[]
            //    {
            //        "+ KẾT CẤU PHẦN MÓNG",
            //        "+ KẾT CẤU PHẦN THÂN",
            //        "+ KẾT CẤU PHẦN HOÀN THIỆN",
            //        "+ KẾT CẤU GIAO THÔNG",
            //        "+ KẾT CẤU THỦY LỢI",
            //        "+ KẾT CẤU THỦY ĐIỆN"
            //    });

            //dicDauViecLon.Add("THIẾT KẾ NỘI THẤT",
            //    new string[]
            //    {
            //        "+ CHI TIẾT NỘI THẤT",
            //    });

            //dicDauViecLon.Add("LẬP DỰ TOÁN",
            //        new string[]
            //        {
            //            "+ DỰ TOÁN DÂN DỤNG",
            //            "+ DỰ TOÁN GIAO THÔNG",
            //            "+ DỰ TOÁN THỦY LỢI",
            //            "+ DỰ TOÁN THỦY ĐIỆN",
            //        });

            //dicDauViecLon.Add("LẬP TIẾN ĐỘ",
            //    new string[]
            //    {
            //        "+ TIẾN ĐỘ THI CÔNG",
            //        "+ TIẾN ĐỘ BÁO CÁO",
            //        "+ TIẾN ĐỘ KẾ HOẠCH",
            //        "+ TIẾN ĐỘ DỰ THẦU",
            //    });

            //dicDauViecLon.Add("ĐẤU THẦU",
            //    new string[]
            //    {
            //        "+ PHÁP LÝ ĐẤU THẦU",
            //        "+ TIẾN ĐỘ ĐẤU THẦU",
            //        "+ HỒ SƠ NHÂN SỰ ĐẤU THẦU",
            //        "+ ĐO BÓC KHỐI LƯỢNG ĐẤU THẦU",
            //        "+ LẬP HỒ SƠ TÀI CHÍNH ĐẤU THẦU",
            //        "+ LẬP GIÁ ĐẤU THẦU",
            //        "+ LẬP GIÁ ĐẤU THẦU",
            //        "+ CHẤM THẦU",
            //    });

            //dicDauViecLon.Add("THI CÔNG",
            //    new string[]
            //    {
            //        "+ THI CÔNG PHẦN MÓNG",
            //        "+ THI CÔNG PHẦN THÂN",
            //        "+ THI CÔNG PHẦN MÁI",
            //        "+ THI CÔNG PHẦN HOÀN THIỆN",
            //        "+ THI CÔNG NỘI THẤT",
            //        "+ THI CÔNG GIAO THÔNG",
            //        "+ THI CÔNG THỦY LỢI",
            //        "+ THI CÔNG THỦY ĐIỆN"
            //    });

            //dicDauViecLon.Add("LẬP BÁO CÁO",
            //    new string[]
            //    {
            //        "+ BÁO CÁO NGÀY",
            //        "+ BÁO CÁO TUẦN",
            //        "+ BÁO CÁO THÁNG",
            //        "+ BÁO CÁO QUÝ",
            //        "+ BÁO CÁO NĂM"
            //    });

            //dicDauViecLon.Add("HỒ SƠ THANH - QUYẾT TOÁN",
            //    new string[]
            //    {
            //        "+ HỒ SƠ THANH TOÁN GIAI ĐOẠN",
            //        "+ HỒ SƠ QUYẾT TOÁN"
            //    });

            //dicDauViecLon.Add("HỒ SƠ NGHIỆM THU",
            //    new string[]
            //    {
            //        "+ HỒ SƠ NGHIỆM THU CÔNG VIỆC",
            //        "+ HỒ SƠ KCS - NGHIỆM THU GIAI ĐOẠN"
            //    });

            //dicDauViecLon.Add("HỒ SƠ THÍ NGHIỆM",
            //    new string[]
            //    {
            //        "+ HỒ SƠ THÍ NGHIỆM HIỆN TRƯỜNG",
            //        "+ HỒ SƠ THÍ NGHIỆM ĐẦU VÀO",
            //        "+ CÁC KẾT QUẢ CO-CQ",
            //    });

            //dicDauViecLon.Add("BÀN GIAO - BẢO HÀNH",
            //    new string[]
            //    {
            //        "+ HỒ SƠ BÀN GIAO DỰ ÁN",
            //        "+ HỒ SƠ BẢO HÀNH"
            //    });

            //dicDauViecLon.Add("CÁC CÔNG VIỆC KHÁC",
            //    new string[]
            //    {
            //        "+ CÔNG VIỆC KHÁC LIÊN QUAN"
            //    });

            //foreach (var item in dicDauViecLon)
            //{
            //    DataRow rowDVLon = dtDauViecLon.NewRow();
            //    rowDVLon["Code"] = Guid.NewGuid().ToString();
            //    rowDVLon["CodeDuAn"] = codeDA;
            //    rowDVLon["DauViec"] = item.Key;
            //    rowDVLon["QuyTrinh"] = MyConstant.CONST_LoaiQT_Khac;
            //    dtDauViecLon.Rows.Add(rowDVLon);
            //    foreach (string DVnho in item.Value)
            //    {
            //        DataRow rowDVnho = dtDauViecNho.NewRow();
            //        rowDVnho["Code"] = Guid.NewGuid().ToString();
            //        rowDVnho["CodeDauViecLon"] = rowDVLon["Code"];
            //        rowDVnho["DauViec"] = DVnho;
            //        dtDauViecNho.Rows.Add(rowDVnho);
            //    }
            //}

            //string[] HangMucCVMuaHang = new string[]
            //{
            //    "MUA VẬT TƯ",
            //    "MUA THIẾT BỊ",
            //    "MUA SẢN PHẨM KHÁC",
            //    "ĐỀ XUẤT VẬT TƯ"
            //};

            //DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtDauViecLon, GiaoViec.TBL_DAUVIECLON);
            //DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtDauViecNho, GiaoViec.TBL_DAUVIECNho);
            ////cbb_DauViecLon.DataSource = dtDauViecLon.AsEnumerable().ToDictionary(x => x["Code"], x => x["DauViec"]).ToList();
        }
        // Viết hàm lấy nội dung vào Datagirvew trong Hạng mục công việc của "Giao việc"
        private void fcn_GV_CapNhatHangMucCongViec(bool isResetDauViec = true)
        {

            MWORD.Document doc = word_GhiChu.Document;
            doc.Sections[0].Margins.Top = 0;
            if (doc.Range.Length < 2)
            {
                string ghiChu1 = "- Mặc định công tác đầu tiên sẽ là công tác chính (Công tác mẹ)\r\n" +
                    "- Khi lần 2 thêm công tác mới mặc định là công tác mẹ. Cách 2 lần sau khi nhập nếu là công tác con hoặc diễn giải\r\n\r\n";
                string KetLuan = "==> Công tác mẹ là công tác được tổng hợp số liệu sang bảng giá trị thực hiện theo hợp đồng, công tác con chỉ thực hiện và ghi nhật ký";

                doc.InsertText(doc.CaretPosition, ghiChu1);
                MWORD.DocumentRange docRange = doc.CreateRange(0, ghiChu1.Length);

                MWORD.CharacterProperties textFormatting = doc.BeginUpdateCharacters(docRange);

                textFormatting.ForeColor = Color.Violet;
                doc.EndUpdateCharacters(textFormatting);

                doc.InsertText(doc.CaretPosition, KetLuan);


                docRange = doc.CreateRange(ghiChu1.Length, KetLuan.Length);
                textFormatting = doc.BeginUpdateCharacters(docRange);
                textFormatting.ForeColor = Color.Blue;
                doc.EndUpdateCharacters(textFormatting);

                //doc.InsertText(doc.CaretPosition, KetLuan);
            }

            if (rg_GV_DauViec.SelectedIndex < 0)
                rg_GV_DauViec.SelectedIndex = 0;

            if (rg_GV_DauViec.GetDescription() == "Thi công")
            {
                pn_haoPhiThongTinGiaoViec.Visible = true;
                ctrl_DonViThucHienGiaoViec.Enabled = true;
                layout_DauViec.Enabled = false;
                pn_LayNgayTuDong.Enabled = true;
                btn_GV_KH_LayDauViecTuTienDo.Enabled = true;

                //Files.fcn_spSheetStreamDocument(spsheet_GV_KH_ChiTietCacHMCongViec, $@"{ BaseFrom.m_templatePath}\FileExcel\13.aKeHoachGiaoViec.xlsx"); // Hiển thị bảng chi tiết giao việc trong kế hoạch
                GiaoViecHelper.LoadAllKeHoachGiaoViecThiCong();

            }
            else if (rg_GV_DauViec.GetDescription() == "Dự án")
            {
                pn_haoPhiThongTinGiaoViec.Visible = false;

                //if (cbb_DauViecLon.DataSource is null)
                //{

                //}

                if (isResetDauViec)
                {
                    ctrl_DonViThucHienGiaoViec.Enabled = false;

                    layout_DauViec.Enabled = true;
                    pn_LayNgayTuDong.Enabled = false;
                    btn_GV_KH_LayDauViecTuTienDo.Enabled = false;
                    fcn_CapNhatDauViec();
                }
                else
                    fcn_LoadGiaoViecDuAn();
                //}
            }
        }

        private void fcn_CapNhatDauViec()
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null || rg_LoaiMau.SelectedIndex < 0)
                return;
            string dbString = $"SELECT *, COUNT(gv.CodeCongViecCha) AS Total FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} gv\r\n " +
                $"WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}' AND LoaiMau = '{rg_LoaiMau.GetAccessibleName()}' " +
                $"GROUP BY gv.CodeDVL, gv.CodeDVN\r\n" +
                $"ORDER BY SortIdDVL ASC, SortIdDVN ASC";

            var dt = DataProvider.InstanceTHDA.ExecuteQueryModel<CongViecChaChartViewModel>(dbString);

            var grsDVL = dt.GroupBy(x => x.CodeDVL);
            List<CongViecChaChartViewModel> source = new List<CongViecChaChartViewModel>();

            source.Add(new CongViecChaChartViewModel()
            {
                Id = "AddDVL",
                TenCongViec = "***THÊM TIÊU ĐỀ MỚI***",
                SortIdDVL = grsDVL.Count() + 1

            });

            //string codelastCon = "";
            foreach (var grDVL in grsDVL)
            {
                var fst = grDVL.First();
                source.Add(new CongViecChaChartViewModel()
                {
                    Id = grDVL.Key,
                    TenCongViec = grDVL.First().DVL,
                    CodeDVL = fst.CodeDVL,
                    CodeDVN = fst.CodeDVN,
                    DVL = fst.DVL,
                    DVN = fst.DVN,
                });

                //var grsDVN = grDVL.Where(x => x.CodeDVN.HasValue()).GroupBy(x => x.CodeDVN);

                foreach (var grDVN in grDVL.Where(x => x.CodeDVN.HasValue()))
                {
                    source.Add(new CongViecChaChartViewModel()
                    {
                        Id = grDVN.CodeDVN,
                        ParentId = grDVL.Key,
                        TenCongViec = grDVN.DVN,
                        Total = grDVN.Total,
                        CodeDVL = grDVN.CodeDVL,
                        CodeDVN = grDVN.CodeDVN,
                        DVL = grDVN.DVL,
                        DVN = grDVN.DVN,
                    });
                    //codelastCon = grDVN.CodeDVN;

                }
                source.Add(new CongViecChaChartViewModel()
                {
                    Id = $"AddDVN_{grDVL.Key}",
                    TenCongViec = "+++THÊM MẪU MỚI+++",
                    ParentId = grDVL.Key,
                    CodeDVL = grDVL.Key,
                    SortIdDVN = grDVL.Count()
                });
            }
            //tl_GiaoViecDuAn.FocusedNodeChanged -= tl_GiaoViecDuAn_FocusedNodeChanged;
            tl_GiaoViecDuAn.DataSource = source;

            tl_GiaoViecDuAn.FocusedNode = tl_GiaoViecDuAn.GetNodeList().LastOrDefault(x => x.GetValue("CodeDVN") != null);
            tl_GiaoViecDuAn.CloseEditor();
            //tl_GiaoViecDuAn.FocusedNode = tl_GiaoViecDuAn.GetNodeList().SingleOrDefault(x => x.Id == );

            //tl_GiaoViecDuAn.FocusedNodeChanged -= tl_GiaoViecDuAn_FocusedNodeChanged;

        }
        private void fcn_LoadGiaoViecDuAn()
        {

            //string colNgayBatDau = GiaoViec.COL_NgayBatDau;
            //string colNgayKetThuc = GiaoViec.COL_NgayKetThuc;
            //string colSoNgay = GiaoViec.COL_SoNgay;

            //if (rg_GV_DauViec.GetAccessibleName() == "DuAn")
            //{
            string colNgayBatDau = GiaoViec.COL_NgayBatDauThiCong;
            string colNgayKetThuc = GiaoViec.COL_NgayKetThucThiCong;
            string colSoNgay = GiaoViec.COL_SoNgayThiCong;
            //}
            spsheet_GV_KH_ChiTietCacHMCongViec.Enabled = true;

            if (tl_GiaoViecDuAn.FocusedNode?.Level != 1)
                return;

            FileHelper.fcn_spSheetStreamDocument(SharedControls.spsheet_GV_KH_ChiTietCacHMCongViec, $@"{BaseFrom.m_templatePath}\FileExcel\13.bKeHoachGiaoViecDuAn.xlsx");
            SharedControls.spsheet_GV_KH_ChiTietCacHMCongViec.Enabled = true;



            CongViecChaChartViewModel cv = tl_GiaoViecDuAn.GetFocusedRow() as CongViecChaChartViewModel;
            if (cv is null)
                return;

            var crId = cv.Id;
            if (crId.StartsWith("AddDVL") || crId.StartsWith("AddDVN"))
                return;

            WaitFormHelper.ShowWaitForm("Đang tải giao việc");
            string dbString = $"SELECT *, COUNT(file.Code) AS FileCount FROM {GiaoViec.TBL_CONGVIECCHA} cha\r\n" +
                $"LEFT JOIN {GiaoViec.TBL_FileDinhKem} file\r\n" +
                $"ON cha.CodeCongViecCha = file.CodeParent " +
                $"WHERE cha.CodeDauMuc = '{cv.CodeDVN}' " +
                $"GROUP BY cha.CodeCongViecCha " +
            $"ORDER BY cha.SortId ASC";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //int sortId = 0;
            //foreach (DataRow dr in dt.Rows)
            //{
            //    if (++sortId != int.Parse(dr["SortId"].ToString()))
            //    {
            //        dr["SortId"] = sortId;
            //    }
            //}
            //DataProvider.instan
            spsheet_GV_KH_ChiTietCacHMCongViec.BeginUpdate();


            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.Document.Worksheets["Kế hoạch Dự án"];
            DefinedName name = spsheet_GV_KH_ChiTietCacHMCongViec.Document.DefinedNames.Where(x => x.Name == MyConstant.Range_KeHoach).Single();
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(name.Range);

            Cell cellTieuDe = ws.Range[GiaoViec.Range_TieuDe].First();
            Cell cellMau = ws.Range[GiaoViec.Range_Mau].First();

            ws.Rows[cellMau.RowIndex][dic[GiaoViec.COL_CodeCT]].SetValue(cv.CodeDVN);
            cellTieuDe.SetValue(cv.DVL);
            cellMau.SetValue(cv.DVN);


            if (name.Range.RowCount > 2)
                ws.Rows.Remove(name.Range.TopRowIndex + 1, name.Range.RowCount - 2);
            int ind = name.Range.BottomRowIndex;

            //if (dt.Rows.Count <= 0)
            //    return;
            ws.Rows.Insert(ind, dt.Rows.Count + 1, RowFormatMode.FormatAsNext);

            int STT = 0;
            foreach (DataRow dr in dt.Rows)
            {
                Row crRow = ws.Rows[ind++];
                crRow[dic[GiaoViec.COL_CodeCT]].SetValue(dr["CodeCongViecCha"].ToString());
                crRow[dic[GiaoViec.COL_STT]].SetValue(++STT);

                crRow[dic[GiaoViec.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCha);
                //ws.Hyperlinks.Add(crRow[dic[GiaoViec.COL_NguoiThucHien]], $"{dic[GiaoViec.COL_NguoiThucHien]}{ind}", false, "Xem chi tiết");
                ws.Hyperlinks.Add(crRow[dic[GiaoViec.COL_FileDinhKem]], $"{dic[GiaoViec.COL_FileDinhKem]}{ind}", false, "Xem chi tiết");

                foreach (var item in dic)
                {
                    if (dt.Columns.Contains(item.Key))
                    {
                        crRow[item.Value].SetValueFromText(dr[item.Key].ToString());
                    }

                    if (item.Key == GiaoViec.COL_FileDinhKem)
                    {
                        ws.Hyperlinks.Add(crRow[item.Value], $"{item.Value}{crRow.Index + 1}", false, $"{dr["FileCount"]} Files");
                    }
                }
                crRow[dic[colSoNgay]].Formula = $"{dic[colNgayKetThuc]}{crRow.Index + 1} - {dic[colNgayBatDau]}{crRow.Index + 1} + 1";
            }
            spsheet_GV_KH_ChiTietCacHMCongViec.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            //GiaoViecHelper.CapNhatNoiDungDangThucHien();
        }





        private bool TaoMoiTongDuAn()
        {
            if (!TongHopHelper.CheckSaveDA())
                return false;

            MSETTING.Default.DuAnHienTai = string.Empty;
            //MSETTING.Default.PathHienTai = string.Empty;
            MSETTING.Default.Save();

            try
            {
                MyFunction.DirectoryDelete($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}");
            }
            catch (Exception ex)
            {
                MessageShower.ShowInformation("Không thể xóa thư mục" + ex.ToString());
            }
            MSETTING.Default.PathHienTai = "";
            MSETTING.Default.Save();
            fcn_initDA_CT();
            return true;
        }

        private void ToolStripTaoMoi_Click(object sender, EventArgs e)
        {
            TaoMoiTongDuAn();
        }

        private void ToolStripMoFile_Click(object sender, EventArgs e)
        {
            if (!TongHopHelper.CheckSaveDA(false))
                return;

            fcn_openDA();
            //{
            //    try
            //    {
            //        MyFunction.DeleteDirectory($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}");
            //    }
            //    catch (Exception ex)
            //    {
            //        MessageShower.ShowInformation("Không thể xóa thư mục" + ex.ToString());
            //    }
            //    MSETTING.Default.PathHienTai = "";
            //    MSETTING.Default.Save();
            //}

        }

        private void lưuToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TongHopHelper.fcn_saveDA(false);
        }

        private void lưuMớiToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TongHopHelper.fcn_saveDA(true);
        }

        /// <summary>
        /// Thay đổi dự án
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private async void slke_ThongTinDuAn_SelectedIndexChanged(object sender, EventArgs e)
        {

            //fcn_upadatephuluchopdong(false);


        }

        private void fcn_UpdateCboSoLanPhatSinh()
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;

            cbb_TDKH_DBC_PhatSinh.SelectedIndexChanged -= cbb_TDKH_DBC_PhatSinh_SelectedIndexChanged;
            string dbString = $"SELECT * FROM {TDKH.TBL_SoLanPhatSinh} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //if (dt.Rows.Count == 0)
            //{
            //    MessageShower.ShowInformation("Không thể tải thông tin tiến độ - Kế hoạch");
            //    return;
            //}

            List<KeyValuePair<string, string>> sourceLs = dt.AsEnumerable().ToDictionary(x => x["Code"].ToString(), x => x["Ten"].ToString()).ToList();
            Dictionary<string, string> dic = new Dictionary<string, string>();
            foreach (DataRow r in dt.Rows)
            {
                dic.Add(r["Code"].ToString(), r["Ten"].ToString());
            }
            sourceLs.Add(new KeyValuePair<string, string>("Add", "Thêm phát sinh"));
            cbb_TDKH_DBC_PhatSinh.DataSource = sourceLs;
            if (cbb_TDKH_DBC_PhatSinh.Items.Count > 2)
                cbb_TDKH_DBC_PhatSinh.SelectedIndex = cbb_TDKH_DBC_PhatSinh.Items.Count - 2;
            cbb_TDKH_DBC_PhatSinh.SelectedIndexChanged += cbb_TDKH_DBC_PhatSinh_SelectedIndexChanged;

        }

        private void fcn_UpdateCboKyTienDoKeHoach()
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;

            cbb_DBKH_ChonDot.SelectedIndexChanged -= cbo_DBKH_ChonDot_SelectedIndexChanged;

            string dbString = $"SELECT * FROM {TDKH.TBL_GiaiDoanThucHien} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            if (dt.Rows.Count == 0)
            {
                MessageShower.ShowInformation("Không thể tải thông tin tiến độ - Kế hoạch");
                return;
            }

            Dictionary<string, string> dic = new Dictionary<string, string>();
            foreach (DataRow r in dt.Rows)
            {
                dic.Add(r["Code"].ToString(), r["Ten"].ToString());
            }
            dic.Add("Add", "Thêm mới");
            cbb_DBKH_ChonDot.DataSource = dic.ToList();
            cbb_DBKH_ChonDot.SelectedIndexChanged += cbo_DBKH_ChonDot_SelectedIndexChanged;


        }

        private void fcn_UpdateTienDoKeHoach_DoBocChuan(SpreadsheetControl spreadsheet, string codeKy, string FileSource, int type)
        {
            //string dd = spreadsheet.Document.Path;
            //if (dd != "")
            //{
            //    try
            //    {
            //        spreadsheet.SaveDocument();
            //    }
            //    catch (Exception ex)
            //    {

            //    }
            //}
            //string fileGoc = (path2Copy == "") ? $@"{BaseFrom.m_templatePath}\FileExcel\7.aBangKhoiLuong_KeHoach.xlsx" : path2Copy;
            //string path = $@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\Tiến độ - Kế hoạch\Đo bóc chuẩn\{cbo_DBKH_ChonDot.SelectedValue}";
            //if (!Directory.Exists(path))
            //    Directory.CreateDirectory(path);
            //string fileDb = $@"{path}\7.aBangKhoiLuong_KeHoach.xlsx";
            //if (!File.Exists(fileDb))
            //    File.Copy(fileGoc, fileDb);


            //spsheet_TDKH_DoBocKLKeHoach.LoadDocument(fileDb);

            //fcn_UpdateCongTacDoBoc(path2Copy != "");

        }

        private void fcn_updateListCbb()
        {
            fcn_UpdateCboKyTienDoKeHoach();
            ctrl_DonViThucHienDuAnTDKH.DVTHChanged -= ctrl_DonViThucHienDuAn_DVTHChanged;
            List<DonViThucHien> DVTH = DuAnHelper.GetDonViThucHiens(ctrl_DonViThucHienDuAnTDKH);
            ctrl_DonViThucHienDuAnTDKH.DVTHChanged += ctrl_DonViThucHienDuAn_DVTHChanged;
            fcn_LoadCongTrinhHangMuc();

        }

        private void fcn_LoadCongTrinhHangMuc()
        {
            var crDVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
            if (crDVTH is null)
            {
                slke_ChonCTHM.Properties.DataSource = new List<DVTHCongTrinhHangMuc>();

                return;
            }
            string dbString = $"SELECT ctr.Code AS CodeCongTrinh, ctr.Ten AS TenCongTrinh, hm.Code AS CodeHangMuc, hm.Ten AS TenHangMuc, COUNT(cttk.Code) AS CountCT, ctr.SortId\r\n" +
                $"FROM {Server.Tbl_ThongTinCongTrinh} ctr\r\n" +
                $"JOIN {Server.Tbl_ThongTinHangMuc} hm\r\n" +
                $"ON ctr.Code = hm.CodeCongTrinh\r\n" +
                $"LEFT JOIN {MyConstant.view_CongTacWithHangMucCongTrinh} cttk\r\n" +
                $"ON hm.Code = cttk.CodeHangMucDMCT\r\n" +
                $"AND cttk.{crDVTH.ColCodeFK} = '{crDVTH.Code}'\r\n" +
                $"WHERE ctr.CodeDuAn = '{slke_ThongTinDuAn.EditValue}'\r\n" +
                $"GROUP BY hm.Code\r\n" +
                $"ORDER BY ctr.SortId, hm.SortId";

            var dt = DataProvider.InstanceTHDA.ExecuteQueryModel<DVTHCongTrinhHangMuc>(dbString);

            string crCodeHM = slke_ChonCTHM.EditValue as string;
            if (!dt.Any(x => x.CodeHangMuc == crCodeHM))
            {
                crCodeHM = dt.LastOrDefault()?.CodeHangMuc;
            }
            var sumCT = dt.Sum(x => x.CountCT ?? 0);
            var grs = dt.GroupBy(x => new { x.CodeCongTrinh, x.TenCongTrinh });

            foreach (var gr in grs)
            {
                dt.Add(new DVTHCongTrinhHangMuc()
                {
                    CodeHangMuc = "ALL_" + gr.Key.CodeCongTrinh,
                    CodeCongTrinh = gr.Key.CodeCongTrinh,
                    TenCongTrinh = gr.Key.TenCongTrinh,
                    TenHangMuc = $"TẤT CẢ HẠNG MỤC ({gr.Key.TenCongTrinh})",
                    CountCT = gr.Sum(x => x.CountCT ?? 0),
                    SortId = gr.First().SortId
                });
            }
            dt.Add(new DVTHCongTrinhHangMuc()
            {
                CodeCongTrinh = "ALL",
                CodeHangMuc = "ALL",
                TenCongTrinh = "TOÀN BỘ DỰ ÁN",
                TenHangMuc = "TẤT CẢ CÔNG TRÌNH",
                CountCT = sumCT,
                SortId = dt.Max(x => x.SortId) + 1
            });


            slke_ChonCTHM.EditValueChanged -= slke_ChonCTHM_EditValueChanged;
            slke_ChonCTHM.Properties.DataSource = dt;
            slke_ChonCTHM.EditValue = crCodeHM;
            slke_ChonCTHM.EditValueChanged += slke_ChonCTHM_EditValueChanged;
            slke_ChonCTHM_EditValueChanged(null, null);
        }

        private void fcn_Update1cbb(ComboBox cbb, string tbl, bool keepOldValue = false)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;

            //List công trình
            string oldValue = "";

            if (keepOldValue)
            {
                oldValue = cbb.SelectedValue.ToString();
            }

            string dbString = $"SELECT \"Code\", \"Ten\" FROM \"{tbl}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            var Dic = new Dictionary<string, string>();
            Dic.Add("All", "Tất cả");

            foreach (DataRow row in dt.Rows)
            {
                Dic.Add(row["Code"].ToString(), row["Ten"].ToString());
            }

            //if (cbb == cbb_HangMuc)
            //    Dic.Add("Add", "Thêm mới");

            cbb.DataSource = Dic.ToList();
            if (keepOldValue && Dic.Keys.Contains(oldValue))
                cbb.SelectedValue = oldValue;
        }

        /// <summary>
        /// Cập nhật thông tin dự án
        /// </summary>
        private void fcn_updateSheetThongTinChinh()
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;

            spsheet_Thongtinchinh.CellValueChanged -= spsheet_Thongtinchinh_CellValueChanged;
            //m_isThongTinChinhChanged = false;
            string db_string = $"SELECT * FROM {MyConstant.TBL_THONGTINDUAN} WHERE \"Code\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
            if (dt.Rows.Count <= 0)
            {
                spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
                return;
            }

            string code = dt.Rows[0]["Code"].ToString();
            //spsheet_Thongtinchinh.LoadDocument();

            //spsheet_Thongtinchinh.LoadDocument($@"{BaseFrom.m_templatePath}\FileExcel\1.aThongTinDuTanDayDu.xls");
            IWorkbook workbook = spsheet_Thongtinchinh.Document;
            Worksheet sheetThongTin = workbook.Worksheets["Thông tin Dự án - Công trình"];
            Worksheet sheetNganSach = workbook.Worksheets["Nhập ngân sách"];
            spsheet_Thongtinchinh.Document.Worksheets.ActiveWorksheet = sheetThongTin;
            int topIndex;
            int bottomIndex;
            spsheet_Thongtinchinh.BeginUpdate();
            //try
            //{
            //Cập nhật thông tin dự án lên sheet
            //string tbl = MyConstant.TBL_FROMSERVER_GROUP;

            foreach (string str in MyConstant.RANGES_THONGTINDUAN)
                workbook.Range[str].SetValue(dt.Rows[0][str]);
            //if (str.StartsWith("Ngay"))
            //{
            //    //Thêm dateTimePicker
            //    //sheetThongTin.CustomCellInplaceEditors.Add(workbook.Range[str.Replace(" ", "_")], CustomCellInplaceEditorType.DateEdit);
            //    workbook.Range[str.Replace(" ", "_")].Value = dt.Rows[0][str].ToString();
            //    continue;
            //}


            //Cập nhật thông tin từ các bảng con của dự án
            foreach (string str in MyConstant.RANGES_MUCTHUOCDUAN)
            {
                if (str == MyConstant.TBL_THONGTINCONGTRINH)
                {
                    db_string = $"SELECT * FROM {str} WHERE \"CodeDuAn\"='{code}' ORDER BY \"SortId\" ASC";
                    dt = DataProvider.InstanceTHDA.ExecuteQuery(db_string);

                    string lsCodeCT = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                    db_string = $"SELECT * FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeCongTrinh\" IN ({lsCodeCT}) ORDER BY \"SortId\" ASC";
                    DataTable dtHM = DataProvider.InstanceTHDA.ExecuteQuery(db_string);

                    if (workbook.Range[str].RowCount > 4)
                        sheetThongTin.Rows.Remove(workbook.Range[str].TopRowIndex + 1, workbook.Range[str].RowCount - 4);
                    sheetThongTin.Rows.Insert(workbook.Range[str].BottomRowIndex - 1, dt.Rows.Count * 2 + dtHM.Rows.Count - 2, RowFormatMode.FormatAsPrevious);
                    topIndex = workbook.Range[str].TopRowIndex;
                    bottomIndex = workbook.Range[str].BottomRowIndex;
                    int i = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        sheetThongTin.Rows[topIndex + i].CopyFrom(sheetThongTin.Rows[bottomIndex - 1], PasteSpecial.All);
                        sheetThongTin.Rows[topIndex + i].Visible = true;
                        foreach (string str1 in MyConstant.DIC_TenCotUngVoiDb_CT.Keys)
                        {
                            string NameCTrinh = str1 == MyConstant.COL_TEN ? $"CTR: {row[MyConstant.DIC_TenCotUngVoiDb_CT[str1]]}" : row[MyConstant.DIC_TenCotUngVoiDb_CT[str1]].ToString();
                            sheetThongTin.Rows[topIndex + i][str1].SetValueFromText(NameCTrinh);
                        }
                        sheetThongTin.Rows[topIndex + (i++)][MyConstant.COL_CODE].SetValueFromText(row["Code"].ToString());
                        DataRow[] dt_hm_con = dtHM.AsEnumerable().Where(x => x["CodeCongTrinh"].ToString() == row["Code"].ToString()).ToArray();
                        foreach (var rowhm in dt_hm_con)
                        {
                            sheetThongTin.Rows[topIndex + i].CopyFrom(sheetThongTin.Rows[bottomIndex], PasteSpecial.All);
                            sheetThongTin.Rows[topIndex + i].Visible = true;
                            foreach (string str2 in MyConstant.DIC_TenCotUngVoiDb_CT.Keys)
                            {
                                if (str2 != MyConstant.COL_DIENTHOAI)
                                {
                                    string NameHM = str2 == MyConstant.COL_TEN ? $"HM: {rowhm[MyConstant.DIC_TenCotUngVoiDb_CT[str2]]}" : rowhm[MyConstant.DIC_TenCotUngVoiDb_CT[str2]].ToString();
                                    sheetThongTin.Rows[topIndex + i][str2].SetValueFromText(NameHM);
                                }
                            }
                            sheetThongTin.Rows[topIndex + (i)][MyConstant.COL_CODEHM].SetValueFromText(rowhm["Code"].ToString());
                            sheetThongTin.Rows[topIndex + (i++)][MyConstant.COL_CODECT].SetValueFromText(rowhm["CodeCongTrinh"].ToString());
                        }
                        //i++;
                        sheetThongTin.Rows[topIndex + i].CopyFrom(sheetThongTin.Rows[bottomIndex], PasteSpecial.All);
                        sheetThongTin.Rows[topIndex + i].Visible = true;
                        i++;
                        // DataRow[] drs_CTTheoKy = dtCongTacTheoKy.AsEnumerable().Where(x => lsDanhMucCongTac.Keys.Contains(x["CodeCongTac"].ToString())).ToArray();
                    }


                }
                else
                {
                    if (str == MyConstant.TBL_THONGTINNHATHAUPHU)
                        db_string = $"SELECT * FROM {str} WHERE \"CodeDuAn\"='{code}' AND \"CodeTongThau\" IS NULL";
                    else
                        db_string = $"SELECT * FROM {str} WHERE \"CodeDuAn\"='{code}'";
                    dt = DataProvider.InstanceTHDA.ExecuteQuery(db_string);

                    string lsCodeCT = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

                    db_string = $"SELECT * FROM {MyConstant.Tbl_TAOMOIHOPDONG} WHERE \"CodeDonViThucHien\" IN ({lsCodeCT})";
                    DataTable dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
                    if (dt.Rows.Count <= 0)
                        continue;
                    if (cb_chitiet.Checked)
                    {
                        if (workbook.Range[str].RowCount > 3)
                            sheetThongTin.Rows.Remove(workbook.Range[str].TopRowIndex + 1, workbook.Range[str].RowCount - 3);
                        sheetThongTin.Rows.Insert(workbook.Range[str].BottomRowIndex - 1, dt.Rows.Count + dt_HD.Rows.Count, RowFormatMode.FormatAsPrevious);
                    }
                    else
                    {
                        if (workbook.Range[str].RowCount > 3)
                            sheetThongTin.Rows.Remove(workbook.Range[str].TopRowIndex + 1, workbook.Range[str].RowCount - 3);
                        sheetThongTin.Rows.Insert(workbook.Range[str].BottomRowIndex - 1, dt.Rows.Count, RowFormatMode.FormatAsPrevious);
                    }
                    topIndex = workbook.Range[str].TopRowIndex;
                    bottomIndex = workbook.Range[str].BottomRowIndex;


                    int i = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        sheetThongTin.Rows[topIndex + i].CopyFrom(sheetThongTin.Rows[bottomIndex - 1], PasteSpecial.All);
                        sheetThongTin.Rows[topIndex + i].Visible = true;
                        sheetThongTin.Rows[topIndex + i]["D"].SetValueFromText(MyConstant.DIC_TENLOAIHD[str]);
                        sheetThongTin.Rows[topIndex + i][MyConstant.COL_CODE].SetValueFromText(row["Code"].ToString());
                        //sheetThongTin.Rows[topIndex + i][MyConstant.COL_CODEHM].Value = row["Code"].ToString();
                        foreach (string str1 in MyConstant.DIC_TenCotUngVoiDb.Keys)
                        {
                            if (str == MyConstant.TBL_THONGTINNHACUNGCAP || str == MyConstant.TBL_THONGTINNHATHAU || str == MyConstant.TBL_THONGTINNHATHAUPHU || str == MyConstant.TBL_THONGTINTODOITHICONG)
                            {
                                sheetThongTin.Hyperlinks.Add(sheetThongTin.Rows[workbook.Range[str].TopRowIndex + i][MyConstant.COL_CHITIET], $"{MyConstant.COL_CHITIET}{workbook.Range[str].TopRowIndex + i + 1}", false, "Hợp đồng");
                                sheetThongTin.Rows[topIndex + i][MyConstant.COL_MADANHNGHIEP].SetValueFromText(row["GiaTri"].ToString());
                            }
                            sheetThongTin.Rows[topIndex + i][str1].SetValueFromText(row[MyConstant.DIC_TenCotUngVoiDb[str1]].ToString());
                        }
                        if (cb_chitiet.Checked)
                        {
                            db_string = $"SELECT * FROM {MyConstant.Tbl_TAOMOIHOPDONG} WHERE \"CodeDonViThucHien\"='{row["Code"]}'";
                            DataRow[] dt_HD_CT = dt_HD.AsEnumerable().Where(x => x["CodeDonViThucHien"].ToString() == row["Code"].ToString()).ToArray();
                            foreach (var rows in dt_HD_CT)
                            {
                                i++;
                                sheetThongTin.Rows[topIndex + i].CopyFrom(sheetThongTin.Rows[bottomIndex], PasteSpecial.All);
                                sheetThongTin.Rows[topIndex + i].Visible = true;
                                //sheetThongTin.Rows[topIndex + i][MyConstant.COL_CODEHM].Value = row["Code"].ToString();
                                sheetThongTin.Rows[topIndex + i][MyConstant.COL_CODE].SetValueFromText(rows["Code"].ToString());
                                sheetThongTin.Rows[topIndex + i][sheetThongTin.Columns[sheetThongTin.Columns[MyConstant.COL_DIACHI].Index - 1].Heading].SetValueFromText(rows["TenHopDong"].ToString());
                                sheetThongTin.Rows[topIndex + i][sheetThongTin.Columns[sheetThongTin.Columns[MyConstant.COL_DIENTHOAI].Index - 1].Heading].SetValueFromText(rows["SoHopDong"].ToString());
                                sheetThongTin.Rows[topIndex + i][MyConstant.COL_MASOTHUE].SetValueFromText(rows["GiaTriHopDong"].ToString());
                                sheetThongTin.Hyperlinks.Add(sheetThongTin.Rows[topIndex + i][MyConstant.COL_CHITIET], $"{MyConstant.COL_CHITIET}{topIndex + i + 1}", false, "Chi tiết");
                            }
                        }
                        i++;
                        sheetThongTin.Rows[topIndex + i].CopyFrom(sheetThongTin.Rows[bottomIndex - 1], PasteSpecial.All);
                        if (str != MyConstant.TBL_THONGTINNHATHAU)
                            sheetThongTin.Rows[topIndex + i].Visible = true;
                    }
                }
            }
            CellRange DataVatLieu = sheetThongTin.Range["DataVatLieuNCMTC"];
            DataVatLieu.ForEach(x => sheetThongTin.Columns[x.ColumnIndex].Visible = false);
            //Cập nhật thông tin ngân sách
            db_string = $"SELECT * FROM {MyConstant.TBL_THONGTINNGANSACH} WHERE \"CodeDuAn\"='{code}'";
            dt = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
            if (dt.Rows.Count <= 0)
            {
                spsheet_Thongtinchinh.EndUpdate();
                spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
                return;
            }


            sheetNganSach.Rows.Insert(workbook.Range[MyConstant.TBL_THONGTINNGANSACH].BottomRowIndex, dt.Rows.Count, RowFormatMode.FormatAsPrevious);

            topIndex = workbook.Range[MyConstant.TBL_THONGTINNGANSACH].TopRowIndex;
            bottomIndex = workbook.Range[MyConstant.TBL_THONGTINNGANSACH].BottomRowIndex;

            for (int i = 0; i < dt.Rows.Count; i++)
            {

                sheetNganSach.Rows[topIndex + i][MyConstant.COL_CODE].SetValueFromText(dt.Rows[i]["Code"].ToString());
                sheetNganSach.Rows[topIndex + i][MyConstant.COL_THONGTINVON_STT].SetValue(i + 1);
                sheetNganSach.Rows[topIndex + i][MyConstant.COL_THONGTIN_NGUONVON].SetValueFromText(dt.Rows[i]["NguonVon"].ToString());
                sheetNganSach.Rows[topIndex + i][MyConstant.COL_THONGTIN_SOTIEN].SetValue(dt.Rows[i]["SoTien"]);
            }

            /*                workbook.Range["Tên_dự_án"].Value = dt.Rows[0]["TenDuAn"].ToString();
                            workbook.Range["Mã_dự_án"].Value = dt.Rows[0]["MaDuAn"].ToString();
                            workbook.Range["Ngày_bắt_đầu"].Value = dt.Rows[0]["NgayBatDau"].ToString();
                            workbook.Range["Ngày_kết_thúc"].Value = dt.Rows[0]["NgayKetThuc"].ToString();
                            workbook.Range["Tên_chủ_đầu_tư"].Value = dt.Rows[0]["NgayKetThuc"].ToString();
                            workbook.Range["Ngày_kết_thúc"].Value = dt.Rows[0]["NgayKetThuc"].ToString();
                            workbook.Range["Ngày_kết_thúc"].Value = dt.Rows[0]["NgayKetThuc"].ToString();*/
            //}
            //catch (Exception ex)
            //{
            //    MessageShower.ShowInformation("RANGES THONG TIN DỰ ÁN EXCEPTION: " + ex);
            //}
            //Worksheet worksheet = workbook.Worksheets[0];

            db_string = $"SELECT \"Ten\" FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\"='{workbook.Range["Code"].Value}'";
            dt = DataProvider.InstanceTHDA.ExecuteQuery(db_string);

            if (dt.Rows.Count <= 0)
                return;

            //foreach (DataRow r in dt.Rows)
            //{
            //    cbb_MenuCongTrinhThucHien.Items.Add($"{r["Ten"]}");
            //}
            //cbb_MenuCongTrinhThucHien.SelectedIndex = 0;
            spsheet_Thongtinchinh.EndUpdate();
            spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
        }

        private void fcn_spsheet_Thongtinchinh_CellChanged(Cell cellChanged, CellValue oldVal, bool isPasting)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;

            IWorkbook workbook = cellChanged.Worksheet.Workbook;
            Worksheet worksheet = cellChanged.Worksheet;
            string db_string = "";
            string newVal = cellChanged.Value.ToString();
            string headerCol = worksheet.Columns[cellChanged.ColumnIndex].Heading;
            if (workbook.Range[MyConstant.TBL_THONGTINNGANSACH].Worksheet == worksheet)
            {
                if (workbook.Range[MyConstant.TBL_THONGTINNGANSACH].Contains(cellChanged))
                {
                    if (worksheet.Columns[cellChanged.ColumnIndex].Heading == MyConstant.COL_THONGTIN_SOTIEN && !newVal.All(char.IsDigit))
                    {
                        if (isPasting)
                            return;

                        cellChanged.Value = oldVal;
                        MessageShower.ShowInformation("Không thể nhập chữ cho thông tin này");
                        return;
                    }
                    CellRange rangeNganSach = workbook.Range[MyConstant.TBL_THONGTINNGANSACH];
                    string tenColDb = "";
                    if (headerCol == MyConstant.COL_THONGTIN_SOTIEN)
                        tenColDb = "SoTien";
                    else if (headerCol == MyConstant.COL_THONGTIN_NGUONVON)
                        tenColDb = "NguonVon";
                    else
                    {
                        cellChanged.SetValue("");
                        return;
                    }

                    if (worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value.ToString() == "")
                    {
                        string newID = Guid.NewGuid().ToString();

                        int bottomIndex = rangeNganSach.BottomRowIndex;
                        worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_THONGTINVON_STT].SetValue(rangeNganSach.RowCount - 1);
                        worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].SetValueFromText(newID);
                        worksheet.Rows.Insert(bottomIndex, 1, RowFormatMode.FormatAsPrevious);
                        db_string = $"INSERT INTO {MyConstant.TBL_THONGTINNGANSACH} (\"Code\",\"{tenColDb}\",\"CodeDuAn\") VALUES ('{newID}',@NewVal,'{workbook.Range["Code"].Value}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(db_string, parameter: new object[] { newVal });
                        return;
                    }
                    else
                    {
                        db_string = $"UPDATE {MyConstant.TBL_THONGTINNGANSACH} SET \"{tenColDb}\"=@NewVal WHERE \"Code\"='{worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(db_string, parameter: new object[] { newVal });
                    }
                    m_isThongTinChinhChanged = true;
                    return;
                }
            }
            if (spsheet_Thongtinchinh.ActiveWorksheet.Name != "Thông tin Dự án - Công trình" && spsheet_Thongtinchinh.ActiveWorksheet.Name != "Nhập ngân sách")
            {
                if (spsheet_Thongtinchinh.ActiveWorksheet.Name == "Khối lượng phân khai")
                {
                    CellRange RangeData = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
                    if (!RangeData.Contains(cellChanged))
                    {
                        worksheet.Rows[cellChanged.RowIndex][cellChanged.ColumnIndex].SetValueFromText("");
                        return;
                    }
                    Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
                    string MaHieu = worksheet.Rows[cellChanged.RowIndex][Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_NHOM
                            || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.TYPEROW_HTPhanTuyen)
                    {
                        worksheet.Rows[cellChanged.RowIndex][cellChanged.ColumnIndex].SetValueFromText("");
                        return;
                    }

                    List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource) as List<DonViThucHien>;
                    string Code = worksheet.Rows[cellChanged.RowIndex][Name[TDKH.COL_Code]].Value.ToString();
                    if (Code == "")
                    {
                        worksheet.Rows[cellChanged.RowIndex][cellChanged.ColumnIndex].SetValueFromText("");
                        return;
                    }
                    string CellFirst = worksheet.Rows[0][cellChanged.ColumnIndex].Value.ToString();
                    string CodeNhaThau = CellFirst.Replace("KL_", "");
                    string CodeCongTac = worksheet.Rows[cellChanged.RowIndex][Name["CodeCongTac"]].Value.ToString();
                    string CodeHM = worksheet.Rows[cellChanged.RowIndex][Name["CodeHM"]].Value.ToString();
                    string dbString = "";
                    if (headerCol == Name["KhoiLuongDuThau"] || headerCol == Name[$"KL_{DVTH.Where(x => x.IsGiaoThau).SingleOrDefault().Code}"])
                    {
                        dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"KhoiLuongToanBo\"='{cellChanged.Value}' WHERE \"Code\"='{Code}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { Code });
                        if (headerCol == Name["KhoiLuongDuThau"])
                            worksheet.Rows[cellChanged.RowIndex][Name[$"KL_{DVTH.Where(x => x.IsGiaoThau).SingleOrDefault().Code}"]].SetValueFromText(cellChanged.Value.ToString());
                        else
                            worksheet.Rows[cellChanged.RowIndex][Name["KhoiLuongDuThau"]].SetValueFromText(cellChanged.Value.ToString());
                    }
                    else if (headerCol == Name["DonGiaDuThau"] || headerCol == Name[$"DG_{DVTH.Where(x => x.IsGiaoThau).SingleOrDefault().Code}"])
                    {
                        string ColDonGia = headerCol == Name["DonGiaDuThau"] ? "DonGia" : "DonGiaDuThau";
                        dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET {ColDonGia}='{cellChanged.Value}' WHERE \"Code\"='{Code}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                    else if (CellFirst.StartsWith("KL_"))
                    {
                        DonViThucHien NhaThau = DVTH.Where(x => x.Code == CodeNhaThau).SingleOrDefault();
                        db_string = $"SELECT \"Code\" FROM \"{TDKH.TBL_ChiTietCongTacTheoKy}\" WHERE \"CodeCongTac\" = '{CodeCongTac}' " +
                        $"AND {NhaThau.ColCodeFK}='{NhaThau.Code}' ";
                        DataTable CT = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
                        if (CT.Rows.Count == 0)
                        {
                            db_string = $"SELECT * FROM \"{TDKH.TBL_ChiTietCongTacTheoKy}\" WHERE \"Code\" = '{Code}' ";
                            CT = DataProvider.InstanceTHDA.ExecuteQuery(db_string);

                            DataRow row = CT.Rows[0];

                            string CodeNhom = worksheet.Rows[cellChanged.RowIndex][Name["CodeNhom"]].Value.ToString();
                            dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacCon} WHERE \"CodeCongTacCha\"='{Code}'";
                            DataTable dtCongTacCon = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                            dbString = $"SELECT * FROM {TDKH.Tbl_HaoPhiVatTu} WHERE \"CodeCongTac\"='{Code}'";
                            DataTable dtHaoPhi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                            List<Tbl_TDKH_ChiTietCongTacTheoGiaiDoanViewModel> dtMoi = new List<Tbl_TDKH_ChiTietCongTacTheoGiaiDoanViewModel>();
                            DataTable dtConMoi = dtCongTacCon.Clone();
                            DataTable dtHaoPhiMoi = dtHaoPhi.Clone();
                            DataTable CTTheoKy = CT.Clone();
                            List<string> lsCodeDg = new List<string>();
                            if (CodeNhom != "")
                            {
                                string TenNhom = worksheet.Rows[cellChanged.RowIndex][Name["TenCongTac"]].Value.ToString();

                                dbString = $"SELECT * FROM {TDKH.TBL_NhomCongTac} WHERE Code = '{CodeNhom}'";
                                DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                string newGuid = Guid.NewGuid().ToString();
                                DataRow newRow = dtNhom.NewRow();
                                newRow.ItemArray = dtNhom.Rows[0].ItemArray;
                                newRow["Code"] = newGuid;
                                dtNhom.Rows.Add(newRow);
                                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNhom, TDKH.TBL_NhomCongTac);
                                row["CodeNhom"] = newGuid;
                            }
                            row["Code"] = Guid.NewGuid().ToString();
                            row["CodeNhaThau"] = row["CodeNhaThauPhu"] = row["CodeToDoi"] = null;
                            row[NhaThau.ColCodeFK] = NhaThau.Code;
                            row["KhoiLuongToanBo"] = row["KhoiLuongHopDongChiTiet"] = double.Parse(cellChanged.Value.ToString());
                            row["KhoiLuongToanBo_Iscongthucmacdinh"] = DBNull.Value;
                            CTTheoKy.Rows.Add(row.ItemArray);
                            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(CTTheoKy, TDKH.TBL_ChiTietCongTacTheoKy);
                            foreach (DataRow drCon in dtCongTacCon.Rows)
                            {
                                drCon["Code"] = Guid.NewGuid().ToString();
                                drCon["CodeCongTacCha"] = row["Code"];
                                dtConMoi.Rows.Add(drCon.ItemArray);

                                if (drCon["CodeNhom"] != DBNull.Value && !lsCodeDg.Contains(drCon["CodeNhom"].ToString()))
                                {
                                    string codeNhomDg = drCon["CodeNhom"].ToString();
                                    string newGuid = Guid.NewGuid().ToString();

                                    dbString = $"SELECT * FROM {TDKH.TBL_NhomDienGiai} WHERE Code = '{codeNhomDg}'";
                                    DataTable dtNhomDg = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                                    DataRow newRow = dtNhomDg.NewRow();
                                    newRow.ItemArray = dtNhomDg.Rows[0].ItemArray;
                                    newRow["Code"] = newGuid;
                                    dtNhomDg.Rows.Add(newRow);
                                    DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNhomDg, TDKH.TBL_NhomDienGiai);
                                    row["CodeNhom"] = newGuid;
                                }
                            }
                            foreach (DataRow drHaoPhi in dtHaoPhi.Rows)
                            {
                                drHaoPhi["Code"] = Guid.NewGuid().ToString();
                                drHaoPhi["CodeCongTac"] = row["Code"];
                                dtHaoPhiMoi.Rows.Add(drHaoPhi.ItemArray);
                            }
                            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtConMoi, TDKH.TBL_ChiTietCongTacCon);
                            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtHaoPhiMoi, TDKH.Tbl_HaoPhiVatTu);
                            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(dtMoi.AsEnumerable().Select(x => x.Code).ToArray());
                            TDKHHelper.CapNhatAllVatTuHaoPhi(CodesHangMuc: new string[] { CodeHM });
                            worksheet.Rows[cellChanged.RowIndex][Name[$"DG_{NhaThau.Code}"]].SetValue(row["DonGiaThiCong"]);
                        }
                        else
                        {
                            Code = CT.Rows[0][0].ToString();
                            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"KhoiLuongToanBo\"='{cellChanged.Value}' WHERE \"Code\"='{Code}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { Code });
                        }


                    }
                    else if (CellFirst.StartsWith("DG"))
                    {
                        CodeNhaThau = CellFirst.Replace("DG_", "");
                        DonViThucHien NhaThau = DVTH.Where(x => x.Code == CodeNhaThau).SingleOrDefault();
                        db_string = $"SELECT \"Code\" FROM \"{TDKH.TBL_ChiTietCongTacTheoKy}\" WHERE \"CodeCongTac\" = '{CodeCongTac}' " +
                        $"AND {NhaThau.ColCodeFK}='{NhaThau.Code}' ";
                        DataTable CT = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
                        if (CT.Rows.Count == 0)
                        {
                            MessageShower.ShowWarning("Bạn phải nhập khối lượng nhà thầu trước khi nhập đơn giá!!!!!");
                            worksheet.Rows[cellChanged.RowIndex][cellChanged.ColumnIndex].SetValue(0);
                        }
                        else
                        {
                            Code = CT.Rows[0][0].ToString();
                            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"DonGiaThiCong\"='{cellChanged.Value}' WHERE \"Code\"='{Code}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }




                    }
                    else if (headerCol == Name["NgayBatDau"] || headerCol == Name["NgayKetThuc"])
                    {
                        dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET {CellFirst}='{cellChanged.Value.DateTimeValue.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE \"Code\"='{Code}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }

                }
                return;
            }

            foreach (string str in MyConstant.RANGES_THONGTINDUAN)
            {
                if (str == "Code")
                    continue;
                if (workbook.Range[str.Replace(" ", "_")].Contains(cellChanged))
                {
                    if ((str == "DienThoai" || str == "MaSoThue") && (!newVal.All(char.IsDigit)))
                    {
                        cellChanged.Value = oldVal;
                        if (!isPasting)
                            MessageShower.ShowInformation("Vui lòng chỉ nhập số cho thông tin này");
                        return;
                    }

                    if ((str == "NgayBatDau" || str == "NgayKetThuc"))
                    {
                        DateTime date;
                        bool isDate = DateTime.TryParse(newVal.ToString(), out date);
                        if (!isDate)
                        {
                            cellChanged.Value = oldVal;
                            if (!isPasting)
                                MessageShower.ShowInformation("Vui lòng nhập đúng định dạng ngày tháng");
                            return;
                        }
                        else
                        {
                            cellChanged.Value = newVal = date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                        }
                    }

                    db_string = $"UPDATE {MyConstant.TBL_THONGTINDUAN} SET \"{str}\"=@NewVal where \"Code\"='{workbook.Range["Code"].Value}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(db_string, parameter: new object[] { newVal });

                    if (str == "TenDuAn")
                    {
                        //slke_ThongTinDuAn.SelectedIndexChanged -= slke_ThongTinDuAn_SelectedIndexChanged;
                        //List<KeyValuePair<string, string>> ls = slke_ThongTinDuAn.Properties.DataSource as List<KeyValuePair<string, string>>;
                        //int selectedIndex = slke_ThongTinDuAn.SelectedIndex;
                        //ls[selectedIndex] = new KeyValuePair<string, string>(ls[selectedIndex].Key, newVal.ToString());
                        ////slke_ThongTinDuAn.Properties.DataSource = null;
                        //slke_ThongTinDuAn.Properties.DataSource = ls;
                        //slke_ThongTinDuAn.DisplayMember = "Value";
                        //slke_ThongTinDuAn.ValueMember = "Key";
                        //slke_ThongTinDuAn.SelectedIndex = selectedIndex;
                        //fcn_updateCbbThongTinDuAnCongTrinh();
                        var da = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;

                        da.TenDuAn = newVal;
                        slke_ThongTinDuAn.Refresh();
                        //slke_ThongTinDuAn.SelectedIndexChanged += slke_ThongTinDuAn_SelectedIndexChanged;
                    }
                    //else if (str == "Ten")
                    //{
                    //    cbb_MenuCongTrinhThucHien.SelectedIndexChanged -= cbb_MenuCongTrinhThucHien_SelectedIndexChanged;
                    //    cbb_MenuCongTrinhThucHien.Items[cbb_MenuCongTrinhThucHien.FindString(oldVal.ToString())] = newVal.ToString();
                    //    cbb_MenuCongTrinhThucHien.SelectedIndexChanged += cbb_MenuCongTrinhThucHien_SelectedIndexChanged;
                    //}
                    m_isThongTinChinhChanged = true;
                    return;
                }
            }


            foreach (string str in MyConstant.RANGES_MUCTHUOCDUAN)
            {

                if (workbook.Range[str].Contains(cellChanged) && MyConstant.DIC_TenCotUngVoiDb.Keys.Contains(headerCol))
                {
                    string tenColDb = MyConstant.DIC_TenCotUngVoiDb[headerCol];

                    if ((headerCol == MyConstant.COL_DIENTHOAI || headerCol == MyConstant.COL_MASOTHUE) && (!newVal.All(char.IsDigit)))
                    {
                        cellChanged.Value = oldVal;
                        if (!isPasting)
                            MessageShower.ShowInformation("Vui lòng chỉ nhập số cho thông tin này");
                        return;
                    }


                    if (str == MyConstant.TBL_THONGTINCONGTRINH && headerCol == MyConstant.COL_MASOTHUE)
                    {
                        tenColDb = "GiaTri";
                    }
                    if (worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value.ToString() == "" && worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODEHM].Value.ToString() == "")
                    {
                        if (str == MyConstant.TBL_THONGTINNHATHAU)
                            return;
                        string newID = Guid.NewGuid().ToString();
                        //worksheet.Rows.Insert(workbook.Range[str].BottomRowIndex, 1);
                        int bottomIndex = workbook.Range[str].BottomRowIndex - 1;
                        if (str == MyConstant.TBL_THONGTINCONGTRINH)
                            bottomIndex = workbook.Range[str].BottomRowIndex;
                        worksheet.Rows[bottomIndex - 1].CopyFrom(worksheet.Rows[bottomIndex], PasteSpecial.Values);
                        worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].SetValueFromText(newID);
                        //worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODEHM].Value = newID;
                        worksheet.Rows.Insert(bottomIndex, 1, RowFormatMode.FormatAsPrevious);
                        if (!isPasting)
                            worksheet.Rows[bottomIndex].CopyFrom(worksheet.Rows[bottomIndex + 1], PasteSpecial.Values);


                        if (str == MyConstant.TBL_THONGTINCONGTRINH)
                        {
                            //int sortID = workbook.Range[str].RowCount - 2;
                            //db_string = $"INSERT INTO {str} (\"Code\",\"{tenColDb}\",\"CodeDuAn\", \"SortId\") VALUES ('{newID}','{newVal}','{slke_ThongTinDuAn.EditValue}', '{sortID}')";
                            //DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);
                            string codeCt = worksheet.Rows[cellChanged.RowIndex - 1][MyConstant.COL_CODECT].Value.TextValue;
                            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (\"Code\",\"Ten\",\"CodeCongTrinh\") VALUES ('{Guid.NewGuid()}',@NewVal,'{codeCt}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string, parameter: new object[] { newVal });
                            //fcn_Update1cbb(cbb_HangMuc, MyConstant.TBL_THONGTINHANGMUC);
                            fcn_updateSheetThongTinChinh();
                            fcn_LoadCongTrinhHangMuc();

                            //fcn_Update1cbb(cbb_MenuCongTrinhThucHien, MyConstant.TBL_THONGTINCONGTRINH);
                            //GiaoViecHelper.LoadAllKeHoachGiaoViecThiCong();
                            //fcn_LoadCongTacDoBoc();
                        }
                        else
                        {
                            db_string = $"INSERT INTO {str} (\"Code\",\"{tenColDb}\",\"CodeDuAn\") VALUES ('{newID}',@NewVal,'{slke_ThongTinDuAn.EditValue}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string, parameter: new object[] { newVal });
                            // worksheet.Hyperlinks.Add(worksheet.Rows[workbook.Range[str].TopRowIndex + i][MyConstant.COL_CHITIET], $"{MyConstant.COL_CHITIET}{workbook.Range[str].TopRowIndex + i + 1}", false, "Hợp đồng");
                            DuAnHelper.GetDonViThucHiens(ctrl_DonViThucHienDuAnTDKH);
                            UpDateTenKho();
                        }


                        worksheet.Rows[cellChanged.RowIndex][headerCol].SetValueFromText(newVal.ToString());
                    }
                    else if (worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODEHM].Value.IsEmpty || worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODEHM].Value.TextValue == worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value.TextValue)
                    {
                        if (headerCol == MyConstant.COL_TEN && cellChanged.Value.ToString() == "")
                        {
                            if (workbook.Range[str].RowCount == 4)
                            {
                                MessageShower.ShowError("Không thẻ xóa tên nhà thầu");
                                cellChanged.Value = oldVal;

                            }
                            else if (str == MyConstant.TBL_THONGTINCONGTRINH)
                            {
                                db_string = $"SELECT * FROM \"{str}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
                                DataTable CT = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
                                db_string = $"SELECT * FROM \"{MyConstant.TBL_THONGTINHANGMUC}\" WHERE \"CodeCongTrinh\" = '{worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value}'";
                                DataTable HM = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
                                if (CT.Rows.Count == 1)
                                {
                                    MessageShower.ShowError("Không thẻ xóa công trình");
                                    cellChanged.Value = oldVal;
                                }
                                else
                                {
                                    DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn xóa công trình này không?");
                                    if (rs == DialogResult.Yes)
                                    {
                                        WaitFormHelper.ShowWaitForm("Đang xóa hạng mục không có công tác, Vui lòng chờ!");
                                        DuAnHelper.fcn_GetDtCongTrinhHangMuc(out DataTable dtCongTrinh, out DataTable dtHangMuc, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
                                        string queryStr = $"SELECT * FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"Code\"='{worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value}'";
                                        DataTable dtCongTrinhNew = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                                        foreach (DataRow row in dtCongTrinhNew.Rows)
                                        {
                                            string CodeHM = MyFunction.fcn_Array2listQueryCondition(dtHangMuc.AsEnumerable().Where(x => x["CodeCongTrinh"].ToString() == row["Code"].ToString()).Select(x => x["Code"].ToString()).ToArray());
                                            queryStr = $"SELECT * FROM {TDKH.TBL_DanhMucCongTac} WHERE \"CodeHangMuc\" IN ({CodeHM})";
                                            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                                            if (dt.Rows.Count == 0)
                                            {
                                                DuAnHelper.DeleteDataRows(MyConstant.TBL_THONGTINCONGTRINH, new string[] { row["Code"].ToString() });

                                            }
                                        }
                                        fcn_updateSheetThongTinChinh();
                                        fcn_LoadCongTrinhHangMuc();
                                        WaitFormHelper.CloseWaitForm();
                                        return;
                                    }
                                    else
                                    {
                                        cellChanged.Value = oldVal;
                                    }
                                }
                            }
                            else
                            {
                                DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn xóa nhà thầu này không?");
                                if (rs == DialogResult.Yes)
                                {

                                    //db_string = $"DELETE FROM {str} WHERE \"Code\"='{worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value}'";
                                    //DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);
                                    WaitFormHelper.ShowWaitForm("Đang xóa nhà thầu!!Vui lòng chờ!!!");
                                    DuAnHelper.DeleteDataRows(str, new string[] { worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value.TextValue });
                                    worksheet.Rows[cellChanged.RowIndex].Delete();
                                    List<DonViThucHien> DVTH = DuAnHelper.GetDonViThucHiens();
                                    DVTH.Remove(DVTH.Where(x => x.IsGiaoThau == true).FirstOrDefault());
                                    ctrl_DonViThucHienDuAnTienDo.DataSource = DVTH;
                                    WaitFormHelper.CloseWaitForm();
                                }
                                else
                                {
                                    cellChanged.Value = oldVal;
                                }
                            }
                            DuAnHelper.GetDonViThucHiens(ctrl_DonViThucHienDuAnTDKH);
                            UpDateTenKho();
                            return;
                        }
                        db_string = $"UPDATE {str} SET \"{tenColDb}\"='{newVal.Replace("CTR ", string.Empty)}' WHERE \"Code\"='{worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODE].Value}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);
                        DuAnHelper.GetDonViThucHiens(ctrl_DonViThucHienDuAnTDKH);
                        UpDateTenKho();
                    }
                    else
                    {
                        if (headerCol == MyConstant.COL_TEN && cellChanged.Value.ToString() == "")
                        {
                            db_string = $"SELECT * FROM \"{MyConstant.TBL_THONGTINHANGMUC}\" WHERE \"CodeCongTrinh\" = '{worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODECT].Value}'";
                            DataTable HM = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
                            if (HM.Rows.Count == 1)
                            {
                                MessageShower.ShowError("Không thẻ xóa hạng mục");
                                cellChanged.Value = oldVal;
                            }

                            else
                            {
                                DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn xóa hạng mục này không?");
                                if (rs == DialogResult.Yes)
                                {
                                    string queryStr = $"SELECT * FROM {TDKH.TBL_DanhMucCongTac} WHERE \"CodeHangMuc\"='{worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODEHM].Value}'";
                                    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);

                                    if (dt.Rows.Count != 0)
                                    {
                                        MessageShower.ShowError("Không thể xóa hạng mục này vì hạng mục này đã tồn tại công tác giao nhận thầu!!!!!!");
                                        cellChanged.Value = oldVal;
                                        return;
                                    }
                                    WaitFormHelper.ShowWaitForm("Đang xóa hạng mục không có công tác, Vui lòng chờ!");
                                    DuAnHelper.DeleteDataRows(MyConstant.TBL_THONGTINHANGMUC, new string[] { worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODEHM].Value.ToString() });
                                    worksheet.Rows[cellChanged.RowIndex].Delete();
                                    WaitFormHelper.CloseWaitForm();
                                }
                                else
                                {
                                    cellChanged.Value = oldVal;
                                }
                            }
                            DuAnHelper.GetDonViThucHiens(ctrl_DonViThucHienDuAnTDKH);
                            UpDateTenKho();
                            return;
                            //db_string = $"SELECT * FROM \"{MyConstant.TBL_THONGTINCONGTRINH}\" WHERE \"Code\" = '{HM.Rows[0][0]}'";
                            //DataTable CT = DataProvider.InstanceTHDA.ExecuteQuery(db_string);


                        }
                        db_string = $"UPDATE {MyConstant.TBL_THONGTINHANGMUC} SET \"{tenColDb}\"=@NewVal WHERE \"Code\"='{worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CODEHM].Value}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(db_string, parameter: new object[] { newVal.Replace("CTR: ", string.Empty) });
                        DuAnHelper.GetDonViThucHiens(ctrl_DonViThucHienDuAnTDKH);
                    }

                    if (str == MyConstant.TBL_THONGTINNHACUNGCAP || str == MyConstant.TBL_THONGTINNHATHAU || str == MyConstant.TBL_THONGTINNHATHAUPHU || str == MyConstant.TBL_THONGTINTODOITHICONG)
                        worksheet.Hyperlinks.Add(worksheet.Rows[cellChanged.RowIndex][MyConstant.COL_CHITIET], $"{MyConstant.COL_CHITIET}{cellChanged.RowIndex + 1}", false, "Hợp đồng");
                    m_isThongTinChinhChanged = true;

                    if ((str == MyConstant.TBL_THONGTINCONGTRINH || str == MyConstant.TBL_THONGTINHANGMUC) && headerCol == MyConstant.COL_TEN)
                        fcn_LoadCongTrinhHangMuc();
                    return;
                }
            }
            if (isPasting)
                return;
            cellChanged.Value = oldVal;
            if (!isPasting)
                MessageShower.ShowInformation("Không thể thay đổi nội dung của ô này!");
        }


        /// <summary>
        /// Thay đổi thông tin dự án
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void spsheet_Thongtinchinh_CellValueChanged(object sender, DevExpress.XtraSpreadsheet.SpreadsheetCellEventArgs e)
        {
            fcn_spsheet_Thongtinchinh_CellChanged(e.Cell, e.OldValue, false);
        }
        private void fcn_updatenhathau_todoi(string tensheet)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;

            string dbString = $"SELECT \"Code\", \"Ten\" FROM \"{MyConstant.TBL_THONGTINNHATHAU}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_nhathau = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT \"Code\", \"Ten\" FROM \"{MyConstant.TBL_THONGTINTODOITHICONG}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_todoi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT \"Code\", \"Ten\" FROM \"{MyConstant.TBL_THONGTINNHATHAUPHU}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}' ORDER BY CodeTongThau ASC ";
            DataTable dt_thauphu = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            int i = 0;
            IWorkbook workbook = spsheet_Thongtinchinh.Document;
            Worksheet sheetThongTin = workbook.Worksheets[tensheet];
            workbook.BeginUpdate();
            Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(sheetThongTin.Range[MyConstant.TBL_QUYETTHONGTIN]);
            foreach (var str in NAME_COL)
            {
                if (str.Key.Remove(2) == "KL" || str.Key.Remove(2) == "TT" || str.Key.Remove(2) == "DG" || str.Key.Remove(2) == "DV")
                {
                    NAME_COL = MyFunction.fcn_getDicOfColumn(sheetThongTin.Range[MyConstant.TBL_QUYETTHONGTIN]);
                    sheetThongTin.Columns.Remove(NAME_COL[str.Key]);
                }

            }
            workbook.EndUpdate();
            fcn_taocotnhathau_todoi_nhathauphu(i++, dt_nhathau, sheetThongTin, NAME_COL);
            fcn_taocotnhathau_todoi_nhathauphu(i++, dt_todoi, sheetThongTin, NAME_COL);
            fcn_taocotnhathau_todoi_nhathauphu(i++, dt_thauphu, sheetThongTin, NAME_COL);
        }
        private void fcn_taocotnhathau_todoi_nhathauphu(int i, DataTable dt, Worksheet name, Dictionary<string, string> NAME_COL, bool VL = false)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;

            // Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(name.Range[MyConstant.TBL_QUYETDICWS]);
            string dbString = $"SELECT * FROM \"{TDKH.TBL_SoLanPhatSinh}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_ps = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dt_ps.Rows.Count == 0)
            {
                spsheet_Thongtinchinh.BeginUpdate();
                //               spsheet_Thongtinchinh.Document.History.IsEnabled = false;
                foreach (DataRow item in dt.Rows)
                {
                    if (!VL)
                    {
                        name.Columns.Insert(name.Range["DonVi"].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                        name.Rows[1][name.Range["DonVi"].RightColumnIndex - 1].Value = "Đơn vị " + item["Ten"].ToString();
                        name.Rows[0][name.Range["DonVi"].RightColumnIndex - 1].Value = $"DV_{item["Code"]}";
                        name.Columns[name.Range["DonVi"].RightColumnIndex - 1].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    }
                    name.Columns.Insert(name.Range["Khoi_luong"].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                    name.Columns.Insert(name.Range["Thanh_tien"].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                    name.Columns.Insert(name.Range["Don_gia"].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                    name.Rows[1][name.Range["Khoi_luong"].RightColumnIndex - 1].Value = "KL_Khối lượng " + item["Ten"].ToString();
                    name.Rows[1][name.Range["Thanh_tien"].RightColumnIndex - 1].Value = "TT_Thành tiền " + item["Ten"].ToString();
                    name.Rows[0][name.Range["Khoi_luong"].RightColumnIndex - 1].Value = $"KL_{item["Code"]}";
                    name.Rows[0][name.Range["Thanh_tien"].RightColumnIndex - 1].Value = $"TT_{item["Code"]}";
                    name.Rows[1][name.Range["Don_gia"].RightColumnIndex - 1].Value = "DG_Đơn giá " + item["Ten"].ToString();
                    name.Rows[0][name.Range["Don_gia"].RightColumnIndex - 1].Value = $"DG_{item["Code"]}";
                    name.Columns[name.Range["Khoi_luong"].RightColumnIndex - 1].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    name.Columns[name.Range["Thanh_tien"].RightColumnIndex - 1].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    name.Columns[name.Range["Don_gia"].RightColumnIndex - 1].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                }
                spsheet_Thongtinchinh.EndUpdate();
                //               spsheet_Thongtinchinh.Document.History.IsEnabled = true;
                return;
            }
            spsheet_Thongtinchinh.BeginUpdate();
            //           spsheet_Thongtinchinh.Document.History.IsEnabled = false;
            int m = 1, j = 1, k = 1;
            foreach (DataRow item in dt.Rows)
            {
                if (dt_ps.Rows.Count != 0)
                {
                    //name.Range[$"{NAME_COL["KhoiLuongDuThau"]}{2}:{NAME_COL["KhoiLuongDuThau"]}{3}"].UnMerge();
                    //name.Columns.Insert(name.Columns[NAME_COL["KhoiLuongDuThau"]].Index + 1, dt_ps.Rows.Count, ColumnFormatMode.FormatAsPrevious);
                    //name.Rows[2][NAME_COL["KhoiLuongDuThau"]].Value = "Khối lượng dự thầu đo bóc";
                    //name.MergeCells(name.Range[$"{NAME_COL["KhoiLuongDuThau"]}{2}:{name.Columns[name.Columns[NAME_COL["KhoiLuongDuThau"]].Index + dt_ps.Rows.Count].Heading}{2}"]);
                    name.Columns.Insert(name.Range["Khoi_luong"].RightColumnIndex, dt_ps.Rows.Count + 1, ColumnFormatMode.FormatAsPrevious);
                    name.Columns.Insert(name.Range["Thanh_tien"].RightColumnIndex, dt_ps.Rows.Count + 1, ColumnFormatMode.FormatAsPrevious);
                    name.Columns.Insert(name.Range["Don_gia"].RightColumnIndex, dt_ps.Rows.Count + 1, ColumnFormatMode.FormatAsPrevious);

                    string merge_KL = $"{name.Columns[name.Range["Khoi_luong"].RightColumnIndex - 1].Heading}{2}:{name.Columns[name.Range["Khoi_luong"].RightColumnIndex - dt_ps.Rows.Count - 1].Heading}{2}";
                    string merge_TT = $"{name.Columns[name.Range["Thanh_tien"].RightColumnIndex - 1].Heading}{2}:{name.Columns[name.Range["Thanh_tien"].RightColumnIndex - dt_ps.Rows.Count - 1].Heading}{2}";
                    string merge_DG = $"{name.Columns[name.Range["Don_gia"].RightColumnIndex - 1].Heading}{2}:{name.Columns[name.Range["Don_gia"].RightColumnIndex - dt_ps.Rows.Count - 1].Heading}{2}";
                    foreach (DataRow row in dt_ps.Rows)
                    {
                        //name.Rows[2][name.Columns[name.Columns[NAME_COL["KhoiLuongDuThau"]].Index + m].Heading].Value = "KL_Khối lượng dự thầu " + row["Ten"].ToString();
                        //name.Rows[0][name.Columns[name.Columns[NAME_COL["KhoiLuongDuThau"]].Index + m].Heading].Value = "KL_Khối lượng dự thầu " + row["Ten"].ToString();
                        name.Range[$"{name.Columns[name.Range["Khoi_luong"].RightColumnIndex - 1 - dt_ps.Rows.Count + m].Heading}{2}:{name.Columns[name.Range["Khoi_luong"].RightColumnIndex - 1 - dt_ps.Rows.Count + m].Heading}{3}"].UnMerge();
                        name.Range[$"{name.Columns[name.Range["Don_gia"].RightColumnIndex - 1 - dt_ps.Rows.Count + j].Heading}{2}:{name.Columns[name.Range["Don_gia"].RightColumnIndex - 1 - dt_ps.Rows.Count + j].Heading}{3}"].UnMerge();
                        name.Range[$"{name.Columns[name.Range["Thanh_tien"].RightColumnIndex - 1 - dt_ps.Rows.Count + k].Heading}{2}:{name.Columns[name.Range["Thanh_tien"].RightColumnIndex - 1 - dt_ps.Rows.Count + k].Heading}{3}"].UnMerge();
                        name.Rows[2][name.Range["Khoi_luong"].RightColumnIndex - 1 - dt_ps.Rows.Count + (m)].Value = "KL_Khối lượng " + row["Ten"].ToString();
                        name.Rows[2][name.Range["Don_gia"].RightColumnIndex - 1 - dt_ps.Rows.Count + (j)].Value = "DG_Đơn giá " + row["Ten"].ToString();
                        name.Rows[2][name.Range["Thanh_tien"].RightColumnIndex - 1 - dt_ps.Rows.Count + (k)].Value = "TT_Thành tiền " + row["Ten"].ToString();
                        name.Rows[0][name.Range["Khoi_luong"].RightColumnIndex - 1 - dt_ps.Rows.Count + (m++)].Value = $"KL_{item["Code"]}_{row["Code"]}_ps";
                        name.Rows[0][name.Range["Don_gia"].RightColumnIndex - 1 - dt_ps.Rows.Count + (j++)].Value = $"DG_{item["Code"]}_{row["Code"]}_ps";
                        name.Rows[0][name.Range["Thanh_tien"].RightColumnIndex - 1 - dt_ps.Rows.Count + (k++)].Value = $"TT_{item["Code"]}_{row["Code"]}_ps";
                    }
                    name.Range[$"{name.Columns[name.Range["Khoi_luong"].RightColumnIndex - 1 - dt_ps.Rows.Count].Heading}{2}:{name.Columns[name.Range["Khoi_luong"].RightColumnIndex - 1 - dt_ps.Rows.Count].Heading}{3}"].UnMerge();
                    name.Range[$"{name.Columns[name.Range["Don_gia"].RightColumnIndex - 1 - dt_ps.Rows.Count].Heading}{2}:{name.Columns[name.Range["Don_gia"].RightColumnIndex - 1 - dt_ps.Rows.Count].Heading}{3}"].UnMerge();
                    name.Range[$"{name.Columns[name.Range["Thanh_tien"].RightColumnIndex - 1 - dt_ps.Rows.Count].Heading}{2}:{name.Columns[name.Range["Thanh_tien"].RightColumnIndex - 1 - dt_ps.Rows.Count].Heading}{3}"].UnMerge();
                    name.Rows[1][name.Range["Khoi_luong"].RightColumnIndex - 1].Value = "KL_Khối lượng " + item["Ten"].ToString();
                    name.Rows[2][name.Range["Khoi_luong"].RightColumnIndex - 1 - dt_ps.Rows.Count].Value = "KL_Khối lượng đo bóc";
                    name.Rows[1][name.Range["Thanh_tien"].RightColumnIndex - 1].Value = "TT_Thành tiền " + item["Ten"].ToString();
                    name.Rows[0][name.Range["Khoi_luong"].RightColumnIndex - 2].Value = $"KL_{item["Code"]}";
                    name.Rows[0][name.Range["Thanh_tien"].RightColumnIndex - 2].Value = $"TT_{item["Code"]}";
                    name.Rows[2][name.Range["Thanh_tien"].RightColumnIndex - 1 - dt_ps.Rows.Count].Value = "TT_Thành tiền đo bóc";
                    name.Rows[2][name.Range["Don_gia"].RightColumnIndex - 1 - dt_ps.Rows.Count].Value = "DG_Đơn giá đo bóc";
                    name.Rows[1][name.Range["Don_gia"].RightColumnIndex - 1].Value = "DG_Đơn giá " + item["Ten"].ToString();
                    name.Rows[0][name.Range["Don_gia"].RightColumnIndex - 2].Value = $"DG_{item["Code"]}";
                    name.Columns[name.Range["Khoi_luong"].RightColumnIndex - 1].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    name.Columns[name.Range["Khoi_luong"].RightColumnIndex - 1 - dt_ps.Rows.Count].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    name.Columns[name.Range["Thanh_tien"].RightColumnIndex - 1].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    name.Columns[name.Range["Thanh_tien"].RightColumnIndex - 1 - dt_ps.Rows.Count].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    name.Columns[name.Range["Don_gia"].RightColumnIndex - 1 - dt_ps.Rows.Count].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    name.Columns[name.Range["Don_gia"].RightColumnIndex - 1].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                    name.MergeCells(name.Range[merge_KL]);
                    name.MergeCells(name.Range[merge_TT]);
                    name.MergeCells(name.Range[merge_DG]);
                }
            }
            spsheet_Thongtinchinh.EndUpdate();
            //           spsheet_Thongtinchinh.Document.History.IsEnabled = true;
        }
        static bool isFirstTime = true;
        private void Fcn_TaoCotNhaThauPhuToDoi(string NameSheet, bool Convert, int X, int Y, int Z)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;
            Worksheet ws = spsheet_ThanhToanA_B.Document.Worksheets[NameSheet];
            Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource as List<DonViThucHien>).Where(x => x.Table != MyConstant.TBL_THONGTINNHATHAU).ToList();
            var Group = DVTH.GroupBy(x => x.Table);
            string mergeNTP = "", mergeTD = "", HeaDingBegin = "", HeaDingEnd = "";
            int coutNTP = 0, count = 1;
            spsheet_ThanhToanA_B.BeginUpdate();
            //           spsheet_ThanhToanA_B.Document.History.IsEnabled = false;
            foreach (var str in NAME_COL)
            {
                if (str.Key.Contains(MyConstant.TBL_THONGTINNHATHAUPHU) || str.Key.Contains(MyConstant.TBL_THONGTINTODOITHICONG))
                {
                    NAME_COL = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
                    ws.Columns.Remove(NAME_COL[str.Key]);
                }
            }
            foreach (var item in Group)
            {
                foreach (var row in item)
                {
                    ws.Columns.Insert(ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex, 1, ColumnFormatMode.FormatAsNext);
                    ws.Rows[Z][ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Value = row.Ten;
                    ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Visible = true;
                    ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Font.Color = Color.LightGray;
                    ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].NumberFormat = "0.##";
                    ws.Rows[0][ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Value = row.CodeFk;
                    //ws.Rows[1][ws.Range["Thanh_tien"].RightColumnIndex - 1].Value = "TT_Thành tiền " + item["Ten"].ToString();
                }
                if (item.Key == MyConstant.TBL_THONGTINNHATHAUPHU)
                {
                    ws.Rows[X][ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Value = "Nhà thầu phụ (Nhận Thầu)";
                    coutNTP = item.Count();
                    mergeNTP = $"{ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Heading}{Z}:{ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - coutNTP].Heading}{Y}";
                    HeaDingBegin = ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - coutNTP].Heading;
                }
                else
                {
                    ws.Rows[X][ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Value = "Tổ đội (Nhận Thầu)";
                    mergeTD = $"{ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - item.Count()].Heading}{Y}:{ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Heading}{Z}";
                    HeaDingEnd = ws.Columns[ws.Range[MyConstant.TBL_QUYETTHONGTIN].RightColumnIndex - 1].Heading;
                }
            }
            ws.MergeCells(ws.Range[mergeNTP]);
            ws.MergeCells(ws.Range[mergeTD]);
            if (Convert)
                ws.Rows[15][NAME_COL["ThucHienKyNay"]].Formula = $"SUM({HeaDingBegin}16:{HeaDingEnd}16)";
            spsheet_ThanhToanA_B.EndUpdate();
            //           spsheet_ThanhToanA_B.Document.History.IsEnabled = true;
        }
        private void fcn_updateThanhPhanThamGia()
        {
            m_isTPTGChanged = false;
            string dbstring = $"SELECT * FROM {MyConstant.TBL_THONGTINDUAN} WHERE \"Code\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
            for (int i = 5; i > 0; i--)
                dt.Columns.RemoveAt(i);
            data_TPTG_ChuDauTu.DataSource = dt;
            data_TPTG_ChuDauTu.Columns[0].Visible = false;

            foreach (DataGridView dgv in m_DicDataThanhPhanThamGia.Keys)
            {
                if (dgv == data_TPTG_ChuDauTu)
                    continue;
                dbstring = $"SELECT * FROM {m_DicDataThanhPhanThamGia[dgv]} WHERE \"CodeDuAn\"='{spsheet_Thongtinchinh.Document.Range["Code"].Value}'";
                dt = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                dgv.DataSource = dt;
            }
        }

        Dictionary<string, List<BieuDoDanhSachDACT>> dicBieuDoKL = new Dictionary<string, List<BieuDoDanhSachDACT>>();
        Dictionary<string, List<BieuDoDanhSachDACT>> dicBieuDoTaiChinh = new Dictionary<string, List<BieuDoDanhSachDACT>>();

        private void fcn_updateDanhSachDuAnCongTrinh()
        {
            //data_DanhSachDuAnCongTrinh.CellValueChanged -= data_DanhSachDuAnCongTrinh_CellValueChanged;
            WaitFormHelper.ShowWaitForm("Đang cập nhập giá trị toàn hệ thống, Vui lòng chờ!!!!!!!");
            string dbstring = $"SELECT {MyConstant.TBL_THONGTINCONGTRINH}.Code, {MyConstant.TBL_THONGTINCONGTRINH}.Ten AS TenCongTrinh, {MyConstant.TBL_THONGTINCONGTRINH}.DiaChi, " +
                $"{MyConstant.TBL_THONGTINCONGTRINH}.DaiDien, {MyConstant.TBL_THONGTINCONGTRINH}.DienThoai, TenDuAn " +
                $"FROM {MyConstant.TBL_THONGTINCONGTRINH} " +
                $"INNER JOIN {MyConstant.TBL_THONGTINDUAN} " +
                $"ON {MyConstant.TBL_THONGTINCONGTRINH}.CodeDuAn = {MyConstant.TBL_THONGTINDUAN}.Code " +
                $"ORDER BY {MyConstant.TBL_THONGTINDUAN}.SortId ASC";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
            List<DanhSachDACTDto> Source = DuAnHelper.ConvertToList<DanhSachDACTDto>(dt);
            dbstring = $"SELECT * FROM {MyConstant.TBL_THONGTINNHATHAU} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dtNT = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
            if (dtNT.Rows.Count == 0)
            {
                WaitFormHelper.CloseWaitForm();
                return;
            }
            Source.ForEach(x => x.NhaThauChinh = dtNT.Rows[0]["Ten"].ToString());
            dbstring = $"SELECT * FROM {MyConstant.TBL_THONGTINDUAN} WHERE \"Code\"='{slke_ThongTinDuAn.EditValue}'";
            dtNT = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
            Source.ForEach(x => x.DaiDien = dtNT.Rows[0]["DaiDien"].ToString());
            dicBieuDoKL.Clear();
            dicBieuDoTaiChinh.Clear();
            foreach (DataRow dr in dt.Rows)
            {
                string code = dr["Code"].ToString();
                dbstring = $"SELECT * FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeCongTrinh\"='{code}'";
                DataTable dtHM = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                string lstHM = MyFunction.fcn_Array2listQueryCondition(dtHM.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbstring = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                $"INNER JOIN {TDKH.TBL_DanhMucCongTac} " +
                $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac = {TDKH.TBL_DanhMucCongTac}.Code " +
                $"WHERE {TDKH.TBL_DanhMucCongTac}.CodeHangMuc IN ({lstHM}) ";
                DataTable dtCT = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                string[] lsCodeCongTac = dtCT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray();
                //dbstring = $"SELECT *  FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE \"CodeCongTacTheoGiaiDoan\" IN ({string.Join(", ", lsCodeCongTac)}) ";
                var dtKLHN = MyFunction.Fcn_CalKLKHNew(Common.Enums.TypeKLHN.CongTac, lsCodeCongTac);
                //DataTable dtKLHN = MyFunction.Fcn_CalKLKH(dtCT, "Code");
                if (dtKLHN == null)
                    continue;
                double KLHD = dtCT.AsEnumerable().Sum(x => double.Parse(x["KhoiLuongHopDongChiTiet"].ToString()));
                double KLKH = dtKLHN.AsEnumerable().Where(x => x.Ngay <= DateTime.Now).Sum(x => x.KhoiLuongKeHoach) ?? 0;
                double KLTC = dtKLHN.AsEnumerable().Where(x => x.Ngay <= DateTime.Now).Sum(x => x.KhoiLuongThiCong) ?? 0;
                double Sum = KLHD + KLKH + KLTC;
                long TTKH = dtKLHN.AsEnumerable().Where(x => x.Ngay <= DateTime.Now).Sum(x => x.ThanhTienKeHoach) ?? 0;
                long TTTC = dtKLHN.AsEnumerable().Where(x => x.Ngay <= DateTime.Now).Sum(x => x.ThanhTienThiCong) ?? 0;
                long TTHD = dtCT.AsEnumerable().Sum(x => (long)Math.Round(double.Parse(x["KhoiLuongHopDongChiTiet"].ToString()) * double.Parse(x["DonGia"].ToString())));
                dbstring = $"SELECT * FROM {ThuChiTamUng.TBL_THUCHITAMUNG_KHOANCHI} WHERE \"CodeCongTrinh\"='{code}' AND \"CheckDaChi\"='True'";
                DataTable dtKC = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                dbstring = $"SELECT * FROM {ThuChiTamUng.TBL_THUCHITAMUNG_KHOANTHU} WHERE \"CodeCongTrinh\"='{code}'  AND \"CheckDaThu\"='True'";
                DataTable dtKT = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                long TTKC = dtKC.AsEnumerable().Where(x => x["GiaTriGiaiChi"] != DBNull.Value).Sum(x => long.Parse(x["GiaTriGiaiChi"].ToString()));
                long TTKT = dtKT.AsEnumerable().Where(x => x["ThucTeThu"] != DBNull.Value).Sum(x => long.Parse(x["ThucTeThu"].ToString()));
                double SumTT = TTKH + TTTC + TTHD + TTKC + TTKT;

                List<BieuDoDanhSachDACT> ls = new List<BieuDoDanhSachDACT>()
                {
                    new BieuDoDanhSachDACT()
                    {
                        Ten = "Hợp đồng",
                        SoLuong =100*Math.Round(KLHD/Sum,2)
                    },

                    new BieuDoDanhSachDACT()
                    {
                        Ten = "Kế hoạch",
                        SoLuong =100*Math.Round(KLKH/Sum,2)
                    },
                    new BieuDoDanhSachDACT()
                    {
                        Ten = "Thi Công",
                        //SoLuong =100- 100*Math.Round(KLKH/Sum,2)-100*Math.Round(KLHD/Sum,2)
                        SoLuong=100*Math.Round(KLTC/Sum,2)
                    }
                };
                List<BieuDoDanhSachDACT> lsTT = new List<BieuDoDanhSachDACT>()
                {
                    new BieuDoDanhSachDACT()
                    {
                        Ten = "Hợp đồng",
                        SoLuong =100*Math.Round(TTHD/SumTT,2)
                    },

                    new BieuDoDanhSachDACT()
                    {
                        Ten = "Kế hoạch",
                        SoLuong =100*Math.Round(TTKH/SumTT,2)
                    },
                    new BieuDoDanhSachDACT()
                    {
                        Ten = "Đã thu",
                        SoLuong =100*Math.Round(TTKT/SumTT,2)
                    },
                    new BieuDoDanhSachDACT()
                    {
                        Ten = "Đã chi",
                        SoLuong =100*Math.Round(TTKC/SumTT,2)
                    },
                    new BieuDoDanhSachDACT()
                    {
                        Ten = "Thi Công",
                        //SoLuong =100- 100*Math.Round(TTHD/SumTT,2)-100*Math.Round(TTKH/SumTT,2)-100*Math.Round(TTKC/SumTT,2)-100*Math.Round(TTKT/SumTT,2)
                        SoLuong =100*Math.Round(TTTC/SumTT,2)
                    }
                };
                dicBieuDoKL.Add(code, ls);
                dicBieuDoTaiChinh.Add(code, lsTT);
            }


            gc_DanhSachDuAnCongTrinh.DataSource = Source;
            gv_DanhSachDACT.ExpandAllGroups();
            WaitFormHelper.CloseWaitForm();
        }
        private void dgv_TPTG_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex < 0)
                return;
            if (e.ColumnIndex < 0 || e.ColumnIndex > 10)
                return;
            m_isTPTGChanged = true;
            DataGridView dgv = sender as DataGridView;
            string dbString = $"UPDATE {m_DicDataThanhPhanThamGia[dgv]} SET \"{dgv.Columns[e.ColumnIndex].HeaderText}\"='{dgv.Rows[e.RowIndex].Cells[e.ColumnIndex].Value}' WHERE \"Code\"='{dgv.Rows[e.RowIndex].Cells["Code"].Value}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        }



        private void btn_TTDA_DDCDT_TimKiem_Click(object sender, EventArgs e)
        {
            (data_TPTG_DDChuDauTu.DataSource as DataTable).DefaultView.RowFilter = $"[Ten] LIKE '%{txt_TTDA_DDCDT_DDChuDauTu.Text}%' AND [DaiDien] LIKE '%{txt_TTDA_DDCDT_PhuTrach.Text}%'";
        }

        private void btn_TTDA_TCAB_TimKiem_Click(object sender, EventArgs e)
        {
            (data_TPTG_ThauChinh_AB.DataSource as DataTable).DefaultView.RowFilter = $"[Ten] LIKE '%{txt_TTDA_TCAB_NhaThauChinh.Text}%' AND [DaiDien] LIKE '%{txt_TTDA_TCAB_NhaThauChinh.Text}%'";

        }

        private void btn_TTDA_TPBB_TimKiem_Click(object sender, EventArgs e)
        {
            (data_TPTG_Thauphu_BB.DataSource as DataTable).DefaultView.RowFilter = $"[Ten] LIKE '%{txt_TTDA_TPBB_NhaThauPhu.Text}%' AND [DaiDien] LIKE '%{txt_TTDA_TPBB_NhaThauPhu.Text}%'";

        }

        private void txt_TTDA_TD_TimKiem_Click(object sender, EventArgs e)
        {
            (data_TPTG_ToDoi_BC.DataSource as DataTable).DefaultView.RowFilter = $"[Ten] LIKE '%{txt_TTDA_TD_ToDoi.Text}%' AND [DaiDien] LIKE '%{txt_TTDA_TD_ToDoi.Text}%'";

        }

        private void btn_TTDA_NCC_TimKiem_Click(object sender, EventArgs e)
        {
            (data_TPTG_NhaCungCap_BC.DataSource as DataTable).DefaultView.RowFilter = $"[Ten] LIKE '%{txt_TTDA_NCC_NhaCungCap.Text}%' AND [DaiDien] LIKE '%{txt_TTDA_NCC_NhaCungCap.Text}%'";

        }

        private void bto_DACT_TimKiem_Click(object sender, EventArgs e)
        {
            ////(data_DanhSachDuAnCongTrinh.DataSource as DataTable).DefaultView.RowFilter = $"[Ten] LIKE '%{txt_DACT_CongTrinh.Text}%' AND [DienThoai] LIKE '%{txt_DACT_LienHe.Text}%'";
            //CurrencyManager currencyManager = (CurrencyManager)BindingContext[data_DanhSachDuAnCongTrinh.DataSource];
            //currencyManager.SuspendBinding();
            //foreach (DataGridViewRow row in data_DanhSachDuAnCongTrinh.Rows)
            //{
            //    if (row.Cells["DuAn"].Value.ToString().ToLower().Contains(txt_DACT_DuAn.Text.ToLower())
            //        && row.Cells["Ten"].Value.ToString().ToLower().Contains(txt_DACT_CongTrinh.Text.ToLower())
            //        && row.Cells["DienThoai"].Value.ToString().ToLower().Contains(txt_DACT_LienHe.Text.ToLower()))
            //        row.Visible = true;
            //    else
            //        row.Visible = false;
            //}

            //currencyManager.ResumeBinding();
        }

        private void data_DanhSachDuAnCongTrinh_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            /*try
            {
                string header = data_DanhSachDuAnCongTrinh.Columns[e.ColumnIndex].HeaderText;
                string codeCT = data_DanhSachDuAnCongTrinh.Rows[e.RowIndex].Cells["Code"].Value.ToString();
                string TenCT = data_DanhSachDuAnCongTrinh.Rows[e.RowIndex].Cells["CongTrinh"].Value.ToString();

                if (header == "Thành phần tham gia")
                {
                    Form_TTCT_ThanhPhanThamGia form_TPTG = new Form_TTCT_ThanhPhanThamGia(codeCT, MyConstant.TYPE_THANHPHANTHAMGIA);
                    form_TPTG.ShowDialog();
                }
                else if (header == "Nhóm tham gia")
                {
                    Form_TTCT_ThanhPhanThamGia form_TPTG = new Form_TTCT_ThanhPhanThamGia(codeCT, MyConstant.TYPE_NHOMTHAMGIA);
                    form_TPTG.ShowDialog();
                }
                else if (header == "Xoa")
                {
                    string dbString = $"DELETE FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"Code\"='{data_DanhSachDuAnCongTrinh.Rows[e.RowIndex].Cells["Code"].Value}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                    dbString = $"DELETE FROM {MyConstant.TBL_THONGTIN_NHOMTHAMGIA} WHERE \"CodeCongTrinh\"='{data_DanhSachDuAnCongTrinh.Rows[e.RowIndex].Cells["Code"].Value}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                    dbString = $"DELETE FROM {MyConstant.TBL_THONGTIN_THANHPHANTHAMGIA} WHERE \"CodeCongTrinh\"='{data_DanhSachDuAnCongTrinh.Rows[e.RowIndex].Cells["Code"].Value}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                    fcn_updateThanhPhanThamGia();
                    fcn_updateDanhSachDuAnCongTrinh();
                    m_isTPTGChanged = true;
                }
            }
            catch
            {

            }*/
        }

        private void tab_THONGTINDUAN_THANHPHAN_SelectedIndexChanged(object sender, EventArgs e)
        {
            //string text = tab_THONGTINDUAN_THANHPHAN.SelectedTab.Text;
            //switch (text)
            //{
            //    case "Thông tin":
            //        if (m_isTPTGChanged)
            //            fcn_updateSheetThongTinChinh();
            //        break;
            //    case "Thành phần tham gia":
            //        if (m_isThongTinChinhChanged)
            //            fcn_updateThanhPhanThamGia();
            //        break;
            //    default:
            //        break;
            //}
        }

        private void data_DanhSachDuAnCongTrinh_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //            if (e.RowIndex < 0)
            //                return;

            //            m_isTPTGChanged = true;
            //            DataGridView dgv = sender as DataGridView;
            //            DataGridViewCell cell = dgv.Rows[e.RowIndex].Cells[e.ColumnIndex];
            //            string header = data_DanhSachDuAnCongTrinh.Columns[e.ColumnIndex].HeaderText;
            //            string codeCT = data_DanhSachDuAnCongTrinh.Rows[e.RowIndex].Cells["Code"].Value.ToString();
            //            //string TenCT = data_DanhSachDuAnCongTrinh.Rows[e.RowIndex].Cells["CongTrinh"].Value.ToString();
            //            string newVal = dgv.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString();

            //            string dbString;
            //#pragma warning disable CS0168 // The variable 'dt' is declared but never used
            //            DataTable dt;
            //#pragma warning restore CS0168 // The variable 'dt' is declared but never used
            //            switch (header)
            //            {
            //                case "ThauChinh":
            //                    newVal = (cell as DataGridViewComboBoxCell).Value.ToString();
            //                    break;
            //                default:
            //                    break;
            //            }
            //            dbString = $"UPDATE {MyConstant.TBL_THONGTINCONGTRINH} SET \"{dgv.Columns[e.ColumnIndex].HeaderText}\"='{newVal}' WHERE \"Code\"='{codeCT}'";
            //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        }


        private void data_TPTG_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

            DataGridView dgv = sender as DataGridView;
            string header = dgv.Columns[e.ColumnIndex].HeaderText;
            if (header != "Xoa")
                return;
            string dbString = $"DELETE FROM {m_DicDataThanhPhanThamGia[dgv]} WHERE \"Code\"='{dgv.Rows[e.RowIndex].Cells["Code"].Value}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            fcn_updateThanhPhanThamGia();
            m_isTPTGChanged = true;
        }
        private void data_TPTG_ChuDauTu_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

            DataGridView dgv = sender as DataGridView;
            string header = dgv.Columns[e.ColumnIndex].HeaderText;
            if (header != "Xoa")
                return;
            string dbString = $"DELETE FROM {m_DicDataThanhPhanThamGia[dgv]} WHERE \"Code\"='{dgv.Rows[e.RowIndex].Cells["Code"].Value}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            fcn_updateThanhPhanThamGia();
            m_isTPTGChanged = true;
        }

        private void dgv_HMCV_CacHangMucCongViec_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex < 0)
                return;
            (sender as DataGridView).Rows[e.RowIndex].Selected = true;
            //string codeDauViec = dgv_GV_HMCV_CacHangMucCongViec.Rows[e.RowIndex].Cells["Code"].Value.ToString();
        }

        private void fcn_GiaoViec_UpdateRowToDb(int startInd = -1)
        {
            IWorkbook wb = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            CellRange range = ws.Range[MyConstant.Range_KeHoach];
            if (startInd < 0)
                startInd = range.TopRowIndex + 1;

            int endInd = range.BottomRowIndex;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(range);

            //string dbString
            //if (rg_GV_DauViec.GetDescription() == "Dự án")
            //{
            string dbStringBeforeFormat = $"UPDATE {{0}} SET \"RowIndex\" = '{{1}}' WHERE \"{{2}}\" = '{{3}}'";
            //}

            for (int i = startInd; i < endInd; i++)
            {
                Row crRow = ws.Rows[i];
                string typeRow = crRow[dic[GiaoViec.COL_TypeRow]].Value.ToString();
                string codeCT = crRow[dic[GiaoViec.COL_CodeCT]].Value.ToString();

                string tblDb, colCodeDb;
                if (typeRow == MyConstant.TYPEROW_CVCha)
                {
                    tblDb = GiaoViec.TBL_CONGVIECCHA;
                    colCodeDb = "CodeCongViecCha";
                }
                else if (typeRow == MyConstant.TYPEROW_CVCON)
                {
                    tblDb = GiaoViec.TBL_CONGVIECCON;
                    colCodeDb = "CodeCongViecCon";
                }
                else continue;

                string dbString = string.Format(dbStringBeforeFormat, tblDb, i, colCodeDb, codeCT);
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
        }

        private void fcn_updateAllSheetKeHoachCongViec(string codeCha = "")
        {
            //spsheet_GV_KH_ChiTietCacHMCongViec.CellValueChanged -= spsheet_GV_KH_ChiTietCacHMCongViec_CellValueChanged;
            ////try
            ////{

            //if (spsheet_GV_KH_ChiTietCacHMCongViec.IsCellEditorActive)
            //{
            //    BeginInvoke(new Action<SpreadsheetControl>((ss) =>
            //    {
            //        spsheet_GV_KH_ChiTietCacHMCongViec.CloseCellEditor(CellEditorEnterValueMode.Cancel);
            //    }), spsheet_GV_KH_ChiTietCacHMCongViec);
            //}
            ////spsheet_GV_KH_ChiTietCacHMCongViec.CloseCellEditor(CellEditorEnterValueMode.Cancel);
            ////}
            ////catch (Exception ex)
            ////{
            ////    Debug.WriteLine("BUG: " + ex);
            ////}

            //IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            //Worksheet ws = workbook.Worksheets[0];
            ////ws.SelectedCell = ws.Cells["A1"].FirstOrDefault();
            ////Lấy tất cả công việc cha
            ////if (dgv_GV_HMCV_CacHangMucCongViec.Rows[dgv_GV_HMCV_CacHangMucCongViec.SelectedCells[0].RowIndex].Cells["Code"].Value == null)
            ////    return;
            //string codeDauMuc = cbb_DauViecNho.SelectedValue.ToString();
            //string dkThem = (codeCha == "") ? "" : $"AND \"CodeCongViecCha\" = '{codeCha}'";
            //string dbString = "";


            //if (rg_ThucHienDuAn.GetDescription() == "Thi công")
            //{
            //    dbString = $"SELECT \"CodeCongViecCha\",\"MaDinhMuc\", \"TenCongViec\", \"KhoiLuongKeHoach\",{GiaoViec.TBL_CONGVIECCHA}.TrangThai, \"NgayBatDau\", \"NgayKetThuc\", \"KhoiLuongHopDong\", \"KhoiLuongKeHoach\" " +
            //        $"FROM {GiaoViec.TBL_CONGVIECCHA} " +
            //        $"INNER JOIN {MyConstant.TBL_THONGTINHANGMUC} " +
            //        $"ON {GiaoViec.TBL_CONGVIECCHA}.CodeHangMuc = {MyConstant.TBL_THONGTINHANGMUC}.Code " +
            //        $"LEFT JOIN {MyConstant.TBL_THONGTINCONGTRINH} " +
            //        $"ON {MyConstant.TBL_THONGTINHANGMUC}.CodeCongTrinh = {MyConstant.TBL_THONGTINCONGTRINH}.Code " +
            //        $" WHERE {MyConstant.TBL_THONGTINCONGTRINH}.CodeDuAn = '{slke_ThongTinDuAn.EditValue}'";
            //}
            //else
            //{
            //    dbString = $"SELECT \"CodeCongViecCha\",\"MaDinhMuc\", \"TenCongViec\", \"KhoiLuongKeHoach\",{GiaoViec.TBL_CONGVIECCHA}.TrangThai, \"NgayBatDau\", \"NgayKetThuc\", \"KhoiLuongHopDong\", \"KhoiLuongKeHoach\" " +
            //        $"FROM {GiaoViec.TBL_CONGVIECCHA} " +
            //        $"INNER JOIN {GiaoViec.TBL_DauViecNho} " +
            //        $"ON {GiaoViec.TBL_CONGVIECCHA}.CodeDauMuc = {GiaoViec.TBL_DauViecNho}.Code " +
            //        $"LEFT JOIN {GiaoViec.TBL_DauViecLon} " +
            //        $"ON {GiaoViec.TBL_CONGVIECCHA}.TrangThai != \"Chưa thực hiện\" AND {GiaoViec.TBL_DauViecLon}.CodeDuAn = '{slke_ThongTinDuAn.EditValue}'";
            //}

            //DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            ////spsheet_GV_KH_ChiTietCacHMCongViec.LoadDocument(spsheet_GV_KH_ChiTietCacHMCongViec.Document.Path);
            //spsheet_GV_KH_ChiTietCacHMCongViec.BeginUpdate();
            //if (workbook.Range["DanhSachCongViec"].RowCount > 2 && codeCha == "")
            //{
            //    ws.Rows.Remove(workbook.Range["DanhSachCongViec"].TopRowIndex + 1, workbook.Range["DanhSachCongViec"].RowCount - 2);
            //}
            //foreach (DataRow row in dt.Rows)
            //{
            //    fcn_updateSheetCongViecCha(row);
            //}
            //spsheet_GV_KH_ChiTietCacHMCongViec.EndUpdate();
            //spsheet_GV_KH_ChiTietCacHMCongViec.CellValueChanged += spsheet_GV_KH_ChiTietCacHMCongViec_CellValueChanged;
            //fcn_KHGV_loadLaiCongTacChaCon();
            //spsheet_GV_KH_ChiTietCacHMCongViec.Refresh();
        }


        private List<CellValue> fcn_getListCellValueFromCbb(ComboBox cbb)
        {
            var ls = cbb.DataSource as List<KeyValuePair<string, string>>;
            List<CellValue> lsValue = new List<CellValue>();

            foreach (KeyValuePair<string, string> item in ls)
            {
                if (item.Value != "Add" && item.Value != "All")
                    lsValue.Add(item.Value);
            }
            return lsValue;
        }



        private string fcn_getListUserFromDb1Str(string code2get, string colOfkey, string tbl2get)
        {
            string dbString = $"SELECT * FROM {tbl2get} WHERE \"{colOfkey}\"='{code2get}'";
            DataTable dtNTG = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string Code_NTG = "";

            foreach (DataRow rNTG in dtNTG.Rows)
            {
                Code_NTG += $", '{rNTG["CodeNguoiDung"]}'";
            }

            if (Code_NTG != "")
                Code_NTG = Code_NTG.Remove(0, 2);

            dbString = $"SELECT \"FullName\" FROM \"{MyConstant.TBL_FROMSERVER_USER}\" WHERE \"Code\" IN ({Code_NTG})";
            DataTable dtUserTG = DataProvider.InstanceServer.ExecuteQuery(dbString);

            string NTG = "";
            foreach (DataRow rNTG in dtUserTG.Rows)
            {
                NTG += $", {rNTG["FullName"]}";
            }
            return NTG;
        }


        /// <summary>
        /// Chuột phải vào công việc
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void spsheet_GV_KH_ChiTietCacHMCongViec_PopupMenuShowing(object sender, DevExpress.XtraSpreadsheet.PopupMenuShowingEventArgs e)
        {
            IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            CellRange rangeDSCongViec = workbook.Range[MyConstant.Range_KeHoach];
            CellRange cellsSelected = ws.SelectedCell;
            Cell firstCellSelected = cellsSelected.FirstOrDefault();
            string codeCV = ws.Rows[firstCellSelected.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();
            string typeRow = ws.Rows[firstCellSelected.RowIndex][dic[GiaoViec.COL_TypeRow]].Value.ToString();

            ls_SelectedInSpSheet.Clear();

            //#if DEBUG
            //#else
            //            e.Menu.Items.Clear();
            //#endif

            if (rg_GV_DauViec.GetDescription() == "Thi công")
            {
                SpreadsheetMenuItem Item_LayDuLieuTuTDKH = new SpreadsheetMenuItem("Lấy lại dữ liệu từ TDKH", new EventHandler(fcn_handle_GV_GetDuLieuGVTuTDKH));
                e.Menu.Items.Add(Item_LayDuLieuTuTDKH);

                SpreadsheetMenuItem Item_LayCongTacDaDocVao = new SpreadsheetMenuItem("LẤY CÔNG TÁC ĐÃ ĐỌC VÀO!", new EventHandler(fcn_handle_GV_LayDuLieuDaDocVao));
                e.Menu.Items.Add(Item_LayCongTacDaDocVao);
            }

            SpreadsheetMenuItem Item_GopCongTacCha = new SpreadsheetMenuItem("Nhóm công tác cha", new EventHandler(fcn_handle_GV_GopCongTacCha));
            e.Menu.Items.Add(Item_GopCongTacCha);

            SpreadsheetMenuItem Item_GopCongTacCon = new SpreadsheetMenuItem("Nhóm công tác con", new EventHandler(fcn_handle_GV_GopCongTacCon));
            e.Menu.Items.Add(Item_GopCongTacCon);

            if (typeRow == MyConstant.TYPEROW_CVCha)
            {
                if (!ws.Columns[dic[GiaoViec.COL_RowCha]].Search((firstCellSelected.RowIndex + 1).ToString(), MyConstant.MySearchOptions).Any())
                {
                    SpreadsheetMenuItem Item_ChiaKhoiLuongThiCong = new SpreadsheetMenuItem("Chia khối lượng thi công", new EventHandler(fcn_handle_GV_ChiaKhoiLuongThiCong));
                    e.Menu.Items.Add(Item_ChiaKhoiLuongThiCong);
                }
            }

            if (typeRow == MyConstant.TYPEROW_CVCha || typeRow == MyConstant.TYPEROW_CVCON)
            {
                SpreadsheetMenuItem ChiaPhatSinh = new SpreadsheetMenuItem("Thay đổi đơn giá thi công", spsheet_GV_KH_ChiTietCacHMCongViec_ThayDoiDonGiaThiCong);
                e.Menu.Items.Add(ChiaPhatSinh);
            }
            /*            Guid guid;
                        if (typeRow == MyConstant.TYPEROW_KHGV_THEMMOI)
                        {
                            SpreadsheetMenuItem Item_PasteCVCoChiTiet = new SpreadsheetMenuItem("Dán công việc có chi tiết", new EventHandler(fcn_handle_GV_QTMH_PasteCacCongTacVoiChiTiet));
                            e.Menu.Items.Add(Item_PasteCVCoChiTiet);
                            return;
                        }*/

            //if (rangeDSCongViec.Contains(firstCellSelected) && cellsSelected.RowCount == 1)
            //{
            //    //bool isCVCon = Guid.TryParse(codeCVCon, out guid);
            //    //bool isCVCha = Guid.TryParse(codeCVCha, out guid);

            //    if (Guid.TryParse(codeCV, out guid) && typeRow == MyConstant.TYPEROW_KHGV_CVCha)
            //    {
            //        //SpreadsheetMenuItem Item_ThemCVCon = new SpreadsheetMenuItem("Thêm công việc con mới", new EventHandler(fcn_handle_GiaoViec_KHGV_Popup_ThemCVCon));
            //        SpreadsheetMenuItem Item_XoaCVCha = new SpreadsheetMenuItem("Xóa công việc cha này", new EventHandler(fcn_handle_GiaoViec_KHGV_Popup_XoaCongViecCha));
            //        //e.Menu.Items.Add(Item_ThemCVCon);
            //        e.Menu.Items.Add(Item_XoaCVCha);

            //    }

            //    //if (isCVCon && isCVCha)
            //    //{

            //    //}
            //}
            //else
            //    return;

            /*            SpreadsheetMenuItem Item_DiChuyenLen = new SpreadsheetMenuItem("Di chuyển lên", new EventHandler(fcn_handle_GV_DiChuyenCongTacLen));
                        SpreadsheetMenuItem Item_DiChuyenXuong = new SpreadsheetMenuItem("Di chuyển xuống", new EventHandler(fcn_handle_GV_DiChuyenCongTacXuong));*/
            SpreadsheetMenuItem Item_BatDauThucHien = new SpreadsheetMenuItem("Bắt đầu thực hiện các công tác đã chọn", new EventHandler(fcn_handle_GV_BatDauThucHienDuAn));

            /*            e.Menu.Items.Add(Item_DiChuyenLen);
                        e.Menu.Items.Add(Item_DiChuyenXuong);*/
            e.Menu.Items.Add(Item_BatDauThucHien);

            for (int i = rangeDSCongViec.TopRowIndex + 1; i < rangeDSCongViec.BottomRowIndex - 1; i++)
            {
                if (ws.Rows[i][dic[GiaoViec.COL_Chon]].Value == true)
                    ls_SelectedInSpSheet.Add(i);
            }



            if (ls_SelectedInSpSheet.Count == 0)
                return;


            //Kiểm tra xem đang chọn 1 dòng hay nhiều dòng
            //if (ls_SelectedInSpSheet.Count == 1)
            //{
            //    //Kiểm tra xem đang chọn công việc con hay công việc cha

            //    if (Guid.TryParse(worksheet.Cells[$"{MyConstant.COL_HD_CodeCT}{ls_SelectedInSpSheet[0] + 1}"]
            //        .Value.ToString(), out guid))
            //    {
            /*                    SpreadsheetMenuItem Item_XoaCVCon = new SpreadsheetMenuItem("Xóa công việc con", new EventHandler(fcn_handle_GiaoViec_KHGV_Popup_XoaCongViecCon));
                                e.Menu.Items.Add(Item_XoaCVCon);
                            //}
                            //else
                            //{
                                SpreadsheetMenuItem Item_ThemCVCon = new SpreadsheetMenuItem("Thêm công việc con mới", new EventHandler(fcn_handle_GiaoViec_KHGV_Popup_ThemCVCon));
                                SpreadsheetMenuItem Item_XoaCVCha = new SpreadsheetMenuItem("Xóa công việc cha", new EventHandler(fcn_handle_GiaoViec_KHGV_Popup_XoaCongViecCha));
                                e.Menu.Items.Add(Item_ThemCVCon);
                                e.Menu.Items.Add(Item_XoaCVCha);*/
            //}
            //}
            //else
            //{
            /*                SpreadsheetMenuItem Item_CopyCVCoChiTiet = new SpreadsheetMenuItem("Sao chép công việc có chi tiết", new EventHandler(fcn_handle_GV_QTMH_CopyCacCongTacVoiChiTiet));


                            e.Menu.Items.Add(Item_CopyCVCoChiTiet);

                            SpreadsheetMenuItem Item_GopCongViec = new SpreadsheetMenuItem("Gộp công việc", new EventHandler(fcn_handle_GiaoViec_KHGV_Popup_GopCongViec));
                            e.Menu.Items.Add(Item_GopCongViec);*/
            //}
        }

        private void fcn_handle_GV_ChiaKhoiLuongThiCong(object sender, EventArgs e)
        {
            int solanthicong = 0;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            string colNgayBatDau = GiaoViec.COL_NgayBatDau;
            string colNgayKetThuc = GiaoViec.COL_NgayKetThuc;

            if (rg_GV_DauViec.GetAccessibleName() == "DuAn")
            {
                colNgayBatDau = GiaoViec.COL_NgayBatDauThiCong;
                colNgayKetThuc = GiaoViec.COL_NgayKetThucThiCong;
            }


            //do
            //{
            var rs = DevExpress.XtraEditors.XtraInputBox.Show("Nhập số lần thi công", "Nhập số lần thi công", "1");
            if (rs != String.Empty)
            {
                if (int.TryParse(rs, out solanthicong))
                {
                    if (solanthicong <= 0 || solanthicong >= 11)
                    {
                        MessageShower.ShowInformation("Vui lòng nhập số lần thi công trong khoảng từ 1 đến 10");
                        //continue;
                    }
                    else
                    {
                        Row crRow = ws.Rows[ws.SelectedCell.First().RowIndex];
                        string codeCT = crRow[dic[GiaoViec.COL_CodeCT]].Value.ToString();
                        string tenCT = crRow[dic[GiaoViec.COL_TenCongViec]].Value.ToString();
                        double KLKeHoach = double.Parse(crRow[dic[GiaoViec.COL_KLKeHoach]].Value.ToString());
                        double KLHopDong = double.Parse(crRow[dic[GiaoViec.COL_KLHopDong]].Value.ToString());
                        string startDate = DateTime.Parse(crRow[dic[colNgayBatDau]].Value.ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                        string endDate = DateTime.Parse(crRow[dic[colNgayKetThuc]].Value.ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

                        for (int i = 1; i <= solanthicong; i++)
                        {
                            string dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCON} (\"CodeCongViecCon\", \"CodeCongViecCha\", \"TenCongViec\", \"KhoiLuongKeHoach\", \"KhoiLuongHopDong\",\"NgayBatDau\", \"NgayKetThuc\") VALUES " +
                                                $"('{Guid.NewGuid()}', '{codeCT}', @Ten, '{Math.Round(KLKeHoach / solanthicong, 2)}', '{Math.Round(KLHopDong / solanthicong, 2)}', '{startDate}', '{endDate}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { tenCT });
                        }
                        //break;
                    }
                }
                else
                {
                    MessageShower.ShowInformation("Giá trị không hợp lệ");
                    //continue;
                }
            }
            //else break;
            //} while (solanthicong <= 0 || solanthicong >= 11);

            GiaoViecHelper.LoadAllKeHoachGiaoViecThiCong();
        }

        private void fcn_handle_GV_LayDuLieuDaDocVao(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            CellRange range = wb.Range[MyConstant.Range_KeHoach];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            var ind = SpreadsheetHelper.FindPrevSameTypeInd(range, ws.SelectedCell.TopRowIndex, dic[GiaoViec.COL_RowCha], typeRowHeading: dic[GiaoViec.COL_TypeRow], crTypeRow: MyConstant.TYPEROW_HangMuc);

            if (ind == -1)
            {
                MessageShower.ShowWarning("Vui lòng chuột phải phía dưới 1 hạng mục để lấy công tác");
                return;
            }
            DonViThucHien DVTH = ctrl_DonViThucHienGiaoViec.SelectedDVTH as DonViThucHien;
            if (DVTH == null)
                return;
            Form_LayDauViecTuCSDL form = new Form_LayDauViecTuCSDL(MyConstant.CONST_TYPE_LAYDAUVIEC_FromGiaoViecChung, DVTH.TenGhep);
            form.m_truyenData = new Form_LayDauViecTuCSDL.DE_TRUYENDATABANGCONGTAC(btn_NhanDataTuDialogForm);
            form.ShowDialog();
        }
        private void fcn_handle_GV_GetDuLieuGVTuTDKH(object sender, EventArgs e)
        {
            XtraForm_LayThongTinTuTDKH form = new XtraForm_LayThongTinTuTDKH();
            if (form.ShowDialog() == DialogResult.OK)
            {
                GiaoViecHelper.LoadAllKeHoachGiaoViecThiCong();
            }
        }

        /// <summary>
        /// Nhóm các công tác cha
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fcn_handle_GV_GopCongTacCha(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            CellRange range = wb.Range[MyConstant.Range_KeHoach];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            string newGUID = Guid.NewGuid().ToString();

            //string crCodeCT = "", crCodeHM = "", crCodeNhom = "";
            //int crIndCha = -1;
            //bool isCrChaisCTMacDinh = true;
            string crCodeCT = "";
            string lsCongTac = "";
            bool groupAdded = false;
            string codeHangMuc = "";
            int indColTypeRow = ws.Range.GetColumnIndexByName(dic[GiaoViec.COL_TypeRow]);
            int crIndNhom = -1;
            for (int i = range.TopRowIndex; i < range.BottomRowIndex; i++)
            {
                Row crRow = ws.Rows[i];
                string typeRow = crRow[dic[GiaoViec.COL_TypeRow]].Value.ToString();
                if (typeRow == MyConstant.TYPEROW_CVCha)
                {
                    bool isChecked = false;
                    bool.TryParse(crRow[dic[GiaoViec.COL_Chon]].Value.ToString(), out isChecked);
                    if (!isChecked)
                    {
                        if (crCodeCT != "") //Dừng nếu phát hiện ngắt quảng công tác
                            goto exitVongLap;
                        else
                            continue;
                    }

                    //crRow[dic[TDKH.COL_Nhom]].SetValue(newGUID);
                    crCodeCT = crRow[dic[GiaoViec.COL_CodeCT]].Value.ToString();
                    lsCongTac += $", '{crCodeCT}'";
                    crRow.Font.Color = MyConstant.color_Row_NhomCongTac;

                    if (!groupAdded)
                    {
                        crIndNhom = i;
                        crRow.Insert();
                        crRow[dic[GiaoViec.COL_CodeCT]].SetValue(newGUID);
                        crRow[dic[GiaoViec.COL_MaDinhMuc]].SetValue(MyConstant.CONST_TYPE_NHOM);
                        crRow[dic[GiaoViec.COL_TenCongViec]].SetValue("Nhóm mới");
                        crRow[dic[GiaoViec.COL_TypeRow]].SetValue(MyConstant.TYPEROW_Nhom);
                        crRow[dic[GiaoViec.COL_RowCha]].Formula = ws.Rows[i + 1][dic[GiaoViec.COL_RowCha]].Formula;
                        crRow.Font.Color = MyConstant.color_Row_NhomCongTac;

                        Cell cell = ws.Range.FromLTRB(indColTypeRow, range.TopRowIndex, indColTypeRow, i)
                            .Search(MyConstant.TYPEROW_HangMuc).LastOrDefault();

                        if (cell is null)
                        {
                            MessageShower.ShowInformation("Lỗi tìm hạng mục");
                            return;
                        }

                        codeHangMuc = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                        groupAdded = true;
                        i++;
                    }


                    ws.Rows[i][dic[GiaoViec.COL_RowCha]].Formula = $"ROW(A{crIndNhom + 1})";
                }
            }
            exitVongLap:
            if (lsCongTac == "")
                return;
            lsCongTac = lsCongTac.Remove(0, 2);
            string dbString = $"INSERT INTO {GiaoViec.TBL_NhomCongTacCha} (\"Code\", \"Ten\", \"CodeHangMuc\") " +
                $"VALUES ('{newGUID}', 'Nhóm mới', '{codeHangMuc}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET \"CodeNhom\"='{newGUID}' WHERE \"CodeCongViecCha\" in ({lsCongTac})";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //GiaoViecHelper.LoadAllKeHoachGiaoViec();
        }

        private void fcn_handle_GV_GopCongTacCon(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            CellRange range = wb.Range[MyConstant.Range_KeHoach];
            string newGUID = Guid.NewGuid().ToString();
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            string crCodeCT = "";
            string lsCongTac = "";

            bool groupAdded = false;
            string codeCVCha = "";
            int indColTypeRow = ws.Range.GetColumnIndexByName(dic[GiaoViec.COL_TypeRow]);
            int crIndNhom = -1;
            for (int i = range.TopRowIndex; i < range.BottomRowIndex; i++)
            {
                Row crRow = ws.Rows[i];
                string typeRow = crRow[dic[GiaoViec.COL_TypeRow]].Value.ToString();
                if (typeRow == MyConstant.TYPEROW_CVCON)
                {
                    bool isChecked = false;
                    bool.TryParse(crRow[dic[GiaoViec.COL_Chon]].Value.ToString(), out isChecked);
                    if (!isChecked)
                    {
                        if (crCodeCT != "") //Dừng nếu phát hiện ngắt quảng công tác
                            goto exitVongLap;
                        else
                            continue;
                    }
                    //crRow[dic[TDKH.COL_Nhom]].SetValue(newGUID);
                    crCodeCT = crRow[dic[GiaoViec.COL_CodeCT]].Value.ToString();
                    lsCongTac += $", '{crCodeCT}'";
                    crRow.Font.Color = MyConstant.color_Row_NhomDienGiai;

                    if (!groupAdded)
                    {
                        crIndNhom = i;
                        crRow.Insert();
                        crRow[dic[GiaoViec.COL_CodeCT]].SetValue(newGUID);
                        crRow[dic[GiaoViec.COL_MaDinhMuc]].SetValue(MyConstant.CONST_TYPE_NHOMDIENGIAI);
                        crRow[dic[GiaoViec.COL_TenCongViec]].SetValue("Nhóm mới");
                        crRow[dic[GiaoViec.COL_TypeRow]].SetValue(MyConstant.TYPEROW_NhomDienGiai);
                        crRow[dic[GiaoViec.COL_RowCha]].Formula = ws.Rows[i + 1][dic[GiaoViec.COL_RowCha]].Formula;
                        crRow.Font.Color = MyConstant.color_Row_NhomDienGiai;

                        Cell cell = ws.Range.FromLTRB(indColTypeRow, range.TopRowIndex, indColTypeRow, i)
                            .Search(MyConstant.TYPEROW_CVCha).LastOrDefault();

                        if (cell is null)
                        {
                            MessageShower.ShowInformation("Lỗi tìm hạng mục");
                            return;
                        }

                        codeCVCha = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                        groupAdded = true;
                        i++;
                    }


                    ws.Rows[i][dic[GiaoViec.COL_RowCha]].Formula = $"ROW(A{crIndNhom + 1})";
                }
            }
            exitVongLap:
            if (lsCongTac == "")
                return;
            lsCongTac = lsCongTac.Remove(0, 2);
            string dbString = $"INSERT INTO {GiaoViec.TBL_NhomCongTacCon} (\"Code\", \"Ten\",\"CodeCongViecCha\") " +
                $"VALUES ('{newGUID}', 'Nhóm mới', '{codeCVCha}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCON} SET \"CodeNhom\"='{newGUID}' WHERE \"CodeCongViecCon\" in ({lsCongTac})";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //GiaoViecHelper.LoadAllKeHoachGiaoViec();
        }

        private void fcn_handle_GV_BatDauThucHienDuAn(object sender, EventArgs e)
        {
            string colNgayBatDau = GiaoViec.COL_NgayBatDau;
            string colNgayKetThuc = GiaoViec.COL_NgayKetThuc;

            if (rg_GV_DauViec.GetAccessibleName() == "DuAn")
            {
                colNgayBatDau = GiaoViec.COL_NgayBatDauThiCong;
                colNgayKetThuc = GiaoViec.COL_NgayKetThucThiCong;
            }

            DialogResult rs = MessageShower.ShowYesNoCancelQuestion("Bạn có muốn tự động mở rộng ngày kế hoạch cho các công tác đến hiện tại!", "Lựa chọn");
            bool isUpdateDate = false;

            switch (rs)
            {
                case DialogResult.Yes:
                    isUpdateDate = true;
                    break;
                case DialogResult.No:
                    break;
                default:
                    return;
            }

            IWorkbook wb = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            CellRange range = wb.Range[MyConstant.Range_KeHoach];
            string newGUID = Guid.NewGuid().ToString();
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            List<string> lsCongTacs = new List<string>();
            List<string> lsThiCongs = new List<string>();

            DateTime dateNow = DateTime.Now.Date;
            string dateNowString = dateNow.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string QTdauTien = MyConstant.TRANGTHAI_QTTH_DangThucHien;
            for (int i = range.TopRowIndex; i < range.BottomRowIndex; i++)
            {
                Row crRow = ws.Rows[i];
                string typeRow = crRow[dic[GiaoViec.COL_TypeRow]].Value.ToString();
                string crState = crRow[dic[GiaoViec.COL_TrangThai]].Value.ToString();
                string crCodeCT = crRow[dic[GiaoViec.COL_CodeCT]].Value.ToString();
                //if (typeRow == MyConstant.TYPEROW_KHGV_CVCON || typeRow == MyConstant.TYPEROW_KHGV_THICONG)

                bool isChecked = false;
                bool.TryParse(crRow[TDKH.COL_Chon].Value.ToString(), out isChecked);

                if (isChecked && crState == TrangThai.ChuaThucHien.GetEnumDisplayName())
                {
                    switch (typeRow)
                    {
                        case MyConstant.TYPEROW_CVCha:
                            lsCongTacs.Add(crCodeCT);
                            DateTime dateBD = crRow[dic[colNgayBatDau]].Value.DateTimeValue;
                            DateTime dateKT = crRow[dic[colNgayBatDau]].Value.DateTimeValue;
                            crRow[dic[GiaoViec.COL_TrangThai]].Value = QTdauTien;
                            if (isUpdateDate)
                            {
                                if (dateBD < DateTime.Now.Date)
                                {
                                    crRow[dic[colNgayBatDau]].SetValue(dateNow);
                                }

                                if (dateKT < DateTime.Now.Date)
                                {
                                    crRow[dic[colNgayKetThuc]].SetValue(dateNow);
                                }
                            }

                            break;
                        case GiaoViec.TYPEROW_KHGV_THICONG:
                            lsThiCongs.Add($"'{crCodeCT}'");
                            break;
                        default:
                            break;
                    }
                }

            }

            string lsCongTac = string.Join(", ", lsCongTacs.Select(x => $"'{x}'").ToArray());

            string lsThiCong = string.Join(", ", lsThiCongs.ToArray());

            //string QTdauTien = (MyFunction.fcn_GetSelectedDecriptionOfGroupRadio(rg_GV_DauViec) == MyConstant.CONST_LoaiQT_QTMH) ? MyConstant.TRANGTHAI_QTMH_DeXuat : MyConstant.TRANGTHAI_QTTH_DangThucHien;

            if (rg_GV_DauViec.GetAccessibleName() == "ThiCong")
            {
                foreach (string code in lsCongTacs)
                {
                    DinhMucHelper.capNhatTrangThaiCacBang(code, SourceDataEnum.KHGV, QTdauTien);
                }
            }
            else
            {
                string dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET TrangThai =  'Đang thực hiện' " +
                    $"WHERE \"CodeCongViecCha\" IN ({lsCongTac})";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            //string dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET \"TrangThai\"='{QTdauTien}' WHERE \"CodeCongViecCha\" IN ({lsCongTac})";
            //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            if (isUpdateDate)
            {
                string dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} " +
                $"SET \"NgayBatDau\" = '{dateNowString}' " +
                $"WHERE \"CodeCongViecCha\" IN ({lsCongTac}) " +
                $"AND \"TrangThai\" = '{QTdauTien}'" +
                $"AND NgayBatDau > '{dateNowString}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} " +
                            $"SET \"NgayKetThuc\" = '{dateNowString}' " +
                            $"WHERE \"CodeCongViecCha\" IN ({lsCongTac}) " +
                            $"AND \"TrangThai\" = '{QTdauTien}'" +
                            $"AND NgayKetThuc < '{dateNowString}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }

            //dbString = $"UPDATE {GiaoViec.TBL_CHIATHICONG} SET \"TrangThai\"= '{QTdauTien}' WHERE \"Code\" IN ({lsThiCong})";
            //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            MessageShower.ShowInformation("Hoàn tất! Chuyển sang tab THỰC HIỆN DỰ ÁN để xem chi tiết!");

            //fcn_GV_CapNhatHangMucCongViec();

            //bool isHaveCongViecCanChuyen = false;
            //string lsChuyenTrangThai = "";

            //foreach (int index in ls_SelectedInSpSheet)
            //{
            //    Guid guid;
            //    string codeCV = ws.Rows[index][dic[MyConstant.COL_KHGV_CodeCT].Value.ToString();
            //    string TrangThai = ws.Rows[index][dic[MyConstant.COL_KHGV_TrangThai].Value.ToString();
            //    string typeRow = ws.Rows[index][dic[MyConstant.COL_KHGV_LOAIHANG].Value.ToString();
            //    if (Guid.TryParse(codeCV, out guid) && TrangThai == "Chưa thực hiện" && typeRow == MyConstant.TYPEROW_KHGV_CVCON)
            //    {
            //        if (lsChuyenTrangThai != "")
            //            lsChuyenTrangThai += ", ";

            //        lsChuyenTrangThai += $"'{codeCV}'";
            //    }
            //}
            //if (lsChuyenTrangThai == "")
            //{
            //    MessageShower.ShowInformation("Các công tác đã chọn đều đã hoặc đang thực hiện!");
            //    return;
            //}
            //string QTdauTien = (MyFunction.fcn_GetSelectedDecriptionOfGroupRadio(rg_GV_DauViec) == MyConstant.CONST_LoaiQT_QTM) ? MyConstant.TRANGTHAI_QTMH_DeXuat : MyConstant.TRANGTHAI_QTTH_DangThucHien;
            //string dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCON} SET \"TrangThai\"=\"{QTdauTien}\" WHERE \"CodeCongViecCon\" IN ({lsChuyenTrangThai})";
            //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //MessageShower.ShowInformation("Hoàn tất! Chuyển sang tab THỰC HIỆN DỰ ÁN để xem chi tiết!");

        }



        ///Tạo dữ liệu tạm nhưng ảnh hưởng đến foreign key nên khogno dùng
        //string dbstring = $"SELECT * FROM {GiaoViec.TBL_CONGVIECCON} WHERE \"CodeCongViecCha\"='{CodeCvCha}'";
        //DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
        //DataTable dt1 = dt.Clone();
        //DataRow[] lsRow = dt.Select($"[CodeCongViecCon]='{CodeCvCon}'");
        //if (lsRow.Length == 0)
        //    return;

        //DataRow row = lsRow[0];
        //int ind = dt.Rows.IndexOf(row);
        //if (ind == 0)
        //{
        //    MessageShower.ShowInformation("Không thể di chuyển vì đã là công tác trên cùng!");
        //    return;
        //}
        ////dt.Rows.Remove(row);
        ////dt.AcceptChanges();
        ////int crIndex = dt.Rows.IndexOf(row);
        //for (int i =0; i<ind-1;i++)
        //{
        //    DataRow r = dt.Rows[i];
        //    r["CodeCongViecCon"] = $"TEMP_{r["CodeCongViecCon"]}";
        //    dt1.Rows.Add(r.ItemArray);
        //}
        //row["CodeCongViecCon"] = $"TEMP_{row["CodeCongViecCon"]}";
        //dt.Rows[ind - 1]["CodeCongViecCon"] = $"TEMP_{dt.Rows[ind - 1]["CodeCongViecCon"]}";

        //dt1.Rows.Add(row.ItemArray);
        //dt1.Rows.Add(dt.Rows[ind-1].ItemArray);

        //for (int i = ind+1; i < dt.Rows.Count; i++)
        //{
        //    DataRow r = dt.Rows[i];
        //    r["CodeCongViecCon"] = $"TEMP_{r["CodeCongViecCon"]}";
        //    dt1.Rows.Add(r.ItemArray);
        //}

        //DataProvider.InstanceTHDA.InsertDataTable(dt1, GiaoViec.TBL_CONGVIECCON);
        //dbstring = $"DELETE FROM {GiaoViec.TBL_CONGVIECCON} WHERE \"CodeCongViecCha\"='{CodeCvCha}' AND (\"CodeCongViecCon\" NOT LIKE 'TEMP_%')";
        //DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);

        //dbstring = $"UPDATE {GiaoViec.TBL_CONGVIECCON} SET \"CodeCongViecCon\"=substr(\"CodeCongViecCon\",6) WHERE \"CodeCongViecCon\" LIKE 'TEMP_%'";
        //DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);
        //fcn_updateAllSheetKeHoachCongViec();



        List<string> m_lsCodeCVConCopied = new List<string>();
#pragma warning disable CS0169 // The field 'PhanMemQuanLyThiCong360.m_lsStringCodeCVConCopied' is never used
        string m_lsStringCodeCVConCopied;
#pragma warning restore CS0169 // The field 'PhanMemQuanLyThiCong360.m_lsStringCodeCVConCopied' is never used
        private void fcn_handle_GV_QTMH_CopyCacCongTacVoiChiTiet(object sender, EventArgs e)
        {
            IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = workbook.Worksheets[0];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            Guid guid;
            m_lsCodeCVConCopied.Clear();
            //m_lsCodeCVConCopied = "";
            foreach (int index in ls_SelectedInSpSheet)
            {
                string codeCV = ws.Rows[index][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                string typeRow = ws.Rows[index][dic[GiaoViec.COL_TypeRow]].Value.ToString();

                if (Guid.TryParse(codeCV, out guid) && typeRow == MyConstant.TYPEROW_CVCON)
                {
                    m_lsCodeCVConCopied.Add(codeCV);
                }
            }

        }

        private void fcn_handle_GV_QTMH_PasteCacCongTacVoiChiTiet(object sender, EventArgs e)
        {
            IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = workbook.Worksheets[0];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            Cell crCell = ws.SelectedCell.FirstOrDefault();
            string CodeCvCha = ws.Rows[crCell.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();
            Guid guid;
            DataTable dtCVConPasted = new DataTable();
            DataTable dtCVNguoiThamGiaPasted = new DataTable();
            DataTable dtCVNhaCungCapPasted = new DataTable();
            if (Guid.TryParse(CodeCvCha, out guid))
            {
                //string dbString = $"SELECT * FROM {GiaoViec.TBL_CONGVIECCON} WHERE \"CodeCongViecCon\" IN ({m_lsCodeCVConCopied})";
                //DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                foreach (string str in m_lsCodeCVConCopied)
                {
                    string newGuid = Guid.NewGuid().ToString();
                    //CẬP NHẬT THÔNG TIN BẢNG CÔNG VIỆC CON

                    string dbString = $"SELECT * FROM {GiaoViec.TBL_CONGVIECCON} WHERE \"CodeCongViecCon\"='{str}'";
                    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                    if (dt.Rows.Count == 0)
                    {
                        MessageShower.ShowInformation("Lỗi dán công tác");
                    }
                    if (dtCVConPasted.Rows.Count == 0)
                    {
                        dtCVConPasted = dt.Clone();
                    }
                    DataRow r = dt.Rows[0];
                    r["CodeCongViecCon"] = newGuid;
                    r["CodeCongViecCha"] = CodeCvCha;
                    dtCVConPasted.Rows.Add(r.ItemArray);


                    //CẬP NHẬT THÔNG TIN BẢNG NGƯỜI THAM GIA
                    dbString = $"SELECT * FROM {GiaoViec.TBL_KEHOACH_NGUOITHAMGIA} WHERE \"CodeCongViecCon\"='{str}'";
                    dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                    //if (dt.Rows.Count == 0)
                    //{
                    //    MessageShower.ShowInformation("Lỗi dán công tác");
                    //}
                    if (dtCVNguoiThamGiaPasted.Rows.Count == 0)
                    {
                        dtCVNguoiThamGiaPasted = dt.Clone();
                    }
                    foreach (DataRow row in dt.Rows)
                    {
                        row["CodeCongViecCon"] = newGuid;
                        row["Code"] = Guid.NewGuid().ToString();
                        dtCVNguoiThamGiaPasted.Rows.Add(row.ItemArray);
                    }

                    //CẬP NHẬT THÔNG TIN BẢNG NHÀ CUNG CẤP
                    dbString = $"SELECT * FROM {GiaoViec.TBL_KEHOACH_NGUOITHAMGIA} WHERE \"CodeCongViecCon\"='{str}'";
                    dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                    //if (dt.Rows.Count == 0)
                    //{
                    //    MessageShower.ShowInformation("Lỗi dán công tác");
                    //}
                    if (dtCVNhaCungCapPasted.Rows.Count == 0)
                    {
                        dtCVNhaCungCapPasted = dt.Clone();
                    }
                    foreach (DataRow row in dt.Rows)
                    {
                        row["CodeCongViecCon"] = newGuid;
                        row["Code"] = Guid.NewGuid().ToString();
                        dtCVNhaCungCapPasted.Rows.Add(row.ItemArray);
                    }
                }
                DataProvider.InstanceTHDA.InsertDataTable(dtCVConPasted, GiaoViec.TBL_CONGVIECCON);
                DataProvider.InstanceTHDA.InsertDataTable(dtCVNhaCungCapPasted, GiaoViec.TBL_KEHOACH_NGUOITHAMGIA);
                DataProvider.InstanceTHDA.InsertDataTable(dtCVNguoiThamGiaPasted, GiaoViec.TBL_KEHOACH_NHACUNGCAP);

            }
            fcn_updateAllSheetKeHoachCongViec();
        }



        /// <summary>
        /// Gộp các công việc
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fcn_handle_GiaoViec_KHGV_Popup_GopCongViec(object sender, EventArgs e)
        {
            //IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            //Worksheet ws = workbook.Worksheets[0];

            //string newCodeCVCha = fcn_GV_TaoCongViecChaWithoutCVCon(null);
            //string codeDauMuc = cbb_DauViecNho.SelectedValue.ToString();

            //Guid guid;
            //string lsCodeCVCon = "";
            //foreach (int index in ls_SelectedInSpSheet)
            //{
            //    string codeCVcon = ws.Cells[$"{MyConstant.DIC_GiaoViec_TenCotUngVoiDb.FirstOrDefault(x => x.Value == "CodeCongViecCon").Key}{index + 1}"]
            //        .Value.ToString();
            //    if (Guid.TryParse(codeCVcon, out guid))
            //    {
            //        if (lsCodeCVCon != "")
            //            lsCodeCVCon += ", ";
            //        lsCodeCVCon += $"'{codeCVcon}'";
            //    }
            //}


            ////string dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCHA} (\"CodeDauMuc\", \"CodeCongViecCha\") " +
            ////                    $"VALUES ('{codeDauMuc}', '{newCodeCVCha}')";
            ////DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //string dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCON} SET \"CodeCongViecCha\"='{newCodeCVCha}' WHERE \"CodeCongViecCon\" IN ({lsCodeCVCon})";
            //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //fcn_updateAllSheetKeHoachCongViec();
        }

        /// <summary>
        /// Thay đổi công việc Cha
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fcn_handle_GiaoViec_KHGV_Popup_XoaCongViecCon(object sender, EventArgs e)
        {
            IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = workbook.Worksheets[0];

            //string codeCongViec = ws.Cells[$"{dic[GiaoViec.COL_CodeCV}{ws.SelectedCell.TopRowIndex + 1}"].Value.ToString();
            ws.Rows[ws.SelectedCell.TopRowIndex].Delete();
            //string dbString = $"DELETE FROM {GiaoViec.TBL_CONGVIECCON} WHERE \"CodeCongViecCon\"='{codeCongViecCon}'";
            //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //fcn_updateAllSheetKeHoachCongViec();

        }

        private void fcn_handle_GiaoViec_KHGV_Popup_XoaCongViecCha(object sender, EventArgs e)
        {
            IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = workbook.Worksheets[0];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            string codeCongViecCha = ws.Cells[$"{dic[GiaoViec.COL_CodeCT]}{ws.SelectedCell.TopRowIndex + 1}"].Value.ToString();


            string dbString = $"DELETE FROM {GiaoViec.TBL_CONGVIECCHA} WHERE \"CodeCongViecCha\"='{codeCongViecCha}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            dbString = $"DELETE FROM {GiaoViec.TBL_CONGVIECCON} WHERE \"CodeCongViecCha\"='{codeCongViecCha}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);


            fcn_updateAllSheetKeHoachCongViec();
        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            string colNgayBatDau = GiaoViec.COL_NgayBatDau;
            string colNgayKetThuc = GiaoViec.COL_NgayKetThuc;
            string colSoNgay = GiaoViec.COL_SoNgay;
            //Cell cellChanged = e.Cell;

            if (rg_GV_DauViec.GetAccessibleName() == "DuAn")
            {
                colNgayBatDau = GiaoViec.COL_NgayBatDauThiCong;
                colNgayKetThuc = GiaoViec.COL_NgayKetThucThiCong;
                colSoNgay = GiaoViec.COL_SoNgayThiCong;

            }

            IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            Cell cellChanged = e.Cell;
            //int indRow = e.Cell.RowIndex;
            CellRange range = workbook.Range[MyConstant.Range_KeHoach];

            if (!range.Contains(cellChanged))
            {
                MyFunction.fcn_ReverseCell(e);
                return;
            }

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            string codeCV = ws.Rows[cellChanged.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();

            if (string.IsNullOrEmpty(codeCV) && (ws.Range.GetColumnNameByIndex(cellChanged.ColumnIndex) != dic[GiaoViec.COL_TenCongViec]))
            {
                MyFunction.fcn_ReverseCell(e);
                return;
            }

            //IWorkbook workbook = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            //Worksheet ws = workbook.Worksheets["Kế hoạch"];
            //Cell cellChanged = e.Cell;
            //string oldVal = e.OldValue.ToString();
            string colHeading = ws.Columns[cellChanged.ColumnIndex].Heading;
            string NewValue = e.Value.ToString();
            string colInDb = ws.Rows[0][e.ColumnIndex].Value.ToString();
            //CellRange range = workbook.Range[MyConstant.Range_KeHoach];

            //List<string> setDbStrings = new List<string>();

            Row crRow = ws.Rows[e.RowIndex];
            if (!range.Contains(cellChanged))
            {
                MyFunction.fcn_ReverseCell(e);
                return;
            }

            //Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            //string codeCV = crRow[dic[GiaoViec.COL_CodeCT]].Value.ToString();
            string codeCTGiaiDoan = crRow[dic[GiaoViec.COL_CodeCTTheoGiaiDoan]].Value.ToString();

            string setString = "";// = string.Join(", ", setDbStrings.ToArray());

            string dateBDStr = (colInDb == colNgayBatDau)
                                ? NewValue
                                : crRow[dic[colNgayBatDau]].Value.ToString();

            string dateKTStr = (colInDb == colNgayKetThuc)
                                ? NewValue
                                : crRow[dic[colNgayKetThuc]].Value.ToString();

            bool isDateBD = DateTime.TryParse(dateBDStr, out DateTime dateBD);
            bool isDateKT = DateTime.TryParse(dateKTStr, out DateTime dateKT);


            DateTime? dateOld = null;
            DateTime? dateNew = null;

            if (colInDb == GiaoViec.COL_Chon)
                return;
            else if (colInDb == colSoNgay)
            {
                if (!isDateBD)
                {
                    return;
                }


                if (!int.TryParse(NewValue, out int tryParse) || tryParse <= 0)
                {
                    MessageShower.ShowWarning("Vui lòng nhập số nguyên dương cho ô này!");
                    MyFunction.fcn_ReverseCell(e);
                    return;
                }
                else if (tryParse > MyConstant.MaxSoNgayThucHien)
                {
                    MessageShower.ShowError($"Số ngày quá lớn (Vui lòng nhập không quá {MyConstant.MaxSoNgayThucHien} Ngày)");
                    MyFunction.fcn_ReverseCell(e);
                    return;
                }
                else
                {
                    dateOld = dateKT;
                    dateKT = dateBD.AddDays(int.Parse(NewValue));

                    crRow[dic[colNgayKetThuc]].SetValue(dateKT);
                    colInDb = colNgayKetThuc;
                    setString = dateKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                    cellChanged = crRow[dic[colNgayBatDau]];
                }
            }
            else if (colInDb.StartsWith("Ngay"))
            {
                bool isDate = false;
                DateTime? dateCalc = null;
                if (colInDb == colNgayBatDau)
                {
                    isDate = isDateBD;
                    dateCalc = dateBD;
                }
                if (colInDb == colNgayKetThuc)
                {
                    isDate = isDateBD;
                    dateCalc = dateBD;
                }


                if (!isDate)
                {
                    MessageShower.ShowError("Sai định dạng ngày tháng");
                    MyFunction.fcn_ReverseCell(e);
                    return;
                }

                string dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET {colInDb} = '{dateCalc.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE CodeCongViecCha = '{codeCV}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                if (!isDateBD || !isDateKT)
                    return;

                if ((dateKT - dateBD).Days + 1 > MyConstant.MaxSoNgayThucHien)
                {
                    MessageShower.ShowError($"Số ngày quá lớn (Vui lòng nhập không quá {MyConstant.MaxSoNgayThucHien} Ngày)");
                    MyFunction.fcn_ReverseCell(e);
                    return;
                }
                else if ((dateKT - dateBD).Days + 1 <= 0)
                {
                    MessageShower.ShowError($"Vui lòng nhập ngày Bắt đầu nhỏ hơn ngày kết thúc");
                    MyFunction.fcn_ReverseCell(e);
                    return;
                }


                if (DateTime.TryParse(e.OldValue.ToString(), out DateTime date))
                {
                    dateOld = date;
                }
                dateNew = DateTime.Parse(NewValue);
                setString = dateNew.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                crRow[dic[colSoNgay]].Formula = $"{dic[colNgayKetThuc]}{e.RowIndex + 1} - {dic[colNgayBatDau]}{e.RowIndex + 1} + 1";

            }
            else if (GiaoViec.colHaveDb.Contains(colInDb))
            {
                setString = NewValue;
            }


            string startDate = DateTime.Now.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string endDate = DateTime.Now.Date.AddDays(9).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            if (rg_GV_DauViec.GetAccessibleName() == "ThiCong") // Thi Công
            {
                string typeRow = crRow[dic[GiaoViec.COL_TypeRow]].Value.ToString();

                if (string.IsNullOrEmpty(typeRow))//Thêm công tác mới
                {
                    if (colHeading == dic[GiaoViec.COL_TenCongViec])
                    {
                        string newUid = Guid.NewGuid().ToString();
                        crRow[dic[GiaoViec.COL_CodeCT]].SetValue(newUid);

                        Column colTypeRow = ws.Columns[dic[GiaoViec.COL_TypeRow]];
                        int? rowIndHMNullable = ws.Range.FromLTRB(colTypeRow.Index, range.TopRowIndex, colTypeRow.Index, e.RowIndex)
                            .Search(MyConstant.TYPEROW_HangMuc, MyConstant.MySearchOptions).LastOrDefault()?.RowIndex;

                        if (!rowIndHMNullable.HasValue)
                        {
                            MessageShower.ShowInformation("Không thể tìm hạng mục!");
                            return;
                        }
                        int rowIndHM = rowIndHMNullable.Value;

                        //ws.Rows.Insert(e.RowIndex + 1, 1, RowFormatMode.FormatAsPrevious);

                        //crRow[dic[colNgayBatDau]].SetValueFromText(startDate);
                        //crRow[dic[colNgayKetThuc]].SetValueFromText(endDate);

                        //crRow[dic[GiaoViec.COL_ThanhTienKeHoach]].Formula = $"{dic[GiaoViec.COL_DonGiaKeHoach]}{e.RowIndex + 1}:{dic[GiaoViec.COL_KLKeHoach]}{e.RowIndex + 1}";
                        //crRow[dic[colSoNgay]].Formula = $"{dic[colNgayKetThuc]}{e.RowIndex + 1} - {dic[colNgayBatDau]}{e.RowIndex + 1} + 1";

                        if (!NewValue.EndsWith("  "))
                        {

                            //crRow[dic[GiaoViec.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCha);
                            //crRow[dic[GiaoViec.COL_RowCha]].Formula = $"ROW(A{rowIndHM + 1})";

                            SearchOptions options = new SearchOptions();
                            options.SearchIn = SearchIn.Values;
                            options.MatchEntireCellContents = true;
                            Column col = ws.Columns[dic[GiaoViec.COL_TypeRow]];
                            //var cellsHM = ws.Range.FromLTRB(col.LeftColumnIndex, range.TopRowIndex, col.RightColumnIndex, e.Cell.RowIndex).Search(MyConstant.TYPEROW_HangMuc, options);
                            //var cellsCT = ws.Range.FromLTRB(col.LeftColumnIndex, range.TopRowIndex, col.RightColumnIndex, e.Cell.RowIndex).Search(MyConstant.TYPEROW_HangMuc, options);
                            string dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCHA} " +
                                $"(\"CodeCongViecCha\", \"CodeHangMuc\", \"TenCongViec\", \"NgayBatDau\", \"NgayKetThuc\", \"RowIndex\") VALUES " +
                                $"('{newUid}', '{ws.Rows[rowIndHM][dic[GiaoViec.COL_CodeCT]].Value}',@NewValue, '{startDate}', '{endDate}', '{e.RowIndex}')";

                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { NewValue });
                        }
                        else
                        {
                            crRow[dic[GiaoViec.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCON);
                            crRow.Font.Color = MyConstant.color_Row_DienGiai;
                            int indColType = ws.Columns[dic[GiaoViec.COL_TypeRow]].LeftColumnIndex;
                            CellRange rangeSearch = ws.Range.FromLTRB(indColType, rowIndHM, indColType, e.RowIndex);

                            SearchOptions options = new SearchOptions();
                            options.SearchIn = SearchIn.Values;
                            options.MatchEntireCellContents = true;

                            var cellCTCha = rangeSearch.Search(MyConstant.TYPEROW_CVCha, options);

                            if (!cellCTCha.Any())
                            {
                                MessageShower.ShowInformation("Không tìm thấy công tác cha");
                                MyFunction.fcn_ReverseCell(e);
                                return;
                            }

                            crRow[dic[GiaoViec.COL_RowCha]].Formula = $"ROW(A{cellCTCha.Last().RowIndex + 1})";
                            string codeCVCha = ws.Rows[cellCTCha.Last().RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                            string tenCV = e.Cell.Value.ToString();
                            string dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCON} " +
                                                $"(\"CodeCongViecCon\", \"CodeCongViecCha\", \"TenCongViec\", \"NgayBatDau\", \"NgayKetThuc\", \"RowIndex\") VALUES " +
                                                $"('{newUid}', '{codeCVCha}',@TenCongViec, '{startDate}', '{endDate}', '{e.RowIndex}')";

                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { tenCV.Trim() });
                        }
                        fcn_GiaoViec_UpdateRowToDb(e.RowIndex + 1);
                        fcn_GV_CapNhatHangMucCongViec();
                        return;
                    }
                    if (colHeading == dic[GiaoViec.COL_MaDinhMuc])
                    {
                        if (NewValue.ToUpper() == MyConstant.CONST_TYPE_HANGMUC)
                        {
                            string dbString = "";
                            MyFunction.fcn_ReverseCell(e);

                            BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                            {
                                TextBox tb = FindTextBox(ss.Controls);
                                if (tb != null)
                                {
                                    tb.TextChanged -= fcn_handle_txtBoxTimKiem_TextChange;
                                }
                            }), sender as SpreadsheetControl);
                            m_ctrlTKDM.Hide();

                            Column colTypeRow = ws.Columns[dic[GiaoViec.COL_TypeRow]];
                            Column colRowCha = ws.Columns[dic[GiaoViec.COL_RowCha]];

                            Row RowCongTrinh = ws.Range.FromLTRB(colTypeRow.Index, range.TopRowIndex, colTypeRow.Index, e.Cell.RowIndex)
                                                .Search(MyConstant.TYPEROW_CongTrinh, MyConstant.MySearchOptions)
                                                .Select(x => ws.Rows[x.RowIndex])
                                                .LastOrDefault();

                            if (RowCongTrinh is null)
                            {
                                MessageShower.ShowInformation("Lỗi tìm công trình");
                                return;
                            }
                            string codeCongTrinh = RowCongTrinh[dic[GiaoViec.COL_CodeCT]].Value.ToString();
                            Cell cellPrevHM = colRowCha.Search((RowCongTrinh.Index + 1).ToString(), MyConstant.MySearchOptions).Where(x => x.RowIndex < e.RowIndex).LastOrDefault();

                            int indNewHM;// = (cellPrevHM is null)?0:;
                            if (cellPrevHM is null)
                            {
                                indNewHM = 0;
                            }
                            else
                            {
                                dbString = $"SELECT SortId FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE Code = '{ws.Rows[cellPrevHM.RowIndex][dic[GiaoViec.COL_CodeCT]].Value}'";
                                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                                if (dt.Rows.Count != 1)
                                {
                                    MessageShower.ShowInformation("Lỗi hạng mục");
                                    return;
                                }

                                indNewHM = int.Parse(dt.Rows[0][0].ToString()) + 1;
                            }

                            string newCodeHM = Guid.NewGuid().ToString();
                            dbString = $"UPDATE {MyConstant.TBL_THONGTINHANGMUC} SET SortId = SortId + 1 WHERE SortId >= {indNewHM}";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            dbString = $"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (Code, CodeCongTrinh, Ten, SortId) VALUES " +
                                $"('{newCodeHM}', '{codeCongTrinh}', 'Hạng mục mới', '{indNewHM}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            string[] codesCongTacNeedChange = colRowCha.Search((cellPrevHM.RowIndex + 1).ToString(), MyConstant.MySearchOptions)
                                .Where(x => x.RowIndex >= e.RowIndex)
                                .Select(x => $"'{ws.Rows[x.RowIndex][dic[GiaoViec.COL_CodeCT]].Value}'")
                                .ToArray();

                            if (codesCongTacNeedChange.Any())
                            {
                                dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET CodeHangMuc = '{newCodeHM}' WHERE CodeCongViecCha IN ({string.Join(", ", codesCongTacNeedChange)}) AND CodeCongTacTheoGiaiDoan IS NULL";
                                int numEffect = DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                                //string[] codesDMCT = dt.AsEnumerable().Select(x => $"'{x["CodeCongTac"]}'").ToArray();

                                //dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET CodeHangMuc = '{newCodeHM}' WHERE Code IN ({string.Join(", ", codesDMCT)})";
                                //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            }

                            GiaoViecHelper.LoadAllKeHoachGiaoViecThiCong();
                            fcn_LoadCongTacDoBoc();
                            return;

                        }
                    }
                }
                if (string.IsNullOrEmpty(setString))
                    return;
                else if (typeRow == MyConstant.TYPEROW_CVCha)
                {
                    if (colInDb == GiaoViec.COL_TrangThai)
                    {
                        DinhMucHelper.capNhatTrangThaiCacBang(codeCV, SourceDataEnum.KHGV, NewValue);
                        if (codeCTGiaiDoan.HasValue())
                        {
                            string dbString1 = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET {colInDb} = @NewValue " +
                                $"WHERE Code = '{codeCTGiaiDoan}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString1, parameter: new object[] { setString });

                        }
                    }
                    string dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET {colInDb} = @Value " +
                        $"WHERE \"CodeCongViecCha\" = '{codeCV}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { setString });



                }
                else if (typeRow == MyConstant.TYPEROW_CVCON)
                {
                    string dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCON} SET {colInDb} = @Value " +
                        $"WHERE \"CodeCongViecCon\" = '{codeCV}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { setString });

                    int indRowCha = (int)crRow[dic[GiaoViec.COL_RowCha]].Value.NumericValue - 1;

                    Row crRowCha = ws.Rows[indRowCha];
                    if (!string.IsNullOrEmpty(crRowCha[dic[colInDb]].Formula))
                    {
                        ws.Calculate();
                        string val = crRowCha[dic[colInDb]].Value.ToString();
                        string codeCha = crRowCha[dic[GiaoViec.COL_CodeCT]].Value.ToString();
                        if (colInDb.StartsWith("Ngay"))
                        {
                            val = crRowCha[dic[colInDb]].Value.DateTimeValue.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                        }

                        dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET {colInDb} = @NewVal " +
                                    $"WHERE \"CodeCongViecCha\" = '{codeCha}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { val });
                    }
                }
            }
            else //Dự án
            {
                Cell cellTieuDe = ws.Range[GiaoViec.Range_TieuDe].First();
                Cell cellMau = ws.Range[GiaoViec.Range_Mau].First();

                string codeMau = ws.Rows[cellMau.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();

                if (string.IsNullOrEmpty(codeCV))
                {

                    int i = SpreadsheetHelper.FindPrevGreaterTypeInd(range, e.RowIndex, dic[GiaoViec.COL_RowCha], dic[GiaoViec.COL_TypeRow], MyConstant.TYPEROW_CVCha);
                    string prevTypeRow = ws.Rows[i][dic[GiaoViec.COL_TypeRow]].Value.ToString();

                    int sortId = 0;
                    string dbString1 = "";
                    if (prevTypeRow == MyConstant.TYPEROW_CVCha)
                    {
                        string prevCode = ws.Rows[i][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                        dbString1 = $"SELECT SortId FROM {GiaoViec.TBL_CONGVIECCHA} WHERE CodeCongViecCha = '{prevCode}'";
                        var dataRow = DataProvider.InstanceTHDA.ExecuteQuery(dbString1).AsEnumerable().FirstOrDefault();
                        if (dataRow != null)
                        {
                            sortId = int.Parse(dataRow[0].ToString());
                        }
                    }

                    dbString1 = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET SortId = SortId + 1 WHERE CodeDauMuc = '{codeMau}' AND SortId > {sortId}";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString1);

                    string dbString = $"INSERT INTO \"{GiaoViec.TBL_CONGVIECCHA}\" (\"CodeCongViecCha\", \"CodeDauMuc\", \"{ws.Rows[0][e.ColumnIndex].Value}\", \"NgayBatDau\", \"NgayKetThuc\", \"SortId\") " +
                        $"VALUES ('{Guid.NewGuid()}', '{codeMau}',@NewVal,'{startDate}', '{endDate}', '{sortId + 1}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { NewValue });
                    fcn_GiaoViec_UpdateRowToDb(e.RowIndex + 1);
                    fcn_LoadGiaoViecDuAn();

                }
                else
                {



                    if (setString.HasValue())
                    {
                        string dbString = $"UPDATE \"{GiaoViec.TBL_CONGVIECCHA}\" SET {colInDb} = @Value WHERE \"CodeCongViecCha\" = '{codeCV}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { setString });
                    }
                }

                if (colInDb.StartsWith("Ngay") && dateNew.HasValue && dateOld.HasValue && ce_GiaoViec_NgayTuDong.Checked)
                {

                    int DateOffset = (dateNew.Value - dateOld.Value).Days;

                    var cells = ws.Columns[dic[GiaoViec.COL_TypeRow]]
                        .Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions);

                    WaitFormHelper.ShowWaitForm("Đang cập nhật ngày công tác");
                    ws.Workbook.BeginUpdate();
                    List<string> updates = new List<string>();
                    foreach (var c in cells)
                    {
                        var crRowf = ws.Rows[c.RowIndex];
                        string codef = crRowf[dic[GiaoViec.COL_CodeCT]].Value.ToString();

                        List<string> condSet = new List<string>();

                        if (DateTime.TryParse(crRowf[dic[colNgayBatDau]].Value.ToString(), out DateTime dateBDf) && dateBDf >= dateOld)
                        {
                            var cellDate = crRowf[dic[colNgayBatDau]];
                            if (cellDate != cellChanged)
                            {

                                DateTime newd = dateBDf.AddDays(DateOffset);
                                cellDate.SetValue(newd);
                                condSet.Add($"NgayBatDau = '{newd.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'");
                            }

                        }

                        if (DateTime.TryParse(crRowf[dic[colNgayKetThuc]].Value.ToString(), out DateTime dateKTf) && dateKTf >= dateOld)
                        {
                            var cellDate = crRowf[dic[colNgayKetThuc]];
                            if (cellDate != cellChanged)
                            {

                                DateTime newd = dateKTf.AddDays(DateOffset);
                                crRowf[dic[colNgayKetThuc]].SetValue(newd);
                                condSet.Add($"NgayKetThuc = '{newd.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'");
                            }
                        }

                        if (condSet.Any())
                        {
                            string dbstr = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET {string.Join(", ", condSet)} WHERE CodeCongViecCha = '{codef}'";
                            updates.Add(dbstr);
                        }
                    }
                    if (updates.Any())
                    {
                        DataProvider.InstanceTHDA.ExecuteNonQuery(string.Join(";\r\n", updates));
                    }

                    ws.Workbook.EndUpdate();
                    WaitFormHelper.CloseWaitForm();

                }
            }
        }

        private void fcn_GV_KHGV_SpSheetCellChanged(Cell cellChanged, CellValue oldVal, bool isPasting = false)
        {

        }

        private bool fcn_isHasCVLinkedToFront(string CVHienTai)
        {
            string dbString = $"SELECT \"CodeCongViecConHienTai\" FROM {GiaoViec.TBL_QUYTRINHTHUCHIEN} WHERE \"CodeCongViecConTiepTheo\"='{CVHienTai}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //bool ret = false;
            if (dt.Rows.Count > 0)
                return true;
            return false;
        }
        private TextBox FindTextBox(Control.ControlCollection controls)
        {
            TextBox tb = null;
            foreach (Control c in controls)
            {
                if (c.GetType() == typeof(ctrlTimKiemDinhMuc) || c.GetType() == typeof(ctrlTimKiemVatLieu))
                    continue;

                tb = c as TextBox;
                if (tb != null)
                    break;

                if (c.Controls.Count != 0)
                {
                    tb = FindTextBox(c.Controls);
                    if (tb != null)
                        break;
                }
            }

            return tb;
        }

        /// <summary>
        /// Hyperlink click Kế hoạch giao việc
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void spsheet_GV_KH_ChiTietCacHMCongViec_HyperlinkClick(object sender, DevExpress.XtraSpreadsheet.HyperlinkClickEventArgs e)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;

            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            CellRange range = ws.SelectedCell;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            string colName = ws.Rows[0][range.LeftColumnIndex].Value.ToString();
            Row crRow = ws.Rows[range.TopRowIndex];
            string codeCV = crRow[dic[GiaoViec.COL_CodeCT]].Value.ToString();
            string tenCV = crRow[dic[GiaoViec.COL_TenCongViec]].Value.ToString();
            string typeRow = (rg_GV_DauViec.GetDescription() == "Dự án") ? MyConstant.TYPEROW_CVCha : ws.Rows[range.TopRowIndex][dic[GiaoViec.COL_TypeRow]].Value.ToString();
            //string codeCVCon = ws.Rows[range.TopRowIndex][dic[GiaoViec.COL_CodeCVCon].Value.ToString();
            string TenCVCon = crRow[dic[GiaoViec.COL_TenCongViec]].Value.ToString();
            string col2getUser = "CodeCongViecCon";

            var allPermission = BaseFrom.allPermission;
            string tblDb = (typeRow == MyConstant.TYPEROW_CVCON) ? GiaoViec.TBL_CONGVIECCON : GiaoViec.TBL_CONGVIECCHA;

            switch (colName)
            {
                case GiaoViec.COL_NguoiThucHien:

                    XtraForm_CaiDatNguoiThucHien form = new XtraForm_CaiDatNguoiThucHien(typeRow, codeCV, slke_ThongTinDuAn.EditValue as string);
                    form.ShowDialog();
                    break;
                case GiaoViec.COL_FileDinhKem:

                    //string codeCVCha = codeCV;
                    //if (typeRow == MyConstant.TYPEROW_CVCON)
                    //{
                    //    FileManageTypeEnum 

                    //    codeCVCha = ws.Rows[indRowCha - 1][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                    //}
                    FileManageTypeEnum type = (typeRow == MyConstant.TYPEROW_CVCha) ? FileManageTypeEnum.CONGVIECCHA : FileManageTypeEnum.CongViecCon;
                    string TblFile = (typeRow == MyConstant.TYPEROW_CVCha) ? GiaoViec.TBL_FileDinhKem : GiaoViec.TBL_CongViecCon_FileDinhKem;
                    FormLuaChon form3 = new FormLuaChon(codeCV, type, tenCV);
                    form3.ShowDialog();
                    string dbString = $"SELECT COUNT(*) FROM {TblFile} WHERE CodeParent = '{codeCV}'";
                    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    ws.SelectedCell.First().SetValue($"{dt.Rows[0][0]} Files");

                    //fcn_updateAllSheetKeHoachCongViec();

                    break;
                case GiaoViec.COL_HopDong:
                    Form_ThonTinHopDong form6 = new Form_ThonTinHopDong($"{TenCVCon} - Quản lý hợp đồng", codeCV);
                    form6.ShowDialog();
                    break;
                //case GiaoViec.COL_NguoiDuyet:
                //    form_NguoiDuyetCongTac form7 = new form_NguoiDuyetCongTac(codeCV);
                //    form7.ShowDialog();
                //    break;
                default:
                    MessageShower.ShowInformation("Đường dẫn này không được hỗ trợ");
                    return;


            }
            //fcn_updateAllSheetKeHoachCongViec();
        }



        private void ToolStrip_BangCongViecCacNhanVien_Click(object sender, EventArgs e)
        {
            // Bảng danh sách các nhân viên đã được giao việc - mở từ Menu Strip
            FormBangCongViecCacNhanVien BangCacNhanVien = new FormBangCongViecCacNhanVien();
            BangCacNhanVien.ShowDialog();
        }


        /// <summary>
        /// Data lấy được từ clipboard sau khi bấm vào paste.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void spsheet_Thongtinchinh_ClipboardDataObtained(object sender, ClipboardDataObtainedEventArgs e)
        {
            if (spsheet_Thongtinchinh.ActiveWorksheet.Name != "Khối lượng phân khai")
            {
                int rowCnt = spsheet_Thongtinchinh.ActiveWorksheet.Range.Parse(e.Range).RowCount;


                spsheet_Thongtinchinh.CellValueChanged -= spsheet_Thongtinchinh_CellValueChanged;

                Cell firstCell = spsheet_Thongtinchinh.SelectedCell.FirstOrDefault();

                if (spsheet_Thongtinchinh.Document.Range[MyConstant.TBL_THONGTINNGANSACH].Contains(firstCell))
                {
                    CellRange ran = spsheet_Thongtinchinh.Document.Range[MyConstant.TBL_THONGTINNGANSACH];
                    int bottomInd = ran.BottomRowIndex;
                    ran.Worksheet.Rows.Insert(bottomInd, rowCnt);
                    return;
                }

                foreach (string str in MyConstant.RANGES_MUCTHUOCDUAN)
                {
                    CellRange ran = spsheet_Thongtinchinh.Document.Range[str];
                    if (ran.Contains(firstCell))
                    {
                        int bottomInd = ran.BottomRowIndex;
                        ran.Worksheet.Rows.Insert(bottomInd, rowCnt);
                    }
                }
                //e.Flags = PasteSpecial.Values;
            }

        }

        private void spsheet_Thongtinchinh_ClipboardDataPasting(object sender, EventArgs e)
        {

            //spsheet_Thongtinchinh.CellValueChanged -= spsheet_Thongtinchinh_CellValueChanged;
        }


        private void spsheet_Thongtinchinh_ClipboardDataPasted(object sender, ClipboardDataPastedEventArgs e)
        {
            if (spsheet_Thongtinchinh.ActiveWorksheet.Name != "Khối lượng phân khai")
            {
                foreach (Cell cell in spsheet_Thongtinchinh.ActiveWorksheet.Range.Parse(e.TargetRange))
                {
                    fcn_spsheet_Thongtinchinh_CellChanged(cell, "", true);
                }
                spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
                int ind = spsheet_Thongtinchinh.ActiveWorksheet.Index;
                fcn_updateSheetThongTinChinh();
                fcn_updateThanhPhanThamGia();
                spsheet_Thongtinchinh.Document.Worksheets.ActiveWorksheet = spsheet_Thongtinchinh.Document.Worksheets[ind];
            }

        }

        private void spsheet_Thongtinchinh_CopiedRangePasting(object sender, CopiedRangePastingEventArgs e)
        {
            if (spsheet_Thongtinchinh.ActiveWorksheet.Name != "Khối lượng phân khai")
            {
                spsheet_Thongtinchinh.CellValueChanged -= spsheet_Thongtinchinh_CellValueChanged;
                CellRange targetRange = e.TargetRange;
                Cell firstCell = targetRange.Worksheet.Rows[targetRange.TopRowIndex][targetRange.LeftColumnIndex];

                if (spsheet_Thongtinchinh.ActiveSheet.Name == "Nhập ngân sách")
                {
                    if (spsheet_Thongtinchinh.Document.Range[MyConstant.TBL_THONGTINNGANSACH].Contains(firstCell))
                    {
                        int bottomInd = spsheet_Thongtinchinh.Document.Range[MyConstant.TBL_THONGTINNGANSACH].BottomRowIndex;
                        e.TargetRange.Worksheet.Rows.Insert(bottomInd, e.TargetRange.RowCount);
                        return;
                    }
                }



                foreach (string str in MyConstant.RANGES_MUCTHUOCDUAN)
                {
                    if (spsheet_Thongtinchinh.Document.Range[str].Contains(firstCell))
                    {
                        int bottomInd = spsheet_Thongtinchinh.Document.Range[str].BottomRowIndex;
                        e.TargetRange.Worksheet.Rows.Insert(targetRange.TopRowIndex, e.TargetRange.RowCount);
                    }
                }

                //e.PasteSpecialFlags = PasteSpecial.Values;
                //isPasting = true;
            }

        }

        //bool isPasting = false;
        private void spsheet_Thongtinchinh_CopiedRangePasted(object sender, CopiedRangePastedEventArgs e)
        {
            if (spsheet_Thongtinchinh.ActiveWorksheet.Name != "Khối lượng phân khai")
            {
                foreach (Cell cell in e.TargetRange)
                {
                    fcn_spsheet_Thongtinchinh_CellChanged(cell, "", true);
                }
                //spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
                //spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
                spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;

                //fcn_updateSheetThongTinChinh();
                //fcn_updateThanhPhanThamGia();
                //isPasting = false;
            }

        }


        private void spsheet_GV_KH_ChiTietCacHMCongViec_ClipboardDataObtained(object sender, ClipboardDataObtainedEventArgs e)
        {
            //Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            //int rowCnt = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet.Range.Parse(e.Range).RowCount;

            //spsheet_GV_KH_ChiTietCacHMCongViec.CellValueChanged -= spsheet_GV_KH_ChiTietCacHMCongViec_CellValueChanged;

            //Cell firstCell = spsheet_GV_KH_ChiTietCacHMCongViec.SelectedCell.FirstOrDefault();
            //string codeCVCha = ws.Rows[firstCell.RowIndex][dic[GiaoViec.COL_CodeCV].Value.ToString();
            //int lastRow = ws.Range["DanhSachCongViec"].BottomRowIndex;
            ////int rowOfThemMoi
            //for (int i = firstCell.RowIndex; i < lastRow; i++)
            //{
            //    if (ws.Rows[i][dic[GiaoViec.COL_LOAIHANG].Value.ToString() == MyConstant.TYPEROW_KHGV_THEMMOI)
            //    {
            //        spsheet_GV_KH_ChiTietCacHMCongViec.BeginUpdate();
            //        ws.Rows.Insert(i + 1, rowCnt - (i - firstCell.RowIndex), RowFormatMode.FormatAsPrevious);
            //        for (int j = i; j < rowCnt + firstCell.RowIndex; j++)
            //        {
            //            ws.Rows[j][dic[GiaoViec.COL_LOAIHANG].SetValue(MyConstant.TYPEROW_KHGV_THEMMOI);
            //            ws.Rows[j][dic[GiaoViec.COL_CodeCV].SetValue(codeCVCha);
            //        }
            //        spsheet_GV_KH_ChiTietCacHMCongViec.EndUpdate();
            //        return;
            //    }

            //}

        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_CopiedRangePasting(object sender, CopiedRangePastingEventArgs e)
        {
            //Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            //int rowCnt = e.TargetRange.RowCount;

            ////spsheet_GV_KH_ChiTietCacHMCongViec.CellValueChanged -= spsheet_GV_KH_ChiTietCacHMCongViec_CellValueChanged;

            //Cell firstCell = spsheet_GV_KH_ChiTietCacHMCongViec.SelectedCell.FirstOrDefault();
            //string codeCVCha = ws.Rows[firstCell.RowIndex][dic[GiaoViec.COL_CodeCV].Value.ToString();
            //int lastRow = ws.Range["DanhSachCongViec"].BottomRowIndex;
            ////int rowOfThemMoi
            //for (int i = firstCell.RowIndex; i < lastRow; i++)
            //{
            //    if (ws.Rows[i][dic[GiaoViec.COL_LOAIHANG].Value.ToString() == MyConstant.TYPEROW_KHGV_THEMMOI)
            //    {
            //        spsheet_GV_KH_ChiTietCacHMCongViec.BeginUpdate();
            //        ws.Rows.Insert(i + 1, rowCnt - (i - firstCell.RowIndex), RowFormatMode.FormatAsPrevious);
            //        for (int j = i; j < rowCnt + firstCell.RowIndex; j++)
            //        {
            //            ws.Rows[j][dic[GiaoViec.COL_LOAIHANG].SetValue(MyConstant.TYPEROW_KHGV_THEMMOI);
            //            ws.Rows[j][dic[GiaoViec.COL_CodeCV].SetValue(codeCVCha);
            //        }
            //        spsheet_GV_KH_ChiTietCacHMCongViec.EndUpdate();
            //        return;
            //    }

            //}
        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_CopiedRangePasted(object sender, CopiedRangePastedEventArgs e)
        {
            //foreach (Cell cell in e.TargetRange)
            //{
            //    fcn_GV_KHGV_SpSheetCellChanged(cell, "", true);
            //}
            //spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
            //spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
            //spsheet_GV_KH_ChiTietCacHMCongViec.CellValueChanged += spsheet_GV_KH_ChiTietCacHMCongViec_CellValueChanged;
            //fcn_updateAllSheetKeHoachCongViec();
        }
        private void spsheet_GV_KH_ChiTietCacHMCongViec_ClipboardDataPasting(object sender, EventArgs e)
        {

        }


        private void spsheet_GV_KH_ChiTietCacHMCongViec_ClipboardDataPasted(object sender, ClipboardDataPastedEventArgs e)
        {


        }



        /// <summary>
        /// Cập nhật tiến độ của kế hoạch giao việc
        /// </summary>
        private void fcn_updateTimeLineKHGV()
        {
            //Cập nhật tiến độ
            dic_GiaoViec_MapGuid2IdOfScheduler.Clear();
            string dbString = $"SELECT \"CodeCongViecCha\", \"CodeCongViecCon\", \"TenCongViec\", \"Bắt đầu\", \"Kết thúc\" FROM {GiaoViec.TBL_CONGVIECCON}";
            DataTable dtFromDb = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //dtFromDb.DefaultView.Sort = "CodeCongViecCha";
            //dtFromDb = dtFromDb.DefaultView.ToTable();

            dbString = $"SELECT \"CodeCongViecCha\", \"TenCongViec\", \"CodeDauMuc\" FROM {GiaoViec.TBL_CONGVIECCHA}";
            DataTable dtFromDbCVCha = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dbString = $"SELECT \"Code\", \"DauViec\" FROM {GiaoViec.TBL_DauViecLon}";
            DataTable dtFromDbDauViec = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //dtFromDbCVCha.DefaultView.Sort = "CodeCongViecCha";
            //dtFromDbCVCha = dtFromDbCVCha.DefaultView.ToTable();

            DataSet ds = new DataSet();
            DataTable dt = new DataTable("rs");



            List<string> lsCodeCha = new List<string>();

            foreach (DataRow r in dtFromDbCVCha.Rows)
            {

                lsCodeCha.Add(r[0].ToString());
            }

            //dtCha.Columns.Add("CodeCongViecCha", typeof(string));
            dt.Columns.Add("Id Con", typeof(int));
            dt.Columns.Add("Id Cha", typeof(int));
            dt.Columns.Add("CodeCongViecCon", typeof(string));
            //dt.Columns.Add("Tên công việc cha", typeof(string));
            dt.Columns.Add("TenCongViec", typeof(string));
            dt.Columns.Add("Bắt đầu", typeof(DateTime));
            dt.Columns.Add("Kết thúc", typeof(DateTime));
            dt.Columns.Add("NguoiThamGia", typeof(string));
            //dt.Columns.Add("LoaiTuongQuan", typeof(DateTime));
            //dt.Columns.Add("Kết thúc", typeof(DateTime));
            //dt.Constraints.Add("IDPK", dt.Columns["CodeCongViecCon"], true);

            //DataTable dtDependencies = new DataTable("Dependencies");


            //dtDependencies.Columns.Add("Parent", typeof(int)); //đuôi mũi tên
            //dtDependencies.Columns.Add("Dependent", typeof(int)); //Đầu mũi tên
            //dtDependencies.Columns.Add("Type", typeof(int)); //typemns.Add("Type", typeof(DateTime)); //type

            int indexCon = 0;

#pragma warning disable CS0219 // The variable 'indGroup' is assigned but its value is never used
            int indGroup = 0;
#pragma warning restore CS0219 // The variable 'indGroup' is assigned but its value is never used
            dt.Rows.Add(indexCon++, DBNull.Value, "", "Tiến độ toàn bộ dự án");
#pragma warning disable CS0219 // The variable 'crIndCha' is assigned but its value is never used
            int crIndCha = 0;
#pragma warning restore CS0219 // The variable 'crIndCha' is assigned but its value is never used
            int indexChaDauMuc = 0;
            //int test = 0;
            //string codeConTruoc = "";
            foreach (DataRow rDauViec in dtFromDbDauViec.Rows)
            {
                //if (test > 0)
                //    break;
                //test++;
                indexChaDauMuc = indexCon;
                dt.Rows.Add(indexCon++, 0, "", rDauViec["DauViec"].ToString());
                var lsDauViec = dtFromDbCVCha.AsEnumerable().Where(x => x["CodeDauMuc"].ToString() == rDauViec["Code"].ToString()).ToList();
                foreach (DataRow r in lsDauViec)
                {
                    int indChoCon3 = indexCon;
                    dt.Rows.Add(indexCon++, indexChaDauMuc, "", r["TenCongViec"]);
                    var lsCVCon = dtFromDb.AsEnumerable().Where(x => x["CodeCongViecCha"].ToString() == r["CodeCongViecCha"].ToString()).ToList();
                    foreach (DataRow rCon in lsCVCon)
                    {
                        string codeCVCon = rCon["CodeCongViecCon"].ToString();
                        string NTG = fcn_getListUserFromDb1Str(codeCVCon, "CodeCongViecCon", GiaoViec.TBL_KEHOACH_NGUOITHAMGIA);
                        NTG = (NTG == "") ? "Thêm người tham gia" : NTG.Remove(0, 2);

                        dic_GiaoViec_MapGuid2IdOfScheduler.Add(codeCVCon, new KeyValuePair<int, KeyValuePair<string, string>>(indexCon, new KeyValuePair<string, string>(r["TenCongViec"].ToString(), rCon["TenCongViec"].ToString())));

                        dt.Rows.Add(indexCon++, indChoCon3, rCon["CodeCongViecCon"], rCon["TenCongViec"], DateTime.Parse(rCon[3].ToString()), DateTime.Parse(rCon[4].ToString()), NTG);
                        //if (codeConTruoc != "")
                        //dtDependencies.Rows.Add(indexCon - 1, indexCon, (int)rCon["TenCongViec"]);
                        //codeConTruoc = rCon["CodeCongViecCon"].ToString();
                    }
                }
            }



            //foreach (DataRow r in dtFromDb.Rows)
            //{
            //    int crInd = lsCodeCha.IndexOf(r[0].ToString());

            //    if (crInd != crIndCha)
            //    {
            //        dt.Rows.Add(indexCon, 0, dtFromDbCVCha.Rows[crInd]["TenCongViec"].ToString());
            //        indGroup = indexCon++;
            //    }
            //    dt.Rows.Add(indexCon++, indGroup, r[2], DateTime.Parse(r[3].ToString()), DateTime.Parse(r[4].ToString()));
            //    crIndCha = crInd;
            //}

            schStorage_KHGV.Resources.DataSource = dt;//Hiển thị trên resource tree

            schStorage_KHGV.Appointments.DataSource = dt; // Cuộc họp trong ganttView
            //schStorage_KHGV.AppointmentDependencies.DataSource = dtDependencies;
            fcn_UpdateDuongGangGiuaCacCongViec();

        }
        private void button18_Click(object sender, EventArgs e)
        {
            //spsheet_Thongtinchinh.draw;
            //spsheet_GV_KH_ChiTietCacHMCongViec.Refresh();
        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_CustomDrawCell(object sender, DevExpress.XtraSpreadsheet.CustomDrawCellEventArgs e)
        {
            //e.DrawDefault();
            ////CheckBox cb = new CheckBox();
            ///spsheet_GV_KH_ChiTietCacHMCongViec
            ///
            if (!e.Cell.Worksheet.Workbook.DefinedNames.Contains(MyConstant.Range_KeHoach))
                return;

            CellRange range = e.Cell.Worksheet.Workbook.Range[MyConstant.Range_KeHoach];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(range);
            string loaiHang = e.Cell.Worksheet.Rows[e.Cell.RowIndex][dic[GiaoViec.COL_TypeRow]].Value.ToString();
            if ((e.Cell.ColumnIndex == 0 || e.Cell.Worksheet.Columns[e.Cell.ColumnIndex].Heading == dic[GiaoViec.COL_GhiNhatKy]) && (loaiHang == MyConstant.TYPEROW_CVCON || loaiHang == MyConstant.TYPEROW_CVCha))
            {
                e.Text = "";
                int x_center = (e.Bounds.Left + e.Bounds.Right) / 2;
                int y_center = (e.Bounds.Bottom + e.Bounds.Top) / 2;
                Rectangle rec = new Rectangle(x_center - 25, y_center - 10, 50, 20);
                e.Cache.Paint.DrawCheckBox(e.Cache.Graphics, rec, (e.Cell.Value == true) ? ButtonState.Checked : ButtonState.Normal);
            }
        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_CellBeginEdit(object sender, DevExpress.XtraSpreadsheet.SpreadsheetCellCancelEventArgs e)
        {
            IWorkbook workbook = e.Worksheet.Workbook;
            Worksheet ws = e.Worksheet;

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            string colTitle = ws.Rows[0][e.Cell.ColumnIndex].Value.ToString();
            string typeRow = ws.Rows[e.RowIndex][dic[GiaoViec.COL_TypeRow]].Value.ToString();
            var allPermission = BaseFrom.allPermission;

            if (typeRow == MyConstant.TYPEROW_CVCha)
            {
                string codeCVcha = ws.Rows[e.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                //string codeCVcha = ws.Rows[e.RowIndex][dic[GiaoViec.COL_RowCha]].Value.ToString();

                if (!allPermission.HaveInitProjectPermission
                        && !allPermission.AllContractorThatUserIsAdmin.Contains(ctrl_DonViThucHienGiaoViec.SelectedDVTH?.Code)
                    && !allPermission.AllContractorThatUserIsAdmin.Contains(slke_ThongTinDuAn.EditValue as string)
                    && !allPermission.TasksInEdit.Contains(codeCVcha))
                {
                    MessageShower.ShowError("Bạn không có chỉnh sửa công tác này!");
                    e.Cancel = true;
                    return;
                }
            }
            else if (typeRow == MyConstant.TYPEROW_CVCON)
            {
                int indCVcha = (int)ws.Rows[e.RowIndex][dic[GiaoViec.COL_RowCha]].Value.NumericValue - 1;
                string codeCVcha = ws.Rows[indCVcha][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                //string codeCVcha = ws.Rows[e.RowIndex][dic[GiaoViec.COL_RowCha]].Value.ToString();

                if (!allPermission.HaveInitProjectPermission
                        && !allPermission.AllContractorThatUserIsAdmin.Contains(ctrl_DonViThucHienGiaoViec.SelectedDVTH?.Code)
                    && !allPermission.AllContractorThatUserIsAdmin.Contains(slke_ThongTinDuAn.EditValue as string)
                    && !allPermission.TasksInEdit.Contains(codeCVcha))
                {
                    MessageShower.ShowError("Bạn không có chỉnh sửa công tác này!");
                    e.Cancel = true;
                    return;
                }
            }

            if ((e.Cell.ColumnIndex == 0 || colTitle == GiaoViec.COL_GhiNhatKy) && ws.Range[MyConstant.Range_KeHoach].Contains(e.Cell))
            {

                e.Cancel = true;
                bool val = e.Cell.Value == true ? false : true;
                e.Cell.SetValue(val);
                if (colTitle == GiaoViec.COL_GhiNhatKy)
                {
                    string codeCT = ws.Rows[e.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                    //string typeRow = ws.Rows[e.RowIndex][dic[GiaoViec.COL_LOAIHANG]].Value.ToString();
                    string colCodeDb = (typeRow == MyConstant.TYPEROW_CVCha) ? "CodeCongViecCha" : "CodeCongViecCon";

                    string dbString = $"UPDATE \"{GiaoViec.TBL_CONGVIECCHA}\" SET \"GhiNhatKy\" = '{val}' WHERE \"{colCodeDb}\" = '{codeCT}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }

            if (colTitle == GiaoViec.COL_MaDinhMuc && string.IsNullOrEmpty(typeRow))
            {
                if (rg_GV_DauViec.GetDescription() == "Thi công")
                {

                    if (!allPermission.HaveInitProjectPermission
                        && !allPermission.AllContractorThatUserIsAdmin.Contains(ctrl_DonViThucHienGiaoViec.SelectedDVTH?.Code)
                        && !allPermission.AllContractorThatUserIsAdmin.Contains(slke_ThongTinDuAn.EditValue as string))
                    {
                        MessageShower.ShowError("Bạn không có quyền thêm công tác!");
                        e.Cancel = true;
                        return;
                    }


                    int indColTypeRow = ws.Columns[dic[GiaoViec.COL_TypeRow]].Index;
                    CellRange rangeData = ws.Range[MyConstant.Range_KeHoach];
                    int? indRowHMNullble = ws.Range.FromLTRB(indColTypeRow, rangeData.TopRowIndex, indColTypeRow, e.RowIndex)
                        .Search(MyConstant.TYPEROW_HangMuc, MyConstant.MySearchOptions).LastOrDefault()?.RowIndex;

                    if (!indRowHMNullble.HasValue)
                    {
                        MessageShower.ShowInformation("Không thể tìm hạng mục!");
                        e.Cancel = true;
                        return;
                    }

                    int indRowHM = indRowHMNullble.Value;
                    m_ctrlTKDM.fcn_LoadCodeAndType(MyConstant.CONST_TYPE_DinhMuc_KHGV, ws.Rows[indRowHM][dic[GiaoViec.COL_CodeCT]].Value.ToString());
                    BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                    {

                        TextBox tb = FindTextBox(ss.Controls);
                        if (tb != null)
                        {
                            tb.TextChanged += fcn_handle_txtBoxTimKiem_TextChange;
                        }
                    }), sender as SpreadsheetControl);
                    Debug.WriteLine("Finished");
                }
                else
                {
                    MessageShower.ShowInformation("Vui lòng nhập tên công việc!");
                    e.Cancel = true;
                }

                return;
            }
            else if (colTitle == GiaoViec.COL_ThanhTienKeHoach)
                e.Cancel = true;
        }


        /// <summary>
        /// Tính khối lượng thi công của công tác
        /// </summary>
        /// <param name="isCongTacThiCong">true: Nếu là phần đã chia thi công của công tác con, false: Nếu công tác con không chia khối lượng thi công</param>
        /// <param name="code"></param>
        /// <returns></returns>
        private double fcn_GiaoViec_TinhKhoiLuongThiCong(string code, bool isCongTacCha)
        {
            string col = (isCongTacCha) ? "CodeCongViecCha" : "CodeCongViecCon";
            string dbString = $"SELECT \"KhoiLuong\" FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE \"{col}\" = '{code}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            double KL = 0;
            dt.AsEnumerable().ForEach(x => KL += double.Parse(x["KhoiLuong"].ToString()));

            return KL;
        }

        private void tab_CHITIETGIAOVIEC_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void sched_KHGV_CustomDrawTimeCell(object sender, DevExpress.XtraScheduler.CustomDrawObjectEventArgs e)
        {
            var info = e.ObjectInfo as TimeCell;
            Brush shiftBrush = Brushes.White;

            switch (info.Interval.Start.DayOfWeek)
            {
                case DayOfWeek.Saturday:
                    shiftBrush = Brushes.LightPink;
                    break;
                case DayOfWeek.Sunday:
                    shiftBrush = Brushes.IndianRed;
                    break;
                default:
                    break;
            }

            if (info.Interval.Start.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE) == DateTime.Today.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE))
                shiftBrush = Brushes.Violet;

            e.DrawDefault();
            Rectangle rec = new Rectangle(e.Bounds.Left + 1, e.Bounds.Top, e.Bounds.Width - 2, e.Bounds.Height);
            e.Cache.FillRectangle(shiftBrush, rec);



            e.Handled = true;
        }

        private void rsTree_KHGV_CustomDrawRow(object sender, DevExpress.XtraTreeList.CustomDrawRowEventArgs e)
        {
            //e.Appearance.Font = new Font("Serif", 24, FontStyle.Bold);
            //e.RowInfo.Cells.ForEach(e => e)
        }

        private void rsTree_KHGV_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {
            TreeListNode node = e.Node;
            if (node.ParentNode == null)
            {
                e.Appearance.Font = new Font("Arial", 11, FontStyle.Bold);
            }
            else if (node.HasChildren)
            {
                e.Appearance.Font = new Font("Arial", 10, FontStyle.Bold | FontStyle.Italic);
            }
            else
            {
                e.Appearance.Font = new Font("Arial", 9, FontStyle.Italic);

            }
        }

        private void sched_KHGV_SizeChanged(object sender, EventArgs e)
        {
            sched_KHGV.Views.GanttView.ResourcesPerPage = sched_KHGV.Height / 50;
        }



        private void btn_CC_BangGiaoViecNhanvien_Click(object sender, EventArgs e)
        {
            // Bảng danh sách các nhân viên đã được giao việc - mở từ bảng chấm công
            FormBangCongViecCacNhanVien CC_BangCacNhanVien = new FormBangCongViecCacNhanVien();
            CC_BangCacNhanVien.ShowDialog();

        }






        Control dgv_textBox;
        // TextBox TextChanged Event
        //private void textBox_TextChanged(object sender, EventArgs e)
        //{

        //    TextBox tb = sender as TextBox;
        //    //tb.TextChanged -= textBox_TextChanged;
        //    if (tb.Text.Length < 2)
        //        return;
        //    string strFull = MyFunction.fcn_RemoveAccents(tb.Text);
        //    //tb.SelectionStart = tb.Text.Length;
        //    /*            Task.Factory.StartNew(() =>
        //                {*/

        //    List<string> strLs = strFull.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();

        //    string queryStr;
        //    if (strLs.Count == 1)
        //    {
        //        string str = strLs[0];
        //        queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_DINHMUCALL} WHERE (\"MaDinhMuc\" LIKE '%{str}%' OR \"TenKhongDau\" LIKE '%{str}%')";
        //    }
        //    else
        //    {
        //        queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_DINHMUCALL} WHERE ";
        //        //for (int i = 1; i < m_lsDauDM.Count; i++)
        //        //    queryStr += $",'{m_lsDauDM[i]}'";
        //        //queryStr += ")) ";
        //        /*string strSearch = "";*/
        //        string condition ="";
        //        foreach (string str in strLs)
        //        {
        //            condition += $" AND \"TenKhongDau\" LIKE '%{str}%'";
        //        }

        //        queryStr += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE

        //    }
        //    Debug.WriteLine($"Query String {queryStr}");
        //    DataTable dt = DataProvider.InstanceTBT.ExecuteQuery(queryStr);
        //    //dt.Rows.RemoveAt(dt.Rows.Count);
        //    //dt.Columns.Add("Chon", typeof(bool)).SetOrdinal(0);
        //    m_ctrlTKDM.Show();
        //    m_ctrlTKDM.Parent = PhanMemQuanLyThiCong360.ActiveForm;
        //    //m_ctrlTKDM.PointToScreen(tb.PointToScreen(Point.Empty));

        //    m_ctrlTKDM.mopenFileDialogation = new Point(panel121.Width + tb.Parent.mopenFileDialogation.X + tb.Width, 300);
        //    //m_ctrlTKDM.
        //    m_ctrlTKDM.BringToFront();
        //    m_ctrlTKDM.fcn_loadDinhMuc(dt);
        //}

        private void spsheet_GV_KH_ChiTietCacHMCongViec_MouseClick(object sender, MouseEventArgs e)
        {
            if (rg_GV_DauViec.GetAccessibleName() == "DuAn")
            {
                ctrl_HaoPhiVatTuGiaoViec.Clear();
                return;
            }

            Point p = e.Location;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            Cell cell = spsheet_GV_KH_ChiTietCacHMCongViec.GetCellFromPoint(new System.Drawing.PointF((float)p.X, (float)p.Y));

            if (cell != null)
            {
                //Guid guid;
                if (ws.Rows[cell.RowIndex][dic[GiaoViec.COL_TypeRow]].Value.ToString() == MyConstant.TYPEROW_CVCha)
                {
                    string MaCongTac = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_MaDinhMuc]].Value.ToString();
                    string TenCongTac = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_TenCongViec]].Value.ToString();
                    //double KLKHStr = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_KLKeHoach]].Value.NumericValue;
                    string codeCongTacTheoGiaiDoan = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_CodeCTTheoGiaiDoan]].Value.ToString();
                    string disp = $"({MaCongTac}) {TenCongTac}";

                    //if (string.IsNullOrEmpty(codeCongTacTheoGiaiDoan))
                    //{
                    ctrl_HaoPhiVatTuGiaoViec.pushData(TypeKLHN.GiaoViecCha, ws.Rows[cell.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString(), disp);
                    //}
                    //else
                    //    ctrl_HaoPhiVatTuGiaoViec.pushData(TypeKLHN.CongTac, codeCongTacTheoGiaiDoan, disp);

                    return;
                }
                else ctrl_HaoPhiVatTuGiaoViec.Clear();
            }
            else ctrl_HaoPhiVatTuGiaoViec.Clear();// = null;

        }

        private void dgv_ThongTinHaoPhi_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            if (dgv_textBox != null)
            {
                dgv_textBox.TextChanged -= fcn_handle_txtBoxTimKiem_TextChange;
                dgv_textBox = null;
            }
        }

        private Dictionary<string, string> fcn_GetDicUser()
        {
            string dbString = $"SELECT \"Code\", \"FullName\" FROM \"{MyConstant.TBL_FROMSERVER_USER}\"";
            DataTable dt = DataProvider.InstanceServer.ExecuteQuery(dbString);
            return dt.AsEnumerable().ToDictionary(row => row.Field<string>("Code"), row => row.Field<string>("FullName"));
        }

        /// <summary>
        /// Thêm Danh sách thành viên và group vào các combobox ở quy trình mua hàng
        /// </summary>
        private void fcn_loadUser2QTMH()
        {
            string dbString = $"SELECT \"Code\", \"FullName\" FROM \"{MyConstant.TBL_FROMSERVER_USER}\"";
            DataTable dt = DataProvider.InstanceServer.ExecuteQuery(dbString);
            Dictionary<string, string> dicUser = dt.AsEnumerable().ToDictionary(row => row.Field<string>("Code"), row => row.Field<string>("FullName"));

            dbString = $"SELECT \"Code\", \"Name\" FROM \"{MyConstant.TBL_FROMSERVER_GROUP}\"";
            dt = DataProvider.InstanceServer.ExecuteQuery(dbString);
            Dictionary<string, string> dicGroup = dt.AsEnumerable().ToDictionary(row => row.Field<string>("Code"), row => row.Field<string>("Name"));
            //Dictionary<string, string> dicUser = new Dictionary<string, string>();

            //db.User.Select(x => new { x.Code, x.FullName, x.Email }).ToList().ForEach(x => dicUser.Add(x.Code, $"{x.FullName}({x.Email})"));
            //Dictionary<string, string> dicGroup = db.Group.Select(x => new { x.Code, x.Name }).ToDictionary(x => x.Code, x => x.Name);

            tableLayout_QTMH.Controls.OfType<Panel>().ToList().ForEach(y =>
            y.Controls.OfType<Panel>().ToList().ForEach(z =>
            //z.Controls.OfType<Panel>().ToList().ForEach(t =>
            z.Controls.OfType<ComboBox>().ToList().ForEach(x =>
            {
                if (x.Name.Contains("Nguoi"))
                    x.DataSource = dicUser.ToList();
                else if (x.Name.Contains("Phong"))
                    x.DataSource = dicGroup.ToList();
                x.SelectedIndex = -1;
            })));
        }
        /// <summary>
        /// Tải danh sách quy trình mua hàng
        /// </summary>
        private void fcn_loadListQTMH(int index)
        {
            //cbb_QLVC_MH_ChonMauDaThucHien.SelectedIndexChanged -= cbb_QLVC_MH_ChonMauDaThucHien_SelectedIndexChanged;
            //fcn_loadUser2QTMH();
            string dbString = $"SELECT * FROM {MyConstant.TBL_GV_QTMH_ThongTin} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            if (dt.Rows.Count == 0)
            {
                cbb_QLVC_MH_ChonMauDaThucHien.DataSource = null;
                //cbb_QLVC_MH_ChonMauDaThucHien.SelectedIndex = -1;

                //bt_QLVC_MH_LuuQuyTrinh.Enabled = bt_QLVC_MH_XoaQuyTrinh.Enabled = false;
                return;
            }
            //bt_QLVC_MH_LuuQuyTrinh.Enabled = bt_QLVC_MH_XoaQuyTrinh.Enabled = true;

            Dictionary<string, string> DicCbb = new Dictionary<string, string>();


            foreach (DataRow r in dt.Rows)
            {
                DicCbb.Add(r["Code"].ToString(), r["TenQuyTrinh"].ToString());

            }
            cbb_QLVC_MH_ChonMauDaThucHien.DisplayMember = "Value";
            cbb_QLVC_MH_ChonMauDaThucHien.ValueMember = "Key";
            cbb_QLVC_MH_ChonMauDaThucHien.DataSource = DicCbb.ToList();

            //cbb_QLVC_MH_ChonMauDaThucHien.SelectedIndexChanged += cbb_QLVC_MH_ChonMauDaThucHien_SelectedIndexChanged;

            if (index == -2)
            {
                cbb_QLVC_MH_ChonMauDaThucHien.SelectedIndex = cbb_QLVC_MH_ChonMauDaThucHien.Items.Count - 1;
                return;
            }
            if (cbb_QLVC_MH_ChonMauDaThucHien.Items.Count > index)
                cbb_QLVC_MH_ChonMauDaThucHien.SelectedIndex = index;
            else
                cbb_QLVC_MH_ChonMauDaThucHien.SelectedIndex = -1;

            //cbb_QLVC_MH_ChonMauDaThucHien.DisplayMember = "Value";
            //cbb_QLVC_MH_ChonMauDaThucHien.ValueMember = "Key";
        }

        private void fcn_GV_QTMH_LoadQT()
        {
            string codeQT = cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue as string;
            string dbString = $"SELECT * FROM {MyConstant.TBL_GV_QTMH_ThongTin} WHERE \"Code\"='{codeQT}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dt.Rows.Count == 0)
            {
                MessageShower.ShowInformation("Không thể tải thông tin quy trình");
                return;
            }

            foreach (KeyValuePair<Control, string> Kvp in DIC_QTMH_Map2Db)
            {
                Control ctl = Kvp.Key;
                //string colDb = Kvp.Value;
                string val = dt.Rows[0][Kvp.Value].ToString();
                if (ctl is CheckBox)
                {
                    (ctl as CheckBox).Checked = (val == "1") ? true : false;
                }
                else if (ctl is ComboBox)
                {
                    ComboBox cbb = ctl as ComboBox;
                    if (cbb.ValueMember == "Key")
                        cbb.SelectedValue = val;
                    else
                        cbb.Text = val;
                }
                else if (ctl is NumericUpDown)
                {
                    (ctl as NumericUpDown).Value = int.Parse(val);
                }
                else if (ctl is DateTimePicker)
                {
                    DateTime date;
                    if (DateTime.TryParse(val, out date))
                        (ctl as DateTimePicker).Value = date;
                }
            }

            dbString = $"SELECT * FROM {MyConstant.TBL_GV_QTMH_DeXuat_VatTu} WHERE \"CodeQuyTrinh\"='{cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue}'";
            dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dgv_QLVC_MH_NoiDungDeXuat.DataSource = dt;
            dgv_QLVC_MH_NoiDungDeXuat.Columns[0].Visible = dgv_QLVC_MH_NoiDungDeXuat.Columns[1].Visible = false;

            //lấy list Vật tư
            dbString = $"SELECT * FROM {MyConstant.TBL_GV_QTMH_DeXuat_VatTu} WHERE \"CodeQuyTrinh\"='{cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue}'";
            dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            Dictionary<string, string> DIC_VT = new Dictionary<string, string>();
            foreach (DataRow r in dt.Rows)
            {
                DIC_VT.Add(r["Code"].ToString(), r["VatTu"].ToString());
            }

            //lấy listNCC
            dbString = $"SELECT * FROM {MyConstant.TBL_GV_QTMH_ListNCC} WHERE \"CodeQuyTrinh\"='{cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue}'";
            dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            Dictionary<string, string> DIC_NCC = new Dictionary<string, string>();
            foreach (DataRow r in dt.Rows)
            {
                DIC_NCC.Add(r["Code"].ToString(), r["NhaCungCap"].ToString());
            }

            //Cập nhật datagridview
            dbString = $"SELECT * FROM {MyConstant.TBL_GV_QTMH_NCCDaChon} WHERE \"CodeQuyTrinh\"='{codeQT}'";
            dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            foreach (DataRow r in dt.Rows)
            {
                r["CodeNhaCungCap"] = DIC_NCC[r["CodeNhaCungCap"].ToString()];
                r["CodeVatTu"] = DIC_VT[r["CodeVatTu"].ToString()];
            }

            dgv_QLVC_MH_NCCBaoGia.DataSource = dt;
            dgv_QLVC_MH_NCCBaoGia.Columns[1].Visible = false;
            dgv_QLVC_MH_NCCBaoGia.Columns[2].Visible = false;

            DataTable dt1 = dt.Copy();
            dgv_GV_QTMH_NCCDaDuyet.DataSource = dt1;
            dgv_GV_QTMH_NCCDaDuyet.Columns[1].Visible = false;
            dgv_GV_QTMH_NCCDaDuyet.Columns[2].Visible = false;
            //dgv_GV_QTMH_NCCDaDuyet.EndEdit();
            //dgv_QLVC_MH_NCCBaoGia.EndEdit();


            fcn_updateNCCDaDuyet();
        }

        private void cbb_QLVC_MH_ChonMauDaThucHien_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbb_QLVC_MH_ChonMauDaThucHien.SelectedIndex < 0)
            {
                tableLayout_QTMH.Enabled = false;
                cb_GV_QTMH_DeXuat_0.Enabled = false;
                cb_GV_QTMH_LuaChonNCC_2.Enabled = false;
                cb_GV_QTMH_TimNCC_1.Enabled = false;
                cb_GV_QTMH_DuyetPA_3.Enabled = false;
                bt_QLVC_MH_XoaQuyTrinh.Enabled = false;
                bt_QLVC_MH_LuuQuyTrinh.Enabled = false;
                pn_QTMH_ThoiGian.Enabled = false;
                return;
            }

            tableLayout_QTMH.Enabled = true;
            cb_GV_QTMH_DeXuat_0.Enabled = true;
            cb_GV_QTMH_LuaChonNCC_2.Enabled = true;
            cb_GV_QTMH_TimNCC_1.Enabled = true;
            cb_GV_QTMH_DuyetPA_3.Enabled = true;
            bt_QLVC_MH_XoaQuyTrinh.Enabled = true;
            bt_QLVC_MH_LuuQuyTrinh.Enabled = true;
            pn_QTMH_ThoiGian.Enabled = true;
            fcn_GV_QTMH_LoadQT();
        }

        private void fcn_updateNCCDaDuyet()
        {
            string dbString = $"SELECT * FROM \"{MyConstant.TBL_GV_QTMH_NCCDaDuyet}\"";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            List<string> lsNCCDaDuyet = dt.AsEnumerable().Select(x => x.Field<string>("CodeNhaCungCapDaChon")).ToList();
            foreach (DataGridViewRow r in dgv_QLVC_MH_NCCBaoGia.Rows)
            {
                if (lsNCCDaDuyet.Contains(r.Cells["Code"].Value.ToString()))
                {
                    DataGridViewButtonCell cell = r.Cells["Duyet"] as DataGridViewButtonCell;
                    cell.UseColumnTextForButtonValue = false;
                    cell.Value = "Đã duyệt";
                    cell.ReadOnly = true;
                    cell.Style.BackColor = Color.Gray;
                    r.DefaultCellStyle.BackColor = Color.LightGray;
                    CurrencyManager currencyManager = (CurrencyManager)BindingContext[dgv_GV_QTMH_NCCDaDuyet.DataSource];
                    currencyManager.SuspendBinding();
                    dgv_GV_QTMH_NCCDaDuyet.Rows[r.Index].Visible = true;
                    currencyManager.ResumeBinding();
                    //dgv_QLVC_MH_NCCBaoGia.Update();

                }
                else
                {
                    DataGridViewButtonCell cell = r.Cells["Duyet"] as DataGridViewButtonCell;
                    cell.UseColumnTextForButtonValue = false;
                    cell.Value = "Duyet";
                    cell.Style.BackColor = Color.Green;
                    r.DefaultCellStyle.BackColor = Color.White;

                    CurrencyManager currencyManager = (CurrencyManager)BindingContext[dgv_GV_QTMH_NCCDaDuyet.DataSource];
                    currencyManager.SuspendBinding();
                    dgv_GV_QTMH_NCCDaDuyet.Rows[r.Index].Visible = false;
                    currencyManager.ResumeBinding();

                }
            }
        }


        private void fcn_GV_QTMH_LuuQT()
        {
            /*string dbString = $"UPDATE {MyConstant.TBL_GV_QTMH_ThongTin} SET ";
            foreach (KeyValuePair<Control, string> Kvp in DIC_QTMH_Map2Db)
            {
                Control ctl = Kvp.Key;
                string colDb = Kvp.Value;
                //string val = dt.Rows[0][Kvp.Value].ToString();
                dbString += $"\"{colDb}\"";
                if (ctl is CheckBox)
                {
                    dbString += $"='{((ctl as CheckBox).Checked ? 1 : 0)}', ";
                }
                else if (ctl is ComboBox)
                {
                    ComboBox cbb = ctl as ComboBox;
                    if (cbb.ValueMember == "Key")
                        dbString += $"='{cbb.SelectedValue}', ";
                    else
                        dbString += $"='{cbb.Text}', ";

                }
                else if (ctl is NumericUpDown)
                {
                    dbString += $"='{(ctl as NumericUpDown).Value}', ";
                }
                else if (ctl is DateTimePicker)
                {
                    dbString += $"='{(ctl as DateTimePicker).Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}', ";
                }
            }
            dbString = dbString.Remove(dbString.Length - 2, 2);
            dbString += $"WHERE \"Code\"='{cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);


            DataTable dt = dgv_QLVC_MH_NoiDungDeXuat.DataSource as DataTable;
            foreach (DataRow r in dt.Rows)
            {
                if (r["Code"].ToString() == "")
                    r["Code"] = Guid.NewGuid().ToString();
                if (r["CodeQuyTrinh"].ToString() == "")
                    r["CodeQuyTrinh"] = cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue;
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, MyConstant.TBL_GV_QTMH_DeXuat_VatTu);*/
        }
        private void bt_QLVC_MH_LuuQuyTrinh_Click(object sender, EventArgs e)
        {


            fcn_GV_QTMH_LuuQT();
            MessageShower.ShowInformation("Đã lưu quy trình!");
            ////Cập nhật nội dung đề xuất
            //string dbString = $"UPDATE {MyConstant.TBL_GV_QTMH_DeXuat} SET " +
            //    $"\"NguoiDeXuat\"='{cbo_QLVC_MH_NguoiDeXuat.SelectedValue}', " +
            //    $"\"Người duyệt đề xuất\"='{cbo_QLVC_MH_NguoiDuyetDeXuat.SelectedValue}', " +
            //    $"\"Thời gian duyệt đề xuất\"='{nud_QTMH_TgDuyetDeXuat.Value}', " +
            //    $"\"Người duyệt mua\"='{cbo_QLVC_MH_NguoiDuyetMua.SelectedValue}', " +
            //    $"\"Thời gian duyệt mua\"='{nud_QTMH_TgDuyetMua.Value}', " +
            //    $"\"Người duyệt thanh toán\"='{cbo_QLVC_MH_NguoiDuyetThanhToan.SelectedValue}', " +
            //    $"\"Thời gian duyệt thanh toán\"='{nud_QTMH_TgDuyetThanhToan.Value}', " +
            //    $"\"Ngày gửi đề xuất\"='{date_QLVC_MH_ThoiDiemGuiDeXuat.Value.ToString(MyConstant.CONST_DATE_FORMAT)}', " +
            //    $"\"Ngày cần vật tư\"='{date_QLVC_MH_ThoiGianCanVatTu.Value.ToString(MyConstant.CONST_DATE_FORMAT)}' " +
            //    $"WHERE \"CodeQuyTrinh\"='{cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue}'";

            //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //DataTable dt = dgv_QLVC_MH_NoiDungDeXuat.DataSource as DataTable;
            //foreach(DataRow r in dt.Rows)
            //{
            //    r["Code"] = Guid.NewGuid().ToString();
            //    r["CodeQuyTrinh"] = cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue;
            //}    
            //DataProvider.InstanceTHDA.UpdateDataTable(dt, MyConstant.TBL_GV_QTMH_DeXuat_VatTu);

            ////Cập nhật nội dung tìm nhà cung cấp-Báo giá
            //dbString = $"UPDATE {MyConstant.TBL_GV_QTMH_TimNhaCungCapBaoGia} SET " +
            //    $"\"Phòng thực hiện\"='{cbo_QLVC_MH_PhongThucHienBaoGia.SelectedValue}', " +
            //    $"\"NguoiThucHien\"='{cbo_QLVC_MH_NguoiThucHienBaoGia.SelectedValue}', " +
            //    $"\"Thời gian thực hiện\"='{nud_QTMH_TgThucHienTimNCC.Value}', " +
            //    $"\"Phòng giám sát\"='{cbo_QLVC_MH_PhongGiamSatBaoGia.SelectedValue}', " +
            //    $"\"Người giám sát\"='{cbo_QLVC_MH_NguoiGiamSatBaoGia.SelectedValue}', " +
            //    $"\"Thời gian giám sát\"='{nud_QTMH_TgGiamSatTimNCC.Value}' " +
            //    $"WHERE \"CodeQuyTrinh\"='{cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue}'";

            //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //dt = dgv_QLVC_MH_NoiDungDeXuat.DataSource as DataTable;
            //foreach (DataRow r in dt.Rows)
            //{
            //    r["Code"] = Guid.NewGuid().ToString();
            //    r["CodeQuyTrinh"] = cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue;
            //}
            //DataProvider.InstanceTHDA.UpdateDataTable(dt, MyConstant.TBL_GV_QTMH_DeXuat_VatTu);

        }

        private void dgv_QLVC_MH_NoiDungDeXuat_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            //if (dgv_QLVC_MH_NoiDungDeXuat.Rows.Count == 0)
            //    return;
            //dgv_QLVC_MH_NoiDungDeXuat.Rows[e.RowIndex].Cells["Code"].Value = Guid.NewGuid().ToString();
            //dgv_QLVC_MH_NoiDungDeXuat.Rows[e.RowIndex].Cells["CodeQuyTrinh"].Value = cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue;
        }

        //private void cb_GV_QTMH_DeXuat_CheckedChanged(object sender, EventArgs e)
        //{

        //}

        private void MyHandle_GV_QTMH_AnHienPanel_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox cb = sender as CheckBox;
            int indOfTableLayout = 0;
            bool isMucLon = int.TryParse(cb.Name.Substring(cb.Name.Length - 1), out indOfTableLayout); //Có phải mục lớn không: Ví dụ ĐỀ XUẤT
            string TienTo = "Hiện";/*(isMucLon) ? "Thêm " : "Thêm quy trình ";*/
            //Control[] lsPn = cb.Parent.Parent.Controls. (cb.Name.Replace("cb", ""), true); //Tìm panel tương ứng với combobox
            //if (lsPn.Length > 0)
            //{
            string nameSearch = cb.Name.Replace("cb", "");
            bool isHasControl = false;
            foreach (Control ctrl in cb.Parent.Controls)
            {
                if (ctrl.Name.EndsWith(nameSearch) && ctrl != cb)
                {
                    isHasControl = true;
                    ctrl.Visible = cb.Checked;


                    if (!cb.Checked)
                    {
                        cb.Text = $"Hiện {cb.Text.Replace("Ẩn ", "")}";
                        cb.ForeColor = Color.Red;
                        if (isMucLon)
                            tableLayout_QTMH.ColumnStyles[indOfTableLayout].Width = 0;
                    }
                    else
                    {
                        cb.Text = $"Ẩn {cb.Text.Replace("Hiện ", "")}";
                        cb.ForeColor = Color.Black;
                        if (isMucLon)
                            tableLayout_QTMH.ColumnStyles[indOfTableLayout].Width = 400;
                    }
                }
            }
            //}
            //else
            //{
            if (!isHasControl)
            {
                MessageShower.ShowInformation("Không có thông tin tương ứng với combobox này!");
                return;
            }
            //}
        }

        private void hpl_GV_QTMH_TimNCC_NguoiThamGia_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Form_TTCT_ThanhPhanThamGia form = new Form_TTCT_ThanhPhanThamGia(cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue.ToString(),
                GiaoViecTypeEnum.TYPE_GV_QTMH_TIMNCC_NguoiThamGia);
            form.ShowDialog();
        }

        private void hpl_GV_QTMH_ChonNCC_NguoiThamGia_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Form_TTCT_ThanhPhanThamGia form = new Form_TTCT_ThanhPhanThamGia(cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue.ToString(),
                GiaoViecTypeEnum.TYPE_GV_QTMH_CHONNCC_NguoiThamGia);
            form.ShowDialog();
        }

        private void hpl_GV_QTMH_DuyetPA_NguoiThamGia_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Form_TTCT_ThanhPhanThamGia form = new Form_TTCT_ThanhPhanThamGia(cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue.ToString(),
                GiaoViecTypeEnum.TYPE_GV_QTMH_DUYETPA_NguoiThamGia);
            form.ShowDialog();
        }

        private void bt_ChinhSuaNCCDaBaoGia_Click(object sender, EventArgs e)
        {
            fcn_GV_QTMH_LuuQT();
            Form_ThemNCCChoQTMH form = new Form_ThemNCCChoQTMH(cbb_QLVC_MH_ChonMauDaThucHien.SelectedValue.ToString());
            form.ShowDialog();
            fcn_GV_QTMH_LoadQT();
        }

        private void bt_GV_QTMH_ChinhSuaNCCDuocChon_Click(object sender, EventArgs e)
        {

        }

        private void dgv_QLVC_MH_NCCBaoGia_CellClick(object sender, DataGridViewCellEventArgs e)
        {

            if (dgv_QLVC_MH_NCCBaoGia.Columns[e.ColumnIndex].HeaderText == "Duyet")
            {
                DataGridViewButtonCell cell = dgv_QLVC_MH_NCCBaoGia.Rows[e.RowIndex].Cells[e.ColumnIndex] as DataGridViewButtonCell;
                if (cell.Value.ToString() == "Duyet")
                {
                    string dbString = $"INSERT INTO {MyConstant.TBL_GV_QTMH_NCCDaDuyet} (\"Code\", \"CodeNhaCungCapDaChon\") VALUES ('{Guid.NewGuid()}','{dgv_QLVC_MH_NCCBaoGia.Rows[e.RowIndex].Cells["Code"].Value}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    fcn_updateNCCDaDuyet();
                }
            }
        }

        private void dgv_GV_QTMH_NCCDaDuyet_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (dgv_GV_QTMH_NCCDaDuyet.Columns[e.ColumnIndex].HeaderText == "Hủy duyệt")
            {
                DataGridViewButtonCell cell = dgv_GV_QTMH_NCCDaDuyet.Rows[e.RowIndex].Cells[e.ColumnIndex] as DataGridViewButtonCell;

                string dbString = $"DELETE FROM {MyConstant.TBL_GV_QTMH_NCCDaDuyet} WHERE \"CodeNhaCungCapDaChon\" = '{dgv_QLVC_MH_NCCBaoGia.Rows[e.RowIndex].Cells["Code"].Value}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                fcn_updateNCCDaDuyet();

            }
        }


        private void dgv_QLVC_MH_NoiDungDeXuat_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex < 0)
                return;
            string header = dgv_QLVC_MH_NoiDungDeXuat.Columns[e.ColumnIndex].HeaderText;
            switch (header)
            {
                case "KhoiLuong":
                    if (!dgv_QLVC_MH_NoiDungDeXuat.CurrentCell.Value.ToString().All(char.IsDigit))
                    {
                        MessageShower.ShowInformation("Vui lòng chỉ nhập số cho trường này!");
                        dgv_QLVC_MH_NoiDungDeXuat.CurrentCell.Value = "0";
                        return;
                    }

                    break;
                case "ThoiGianCanVatTu":
                    DateTime date;
                    if (!DateTime.TryParse(dgv_QLVC_MH_NoiDungDeXuat.CurrentCell.Value.ToString(), out date))
                    {
                        MessageShower.ShowInformation("Vui lòng nhập đúng định dạng ngày tháng!");
                        dgv_QLVC_MH_NoiDungDeXuat.CurrentCell.Value = "01/01/2022";
                        return;
                    }

                    break;
                default:
                    break;
            }
        }

        private void dgv_GV_THDA_ChiTietCongViec_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.RowIndex < 0)
            //    return;

            //DataGridViewCell cell = dgv_GV_CongViecDangThucHien.SelectedCells[0];
            //string header = dgv_GV_CongViecDangThucHien.Columns[e.ColumnIndex].HeaderText;
            //DataGridViewRow crRow = dgv_GV_CongViecDangThucHien.Rows[e.RowIndex];


            //switch (header)
            //{
            //    case "Xoa":
            //        return;
            //    case "ChiTiet":
            //        FormChiTietThucHienGiaoViec form = new FormChiTietThucHienGiaoViec(crRow.Cells["CodeCongViecCon"].Value.ToString());
            //        form.ShowDialog();
            //        return;
            //    default:
            //        break;
            //}

        }

        private void fcn_HienThiChiTietCongViec()
        {
            //if (dgv_GV_CongViecDangThucHien.SelectedCells.Count == 0)
            //    return;
            //DataGridViewCell cell = dgv_GV_CongViecDangThucHien.SelectedCells[0];
            //string header = dgv_GV_CongViecDangThucHien.Columns[cell.ColumnIndex].HeaderText;
            //DataGridViewRow crRow = dgv_GV_CongViecDangThucHien.Rows[cell.RowIndex];
            //string codeCVCon = crRow.Cells["CodeCongViecCha"].Value.ToString();
            //crRow.Selected = true;
            //lb_THDA_TenCV.Text = crRow.Cells["TenCongViec"].Value.ToString();

            ////Cập nhật cbb trạng thái
            //cbb_GV_TrangThai.DataSource = null;

            ////string dbString = $"SELECT \"CodeDauMuc\" FROM {GiaoViec.TBL_CONGVIECCHA} WHERE \"CodeCongViecCha\" = '{crRow.Cells["CodeCongViecCha"].Value}'";
            ////DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            ////if (dt.Rows.Count > 0)
            ////{
            ////    dbString = $"SELECT \"QuyTrinh\" FROM {GiaoViec.TBL_DAUVIECLON} WHERE \"Code\" = '{dt.Rows[0]["CodeDauMuc"]}'";
            ////    dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            ////    if (dt.Rows.Count > 0)
            ////    {
            ////        if (dt.Rows[0]["QuyTrinh"].ToString() == MyConstant.CONST_LoaiQT_QTMH)
            ////            cbb_GV_TrangThai.DataSource = MyConstant.lsQTMH;
            ////        else
            ////            cbb_GV_TrangThai.DataSource = MyConstant.lsQTTH;
            ////        cbb_GV_TrangThai.Text = crRow.Cells["TrangThai"].Value.ToString();
            ////    }
            ////    else
            ////    {
            ////        MessageShower.ShowInformation("Không thể lấy thông tin đầu việc của công tác này");
            ////    }
            ////}
            ////else
            ////{
            ////    MessageShower.ShowInformation("Không thể lấy thông tin công tác cha của công tác này");
            ////}

            //////Cập nhật đường tiến độ
            ////pb_KLHopDong.Properties.Maximum = int.Parse(crRow.Cells["KhoiLuongHopDong"].Value.ToString());
            ////pb_KLThanhToan.Properties.Maximum = int.Parse(crRow.Cells["KhoiLuongHopDong"].Value.ToString());
            ////pb_KLThiCong.Properties.Maximum = int.Parse(crRow.Cells["KhoiLuongHopDong"].Value.ToString());
            //////pb_KLConLai.Properties.Maximum = int.Parse(crRow.Cells["KhoiLuongHopDong"].Value.ToString());
            ////pb_KLKeHoach.Properties.Maximum = int.Parse(crRow.Cells["KhoiLuongHopDong"].Value.ToString());

            ////pb_KLHopDong.Position = int.Parse(crRow.Cells["KhoiLuongHopDong"].Value.ToString());
            //////pb_KLThanhToan.Position = int.Parse(crRow.Cells["KhoiLuongThanhToan"].Value.ToString());
            //////pb_KLThiCong.Position = int.Parse(crRow.Cells["KhoiLuongThiCong"].Value.ToString());
            //////pb_KLConLai.Position = pb_KLHopDong.Position - pb_KLThiCong.Position;
            ////pb_KLKeHoach.Position = int.Parse(crRow.Cells["KhoiLuongKeHoach"].Value.ToString());


            //////Cập nhật danh sách các file -hợp đồng
            //////cbo_GV_XemNoiDungFile.Items.Clear();

            ////string condition = "";
            ////if (crRow.Cells["Code"].Value == DBNull.Value)
            ////{
            ////    condition = $"\"CodeCongViecCon\" = '{codeCVCon}'";
            ////    m_pathFileThucHienDuAn = $@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\KeHoachGiaoViec\{codeCVCon}";
            ////}
            ////else
            ////{
            ////    string codeCha = crRow.Cells["Code"].Value.ToString();
            ////    condition = $"\"CodeCongViecThiCong\" = '{codeCha}'";
            ////    m_pathFileThucHienDuAn = $@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\KeHoachGiaoViec\ChiaThiCong\{codeCha}";
            ////}

            ////string dbString = $"SELECT \"FileDinhKem\" FROM {GiaoViec.TBL_FileDinhKem} WHERE {condition}";
            ////DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            ////string[] files = (Directory.Exists(m_pathFileThucHienDuAn)) ? Directory.GetFiles(m_pathFileThucHienDuAn) : new string[] { };


            ////THDA_XemFiles.setFiles(files);
            ////if (dt.Rows.Count == 0)
            ////{
            ////    cbo_GV_XemNoiDungFile.Text = "Không có file đính kèm cho công việc này";
            ////}
            ////else
            ////{
            ////cbo_GV_XemNoiDungFile.Text = "Chọn file xem trước";
            ////foreach (DataRow r in dt.Rows)
            ////{
            ////    if (r["FileDinhKem"] != null && r["FileDinhKem"].ToString() != "")
            ////        cbo_GV_XemNoiDungFile.Items.Add(r["FileDinhKem"]);
            ////}
            ////}
        }

        private void txt_GV_CongViecTrong7Ngay_SelectionChanged(object sender, EventArgs e)
        {
            //if (AnHien_GV_CongViecTuanToi.SelectedRows.Count == 0)
            //    return;
            //DataGridViewRow row = AnHien_GV_CongViecTuanToi.SelectedRows[0];
        }

        private void spsheet_Thongtinchinh_PopupMenuShowing(object sender, DevExpress.XtraSpreadsheet.PopupMenuShowingEventArgs e)
        {
            IWorkbook workbook = spsheet_Thongtinchinh.Document;
            Worksheet worksheet = workbook.Worksheets.ActiveWorksheet;
            if (worksheet.Name == "Thông tin Dự án - Công trình")
            {
                e.Menu.Items.Clear();
                SpreadsheetMenuItem myItem = new SpreadsheetMenuItem("Thêm công trình mới", new EventHandler(Fcn_ThemCongTrinh));
                e.Menu.Items.Add(myItem);
            }

        }
        private void Fcn_ThemCongTrinh(object sender, EventArgs e)
        {
            var result = DevExpress.XtraEditors.XtraInputBox.Show("Nhập tên công trình mới", "Công trình mới", "Công trình mới");
            if (result == "")
                return;
            string codeCT = Guid.NewGuid().ToString();
            string db_string = $"INSERT INTO {MyConstant.TBL_THONGTINCONGTRINH} (\"Code\",\"Ten\",\"CodeDuAn\") VALUES ('{codeCT}',@Ten,'{slke_ThongTinDuAn.EditValue}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string, parameter: new object[] { result });
            db_string = $"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (\"Code\",\"Ten\",\"CodeCongTrinh\") VALUES ('{Guid.NewGuid()}','Hạng mục 1','{codeCT}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(db_string);
            fcn_updateSheetThongTinChinh();
        }
        private void StripTaiDuLieuVeMayCaNhan_Click(object sender, EventArgs e)
        {
            XtraForm_TaiDuLieuVeMayCaNhan form = new XtraForm_TaiDuLieuVeMayCaNhan();
            form.BeginDownload = new XtraForm_TaiDuLieuVeMayCaNhan.DE_BeginDownloadProjects(DownloadProjects);
            form.ShowDialog();

        }

        private async void DownloadProjects(TypeDownloadProjectEnum type, ThongTinDuAnExtensionViewModel[] prjIds)
        {

            //if (type == TypeDownloadProjectEnum.NEWFILE)
            //{
            //    if (!TaoMoiTongDuAn())
            //    {
            //        MessageShower.ShowWarning("Đã hủy thao tác tải về!");
            //        return;
            //    }

            //}

            var result = await SharedProjectHelper.SyncProjectsFromServer(prjIds, type);
            //var result = Task.Run(async  () => await SharedProjectHelper.SyncProjectsFromServer(prjIds)).Result;
            if (!result)
            {
                WaitFormHelper.CloseWaitForm();
                MessageShower.ShowError("Tải về không thành công");
                return;
            }

            WaitFormHelper.ShowWaitForm("Đang cập nhật danh sách dự án");
            //await SharedProjectHelper.AddUserToHubGiaoViec();
            //TDKHHelper.TinhLaiToanBoKhoiLuongKeHoachDuAn(prjIds.Select(x => x.Code));
            ctrl_DonViThucHienDuAnTDKH.DVTHChanged -= ctrl_DonViThucHienDuAn_DVTHChanged;

            TongHopHelper.fcn_updateCbbThongTinDuAnCongTrinh();
            ctrl_DonViThucHienDuAnTDKH.DVTHChanged += ctrl_DonViThucHienDuAn_DVTHChanged;

            //ctrl_DonViThucHienDuAn_DVTHChanged(null, null);
            //InitHubChat();
            WaitFormHelper.CloseWaitForm();
        }


        private void button18_Click_1(object sender, EventArgs e)
        {
            //var response = await GeneralProp.Instance.client.PostAsJsonAsync("post-hubconnection", MSETTING.Default.Token);
            //connection = new HubConnection("http://mopenFileDialogalhost:5000");
            //connection.Headers.Add("Authorization", new AuthenticationHeaderValue(
            //"Bearer", MSETTING.Default.Token).ToString());

            //HubProxy = connection.CreateHubProxy("chatHub");

            //var httpCli = new DefaultHttpGeneralProp.Instance.client();
            //var transport = new AutoTransport(
            //    httpCli,
            //    new IGeneralProp.Instance.clientTransport[]
            //    {
            //    new LongPollingTransport(httpCli)
            //    });
            //connection.ConnectionToken = MSETTING.Default.Token;
            //connection.ConnectionId = MSETTING.Default.Token; ;

            ////connection.CookieContainer
            ////var response = await GeneralProp.Instance.client.PostAsJsonAsync("post-hubconnection", MSETTING.Default.Token);
            //HubProxy.On<string, string>("messageHubListener", (name, message) =>
            //    this.Invoke((Action)(() =>
            //     Debug.WriteLine("Connected")


            //        //RichTextBoxConsole.AppendText(String.Format("{0}: {1}" + Environment.NewLine, name, message))
            //    ))
            //);
            ////var a = new HubConnectionBuilder
            //connection.Headers.Add("Username", "binh1@gmail.com");
            //connection.Headers.Add("Password", "1q2w3e");

            //try
            //{
            //    connection.Start(transport).Wait();

            //}
            //catch (HttpRequestException ex)
            //{

            //    Debug.WriteLine("Unable to connect to server: Start server before connecting GeneralProp.Instance.clients.");
            //    //No connection: Don't enable Send button or show chat UI
            //    return;
            //}

            //Activate UI
            //SignInPanel.Visible = false;
            //ChatPanel.Visible = true;
            //ButtonSend.Enabled = true;
            //TextBoxMessage.Focus();
            //RichTextBoxConsole.AppendText("Connected to server at " + ServerURI + Environment.NewLine);
        }

        private void cbb_HangMuc_SelectedValueChanged(object sender, EventArgs e)
        {
            //if (cbb_HangMuc.SelectedValue.ToString() == "Add")
            //{

            //}
        }

        private void spsheet_Thongtinchinh_Leave(object sender, EventArgs e)
        {
            //fcn_updateListCbb();
        }

        private void cbo_GV_XemNoiDungFile_SelectedIndexChanged(object sender, EventArgs e)
        {
            //ComboBox cbb = sender as ComboBox;

            //if (cbb.SelectedIndex < 0)
            //    return;
            //string file = $@"{m_pathFileTHDA}\{cbb.Text}";
            //if (!File.Exists(file))
            //{
            //    MessageShower.ShowInformation("Không tìm thấy file xem trước");
            //    return;
            //}


            //if (MyFunction.xemTruocFileCoBan(file, pn_xemTruocFile) != 0)
            //    MessageShower.ShowInformation("File đã chọn không hỗ trợ xem trước");


        }

        private void cbb_HangMuc_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
        /*private void cbb_HangMuc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbb_HangMuc.SelectedIndex < 0)
                return;

            if (cbb_HangMuc.SelectedValue.ToString() == "Add")
            {
                bool isDone = false;
                while (!isDone)
                {
                    var result = DevExpress.XtraEditors.XtraInputBox.Show("Nhập tên hạng mục mới", "Hạng mục mới", "Hạng mục mới");
                    if (result == "")
                        return;

#pragma warning disable CS0219 // The variable 'ind' is assigned but its value is never used
                    int ind = 0;
#pragma warning restore CS0219 // The variable 'ind' is assigned but its value is never used

#pragma warning disable CS0219 // The variable 'isExist' is assigned but its value is never used
                    bool isExist = false;
#pragma warning restore CS0219 // The variable 'isExist' is assigned but its value is never used
                    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT \"Ten\" FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeCongTrinh\"='{cbb_MenuCongTrinhThucHien.SelectedValue}' AND \"Ten\"='{result}'");
                    //do
                    //{
                    //    ind++;
                    //    if (dt.AsEnumerable().Where(x => x.Field<string>("Ten") == $"Hạng mục {ind}").Count() > 0)
                    //        isExist = true;   
                    //} while (!isExist);
                    if (dt.Rows.Count > 0)
                    {
                        MessageShower.ShowInformation("Tên hạng mục đã tồn tại, Vui lòng nhập tên khác");
                        continue;
                    }
                    DataProvider.InstanceTHDA.ExecuteNonQuery($"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (\"Code\", \"Ten\", \"CodeCongTrinh\", \"SortId\") VALUES ('{Guid.NewGuid()}', '{result}', '{cbb_MenuCongTrinhThucHien.SelectedValue}', '{cbb_HangMuc.Items.Count - 2}')");
                    isDone = true;
                }
                //fcn_updateListCbb();
                fcn_reloadHangMuc();
                cbb_HangMuc.SelectedIndex = cbb_HangMuc.Items.Count - 2;
                fcn_LoadDoBocKeHoachTienDo();
                fcn_updateSheetThongTinChinh();
            }

        }*/

        private void fcn_UpdateDuongGangGiuaCacCongViec()
        {
            dgv_quyTrinhThucHien.Rows.Clear();
            string dbString = $"SELECT * FROM {GiaoViec.TBL_QUYTRINHTHUCHIEN}";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            DataTable dtDependencies = new DataTable("Dependencies");


            dtDependencies.Columns.Add("Parent", typeof(int)); //đuôi mũi tên
            dtDependencies.Columns.Add("Dependent", typeof(int)); //Đầu mũi tên
            dtDependencies.Columns.Add("Type", typeof(int)); //typemns.Add("Type", typeof(DateTime)); //type

            foreach (DataRow r in dt.Rows)
            {
                int idHienTai = dic_GiaoViec_MapGuid2IdOfScheduler[r["CodeCongViecConHienTai"].ToString()].Key;
                string tenChaHienTai = dic_GiaoViec_MapGuid2IdOfScheduler[r["CodeCongViecConHienTai"].ToString()].Value.Key;
                string tenConHienTai = dic_GiaoViec_MapGuid2IdOfScheduler[r["CodeCongViecConHienTai"].ToString()].Value.Value;

                int idTiepTheo = dic_GiaoViec_MapGuid2IdOfScheduler[r["CodeCongViecConTiepTheo"].ToString()].Key;
                string tenChaTiepTheo = dic_GiaoViec_MapGuid2IdOfScheduler[r["CodeCongViecConTiepTheo"].ToString()].Value.Key;
                string tenConTiepTheo = dic_GiaoViec_MapGuid2IdOfScheduler[r["CodeCongViecConTiepTheo"].ToString()].Value.Value;
                int type = (int)r["LoaiTuongQuan"];
                string TrangThai = r["TrangThai"].ToString();
                dtDependencies.Rows.Add(idHienTai, idTiepTheo, type);

                dgv_quyTrinhThucHien.Rows.Add(r["Code"].ToString(), tenChaHienTai, tenConHienTai, tenChaTiepTheo, tenConTiepTheo, type, TrangThai);
            }

            schStorage_KHGV.AppointmentDependencies.DataSource = dtDependencies;
        }

        private void dgv_GV_CVHN_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        /* private void btn_BCHN_CapNhatTatCa_Click(object sender, EventArgs e)
         {
             //DataTable dt = tl_CVHN_BaoCao.DataSource as DataTable;
             string colcodeCV = null, fieldPK = "CodeCongViecCha";
             string dateStr = dtp_KLHangNgay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
             foreach (var node in tl_CVHN_BaoCao.GetNodeList())
             {
                 string Tbl_KhoiLuongHangNgay = TDKH.TBL_KhoiLuongCongViecHangNgay;
                 KLTTHangNgay crRow = tl_CVHN_BaoCao.GetDataRecordByNode(node) as KLTTHangNgay;
                 if (!crRow.IsEditedThiCong && !crRow.IsEditedKeHoach)
                 {
                     continue;
                 }    

                 colcodeCV = (node.Level == (int)LevelCongViec.CongViecCha) ? "CodeCongViecCha" : "CodeCongViecCon";

                 if (crRow.IsEditedKeHoach || crRow.IsEditedThiCong)
                 {
                     string dbString = $"INSERT OR REPLACE INTO {TDKH.TBL_KhoiLuongCongViecHangNgay} " +
                              $"(Code, CodeCongViecCha, CodeCongViecCon, CodeCongTacTheoGiaiDoan,KhoiLuongKeHoachGiaoViec, KhoiLuongThiCong, Ngay, GhiChu, NhaCungCap) " +
                             $"VALUES " +
                             $"(@Code, @CodeCongViecCha, @CodeCongViecCon, @CodeCongTacTheoGiaiDoan,@KhoiLuongKeHoachGiaoViec, @KhoiLuongThiCong, @Ngay, @GhiChu, @NhaCungCap)";

                     object[] mparams =
                     {
                         crRow.CodeHangNgay,
                         (crRow.CodeCongTacTheoGiaiDoan is null) ? crRow.CodeCongViecCha : null,
                         (crRow.CodeCongTacTheoGiaiDoan is null) ? crRow.CodeCongViecCon : null,
                         crRow.CodeCongTacTheoGiaiDoan,
                         crRow.KhoiLuongKeHoach,
                         crRow.KhoiLuongThiCong,
                         crRow.Ngay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE),
                         crRow.GhiChu,
                         crRow.NhaCungCap,
                     };

                     DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: mparams);



                    *//* string dbString = "";
                     string cols = $"\"Code\", \"{colcodeCV}\", \"Ngay\", \"KhoiLuongKeHoachGiaoViec\"";
                     string vals = $"'{newcodeHN}', '{crRow.GetValueByPropName(fieldPK)}', '{dateStr}', '{crRow.KhoiLuongKeHoach}'";

                     if (!crRow.CodeHangNgay.HasValue())
                     {
                         crRow.CodeHangNgay = newcodeHN;
                         dbString = $"INSERT INTO {Tbl_KhoiLuongHangNgay} " +
                             $"({cols}) " +
                             $"VALUES ({vals})";
                         //crRow.CodeHangNgay = newcodeHN;
                     }
                     else
                     {
                         dbString = $"UPDATE {Tbl_KhoiLuongHangNgay} SET \"KhoiLuongKeHoachGiaoViec\" = '{crRow.KhoiLuongKeHoach}' WHERE \"Code\" = '{crRow.CodeHangNgay}'";
                     }

                     DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);*//*
                 }

                 *//*if (crRow.IsEditedThiCong)
                 {
                     string newcodeHN = Guid.NewGuid().ToString();

                     DataTable dt;
                     DataRow dr;
                     if (crRow.CodeCongTacTheoGiaiDoan.HasValue())
                     {
                         string dbString = $"SELECT * FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE CodeCongTacTheoGiaiDoan = '{crRow.CodeCongTacTheoGiaiDoan}' AND Ngay = '{dateStr}'";
                         dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                         dr = dt.AsEnumerable().SingleOrDefault();

                         if (dr is null)
                         {
                             dr = dt.NewRow();
                             dr["CodeCongTacTheoGiaiDoan"] = crRow.CodeCongTacTheoGiaiDoan;
                             dr["Code"] = newcodeHN;
                             dr["Ngay"] = dateStr;
                             dt.Rows.Add(dr);
                         }
                         dr["KhoiLuongThiCong"] = crRow.KhoiLuongThiCong; 
                         dr["GhiChu"] = crRow.GhiChu; 
                         dr["IsSumThiCong"] = crRow.IsSumThiCong; 
                     }    
                     else
                     {
                         //Tbl_KhoiLuongHangNgay = TDKH.TBL_KhoiLuongCongViecHangNgay;
                         string dbString = $"SELECT * FROM {Tbl_KhoiLuongHangNgay} WHERE {colcodeCV} = '{crRow.GetValueByPropName(fieldPK)}' AND Ngay = '{dateStr}'";
                         dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                         dr = dt.AsEnumerable().SingleOrDefault();

                         if (dr is null)
                         {
                             dr = dt.NewRow();

                             dr[colcodeCV] = crRow.GetValueByPropName(fieldPK);
                             dr["Code"] = newcodeHN;
                             dr["Ngay"] = dateStr;

                             dt.Rows.Add(dr);
                         }
                         dr["KhoiLuongThiCong"] = crRow.KhoiLuongThiCong; 
                         dr["GhiChu"] = crRow.GhiChu; 
                         dr["IsSumThiCong"] = crRow.IsSumThiCong; 
                     }

                     DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, Tbl_KhoiLuongHangNgay);
                 }    *//*


                 if (node.Level == (int)LevelCongViec.CongViecCha && crRow.ParentCode == GiaoViec.NhomGiaoViec_CongTacTuKeHoach)
                 {
                     MyFunction.fcn_TDKh_CapNhatNgayThiCong(crRow.CodeCongTacTheoGiaiDoan, crRow.Code, dtp_KLHangNgay.Value.Date);
                 }
             }
             MessageShower.ShowInformation("Đã cập nhật khối lượng hàng ngày");


             SetMinMaxDateRangeNgayBaoCaoGiaoViec();
             fcn_CVHN_LoadTongHopBaoCaoHangNgay2spSheet();
         }*/

        private void SetMinMaxDateRangeNgayBaoCaoGiaoViec()
        {
            if (!ce_UseRangeDate.Checked)
                return;
            GiaoViecHelper.GetMinMaxDateFromKhoiLuongHangNgay(out DateTime? minDate, out DateTime? maxDate);

            DateTime TimeNow = DateTime.Now;


            if (minDate.HasValue && maxDate.HasValue)
            {
                dtp_CVHN_Start.MinDate = dtp_CVHN_End.MinDate = minDate.Value;
                dtp_CVHN_Start.MaxDate = dtp_CVHN_End.MaxDate = maxDate.Value > TimeNow ? TimeNow : maxDate.Value;
            }
            else
            {

                dtp_CVHN_Start.MinDate = dtp_CVHN_End.MinDate
                    = dtp_CVHN_Start.MaxDate = dtp_CVHN_End.MaxDate = DateTime.Now;
            }

        }

        private async void btn_TT_HienThiThongTinMoi_Click(object sender, EventArgs e)
        {
            XtraForm_DangNhap_ThongTin form = new XtraForm_DangNhap_ThongTin();
            form.senData = new XtraForm_DangNhap_ThongTin.SenData(LoginChange);
            form.ShowDialog();
            btn_TT_HienThiThongTinMoi.Text = (BaseFrom.BanQuyenKeyInfo.FullName.HasValue()) ? BaseFrom.BanQuyenKeyInfo.FullName : "Đăng nhập";
            //SetTextFormByLicense();
            //if (!ce_Mode.Checked)
            //    await checkLicense();

        }

        private async void LoginChange(LoginResponse response = null)
        {
            await checkLicense();
            //SetTextFormByLicense();
            //InitNotificationAndInitHubChat();
        }

        private void InitNotificationAndInitHubChat(LoginResponse response = null)
        {
            //InitNotification();
            //ConnextService._Connection = null;
            SharedControls.uc_noti.DataSource = null;
            InitHubChat();

            //AsyncHelpers.RunSync(() => InitHubChat(null));
        }

        //private async void InitNotification()
        //{
        //    if ((BaseFrom.IsFullAccess || BaseFrom.IsValidAccount)
        //        && !string.IsNullOrEmpty(CusHttpClient.InstanceCustomer.BaseAddress))
        //    {
        //        //customPopupContainerEdit_noti.Enabled = true;
        //        var response = await CusHttpClient.InstanceCustomer.MGetAsync<List<NotificationViewModel>>($"{RouteAPI.Notification_CONTROLLER}/GetByUserId/{BaseFrom.BanQuyenKeyInfo.UserId}");


        //        if (!response.MESSAGE_TYPECODE)
        //        {
        //            alertControl.Show(this, "Lỗi", "Không thể tải thông báo");
        //            gc_noti.DataSource = new BindingList<NotificationViewModel>();
        //            badge_Noti.Visible = false;
        //            count_noti = 0;
        //        }
        //        else
        //        {
        //            gc_noti.DataSource = new BindingList<NotificationViewModel>(response.Dto);
        //            count_noti = response.Dto.Where(x => x.State == NotificationStateEnum.NEW).Count();
        //            if (count_noti > 0)
        //            {
        //                badge_Noti.Visible = true;
        //                badge_Noti.Properties.Text = count_noti.ToString();
        //            }
        //            else
        //                badge_Noti.Visible = false;

        //            NotificationFilter();
        //        }
        //    }
        //}

        //private void NotificationFilter()
        //{
        //    string name = rg_noti.GetAccessibleName();

        //    if (name is null || name == "ALL")
        //    {
        //        gv_noti.ClearColumnsFilter();
        //    }
        //    else
        //    {
        //        col_notiType.FilterInfo = new DevExpress.XtraGrid.Columns.ColumnFilterInfo($"[Type] = '{name}'");
        //    }
        //}

        #region Chat
        private async Task InitHubChat()
        {
            if (ConnextService._Connection?.State == HubConnectionState.Connected)
            {
                await ConnextService._Connection.StopAsync();
            }

            if (ConnextService._Connection != null)
            {
                await ConnextService._Connection.DisposeAsync();
                ConnextService._Connection = null;
            }

            if (BaseFrom.IsValidAccount && !string.IsNullOrEmpty(BaseFrom.BanQuyenKeyInfo.UrlAPI))
            {
                await HubConnection();
                //uc_ChatBox = new Uc_ChatBox();
                //uc_ChatBox.Dock = DockStyle.Fill;
                //uc_ChatBox.Location = new Point(0, 121);
                //uc_ChatBox.Name = "uc_ChatBox";
                //uc_ChatBox.Size = new Size(474, 348);
                //uc_ChatBox.TabIndex = 2;
                //this.panelChat.Controls.Add(this.uc_ChatBox);
                ////uc_ChatBox.BringToFront();
                //this.panelChat.Refresh();
                //this.panelChat.ResumeLayout();
            }
        }


        private async Task SignalrReconnecting(Exception ex)
        {
            //timerAll.Start();
            //await InitHubChat();//Gọi vậy vì khi signalrReconnected 
        }

        private async Task SignalrClosed(Exception ex)
        {

        }

        private async Task SignalrReconnected(string ex)
        {
            //InitNotification();
        }
        /// <summary>
        /// Đăng ký nhận thông tin về các sự kiện
        /// </summary>
        private async Task HubConnection()
        {


            if (ConnextService._Connection == null && BaseFrom.BanQuyenKeyInfo.UserId != null)
            {
                ConnextService.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
                ConnextService.UriChat = BaseFrom.BanQuyenKeyInfo.UrlAPI.Replace("api/", string.Empty);
                string url = $@"{ConnextService.UriChat}notificationHub?access_token={MSETTING.Default.TokenTBT}";
                ConnextService._Connection = new HubConnectionBuilder().WithUrl(new System.Uri(url)).WithAutomaticReconnect().Build();
                ConnextService._Connection.Reconnecting += SignalrReconnecting;
                ConnextService._Connection.Reconnected += SignalrReconnected;

                //ConnextService._Connection. += SignalrReconnecting;
                ConnextService._Connection.Closed += SignalrClosed;
                //ConnextService._Connection.aliv
                ConnextService._Connection.On<int>("UpdateActiveClients", (c) => UpdateActiveClients(c));
                ConnextService._Connection.On<BanQuyenKeyInfo, GiaoViecExtensionViewModel>("NotiDuyetCongTacInCompleteRoleViewOrApprove", (a, b) => NotiDuyetCongTacInCompleteRoleViewOrApprove(a, b));
                ConnextService._Connection.On<BanQuyenKeyInfo, GiaoViecExtensionViewModel>("NotiDuyetCongTacInCompleteRoleEdit", (a, b) => NotiDuyetCongTacInCompleteRoleEdit(a, b));
                ConnextService._Connection.On<BanQuyenKeyInfo, GiaoViecExtensionViewModel>("NotiDuyetCongTacCompleteRoleViewOrApprove", (a, b) => NotiDuyetCongTacCompleteRoleViewOrApprove(a, b));
                ConnextService._Connection.On<BanQuyenKeyInfo, GiaoViecExtensionViewModel>("NotiDuyetCongTacCompleteRoleEdit", (a, b) => NotiDuyetCongTacCompleteRoleEdit(a, b));
                ConnextService._Connection.On<BanQuyenKeyInfo, GiaoViecExtensionViewModel>("NotiThemCongTacGuiDuyetRoleViewOrApprove", (a, b) => NotiThemCongTacGuiDuyetRoleViewOrApprove(a, b));
                ConnextService._Connection.On<BanQuyenKeyInfo, GiaoViecExtensionViewModel>("NotiThemCongTacGuiDuyetRoleEdit", (a, b) => NotiThemCongTacGuiDuyetRoleEdit(a, b));
                ConnextService._Connection.On<BanQuyenKeyInfo, GeneralGroupChatViewModel>("NotificationAddUserGroup", (a, b) => NotificationAddUserGroup(a, b));
                //ConnextService._Connection.On<string, string, List<string>>("NotificationFileGroup", (a, b, c) => NotificationFileGroup(a, b, c));
                //ConnextService._Connection.On<string, ManageBusinessFileViewModel>("NotificationListUserApprove", (a, b) => NotificationListUserApprove(a, b));
                //ConnextService._Connection.On<string, ManageGroupMenberViewModel, ManageBusinessFileViewModel>("NoticeApproveBus", (a, b, c) => NoticeApproveBus(a, b, c));
                //ConnextService._Connection.On<string, ManageGroupMenberViewModel, ManageBusinessFileViewModel>("NoticeNotApproveBus", (a, b, c) => NoticeNotApproveBusiens(a, b, c));
                //ConnextService._Connection.On<string, string, AnnouncementViewModel>("BroadcastGroupMessage", (a, b, c) => BroadcastGroupMessage(a, b, c));*/
                #region Bình phần Notification 
                ConnextService._Connection.On<NotificationViewModel>("GeneralNotification", (NotiVM) => GeneralNotification(NotiVM));
                #endregion

                try
                {
                    await ConnextService._Connection.StartAsync();
                    //InitListManageGroup();
                    //LoadDataGiaoViec();
                    SharedControls.uc_noti.InitNotification();

                    customPopupContainerEdit_noti.BackColor = Color.Transparent;
                    customPopupContainerEdit_noti.ShowToolTips = false;


                    //timerAll.Stop();

                }
                catch (Exception ex)
                {
                    await ConnextService._Connection.StopAsync();
                    customPopupContainerEdit_noti.BackColor = Color.Red;
                    customPopupContainerEdit_noti.ShowToolTips = true;
                    //timerAll.Start();

                }
            }
            else
            {
                if (ConnextService._Connection != null && ConnextService._Connection.State != HubConnectionState.Connected && ConnextService._Connection.State != HubConnectionState.Connecting)
                    await ConnextService._Connection.StartAsync();

                //if (ConnextService._Connection != null && ConnextService._Connection.State == HubConnectionState.Connected)
                //    await SharedProjectHelper.AddUserToHubGiaoViec();
            }

        }

        /// <summary>
        /// Thông báo cho người vào nhóm quyền
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        private async void GeneralNotification(NotificationViewModel b)
        {
            NotificationTypeEnum? type = b.Type;
            string typeDes = type.GetEnumDescription();

            b.CreatedOn = DateTime.Now;
            BeginInvoke(new MethodInvoker(delegate ()
            {
                var source = SharedControls.uc_noti.DataSource as BindingList<NotificationViewModel>;
                source.Insert(0, b);
                AlertShower.ShowInfo(b.Content, typeDes);

            }));

            badge_Noti.Properties.Text = $"{++BaseFrom.count_noti}";
            badge_Noti.Visible = true;

            if (b.Type == NotificationTypeEnum.PERMISSION)
                SharedProjectHelper.SyncRoleFromServer();
        }

        /*public async void InitListManageGroup()
        {
            try
            {
                var request = new GiaoViecRequest()
                {
                    UserId = ConnextService.UserId,
                    CodeDuAn = SharedControls.slke_ThongTinDuAn.EditValue as string
                };
                var lstGroups = await ChatHelper.GetAllGroupChatByUser(request);
                if (lstGroups.MESSAGE_TYPECODE)
                {
                    ConnextService.ManageGroups = lstGroups.Dto;
                    //await ConnextService._Connection.InvokeAsync("AddUserToGroups", BaseFrom.BanQuyenKeyInfo, lstGroups.Dto, false);
                    await ConnextService.AddUserToGroups(lstGroups.Dto);

                    uc_ChatBox.Visible = true;
                    return;
                }
            }
            catch (Exception ex)
            {
                MessageShower.ShowError("Lỗi tải nhóm chát");
            }
            uc_ChatBox.Visible = false;
        }
*/
        private async void LoadDataGiaoViec()
        {
            if (BaseFrom.BanQuyenKeyInfo != null && BaseFrom.IsValidAccount)
            {
                var request = new GiaoViecRequest()
                {
                    UserId = ConnextService.UserId
                };
                var lstDatas = await ChatHelper.GetAllGiaoViecByUser(request);
                if (lstDatas.MESSAGE_TYPECODE)
                {
                    ConnextService.ManageGiaoViecs = lstDatas.Dto;
                    //var lstRoles = await ChatHelper.GetAllRoleByListCodeGiaoViec(lstDatas.Dto.GroupBy(x => x.CodeCongViecCha).Select(x => x.Key).ToList());
                    //if (lstRoles.MESSAGE_TYPECODE)
                    //    BaseFrom.RoleDetails = lstRoles.Dto;
                    UpdateNotificationGiaoViec();
                }
            }

        }

        private void UpdateNotificationGiaoViec()
        {
            var CtacSelfApprove = ConnextService.ManageGiaoViecs.Where(x => x.UserId == BaseFrom.BanQuyenKeyInfo.UserId
                                                                        && (x.CommandId == nameof(CommandCode.Add) || x.CommandId == nameof(CommandCode.Approve))).Select(x => x.CodeCongViecCha);

            List<GiaoViecExtensionViewModel> lsDoiDuyet = new List<GiaoViecExtensionViewModel>()
            {
                new GiaoViecExtensionViewModel(){Id = nameof(CongTacDoiDuyetTypeEnum.SELF), TenCongViec =  "Đợi bạn duyệt"},
                new GiaoViecExtensionViewModel(){Id = nameof(CongTacDoiDuyetTypeEnum.OTHERS), TenCongViec = "Đợi người khác duyệt"}
            };

            var lsChoDuyet = ConnextService.ManageGiaoViecs.Where(x => x.TrangThai == EnumTrangThai.DANGXETDUYET.GetEnumDisplayName());
            var lsSelf = lsChoDuyet.Where(x => CtacSelfApprove.Contains(x.CodeCongViecCha));
            var lsOthers = lsChoDuyet.Where(x => !CtacSelfApprove.Contains(x.CodeCongViecCha));
            lsSelf.Where(x => x.CodeCongViecCon is null).ForEach(x => x.ParentId = nameof(CongTacDoiDuyetTypeEnum.SELF));
            lsOthers.Where(x => x.CodeCongViecCon is null).ForEach(x => x.ParentId = nameof(CongTacDoiDuyetTypeEnum.OTHERS));

            lsDoiDuyet.AddRange(lsSelf);
            lsDoiDuyet.AddRange(lsOthers);
            //tl_DoiDuyet.DataSource = lsDoiDuyet;

            var lstGuiDuyets = ConnextService.ManageGiaoViecs.FindAll(x => (x.CommandId == CommonConstants.COMMAND_EDIT || x.CommandId == CommonConstants.COMMAND_VIEW) && x.TrangThai == EnumTrangThai.DANGXETDUYET.GetEnumDisplayName());
            guiDuyetBindingSource.DataSource = GroupByData(lstGuiDuyets);
            var lstDuyets = ConnextService.ManageGiaoViecs.FindAll(x => (x.CommandId == CommonConstants.COMMAND_APPROVE || x.CommandId == CommonConstants.COMMAND_VIEW) && x.TrangThai == EnumTrangThai.DANGXETDUYET.GetEnumDisplayName());
            duyetBindingSource.DataSource = GroupByData(lstDuyets);
            var lstDaDuyets = ConnextService.ManageGiaoViecs.FindAll(x => (x.CommandId == CommonConstants.COMMAND_EDIT || x.CommandId == CommonConstants.COMMAND_VIEW) && x.TrangThai == EnumTrangThai.HOANTHANH.GetEnumDisplayName());
            daDuyetBindingSource.DataSource = GroupByData(lstDaDuyets);
            if (guiDuyetBindingSource.Count > 0)
                SharedControls.badge_GuiDuyet.Properties.Text = guiDuyetBindingSource.Count.ToString();
            if (duyetBindingSource.Count > 0)
                SharedControls.badge_Duyet.Properties.Text = duyetBindingSource.Count.ToString();
            if (daDuyetBindingSource.Count > 0)
                SharedControls.badge_DaDuyet.Properties.Text = daDuyetBindingSource.Count.ToString();
            SetCalculateBadges();
        }

        public List<GiaoViecExtensionViewModel> GroupByData(List<GiaoViecExtensionViewModel> lstDatas)
        {
            var lstCTs = new List<GiaoViecExtensionViewModel>();
            foreach (var item in lstDatas)
            {
                if (!lstCTs.Any(x => x.CodeCongViecCha == item.CodeCongViecCha))
                    lstCTs.Add(item);
            }
            return lstCTs;
        }

        private void UpdateActiveClients(int number)
        {

        }
        /// <summary>
        /// NotiDuyetCongTacCompleteRoleEdit
        /// </summary>
        /// <param name="client"></param>
        /// <param name="viewModel"></param>
        private void NotiDuyetCongTacCompleteRoleEdit(BanQuyenKeyInfo client, GiaoViecExtensionViewModel viewModel)
        {
            viewModel.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
            viewModel.CommandId = CommonConstants.COMMAND_EDIT;
            if (!ConnextService.ManageGiaoViecs.Any(x => x.CodeCongViecCha == viewModel.CodeCongViecCha))
            {
                ConnextService.ManageGiaoViecs.Add(viewModel);
            }
            else
            {
                var lstFinds = ConnextService.ManageGiaoViecs.FindAll(x => x.CodeCongViecCha == viewModel.CodeCongViecCha);
                if (lstFinds.Any())
                {
                    foreach (var item in lstFinds)
                    {
                        item.TrangThai = viewModel.TrangThai;
                        item.UserId = viewModel.UserId;
                        item.CommandId = CommonConstants.COMMAND_EDIT;
                        item.TotalFile = viewModel.TotalFile;
                        item.TotalApprove = viewModel.TotalApprove;
                    }
                }
            }
            _dataService.UpdateGiaoViec(new List<GiaoViecExtensionViewModel> { viewModel });
            _dataService.UpdateStateGiaoViecFileDinhKem(viewModel.ListFiles);
            UpdateNotificationGiaoViec();
            this.Alert($"Công tác {viewModel.TenCongViec} vừa được duyệt bởi {client.FullName}.", viewModel.TenCongTrinh, Form_Alert.enmType.Info);
        }

        /// <summary>
        /// NotiDuyetCongTacInCompleteRoleEdit
        /// </summary>
        /// <param name="client"></param>
        /// <param name="viewModel"></param>
        private void NotiDuyetCongTacInCompleteRoleEdit(BanQuyenKeyInfo client, GiaoViecExtensionViewModel viewModel)
        {
            viewModel.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
            viewModel.CommandId = CommonConstants.COMMAND_EDIT;
            if (!ConnextService.ManageGiaoViecs.Any(x => x.CodeCongViecCha == viewModel.CodeCongViecCha))
            {
                ConnextService.ManageGiaoViecs.Add(viewModel);
            }
            else
            {
                var lstFinds = ConnextService.ManageGiaoViecs.FindAll(x => x.CodeCongViecCha == viewModel.CodeCongViecCha);
                if (lstFinds.Any())
                {
                    foreach (var item in lstFinds)
                    {
                        item.TrangThai = viewModel.TrangThai;
                        item.UserId = viewModel.UserId;
                        item.CommandId = CommonConstants.COMMAND_EDIT;
                        item.TotalFile = viewModel.TotalFile;
                        item.TotalApprove = viewModel.TotalApprove;
                    }
                }
            }
            _dataService.UpdateStateGiaoViecFileDinhKem(viewModel.ListFiles);
            UpdateNotificationGiaoViec();
            this.Alert($"Công tác {viewModel.TenCongViec} vừa được duyệt 1 phần bởi {client.FullName}.", viewModel.TenCongTrinh, Form_Alert.enmType.Info);
        }

        /// <summary>
        /// NotiDuyetCongTacInCompleteRoleViewOrApprove
        /// </summary>
        /// <param name="client"></param>
        /// <param name="viewModel"></param>
        private void NotiDuyetCongTacInCompleteRoleViewOrApprove(BanQuyenKeyInfo NguoiDuyet, GiaoViecExtensionViewModel viewModel)
        {
            if (!ConnextService.ManageGiaoViecs.Any(x => x.CodeCongViecCha == viewModel.CodeCongViecCha))
            {
                viewModel.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
                viewModel.CommandId = viewModel.ListUserDuyets.Any(x => x == viewModel.UserId) ? CommonConstants.COMMAND_APPROVE : CommonConstants.COMMAND_VIEW;
                ConnextService.ManageGiaoViecs.Add(viewModel);
            }
            else
            {
                viewModel.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
                viewModel.CommandId = viewModel.ListUserDuyets.Any(x => x == viewModel.UserId) ? CommonConstants.COMMAND_APPROVE : CommonConstants.COMMAND_VIEW;
                var lstFinds = ConnextService.ManageGiaoViecs.FindAll(x => x.CodeCongViecCha == viewModel.CodeCongViecCha);
                if (lstFinds.Any())
                {
                    foreach (var item in lstFinds)
                    {
                        item.TrangThai = viewModel.TrangThai;
                        item.UserId = viewModel.UserId;
                        item.TotalApprove = viewModel.TotalApprove;
                        item.TotalFile = viewModel.TotalFile;
                    }
                }
            }
            _dataService.UpdateStateGiaoViecFileDinhKem(viewModel.ListFiles);
            UpdateNotificationGiaoViec();
            this.Alert($"Công tác {viewModel.TenCongViec} vừa được duyệt 1 phần bởi {NguoiDuyet.FullName}.", viewModel.TenCongTrinh, Form_Alert.enmType.Info);
        }

        /// <summary>
        /// NotiDuyetCongTacCompleteRoleViewOrApprove
        /// </summary>
        /// <param name="client"></param>
        /// <param name="viewModel"></param>
        private void NotiDuyetCongTacCompleteRoleViewOrApprove(BanQuyenKeyInfo client, GiaoViecExtensionViewModel viewModel)
        {
            if (!ConnextService.ManageGiaoViecs.Any(x => x.CodeCongViecCha == viewModel.CodeCongViecCha))
            {
                viewModel.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
                viewModel.CommandId = viewModel.ListUserDuyets.Any(x => x == viewModel.UserId) ? CommonConstants.COMMAND_APPROVE : CommonConstants.COMMAND_VIEW;
                ConnextService.ManageGiaoViecs.Add(viewModel);
            }
            else
            {
                viewModel.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
                viewModel.CommandId = viewModel.ListUserDuyets.Any(x => x == viewModel.UserId) ? CommonConstants.COMMAND_APPROVE : CommonConstants.COMMAND_VIEW;
                var lstFinds = ConnextService.ManageGiaoViecs.FindAll(x => x.CodeCongViecCha == viewModel.CodeCongViecCha);
                if (lstFinds.Any())
                {
                    foreach (var item in lstFinds)
                    {
                        item.TrangThai = viewModel.TrangThai;
                        item.UserId = viewModel.UserId;
                        item.TotalFile = viewModel.TotalFile;
                        item.TotalApprove = viewModel.TotalApprove;
                    }
                }
            }
            _dataService.UpdateGiaoViec(new List<GiaoViecExtensionViewModel> { viewModel });
            _dataService.UpdateStateGiaoViecFileDinhKem(viewModel.ListFiles);
            UpdateNotificationGiaoViec();
            this.Alert($"Công tác {viewModel.TenCongViec} vừa được duyệt bởi {client.FullName}.", viewModel.TenCongTrinh, Form_Alert.enmType.Info);
        }

        /// <summary>
        /// NotiThemCongTacGuiDuyetRoleEdit
        /// </summary>
        /// <param name="client"></param>
        /// <param name="viewModel"></param>
        private void NotiThemCongTacGuiDuyetRoleEdit(BanQuyenKeyInfo client, GiaoViecExtensionViewModel viewModel)
        {
            if (!ConnextService.ManageGiaoViecs.Any(x => x.CodeCongViecCha == viewModel.CodeCongViecCha))
            {
                viewModel.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
                viewModel.CommandId = CommonConstants.COMMAND_EDIT;
                ConnextService.ManageGiaoViecs.Add(viewModel);
                UpdateNotificationGiaoViec();
                this.Alert($"{client.FullName} vừa gửi yêu cầu duyệt nghiệm thu công việc.", viewModel.TenCongTrinh, Form_Alert.enmType.Info);
            }
        }

        /// <summary>
        /// NotiThemCongTacGuiDuyetRoleViewOrApprove
        /// </summary>
        /// <param name="client"></param>
        /// <param name="viewModel"></param>
        private void NotiThemCongTacGuiDuyetRoleViewOrApprove(BanQuyenKeyInfo client, GiaoViecExtensionViewModel viewModel)
        {
            if (!ConnextService.ManageGiaoViecs.Any(x => x.CodeCongViecCha == viewModel.CodeCongViecCha))
            {
                viewModel.UserId = BaseFrom.BanQuyenKeyInfo.UserId;
                viewModel.CommandId = viewModel.ListUserDuyets.Any(x => x == viewModel.UserId) ? CommonConstants.COMMAND_APPROVE : CommonConstants.COMMAND_VIEW;
                ConnextService.ManageGiaoViecs.Add(viewModel);
                UpdateNotificationGiaoViec();
                this.Alert($"{client.FullName} vừa gửi yêu cầu duyệt nghiệm thu công việc.", viewModel.TenCongTrinh, Form_Alert.enmType.Info);
            }
        }

        /// <summary>
        /// Thông báo cho người vào nhóm chat
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        private void NotificationAddUserGroup(BanQuyenKeyInfo a, GeneralGroupChatViewModel b)
        {
            //if (!ConnextService.ManageGroups.Exists(x => x.IdStr == b.IdStr))
            //{
            //    ConnextService.ManageGroups.Add(b);
            //}
            //this.Alert($"Bạn vừa được thêm vào nhóm {b.Name}!", b.TenCongTrinh, Form_Alert.enmType.Success);
        }

        public void Alert(string msg, string group, Form_Alert.enmType type)
        {
            Form_Alert frm = new Form_Alert();
            frm.showAlert(msg, group, type);
        }

        public void AlertError(string msg, Form_Alert.enmType type)
        {
            Form_Alert frm = new Form_Alert();
            frm.showAlertError(msg, type);
        }

        public void Alert(AnnouncementViewModel model, Form_Alert.enmType type)
        {
            Form_Alert frm = new Form_Alert();
            frm.showAlert(model, type);
        }

        #endregion

        private void MyHandle_dtp_CVHN_DateRange_ValueChanged(object sender, EventArgs e)
        {
            fcn_CVHN_LoadTongHopBaoCaoHangNgay2spSheet();
        }
        //private void dtp_CVHN_Start_ValueChanged(object sender, EventArgs e)
        //{
        //    fcn_CVHN_LoadTongHopBaoCaoHangNgay2spSheet();
        //}

        private void spsheet_GV_KH_ChiTietCacHMCongViec_Leave(object sender, EventArgs e)
        {
            if (!m_ctrlTKDM.Visible)
                spsheet_GV_KH_ChiTietCacHMCongViec.CloseCellEditor(CellEditorEnterValueMode.ActiveCell);
            //fcn_LuuKHGV2CSDL();
        }

        private void cbb_GV_TrangThai_DrawItem(object sender, DrawItemEventArgs e)
        {
            //e.Graphics.
            //Debug.WriteLine($"Sự kiện draw item with index: {e.Index}, {(e.State & DrawItemState.Default)}");
            //string text = cbb_GV_TrangThai.Items[e.Index].ToString();
            //Brush brush = (e.Index == cbb_GV_TrangThai.SelectedIndex) ? Brushes.Red : Brushes.Gray;
            //e.Graphics.DrawString(text, cbb_GV_TrangThai.Font, brush, e.Bounds.X, e.Bounds.Y);
        }

        private void cbb_GV_TrangThai_DropDown(object sender, EventArgs e)
        {
            //cbb_GV_TrangThai.DrawItem -= cbb_GV_TrangThai_DrawItem;
        }

        private void cbb_GV_TrangThai_DropDownClosed(object sender, EventArgs e)
        {
            cbb_GV_TrangThai.DrawItem += cbb_GV_TrangThai_DrawItem;
        }

        private void cbb_GV_TrangThai_MouseHover(object sender, EventArgs e)
        {
            cbb_GV_TrangThai.DrawItem -= cbb_GV_TrangThai_DrawItem;

        }

        private void dgv_GV_ChiTietCongViecKhoiLuongThucHien_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //if (e.RowIndex < 0)
            //    return;

            //string header = AnHien_ChiTietKLCongViec.Columns[e.ColumnIndex].HeaderText;
            //switch (header)
            //{
            //    case "KhoiLuongHopDong":
            //    case "KhoiLuongKeHoach":
            //        MessageShower.ShowInformation("Chỉ có thể thay đổi kế hoạch");
            //        break;

            //    default:
            //        break;
            //}
        }

        private void dgv_GV_ChiTietCongViecKhoiLuongThucHien_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {

        }

        private void bt_THDA_Luu_Click(object sender, EventArgs e)
        {
            DataTable dt = AnHien_ChiTietKLCongViec.DataSource as DataTable;
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, GiaoViec.TBL_CONGVIECCON);
            fcn_HienThiChiTietCongViec();
        }

        private void progressBarControl5_CustomDisplayText(object sender, DevExpress.XtraEditors.Controls.CustomDisplayTextEventArgs e)
        {
            e.DisplayText = "HopDong";
        }

        private void progressBarControl1_CustomDisplayText(object sender, DevExpress.XtraEditors.Controls.CustomDisplayTextEventArgs e)
        {
            e.DisplayText = "Kế hoạch";

        }

        private void progressBarControl6_CustomDisplayText(object sender, DevExpress.XtraEditors.Controls.CustomDisplayTextEventArgs e)
        {
            e.DisplayText = "ThiCong";
        }

        private void progressBarControl7_CustomDisplayText(object sender, DevExpress.XtraEditors.Controls.CustomDisplayTextEventArgs e)
        {
            e.DisplayText = "Thanh toán";
        }

        private void progressBarControl8_CustomDisplayText(object sender, DevExpress.XtraEditors.Controls.CustomDisplayTextEventArgs e)
        {
            e.DisplayText = "Còn lại";
        }

        private void dgv_GV_CongViecDangThucHien_SelectionChanged(object sender, EventArgs e)
        {
            fcn_HienThiChiTietCongViec();
        }


        private void bt_HienMenu_Click(object sender, EventArgs e)
        {
            pn_TTDA.Visible = true;
            bt_HienMenu.Visible = false;
        }

        private void bt_AnMenu_Click(object sender, EventArgs e)
        {
            pn_TTDA.Visible = false;
            bt_HienMenu.Visible = true;
        }

        private void cbo_DBKH_ChonDot_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox cbb = sender as ComboBox;
            if (cbb.SelectedIndex == cbb.Items.Count - 1)
            {
                string newGuid = Guid.NewGuid().ToString();
                string dbString = $"INSERT INTO {TDKH.TBL_GiaiDoanThucHien} (\"Code\", \"CodeDuAn\", \"Ten\") VALUES ('{newGuid}', '{slke_ThongTinDuAn.EditValue}', 'Giai đoạn {cbb_DBKH_ChonDot.Items.Count}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                //dbString = $"SELECT * FROM {MyConstant.TBL_TD_KH_KyThucHien} WHERE \"Ten\"='Kỳ 1'";
                //DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string codeKy1 = (cbb.DataSource as List<KeyValuePair<string, string>>)[0].Key;

                dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeGiaiDoan\"='{codeKy1}'";
                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                string lsCodeCongTac = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

                //dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacCon} WHERE \"CodeCongTacCha\" IN ({lsCodeCongTac})";
                //DataTable dtCongTacCon = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                DataTable dtKyMoi = dt.Copy();
                //DataTable dtCTConKyMoi = dtCongTacCon.Copy();


                foreach (DataRow row in dt.Rows)
                {

                    row["Code"] = Guid.NewGuid().ToString();
                    row["CodeGiaiDoan"] = newGuid;
                    row["KhoiLuongToanBo"] = 0;
                    dtKyMoi.Rows.Add(row.ItemArray);

                }

                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtKyMoi, TDKH.TBL_ChiTietCongTacTheoKy);
                fcn_UpdateCboKyTienDoKeHoach();
                cbb.SelectedIndex = cbb_DBKH_ChonDot.Items.Count - 2;


            }

            fcn_LoadBaoCaoCVHangNgay();
            LoadSheetTDKH();
            //fcn_LoadCongTacDoBoc();
            //Fcn_LoadDataQLVC();

            //fcn_TDKH_DBC_TaiLaiFileDoBocChuan();

        }

        //private void fcn_TDKH_DBC_TaiLaiFileDoBocChuan()
        //{

        //    if (cbo_MenuNhaThauThiCong.SelectedIndex < 0 || cbo_MenuChonToDoi.SelectedIndex < 0 || cbo_DBKH_ChonDot.SelectedIndex < 0)
        //        return;
        //    m_typeFileDoBoc = TDKH_DBC.TYPE_AllDA;
        //    string prDir = $@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\Tiến độ - Kế hoạch\Đo bóc chuẩn\{cbo_DBKH_ChonDot.SelectedValue}";
        //    string subDir = "";
        //    if (cbo_MenuChonToDoi.DataSource != null && cbo_MenuNhaThauThiCong.DataSource != null)
        //    {
        //        if (cbo_MenuChonToDoi.Enabled == true)
        //        {
        //            if (cbo_MenuChonToDoi.SelectedValue.ToString() != "All")
        //            {
        //                subDir = $@"Tổ đội\{cbo_MenuChonToDoi.SelectedValue}";
        //                m_typeFileDoBoc = TDKH_DBC.TYPE_ToDoi;

        //            }
        //        }
        //        else if (cbo_MenuNhaThauThiCong.SelectedValue.ToString() != "All")
        //        {
        //            subDir = $@"Nhà thầu\{cbo_MenuNhaThauThiCong.SelectedValue}";
        //            m_typeFileDoBoc = TDKH_DBC.TYPE_NhaThau;
        //        }
        //    }

        //    string filePath = $@"{prDir}\{subDir}\7.aBangKhoiLuong_KeHoach.xlsx";
        //    if (!File.Exists(filePath))
        //    {
        //        if (!Directory.Exists(Path.GetDirectoryName(filePath)))
        //            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
        //        File.Copy($@"{BaseFrom.m_templatePath}\FileExcel\7.aBangKhoiLuong_KeHoach.xlsx", filePath);
        //        spsheet_TDKH_DoBocKLKeHoach.LoadDocument(filePath);
        //        //if (m_typeFileDoBoc == TDKH_DBC.TYPE_AllDA)
        //        //    spsheet_TDKH_DoBocKLKeHoach.Document.Worksheets[TDKH_DBC.CONST_SheetName_TDKH_DoBocChuan]
        //        //        .Columns[spsheet_TDKH_DoBocKLKeHoach.Document.Search("KhoiLuongHopDongChiTiet").First().ColumnIndex].Delete();
        //        string typeDoBoc = (m_typeFileDoBoc == TDKH_DBC.TYPE_AllDA) ? "KhoiLuongHopDongChiTiet" : ((m_typeFileDoBoc == TDKH_DBC.TYPE_NhaThau) ? "Khối lượng hợp đồng nhà thầu" : "Khối lượng hợp đồng tổ đội");
        //        spsheet_TDKH_DoBocKLKeHoach.Document.Search("KhoiLuongHopDongChiTiet").ForEach(x => x.SetValue(typeDoBoc));
        //    }
        //    else
        //        spsheet_TDKH_DoBocKLKeHoach.LoadDocument(filePath);
        //    fcn_UpdateCongTacDoBoc(false, true);
        //}

        private void spsheet_TD_KH_DoBocKLKeHoach_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            //            m_ctrlTKDM.Hide();
            //            Worksheet ws = e.Worksheet;
            //            IWorkbook wb = ws.Workbook;
            //            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];

            //            string colHeading = ws.Rows[0][e.Cell.ColumnIndex].Value.ToString();
            //            string newVal = e.Value.ToString();
            //            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            //            Row crRow = ws.Rows[e.RowIndex];
            //            string codeCha = crRow[dic[TDKH.COL_Code]].Value.ToString();
            //            string ten = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();

            //            string[] lsColdoubleDuong = { //Các số double dương
            //                TDKH.COL_DBC_Dai,
            //                TDKH.COL_DBC_Rong,
            //                TDKH.COL_DBC_Cao,
            //                TDKH.COL_DBC_HeSoCauKien,
            //                TDKH.COL_DBC_KhoiLuongToanBo,
            //                TDKH.COL_DBC_HopDong_BoPhan,
            //            };

            //            string[] lsColIntDuong = { //Các số int  dương
            //                TDKH.COL_DBC_SoBoPhanGiongNhau,
            //            };



            //#pragma warning disable CS0168 // The variable 'guid' is declared but never used
            //            Guid guid;
            //#pragma warning restore CS0168 // The variable 'guid' is declared but never used
            //            string dbString;
            //            if (e.Worksheet.Name == TDKH.SheetName_DoBocChuan)
            //            {
            //                if (!range.Contains(e.Cell))
            //                {
            //                    MyFunction.fcn_ReverseCell(e);
            //                    return;
            //                }

            //                if (colHeading.Contains('_')) //Là công tác phát sinh
            //                {
            //                    double val = -1;
            //                    if (!double.TryParse(newVal, out val) || val < 0)
            //                    {
            //                        MessageShower.ShowInformation("Vui lòng nhập số thực dương");
            //                        MyFunction.fcn_ReverseCell(e);
            //                        return;
            //                    }

            //                    string CodePhatSinh = colHeading.Split('_').Last();
            //                    dbString = $"SELECT * FROM {TDKH.TBL_KhoiLuongPhatSinh} WHERE \"CodePhatSinh\" = '{CodePhatSinh}' " +
            //                        $"AND \"CodeCongTac\" = '{codeCha}'";
            //                    DataTable dtKLPhatSinh = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //                    switch (dtKLPhatSinh.Rows.Count)
            //                    {
            //                        case 0:
            //                            DataRow newRow = dtKLPhatSinh.NewRow();
            //                            newRow["Code"] = Guid.NewGuid().ToString();
            //                            newRow["CodeCongTac"] = codeCha;
            //                            newRow["CodePhatSinh"] = CodePhatSinh;
            //                            newRow["KhoiLuong"] = val;
            //                            dtKLPhatSinh.Rows.Add(newRow);
            //                            break;
            //                        case 1:
            //                            dtKLPhatSinh.Rows[0]["KhoiLuong"] = val;
            //                            break;
            //                        default:
            //                            MessageShower.ShowInformation("Lỗi dữ liệu khối lượng phát sinh");
            //                            MyFunction.fcn_ReverseCell(e);
            //                            return;
            //                    }
            //                    DataProvider.InstanceTHDA.UpdateDataTable(dtKLPhatSinh, TDKH.TBL_KhoiLuongPhatSinh);


            //                }

            //                if (lsColdoubleDuong.Contains(colHeading))
            //                {
            //                    double val = -1;
            //                    if (!double.TryParse(newVal, out val) || val < 0)
            //                    {
            //                        MessageShower.ShowInformation("Vui lòng nhập số thực dương");
            //                        MyFunction.fcn_ReverseCell(e);
            //                        return;
            //                    }
            //                }

            //                if (lsColIntDuong.Contains(colHeading))
            //                {
            //                    uint val;
            //                    if (!uint.TryParse(newVal, out val))
            //                    {

            //                        MessageShower.ShowInformation("Vui lòng nhập số nguyên dương");
            //                        MyFunction.fcn_ReverseCell(e);

            //                        return;
            //                    }
            //                }

            //                if (colHeading == dic[TDKH.COL_MaHieuCongTac])
            //                {
            //                    //m_ctrlTKDM.Hide();
            //                    string oldTypeRow = crRow[dic[TDKH.COLHEADER_KH_TypeRow]].Value.ToString();
            //                    if (newVal.EndsWith("  "))
            //                    {
            //                        crRow.Font.Color = MyConstant.color_DinhMucTamTinh;
            //                        if (oldTypeRow == MyConstant.TYPEROW_CVCha)
            //                        {
            //                            crRow.Font.Color = MyConstant.color_DinhMucTamTinh;
            //                            return;

            //                        }
            //                        else
            //                        {
            //                            string newCodeDMCT = Guid.NewGuid().ToString();
            //                            dbString = $"INSERT INTO {TDKH.TBL_DanhMucCongTac} (\"Code\") VALUES ('{newCodeDMCT}')";
            //                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //                            dbString = $"INSERT INTO {TDKH.TBL_ChiTietCongTacTheoKy} (\"Code\", \"CodeCongTac\", \"CodeGiaiDoan\") VALUES ('{Guid.NewGuid()}', '{newCodeDMCT}', '{cbo_BCTD_ChonDot.SelectedValue}')";
            //                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //                            crRow[dic[TDKH.COL_Code]].SetValue(newCodeDMCT);
            //                            fcn_TDKH_reloadFomulaCongTacDoBoc();
            //                            return;
            //                        }
            //                    }

            //                    if (oldTypeRow != "")
            //                    {
            //                        MyFunction.fcn_ReverseCell(e);
            //                        Task.Run(() =>
            //                        {
            //                            MessageShower.ShowInformation("Không thể thay đổi giá trị ô này");
            //                        });
            //                        return;
            //                    }

            //                    switch (newVal.ToUpper())
            //                    {
            //                        case MyConstant.CONST_TYPE_MH_CONGTRINH:
            //                            string newCTCode = Guid.NewGuid().ToString();
            //                            crRow[dic[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_MH_CONGTRINH);
            //                            crRow[dic[TDKH.COL_CongTrinh]].SetValue(newCTCode);
            //                            if (ten == "")
            //                                crRow[dic[TDKH.COL_DanhMucCongTac]].SetValue("Công trình mới");
            //                            dbString = $"INSERT INTO {MyConstant.TBL_THONGTINCONGTRINH} (\"Code\", \"CodeDuAn\") VALUES ('{newCTCode}', '{slke_ThongTinDuAn.EditValue}')";
            //                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            //                            for (int i = e.Cell.RowIndex; i <= range.BottomRowIndex; i++)
            //                            {
            //                                string typeRowTemp = ws.Rows[i][dic[TDKH.COL_TypeRow]].Value.ToString();
            //                                if (typeRowTemp == MyConstant.TYPEROW_HangMuc)
            //                                    break;

            //                                if (i == range.BottomRowIndex || typeRowTemp == MyConstant.TYPEROW_CongTrinh)
            //                                {
            //                                    string newCodeHM = Guid.NewGuid().ToString();
            //                                    dbString = $"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (\"Code\", \"CodeCongTrinh\", \"Ten\") VALUES ('{newCodeHM}', '{newCTCode}', 'Hạng mục mới')";
            //                                    ws.Rows.Insert(e.RowIndex + 1, 1);
            //                                    Row crRowHM = ws.Rows[e.RowIndex + 1];
            //                                    crRowHM[dic[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_MH_HANGMUC);
            //                                    crRowHM[dic[TDKH.COL_DanhMucCongTac]].SetValue("Hạng mục mới");
            //                                    crRowHM[dic[TDKH.COL_HangMuc]].SetValue(newCodeHM);

            //                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //                                }
            //                            }
            //                            break;
            //                        case MyConstant.CONST_TYPE_MH_HANGMUC:
            //                            string newCTHM = Guid.NewGuid().ToString();
            //                            crRow[dic[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_MH_HANGMUC);

            //                            crRow[dic[TDKH.COL_HangMuc]].SetValue(newCTHM);
            //                            //crRow[dic[TDKH.COL_CongTrinh]].SetValue(newCTCode);


            //                            crRow[dic[TDKH.COL_DanhMucCongTac]].SetValue("Hạng mục mới");
            //                            dbString = $"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (\"Code\", \"CodeCongTrinh\") VALUES ('{newCTHM}', '{crRow[dic[TDKH.COL_CongTrinh]].Value}')";
            //                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //                            break;
            //                        default:
            //                            e.Cell.SetValue(e.OldValue.ToString());
            //                            return;
            //                    }
            //                    //fcn_TDKH_reloadFomulaCongTacDoBoc();
            //                    //fcn_UpdateCongTacDoBoc();
            //                    //fcn_LoadCongTacDoBoc();

            //                }
            //                else if (colHeading == TDKH.COL_DBC_KhoiLuongToanBo)
            //                {
            //                    crRow[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].SetValue(false);
            //                }
            //                else
            //                {
            //                    //string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
            //                    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
            //                    if (typeRow == MyConstant.TYPEROW_CVCON || typeRow == "")
            //                    {
            //                        if (typeRow == "")
            //                            crRow[dic[TDKH.COL_DanhMucCongTac]].SetValue("Diễn giải mới");
            //                        fcn_TDKH_reloadFomulaCongTacDoBoc();
            //                        //if (colHeading == dic[TDKH.COL_DanhMucCongTac])
            //                        //    fcn_TDKH_UpdateRowConTheoTenCongTac(ws, e.RowIndex);
            //                    }
            //                }
            //            }
            //fcn_UpdateCongTacDoBoc();
            //fcn_spsheet_TD_KH_DoBocKLKeHoach_CellChanged(e.Cell, e.OldValue);
        }


        #region reload và cập nhật công tác đo bóc

        /// <summary>
        /// Cập nhật công tác đo bóc
        /// </summary>
        /// <param name="isKyMoi">True nếu tạo kỳ mới</param>
        /// <param name="isTuCSDLVaoSheet">True: Cập nhật dữ liệu từ CSDL vào sheet</param>
        private void fcn_UpdateCongTacDoBoc()
        {

            //            splashWaitForm.ShowWaitForm();
            //            splashWaitForm.SetWaitFormDescription("Đang cập nhật đo bóc vào cơ sở dữ liệu");
            //            m_ctrlTKDM.Hide();

            //            spsheet_TDKH_DoBocKLKeHoach.RowsInserted -= spsheet_TD_KH_DoBocKLKeHoach_RowsInserted;
            //            spsheet_TDKH_DoBocKLKeHoach.RowsRemoved -= spsheet_TDKH_DoBocKLKeHoach_RowsRemoved;
            //            spsheet_TDKH_DoBocKLKeHoach.BeginUpdate();

            //            IWorkbook wb = spsheet_TDKH_DoBocKLKeHoach.Document;
            //            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            //            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            //            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            //            int crChaInd = -1;

            //            string dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}' ORDER BY \"SortId\" ASC";
            //            DataTable dtCT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //            string lsCodeCT = MyFunction.fcn_Array2listQueryCondition(dtCT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            //            dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeCongTrinh\" IN ({lsCodeCT})";
            //            DataTable dtHM = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //            string lsHMToQuery = MyFunction.fcn_Array2listQueryCondition(dtHM.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            //            //string tblChiTietCongTacTheoKy, tblChiTietCongTacCon;
            //            //fcn_TDKH_DBC_GettableDoBoc(out tblChiTietCongTacTheoKy, out tblChiTietCongTacCon);

            //            dbString = $"SELECT * FROM {TDKH.TBL_DanhMucCongTac} WHERE \"CodeHangMuc\" IN ({lsHMToQuery})";
            //            DataTable dtDanhMucCongTac = DataProvider.InstanceTHDA.ExecuteQuery(dbString);


            //            int typeDoBoc = fcn_TDKH_GetTypeDoBocKeHoachTienDo();
            //            string condition = "";

            //            if (typeDoBoc == TDKH.TYPEDoBoc_NhaThau)
            //                condition = $" AND \"CodeNhaThau\" = '{cbo_MenuNhaThauThiCong.SelectedValue}'";
            //            else if (typeDoBoc == TDKH.TYPEDoBoc_ToDoi)
            //                condition = $" AND \"CodeToDoi\" = '{cbo_MenuChonToDoi.SelectedValue}'";
            //            else if (typeDoBoc == TDKH.TYPEDoBoc_NhaThauPhu)
            //                condition = $" AND \"CodeNhaThauPhu\" = '{cbo_MenuNhaThauPhu.SelectedValue}'";
            //            else condition = $" AND \"CodeNhaThau\" IS NULL AND \"CodeToDoi\" IS NULL AND \"CodeNhaThauPhu\" IS NULL";



            //            dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeGiaiDoan\" = '{cbb_DBKH_ChonDot.SelectedValue}'{condition}";// WHERE \"CodeCongTrinh\" IN ({lsCtToQuery})

            //            DataTable dtCongTacTheoKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //            string lsCodeCTCha = "";

            //            foreach (DataRow row in dtCongTacTheoKy.Rows)
            //            {
            //                lsCodeCTCha += $", '{row["Code"]}'";
            //            }

            //            if (lsCodeCTCha != "")
            //            {
            //                lsCodeCTCha = lsCodeCTCha.Remove(0, 2);
            //            }


            //            dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacCon} WHERE \"CodeCongTacCha\" IN ({lsCodeCTCha})";// WHERE \"CodeCongTrinh\" IN ({lsCtToQuery})

            //            DataTable dtCongTacCon = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //            dtDanhMucCongTac.Columns.Add("Đã thêm", typeof(bool));
            //            dtCongTacCon.Columns.Add("Đã thêm", typeof(bool));

            //            dtDanhMucCongTac.AsEnumerable().ForEach(x => x["Đã thêm"] = false);
            //            dtCongTacCon.AsEnumerable().ForEach(x => x["Đã thêm"] = false);

            //#pragma warning disable CS0219 // The variable 'crCongTrinh' is assigned but its value is never used
            //#pragma warning disable CS0219 // The variable 'crHM' is assigned but its value is never used
            //            string crCodeCongTrinh = "", crCodeHM = "", crCodeCTCha = "", crCongTrinh = "", crHM = "";
            //#pragma warning restore CS0219 // The variable 'crHM' is assigned but its value is never used
            //#pragma warning restore CS0219 // The variable 'crCongTrinh' is assigned but its value is never used
            //            int btRangeInd = wb.Range[TDKH.RANGE_DoBocChuan].BottomRowIndex;
            //#pragma warning disable CS0219 // The variable 'CrSortID' is assigned but its value is never used
            //            int CrSortID = 0;
            //#pragma warning restore CS0219 // The variable 'CrSortID' is assigned but its value is never used
            //            string queryDtStr;

            //            DataRow[] rows;
            //            DataRow rowdt;
            //            //DataRow[] RowsHMChuaThem;
            //            int orderCT = 0, orderHM = 0;

            //            Guid guid;
            //            string[] lsColNullAble = { TDKH.COL_Nhom };

            //            for (int i = range.TopRowIndex + 1; i <= btRangeInd; i++)
            //            {
            //                Row crRow = ws.Rows[i];
            //                //Kiểm tra công trình, hạng mục
            //                string codeCha = crRow[dic[TDKH.COL_CodeCT]].Value.ToString();
            //                string ten = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();

            //                if (i < btRangeInd)
            //                {
            //                    string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
            //                    string typeRow = fcn_TDKH_GetTypeRow(MHCT, crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString());
            //                    switch (typeRow)
            //                    {
            //                        case MyConstant.TYPEROW_CongTrinh:
            //                            crCodeCongTrinh = crRow[dic[TDKH.COL_CongTrinh]].Value.ToString();
            //                            DataRow drCT = dtCT.AsEnumerable().Where(x => x["Code"].ToString() == crCodeCongTrinh).FirstOrDefault();
            //                            if (drCT != null)
            //                            {
            //                                orderCT++;
            //                                string crNameCT = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
            //                                if (drCT["Ten"].ToString() != crNameCT || int.Parse(drCT["SortId"].ToString()) != orderCT)
            //                                {
            //                                    drCT["Ten"] = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
            //                                    drCT["SortId"] = orderCT;
            //                                }
            //                                orderHM = 0;
            //                            }
            //                            else
            //                            {
            //                                MessageShower.ShowInformation("Lỗi tải công trình trong update đo bóc");
            //                                return;
            //                            }
            //                            break;
            //                        case MyConstant.TYPEROW_HangMuc:
            //                            crCodeHM = crRow[dic[TDKH.COL_HangMuc]].Value.ToString();
            //                            DataRow drHM = dtHM.AsEnumerable().Where(x => x["Code"].ToString() == crCodeHM).FirstOrDefault();
            //                            if (drHM != null)
            //                            {
            //                                orderHM++;
            //                                string crNameHM = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();

            //                                if (drHM["Ten"].ToString() != crNameHM || int.Parse(drHM["SortId"].ToString()) != orderHM)
            //                                {
            //                                    drHM["Ten"] = crNameHM;
            //                                    drHM["SortId"] = orderHM;
            //                                }

            //                                if (crCodeCongTrinh != drHM["CodeCongTrinh"].ToString())
            //                                    drHM["CodeCongTrinh"] = crCodeCongTrinh;
            //                            }
            //                            else
            //                            {
            //                                MessageShower.ShowInformation("Lỗi tải hạng mục trong update đo bóc");
            //                                return;
            //                            }
            //                            break;
            //                        case MyConstant.TYPEROW_CVCha:
            //                            string codeCT = "";
            //                            queryDtStr = $"[Code] = '{codeCha}'";
            //                            rows = dtCongTacTheoKy.Select(queryDtStr); //Dòng chi tiết công tác theo kỳ
            //                            if (rows.Length == 0 || crCodeCongTrinh == "")
            //                            {
            //                                MessageShower.ShowInformation($"Lỗi tải công tác");
            //                                continue;
            //                            }
            //                            rowdt = rows.First();
            //                            codeCT = rowdt["CodeCongTac"].ToString();
            //                            string code2query = "";

            //                            code2query = rowdt["CodeCongTac"].ToString();
            //                            DataRow[] rowsDanhMucCongTac = dtDanhMucCongTac.Select($"[Code] = '{code2query}'");
            //                            if (rowsDanhMucCongTac.Length == 0)
            //                            {
            //                                MessageShower.ShowInformation("Lỗi tải công tác!");
            //                                continue;
            //                            }

            //                            crChaInd = i;
            //                            crCodeCTCha = codeCha;
            //                            DataRow rowDanhMucCongTac = rowsDanhMucCongTac.First();

            //                            //double lk = fcn_TDKH_TinhLuyKe(codeCT, true);
            //                            //crRow[dic[TDKH.COL_DBC_LuyKeDaThucHien]].Formula = $"{lk}+{dic[TDKH.COL_DBC_KhoiLuongToanBo]}{i+1}";

            //                            double KLToanBo = 0;
            //                            double.TryParse(crRow[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.ToString(), out KLToanBo);
            //                            rowdt[TDKH.COL_DBC_KhoiLuongToanBo] = KLToanBo;

            //                            rowdt["Row"] = crRow.Index;
            //                            foreach (var item in dic)
            //                            {
            //                                if (lsColNullAble.Contains(item.Key))
            //                                {
            //                                    if (!Guid.TryParse(crRow[item.Value].Value.ToString(), out guid))
            //                                    {
            //                                        rowdt[item.Key] = null;
            //                                        continue;
            //                                    }
            //                                }
            //                                if (dtDanhMucCongTac.Columns.Contains(item.Key) && item.Key != TDKH.COL_CodeCT)
            //                                {

            //                                    rowDanhMucCongTac[item.Key] = crRow[item.Value].Value.ToString();
            //                                    continue;
            //                                }
            //                                if (dtCongTacTheoKy.Columns.Contains(item.Key) && item.Key != TDKH.COL_CodeCT && rowdt[item.Key] != DBNull.Value)
            //                                {
            //                                    try
            //                                    {
            //                                        rowdt[item.Key] = crRow[item.Value].Value.ToString();
            //                                        string formulaCol = $"{item.Key}{MyConstant.HAUTO_CONGTHUC}";
            //                                        if (dtCongTacTheoKy.Columns.Contains(formulaCol))
            //                                        {
            //                                            rowdt[formulaCol] = crRow[item.Value].Formula;
            //                                        }
            //                                        continue;

            //                                    }
            //                                    catch (Exception ex)
            //                                    {
            //                                        Debug.WriteLine("Lỗi update công tác theo giai đoạn: " + ex.Message);
            //                                    }
            //                                }


            //                            }

            //                            //crRow[dic[TDKH.COL_CongTrinh]].SetValue(crCodeCongTrinh);
            //                            //crRow[dic[TDKH.COL_HangMuc]].SetValue(crCodeHM);
            //                            //rowDanhMucCongTac["CodeCongTrinh"] = crCodeCongTrinh;
            //                            rowDanhMucCongTac["CodeHangMuc"] = crCodeHM;

            //                            break;
            //                        case MyConstant.TYPEROW_CVCON:

            //                            crRow[dic[TDKH.COL_CongTrinh]].SetValue(crCodeCongTrinh);
            //                            crRow[dic[TDKH.COL_HangMuc]].SetValue(crCodeHM);

            //                            if (crCodeCTCha != "")
            //                            {
            //                                if (Guid.TryParse(codeCha, out guid))
            //                                {
            //                                    rows = dtCongTacCon.Select($"[Code] = '{codeCha}'");
            //                                    if (rows.Length == 0)
            //                                    {
            //                                        rowdt = dtCongTacCon.NewRow();
            //                                        dtCongTacCon.Rows.Add(rowdt);
            //                                        crRow[dic[TDKH.COL_CodeCT]].SetValue(Guid.NewGuid().ToString());
            //                                    }
            //                                    else
            //                                        rowdt = rows.First();
            //                                }
            //                                else
            //                                {
            //                                    rowdt = dtCongTacCon.NewRow();
            //                                    dtCongTacCon.Rows.Add(rowdt);
            //                                    crRow[dic[TDKH.COL_CodeCT]].SetValue(Guid.NewGuid().ToString());
            //                                }

            //                                rowdt["Đã thêm"] = true;
            //                                rowdt["CodeCongTacCha"] = crCodeCTCha;
            //                                foreach (var item in dic)
            //                                {
            //                                    if (lsColNullAble.Contains(item.Key))
            //                                    {
            //                                        if (!Guid.TryParse(crRow[item.Value].Value.ToString(), out guid))
            //                                        {
            //                                            rowdt[item.Key] = null;
            //                                            continue;
            //                                        }
            //                                    }

            //                                    if (dtCongTacCon.Columns.Contains(item.Key))
            //                                        try
            //                                        {
            //                                            rowdt[item.Key] = crRow[item.Value].Value.ToString();
            //                                        }
            //                                        catch (Exception ex)
            //                                        {
            //                                            Debug.WriteLine("Lỗi: " + ex.Message);
            //                                        }
            //                                }
            //                            }
            //                            break;
            //                        default:
            //                            break;
            //                    }
            //                }

            //                btRangeInd = wb.Range[TDKH.RANGE_DoBocChuan].BottomRowIndex;
            //            }

            //            spsheet_TDKH_DoBocKLKeHoach.EndUpdate();
            //            spsheet_TDKH_DoBocKLKeHoach.RowsInserted += spsheet_TD_KH_DoBocKLKeHoach_RowsInserted;
            //            spsheet_TDKH_DoBocKLKeHoach.RowsRemoved += spsheet_TDKH_DoBocKLKeHoach_RowsRemoved;

            //            dtCongTacCon.Select("[Đã thêm] = false").ForEach(x => x.Delete());
            //            //DataProvider.InstanceTHDA.UpdateDataTable(dtHM, MyConstant.TBL_THONGTINHANGMUC);
            //            //DataProvider.InstanceTHDA.UpdateDataTable(dtCongTac, TDKH.TBL_DanhMucCongTac);
            //            DataProvider.InstanceTHDA.UpdateDataTable(dtDanhMucCongTac, TDKH.TBL_DanhMucCongTac);
            //            DataProvider.InstanceTHDA.UpdateDataTable(dtCongTacTheoKy, TDKH.TBL_ChiTietCongTacTheoKy);
            //            DataProvider.InstanceTHDA.UpdateDataTable(dtCongTacCon, TDKH.TBL_ChiTietCongTacCon);
            //            if (DataProvider.InstanceTHDA.UpdateDataTable(dtCT, MyConstant.TBL_THONGTINCONGTRINH) + DataProvider.InstanceTHDA.UpdateDataTable(dtHM, MyConstant.TBL_THONGTINHANGMUC) > 0)
            //            {
            //                fcn_Update1cbb(cbb_MenuCongTrinhThucHien, MyConstant.TBL_THONGTINCONGTRINH, true);
            //            }
            //            splashWaitForm.CloseWaitForm();

        }
        #endregion

        private double fcn_TDKH_KiemTraCongThuc(string name)
        {
            DataTable dt = new DataTable();
            ////Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan);

            //string name = ws.Rows[rowInd][TDKH_DBC.dic_Dbc[TDKH_DBC.COL_TDKH_DBC_DanhMucCongTac]].Value.ToString();
            string[] lsName = name.Split(':');
            try
            {
                string CT = lsName[lsName.Length - 1];
                CT = CT.Replace(".", "___");
                CT = CT.Replace(",", ".");
                CT = CT.Replace("___", "");
                CT = CT.Replace("x", "*");
                CT = CT.Replace("X", "*");

                var value = dt.Compute(CT, "");
                double kq;
                if (double.TryParse(value.ToString(), out kq))
                    return kq;

                //ws.Rows[rowInd][TDKH_DBC.dic_Dbc[TDKH_DBC.COL_TDKH_DBC_KL1BoPhan]].SetValue(value);
                else
                    throw new ArgumentException("Không phải là công thức");
            }
            catch (Exception)
            {
                throw new ArgumentException("Không phải là công thức");
            }

        }



        private void tab_TIENDO_KEHOACH_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        /*private void spsheet_TD_KH_DoBocKLKeHoach_CellBeginEdit(object sender, SpreadsheetCellCancelEventArgs e)
        {
            IWorkbook wb = e.Worksheet.Workbook;
            Worksheet ws = e.Worksheet;
            ////Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            string colHeading = ws.Columns[e.Cell.ColumnIndex].Heading;
            //string colInDb = TDKH
            Row crRow = ws.Rows[e.RowIndex];
            if (!range.Contains(e.Cell)*//* || string.IsNullOrEmpty(colInDb)*//*)
                return;

            if (e.Cell.ColumnIndex == 0) //Ô chọn
            {
                e.Cancel = true;
                e.Cell.SetValue((e.Cell.Value == true) ? false : true);
            }
            string codHM = ws.Rows[e.RowIndex][dic[TDKH.COL_HangMuc]].Value.ToString();
            int typeDoBoc = fcn_TDKH_GetTypeDoBocKeHoachTienDo();
            if (colHeading == dic[TDKH.COL_MaHieuCongTac] && typeDoBoc == TDKH.TYPEDoBoc_AllDA && codHM != "")
            {
                m_ctrlTKDM.fcn_LoadCodeAndType(MyConstant.CONST_TYPE_DinhMuc_DoBocChuan, CodeHM: codHM);
                BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                {
                    TextBox tb = FindTextBox(ss.Controls);
                    if (tb != null)
                    {
                        tb.TextChanged += fcn_handle_txtBoxTimKiem_TextChange;
                    }
                }), sender as SpreadsheetControl);
                Debug.WriteLine("Finished");

                return;
            }


            //string typeRow = crRow[TDKH_DBC.dic_Dbc[MyConstant.COL_TDKH_DBC_TypeRow]].Value.ToString();
            string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
            //string typeRow = fcn_TDKH_GetTypeRow(MHCT);

            string[] lsColDisable =
            {
                dic[TDKH.COL_STT],
                dic[TDKH.COL_KhoiLuongHopDongDuAn],
                dic[TDKH.COL_KhoiLuongHopDongDuAn],
                dic[TDKH.COL_DBC_LuyKeDaThucHien],
            };

            if (lsColDisable.Contains(colHeading))
                e.Cancel = true;

            string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
            switch (typeRow)
            {
                case MyConstant.TYPEROW_CVCha:
                    List<string> lsUpdateCha = new List<string>()
                    {
                        dic[TDKH.COL_KyHieuBanVe],
                        dic[TDKH.COL_DanhMucCongTac],
                        dic[TDKH.COL_DonVi],
                        dic[TDKH.COL_DBC_KhoiLuongToanBo],
                        dic[TDKH.COL_DBC_HopDong_BoPhan],
                        dic[TDKH.COL_KhoiLuongHopDongDuAn]
                    };
                    if (!lsUpdateCha.Contains(colHeading))
                        e.Cancel = true;
                    break;
                case MyConstant.TYPEROW_CVCON:
                    //bool isCongThucMacDinh = false;
                    //bool.TryParse(crRow[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh].Value.ToString(), out isCongThucMacDinh);

                    string DienGiai = crRow[TDKH.COL_DanhMucCongTac].Value.ToString();
                    bool isCongThuc;
                    try
                    {
                        fcn_TDKH_KiemTraCongThuc(DienGiai);
                        isCongThuc = true;
                    }
                    catch
                    {
                        isCongThuc = false;
                    }
                    List<string> lsUpdateCon = new List<string>()
                    {
                        dic[TDKH.COL_DBC_SoBoPhanGiongNhau],
                        dic[TDKH.COL_DBC_Dai],
                        dic[TDKH.COL_DBC_Rong],
                        dic[TDKH.COL_DBC_Cao],
                        dic[TDKH.COL_DBC_HeSoCauKien],
                        dic[TDKH.COL_DBC_KL1BoPhan]
                    };

                    if (lsUpdateCon.Contains(colHeading) && isCongThuc)
                        e.Cancel = true;

                    break;
                default:
                    break;
            }

        }*/

        private void fcn_handle_txtBoxTimKiem_TextChange(object sender, EventArgs e)
        {

            TextBox tb = sender as TextBox;
            //tb.TextChanged -= textBox_TextChanged;
            if (tb.Text.Length < 2)
                return;
            string strFull = MyFunction.fcn_RemoveAccents(tb.Text);

            List<string> strLs = strFull.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();
            DataTable dt = null;
            string queryStr;
            string str;
            //switch (m_ctrlTKDM._type)
            //{
            //    case MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL:
            //    case MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL_MTC:
            //        string loaiVT = "";
            //        if (m_ctrlTKDM._type == MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL)
            //            loaiVT = "Vật liệu";
            //        else if (m_ctrlTKDM._type == MyConstant.CONST_TYPE_DinhMuc_TDKH_KH_VL_MTC)
            //            loaiVT = "Máy thi công";

            //        //if (strLs.Count == 1)
            //        //{
            //        str = strFull;
            //        //foreach (string tbl in MyConstant.ls_tblVatLieu)
            //        //{
            //        queryStr = $"SELECT * FROM {MyConstant.TBL_HaoPhiVatTu} WHERE (\"MaVatLieu\" LIKE '%{str}%' AND \"LoaiVatTu\"='{loaiVT}')";
            //        Debug.WriteLine($"Query String {queryStr}");
            //        if (dt == null)
            //        {
            //            dt = DataProvider.InstanceTBT.ExecuteQuery(queryStr);
            //        }
            //        else
            //            dt.Merge(DataProvider.InstanceTBT.ExecuteQuery(queryStr));
            //        //}
            //        //}
            //        //else
            //        //{
            //        //    queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_DINHMUCALL} WHERE ";
            //        //    //for (int i = 1; i < m_lsDauDM.Count; i++)
            //        //    //    queryStr += $",'{m_lsDauDM[i]}'";
            //        //    //queryStr += ")) ";
            //        //    /*string strSearch = "";*/
            //        //    string condition = "";
            //        //    foreach (string str in strLs)
            //        //    {
            //        //        condition += $" AND \"TenKhongDau\" LIKE '%{str}%'";
            //        //    }

            //        //    queryStr += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE

            //        //}

            //        break;

            //    default: //Lấy mã định mức
            //        if (strLs.Count == 1)
            //        {
            //            str = strLs[0];
            //            queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_DINHMUCALL} WHERE (\"MaDinhMuc\" LIKE '%{str}%' OR \"TenKhongDau\" LIKE '%{str}%')";
            //        }
            //        else
            //        {
            //            queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_DINHMUCALL} WHERE ";
            //            string condition = "";
            //            foreach (string strSearch in strLs)
            //            {
            //                condition += $" AND \"TenKhongDau\" LIKE '%{strSearch}%'";
            //            }

            //            queryStr += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE

            //        }
            //        Debug.WriteLine($"Query String {queryStr}");
            //        dt = DataProvider.InstanceTBT.ExecuteQuery(queryStr);
            //        break;
            //}

            m_ctrlTKDM.Show();
            m_ctrlTKDM.Parent = tb.Parent.Parent;

            m_ctrlTKDM.Location = new Point(tb.Parent.Location.X + tb.Width, tb.Parent.Parent.Location.Y + 40);
            m_ctrlTKDM.Size = new Size(tb.Parent.Parent.Width - (tb.Parent.Location.X + tb.Width), tb.Parent.Parent.Height - 100);

            m_ctrlTKDM.BringToFront();
            m_ctrlTKDM.fcn_loadDinhMuc(strFull);
        }
        private void fcn_handle_txtBoxTimKiemVatLieuThuCong_TextChange(TextBox tb)
        {
            //TextBox tb = sender as TextBox;
            //tb.TextChanged -= textBox_TextChanged;
            if (tb.Text.Length < 2)
                return;
            string strFull = MyFunction.fcn_RemoveAccents(tb.Text);
            //Worksheet ws_NhapVT = spsheet_BangDeXuatVatTuThiCong.Document.Worksheets[0];
            //Dictionary<string, string> NAME_NVT = MyFunction.fcn_getDicOfColumn(ws_NhapVT.Range[QLVT.TBL_QLVT_YEUCAUVT]);
            List<string> strLs = strFull.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();
            DataTable dt = null;
            string queryStr = "";
            string str;
            string NameCot;
            if (m_ctrlVatlieu.m_NameCot == "TenVatTu")
            {
                string condition = "";
                NameCot = "\"VatTu_KhongDau\"";
                queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} WHERE ";
                //dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                //dt.Columns.Add("TenVatlieu", typeof(string));
                //foreach (DataRow row in dt.Rows)
                //    row["TenVatlieu"] = MyFunction.fcn_RemoveAccents(row["VatTu"].ToString());

                if (strLs.Count == 1)
                {
                    str = strLs[0];
                    //dt.DefaultView.RowFilter = $"[TenVatlieu] LIKE '%{str}%'";
                    queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} WHERE ({NameCot} LIKE '%{str}%' AND \"LoaiVatTu\"='{"Vật liệu"}')";
                }
                else
                {
                    //queryStr = $"[TenVatlieu] LIKE";
                    //for (int i = 1; i < m_lsDauDM.Count; i++)
                    //    queryStr += $",'{m_lsDauDM[i]}'";
                    //queryStr += ")) ";
                    /*string strSearch = "";*/
                    foreach (string strSearch in strLs)
                    {
                        condition += $" AND {NameCot} LIKE '%{strSearch}%'";
                    }
                    queryStr += condition.Remove(0, 4);
                    queryStr += $"AND \"LoaiVatTu\"='{"Vật liệu"}'";
                    //dt.DefaultView.RowFilter += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE
                }
                //dt.DefaultView.RowFilter = queryStr;
                //dt = DataProvider.InstanceTBT.ExecuteQuery(queryStr);
            }
            else if ((m_ctrlVatlieu.m_NameCot == "MaVatTu"))
            {
                NameCot = "\"MaVatLieu\"";
                if (strLs.Count == 1)
                {
                    str = strLs[0];
                    queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} WHERE ({NameCot} LIKE '%{str}%' AND \"LoaiVatTu\"='{"Vật liệu"}')";
                }
                else
                {
                    queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} WHERE ";
                    //for (int i = 1; i < m_lsDauDM.Count; i++)
                    //    queryStr += $",'{m_lsDauDM[i]}'";
                    //queryStr += ")) ";
                    /*string strSearch = "";*/
                    string condition = "";
                    foreach (string strSearch in strLs)
                    {
                        condition += $" AND '{NameCot}' LIKE '%{strSearch}%'";
                    }
                    queryStr += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE
                    queryStr += $"AND \"LoaiVatTu\"='{"Vật liệu"}'";
                }
            }
            else
                return;
            dt = DataProvider.InstanceTBT.ExecuteQuery(queryStr);

            //queryStr = $"SELECT * FROM {MyConstant.TBL_TDKH_KHVT_VatTu}";
            m_ctrlVatlieu.Visible = true;
            m_ctrlVatlieu.Show();
            m_ctrlVatlieu.Parent = tb.Parent.Parent.Parent;
            //m_ctrlTKDM.PointToScreen(tb.PointToScreen(Point.Empty));

            m_ctrlVatlieu.Location = new Point(tb.Parent.Location.X + tb.Width, tb.Parent.Parent.Location.Y + 25);
            m_ctrlVatlieu.Size = new Size(tb.Parent.Parent.Width - (tb.Parent.Location.X + tb.Width), tb.Parent.Parent.Height - 50);
            //sz.Height = tb.Parent.Height;
            //sz.Width = tb.Parent.Width - (10 + tb.Parent.mopenFileDialogation.X + tb.Width)
            //m_ctrlTKDM.
            m_ctrlVatlieu.BringToFront();
            m_ctrlVatlieu.fcn_loadVatLieu(dt);
            //m_ctrlVatlieu.Hide();
        }
        private void fcn_handle_txtBoxTimKiemVatLieuKHVT_TextChange(object sender, EventArgs e)
        {
            TextBox tb = sender as TextBox;
            //tb.TextChanged -= textBox_TextChanged;
            if (tb.Text.Length < 2 || cbo_LuaChon.SelectedIndex != 3)
                return;
            string strFull = MyFunction.fcn_RemoveAccents(tb.Text);
            List<string> strLs = strFull.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();
            DataTable dt = null;
            string queryStr;
            string str;
            string NameCot;
            if (m_ctrlVatlieu.m_NameCot == "TenVatTu")
            {
                queryStr = $"SELECT * FROM {QLVT.TBL_QLVT_KHVT} WHERE \"CodeHangMuc\"='{m_ctrlVatlieu.m_codeHM}'";
                dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                if (strLs.Count == 1)
                {
                    str = strLs[0];
                    //dt.DefaultView.RowFilter = $"[TenVatTu] LIKE '%{str}%'";
                    queryStr = $"SELECT * FROM {QLVT.TBL_QLVT_KHVT} WHERE \"TenVatTu_KhongDau\" LIKE '%{str}%' AND \"CodeHangMuc\"='{m_ctrlVatlieu.m_codeHM}'";
                }
                else
                {
                    queryStr = $"SELECT * FROM {QLVT.TBL_QLVT_KHVT} WHERE ";
                    //for (int i = 1; i < m_lsDauDM.Count; i++)
                    //    queryStr += $",'{m_lsDauDM[i]}'";
                    //queryStr += ")) ";
                    /*string strSearch = "";*/
                    string condition = "";
                    foreach (string strSearch in strLs)
                    {
                        condition += $" AND \"TenVatTu_KhongDau\" LIKE '%{strSearch}%'";
                    }
                    queryStr += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE
                    queryStr += $"\"CodeHangMuc\"='{m_ctrlVatlieu.m_codeHM}'";
                }
                //dt.DefaultView.RowFilter = queryStr;
                //dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            }
            else if ((m_ctrlVatlieu.m_NameCot == "MaVatTu"))
            {
                NameCot = "\"MaVatLieu\"";
                if (strLs.Count == 1)
                {
                    str = strLs[0];
                    queryStr = $"SELECT * FROM {QLVT.TBL_QLVT_KHVT} WHERE ({NameCot} LIKE '%{str}%' AND \"CodeHangMuc\"='{m_ctrlVatlieu.m_codeHM}')";
                }
                else
                {
                    queryStr = $"SELECT * FROM {QLVT.TBL_QLVT_KHVT} WHERE ";
                    //for (int i = 1; i < m_lsDauDM.Count; i++)
                    //    queryStr += $",'{m_lsDauDM[i]}'";
                    //queryStr += ")) ";
                    /*string strSearch = "";*/
                    string condition = "";
                    foreach (string strSearch in strLs)
                    {
                        condition += $" AND '{NameCot}' LIKE '%{strSearch}%'";
                    }

                    queryStr += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE
                    queryStr += $"\"CodeHangMuc\"='{m_ctrlVatlieu.m_codeHM}'";
                }
            }
            else
                return;
            dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            m_ctrlVatlieu.Show();
            m_ctrlVatlieu.Parent = tb.Parent.Parent.Parent;

            m_ctrlVatlieu.Location = new Point(tb.Parent.Location.X + tb.Width, tb.Parent.Parent.Location.Y + 25);
            m_ctrlVatlieu.Size = new Size(tb.Parent.Parent.Width - (tb.Parent.Location.X + tb.Width), tb.Parent.Parent.Height - 50);
            m_ctrlVatlieu.BringToFront();
            m_ctrlVatlieu.fcn_loadVatLieu(dt);
        }
        private void fcn_Handle_Popup_TDKH_LayKLDocVao(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            List<string> lstCode = new List<string>();
            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
            wb.BeginUpdate();
            for (int i = ws.GetUsedRange().TopRowIndex; i <= ws.GetUsedRange().BottomRowIndex; i++)
            {
                Row Crow = ws.Rows[i];
                bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                if (Chon)
                {
                    string TypeRow = Crow[dic[TDKH.COL_TypeRow]].Value.TextValue;
                    if (TypeRow == MyConstant.TYPEROW_CVCha)
                    {
                        string Code = Crow[dic[TDKH.COL_Code]].Value.TextValue;
                        lstCode.Add(Code);
                        Crow[dic["Chon"]].SetValue(false);
                    }
                }
            }
            wb.EndUpdate();
            if (lstCode.Count() == 0)
                return;
            wb.BeginUpdate();
            string dbString = $"SELECT cttk.Code, dmct.KhoiLuongDocVao " +
        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
        $"JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
        $"ON cttk.CodeCongTac = dmct.Code " +
        $"WHERE cttk.Code IN ({MyFunction.fcn_Array2listQueryCondition(lstCode.ToArray())})  " +
        $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
        $"AND cttk.{dvth.ColCodeFK} = '{dvth.Code}' " +
        $"ORDER BY cttk.SortId ASC";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            foreach (DataRow dr in dt.Rows)
            {
                if (dr["KhoiLuongDocVao"] == DBNull.Value)
                    continue;
                var cell = colCode.Search((string)dr["Code"], MyConstant.MySearchOptions).SingleOrDefault();
                if (cell is null)
                {
                    continue;
                }
                ws.Rows[cell.RowIndex][dic[TDKH.COL_KhoiLuongNhapVao]].SetValue(dr["KhoiLuongDocVao"]);
            }
            wb.EndUpdate();
            MessageShower.ShowInformation("Cập nhập ngày thành công!!!!!");
        }

        private void fcn_Handle_Popup_TDKH_Lay0KLDocVao(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            List<string> lstCode = new List<string>();
            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
            wb.BeginUpdate();
            for (int i = ws.GetUsedRange().TopRowIndex; i <= ws.GetUsedRange().BottomRowIndex; i++)
            {
                Row Crow = ws.Rows[i];
                bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                var val = Crow[dic[TDKH.COL_KhoiLuongNhapVao]].Value.ToString();
                if (Chon && Crow.Visible && !val.HasValue())
                {
                    Crow[dic[TDKH.COL_KhoiLuongNhapVao]].SetValue(0);
                }
            }
            wb.EndUpdate();
            if (lstCode.Count() == 0)
                return;

            MessageShower.ShowInformation("Cập nhập  thành công!!!!!");
        }
        private void fcn_Handle_Popup_TDKH_LayNgayKeHoachTuNhanThau(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            List<string> lstCode = new List<string>();
            XtraForm_DVTHNhanThau DV = new XtraForm_DVTHNhanThau();
            //DV.Fcn_UpdateData(lstCode);
            DV.ShowDialog();
            DonViThucHien dvth = DV.dvth;
            if (dvth is null)
                return;
            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            bool SelectHM = false;
            wb.BeginUpdate();
            for (int i = ws.GetUsedRange().TopRowIndex; i <= ws.GetUsedRange().BottomRowIndex; i++)
            {
                Row Crow = ws.Rows[i];
                bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                if (Chon)
                {
                    string TypeRow = Crow[dic[TDKH.COL_TypeRow]].Value.TextValue;
                    if (TypeRow == MyConstant.TYPEROW_CVCha)
                    {
                        if (SelectHM)
                            continue;
                        string Code = Crow[dic[TDKH.COL_Code]].Value.TextValue;
                        lstCode.Add(Code);
                        Crow[dic["Chon"]].SetValue(false);
                    }
                    else if (TypeRow == MyConstant.TYPEROW_HangMuc)
                    {
                        if (SelectHM)
                        {
                            lstCode.Add(Crow[dic[TDKH.COL_Code]].Value.TextValue);
                        }
                        else
                        {
                            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn đang lựa chọn Hạng mục!!" +
                                "Bạn có muốn áp dụng cho tất cả công tác thuộc Hạng mục đã chọn hay không?????Nếu chọn thì lựa chọn sẽ áp dụng cho những Hạng mục tiếp theo!!!!");
                            if (rs == DialogResult.No)
                                continue;
                            lstCode.Add(Crow[dic[TDKH.COL_Code]].Value.TextValue);
                            SelectHM = true;
                        }
                    }
                }
            }
            wb.EndUpdate();
            if (lstCode.Count() == 0)
                return;
            string dbString = !SelectHM ? $"SELECT cttk.*, cttk2.NgayBatDau AS NgayBatDauNhanThau, cttk2.NgayKetThuc AS NgayKetThucNhanThau " +
        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
        $"JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
        $"ON cttk.CodeCongTac = dmct.Code " +
        $"JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk2 " +
        $"ON cttk.CodeCongTac = cttk2.CodeCongTac AND cttk2.CodeNhaThau IS NULL " +
        $"WHERE cttk.Code IN ({MyFunction.fcn_Array2listQueryCondition(lstCode.ToArray())})  " +
        $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
        $"AND cttk2.{dvth.ColCodeFK} = '{dvth.Code}' " +
        $"ORDER BY \"SortId\" ASC" :
        $"SELECT cttk.*, cttk2.NgayBatDau AS NgayBatDauNhanThau, cttk2.NgayKetThuc AS NgayKetThucNhanThau " +
        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
        $"JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
        $"ON cttk.CodeCongTac = dmct.Code " +
        $"JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk2 " +
        $"ON cttk.CodeCongTac = cttk2.CodeCongTac AND cttk2.CodeNhaThau IS NULL " +
        $"WHERE dmct.CodeHangMuc IN ({MyFunction.fcn_Array2listQueryCondition(lstCode.ToArray())})  " +
        $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
        $"AND cttk2.{dvth.ColCodeFK} = '{dvth.Code}' " +
        $"ORDER BY \"SortId\" ASC";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            wb.BeginUpdate();
            foreach (DataRow dr in dt.Rows)
            {
                if (dr["NgayBatDauNhanThau"] == DBNull.Value || dr["NgayKetThucNhanThau"] == DBNull.Value)
                    continue;
                dr["NgayBatDau"] = dr["NgayBatDauNhanThau"];
                dr["NgayKetThuc"] = dr["NgayKetThucNhanThau"];

                var cell = colCode.Search((string)dr["Code"], MyConstant.MySearchOptions).SingleOrDefault();
                if (cell is null)
                {
                    continue;
                }
                ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayBatDau]].SetValueFromText((string)dr["NgayBatDau"]);
                ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayKetThuc]].SetValueFromText((string)dr["NgayKetThuc"]);
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);
            MessageShower.ShowInformation("Cập nhập ngày thành công!!!!!");
        }
        private void fcn_Handle_Popup_TDKH_LayNgayKeHoachTuNhanThauMinMax(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            List<string> lstCode = new List<string>();
            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            bool SelectHM = false;
            wb.BeginUpdate();
            for (int i = ws.GetUsedRange().TopRowIndex; i <= ws.GetUsedRange().BottomRowIndex; i++)
            {
                Row Crow = ws.Rows[i];
                bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                if (Chon)
                {
                    string TypeRow = Crow[dic[TDKH.COL_TypeRow]].Value.TextValue;
                    if (TypeRow == MyConstant.TYPEROW_CVCha)
                    {
                        if (SelectHM)
                            continue;
                        string Code = Crow[dic[TDKH.COL_Code]].Value.TextValue;
                        lstCode.Add(Code);
                        Crow[dic["Chon"]].SetValue(false);
                    }
                    else if (TypeRow == MyConstant.TYPEROW_HangMuc)
                    {
                        if (SelectHM)
                        {
                            lstCode.Add(Crow[dic[TDKH.COL_Code]].Value.TextValue);
                        }
                        else
                        {
                            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn đang lựa chọn Hạng mục!!" +
                                "Bạn có muốn áp dụng cho tất cả công tác thuộc Hạng mục đã chọn hay không?????Nếu chọn thì lựa chọn sẽ áp dụng cho những Hạng mục tiếp theo!!!!");
                            if (rs == DialogResult.No)
                                continue;
                            lstCode.Add(Crow[dic[TDKH.COL_Code]].Value.TextValue);
                            SelectHM = true;
                        }
                    }
                }
            }
            wb.EndUpdate();
            if (lstCode.Count() == 0)
                return;
            string dbString = !SelectHM ? $"SELECT cttk.*, cttk1.MINNBD,cttk1.MAXNKT " +
        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk LEFT JOIN view_MinMaxNgayDonViNhanThau cttk1 ON cttk1.CodeCongTac=cttk.CodeCongTac " +
        $"WHERE cttk.Code IN ({MyFunction.fcn_Array2listQueryCondition(lstCode.ToArray())})  " +
        $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " :
       $"SELECT cttk.Code,cttk.NgayBatDau,cttk.NgayKetThuc,NULL AS MINNBD,NULL AS MAXNKT,dmct.CodeCongTac" +
        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk LEFT JOIN view_MinMaxNgayDonViNhanThau cttk1 cttk1.CodeCongTac=cttk.CodeCongTac " +
        $"WHERE cttk.CodeHangMuc IN ({MyFunction.fcn_Array2listQueryCondition(lstCode.ToArray())})  " +
        $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' ";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            wb.BeginUpdate();
            foreach (DataRow dr in dt.Rows)
            {
                if (dr["MINNBD"] == DBNull.Value || dr["MAXNKT"] == DBNull.Value)
                    continue;
                dr["NgayBatDau"] = dr["MINNBD"];
                dr["NgayKetThuc"] = dr["MAXNKT"];
                var cell = colCode.Search((string)dr["Code"], MyConstant.MySearchOptions).SingleOrDefault();
                if (cell is null)
                {
                    continue;
                }
                ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayBatDau]].SetValueFromText((string)dr["NgayBatDau"]);
                ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayKetThuc]].SetValueFromText((string)dr["NgayKetThuc"]);
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);
            MessageShower.ShowInformation("Cập nhập ngày thành công!!!!!");
        }
        private void fcn_Handle_Popup_TDKH_LayNgayKeHoachTuGiaoThau(bool NBD = false, bool NKT = false)
        {
            var dres = MessageShower.ShowYesNoQuestion("Ngày kế hoạch sẽ được lấy lại từ đơn vị giao thầu và không thể hoàn tác!");
            if (dres != DialogResult.Yes)
            {
                return;
            }
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            Row crRow = ws.Rows[ws.SelectedCell.TopRowIndex];
            string crTypeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (crTypeRow != MyConstant.TYPEROW_HangMuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn dòng hạng mục để dùng tính năng này!");
            }
            string codeHM = crRow[dic[TDKH.COL_Code]].Value.ToString();

            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;

            string dbString = $"SELECT cttk.*, cttk2.NgayBatDau AS NgayBatDauGiaoThau, cttk2.NgayKetThuc AS NgayKetThucGiaoThau " +
                    $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
                    $"JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
                    $"ON cttk.CodeCongTac = dmct.Code " +
                    $"JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk2 " +
                    $"ON cttk.CodeCongTac = cttk2.CodeCongTac AND cttk2.CodeNhaThau IS NOT NULL " +
                    $"WHERE dmct.CodeHangMuc = '{codeHM}' " +
                    $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
                    $"AND cttk.{dvth.ColCodeFK} = '{dvth.Code}' " +
                    $"ORDER BY \"SortId\" ASC";

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            wb.BeginUpdate();
            foreach (DataRow dr in dt.Rows)
            {
                if (NBD)
                    dr["NgayBatDau"] = dr["NgayBatDauGiaoThau"];
                if (NKT)
                    dr["NgayKetThuc"] = dr["NgayKetThucGiaoThau"];

                var cell = colCode.Search((string)dr["Code"], MyConstant.MySearchOptions).SingleOrDefault();
                if (cell is null)
                {
                    continue;
                }
                if (NBD)
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayBatDau]].SetValueFromText((string)dr["NgayBatDau"]);
                if (NKT)
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayKetThuc]].SetValueFromText((string)dr["NgayKetThuc"]);
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);
        }

        private void fcn_Handle_Popup_TDKH_LienKetNhomAll(object sender, EventArgs eventArgs)
        {
            WaitFormHelper.ShowWaitForm("Đang đẩy dữ liệu vào hệ thống!!!!!!!!!");
            string dbString = $"SELECT nct.Code as CodeNhomThauChinh, nct1.Code AS CodeNhomThauPhu,cttk.Code " +
                    $"FROM {TDKH.TBL_NhomCongTac} nct " +
                    $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
                    $"ON cttk.CodeNhom = nct.Code AND cttk.CodeNhaThau IS NOT NULL " +
                    $"LEFT JOIN {TDKH.TBL_NhomCongTac} nct1 " +
                    $"ON (nct.Ten = nct1.Ten AND nct.DonVi=nct1.DonVi AND nct1.Code<>nct.Code AND nct.CodeHangMuc=nct1.CodeHangMuc AND nct.GhiChuBoSungJson=nct1.GhiChuBoSungJson)" +
                    $" OR  (nct.Ten = nct1.Ten AND nct.DonVi IS NULL AND nct1.Code<>nct.Code AND nct.CodeHangMuc=nct1.CodeHangMuc AND nct.GhiChuBoSungJson=nct1.GhiChuBoSungJson) " +
                    $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk1 " +
                    $"ON cttk1.CodeNhom = nct1.Code AND cttk1.CodeNhaThau IS  NULL " +
                    $"WHERE cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' ";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //var grCtac = dt.AsEnumerable().GroupBy(x => x["Code"]);
            List<string> lstCodeNhom = new List<string>();
            var grNhom = dt.AsEnumerable().GroupBy(x => x["CodeNhomThauPhu"]);
            lstCodeNhom.Clear();
            foreach (var cnhom in grNhom)
            {
                if (cnhom.Key == DBNull.Value)
                    continue;
                if (lstCodeNhom.Contains(cnhom.Key.ToString()))
                    continue;
                lstCodeNhom.Add(cnhom.Key.ToString());
                var grNhomChinh = cnhom.GroupBy(x => x["CodeNhomThauChinh"]);
                foreach (var cthauchinh in grNhomChinh)
                {
                    if (cthauchinh.Key == DBNull.Value)
                        continue;
                    dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET \"CodeNhomGiaoThau\"='{cthauchinh.Key}' WHERE \"Code\"='{cnhom.Key}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }
            //foreach (var ctac in grCtac)
            //{
            //    if (ctac.Key == DBNull.Value)
            //        continue;
            //    var grNhom = ctac.GroupBy(x => x["CodeNhomThauPhu"]);
            //    foreach (var cnhom in grNhom)
            //    {
            //        if (cnhom.FirstOrDefault()["CodeNhomThauChinh"] == DBNull.Value)
            //            continue;
            //        if (lstCodeNhom.Contains(cnhom.Key.ToString()))
            //            continue;
            //        lstCodeNhom.Add(cnhom.Key.ToString());
            //        dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET \"CodeNhomGiaoThau\"='{cnhom.FirstOrDefault()["CodeNhomThauChinh"]}' WHERE \"Code\"='{cnhom.Key}'";
            //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //    }
            //}
            WaitFormHelper.CloseWaitForm();
            TDKHHelper.LoadCongKinhPhiTienDo();
            MessageShower.ShowInformation("Cập nhập thành công!!!!");
        }
        private void fcn_Handle_Popup_TDKH_LienKetNhom(object sender, EventArgs eventArgs)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu!!!!!!!!!");
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            List<string> lstCodeNhom = new List<string>();
            wb.BeginUpdate();
            for (int i = ws.GetUsedRange().TopRowIndex; i <= ws.GetUsedRange().BottomRowIndex; i++)
            {
                Row Crow = ws.Rows[i];
                bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                if (Chon)
                {
                    string TypeRow = Crow[dic[TDKH.COL_TypeRow]].Value.TextValue;
                    if (TypeRow == MyConstant.TYPEROW_Nhom)
                    {
                        lstCodeNhom.Add(Crow[dic[TDKH.COL_Code]].Value.TextValue);
                    }
                    Crow[dic["Chon"]].SetValue(false);
                }
            }
            wb.EndUpdate();
            if (!lstCodeNhom.Any())
            {
                WaitFormHelper.CloseWaitForm();
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang đẩy dữ liệu vào hệ thống!!!!!!!!!");
            string dbString = $"SELECT nct.Code as CodeNhomThauPhu, nct1.Code AS CodeNhomThauChinh,cttk.Code " +
                    $"FROM {TDKH.TBL_NhomCongTac} nct " +
                    $"LEFT JOIN {TDKH.TBL_NhomCongTac} nct1 " +
                    $"ON (nct.Ten = nct1.Ten AND nct.DonVi=nct1.DonVi AND nct1.Code<>nct.Code AND nct.CodeHangMuc=nct1.CodeHangMuc AND nct.GhiChuBoSungJson=nct1.GhiChuBoSungJson)" +
                    $" OR (nct.Ten = nct1.Ten AND nct.DonVi IS NULL AND nct1.Code<>nct.Code AND nct.CodeHangMuc=nct1.CodeHangMuc AND nct.GhiChuBoSungJson=nct1.GhiChuBoSungJson)" +
                    $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
                    $"ON cttk.CodeNhom = nct1.Code AND cttk.CodeNhaThau IS NOT NULL " +
                    $"WHERE nct.Code IN ({MyFunction.fcn_Array2listQueryCondition(lstCodeNhom.ToArray())}) " +
                    $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' ";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //var grCtac = dt.AsEnumerable().GroupBy(x => x["CodeNhomThauPhu"]);
            var grNhom = dt.AsEnumerable().GroupBy(x => x["CodeNhomThauPhu"]);
            lstCodeNhom.Clear();
            foreach (var cnhom in grNhom)
            {
                if (cnhom.Key == DBNull.Value)
                    continue;
                if (lstCodeNhom.Contains(cnhom.Key.ToString()))
                    continue;
                lstCodeNhom.Add(cnhom.Key.ToString());
                var grNhomChinh = cnhom.GroupBy(x => x["CodeNhomThauChinh"]);
                foreach (var cthauchinh in grNhomChinh)
                {
                    if (cthauchinh.Key == DBNull.Value)
                        continue;
                    dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET \"CodeNhomGiaoThau\"='{cthauchinh.Key}' WHERE \"Code\"='{cnhom.Key}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }
            //foreach (var ctac in grCtac)
            //{
            //    if (ctac.Key == DBNull.Value)
            //        continue;

            //}
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!!!!");
        }
        private void fcn_Handle_Popup_TDKH_LayKLKH(object sender, EventArgs eventArgs)
        {

            var dres = MessageShower.ShowYesNoQuestion("Khối lượng kế hoạch TỔNG sẽ được lấy lại từ đơn vị giao thầu và không thể hoàn tác!");
            if (dres != DialogResult.Yes)
            {
                return;
            }
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            Row crRow = ws.Rows[ws.SelectedCell.TopRowIndex];
            string crTypeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (crTypeRow != MyConstant.TYPEROW_HangMuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn dòng hạng mục để dùng tính năng này!");
            }
            string codeHM = crRow[dic[TDKH.COL_Code]].Value.ToString();
            string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();


            int sortId = 0;
            WaitFormHelper.ShowWaitForm("Đang lấy khối lượng kế hoạch tổng");
            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;

            string dbString = $"SELECT cttk.*, cttk2.KhoiLuongToanBo AS KhoiLuongToanBoGiaoThau " +
                    $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
                    $"JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
                    $"ON cttk.CodeCongTac = dmct.Code " +
                    $"JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk2 " +
                    $"ON cttk.CodeCongTac = cttk2.CodeCongTac AND cttk2.CodeNhaThau IS NOT NULL " +
                    $"WHERE dmct.CodeHangMuc = '{codeHM}' " +
                    $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
                    $"AND cttk.{dvth.ColCodeFK} = '{dvth.Code}' " +
                    $"ORDER BY \"SortId\" ASC";

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            wb.BeginUpdate();
            foreach (DataRow dr in dt.Rows)
            {
                dr["KhoiLuongToanBo"] = dr["KhoiLuongToanBoGiaoThau"];

                var cell = colCode.Search((string)dr["Code"], MyConstant.MySearchOptions).SingleOrDefault();
                if (cell is null)
                {
                    continue;
                }

                ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(dr["KhoiLuongToanBo"]);
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);
            WaitFormHelper.CloseWaitForm();
        }

        private void fcn_Handle_Popup_TDKH_LayKLKHALLNhanThau(object sender, EventArgs eventArgs)
        {

            var dres = MessageShower.ShowYesNoQuestion("Toàn bộ kế hoạch hàng ngày sẽ được lấy từ đơn vị nhận thầu đẩy cho bên giao thầu và không thể hoàn tác!");
            if (dres != DialogResult.Yes)
            {
                return;
            }
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            Row crRow = ws.Rows[ws.SelectedCell.TopRowIndex];
            string crTypeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (crTypeRow != MyConstant.TYPEROW_HangMuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn dòng hạng mục để dùng tính năng này!");
            }
            string codeHM = crRow[dic[TDKH.COL_Code]].Value.ToString();
            string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();

            WaitFormHelper.ShowWaitForm("Đang lấy toàn bộ kế hoạch");
            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;

            string dbString = $"SELECT cttk2.*, cttk.KhoiLuongToanBo AS KhoiLuongToanBoNhanThau, " +
                $"cttk.NgayBatDau AS NgayBatDauNhanThau, cttk.NgayKetThuc AS NgayKetThucNhanThau, cttk.Code AS CodeNhanThau " +
                    $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
                    $"JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
                    $"ON cttk.CodeCongTac = dmct.Code " +
                    $"JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk2 " +
                    $"ON cttk.CodeCongTac = cttk2.CodeCongTac AND cttk2.CodeNhaThau IS NOT NULL " +
                    $"WHERE dmct.CodeHangMuc = '{codeHM}' " +
                    $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
                    $"AND cttk.{dvth.ColCodeFK} = '{dvth.Code}' " +
                    $"ORDER BY \"SortId\" ASC";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            wb.BeginUpdate();
            Dictionary<string, string> dicCodes = new Dictionary<string, string>();
            foreach (DataRow dr in dt.Rows)
            {
                dicCodes.Add(dr["CodeNhanThau"].ToString(), dr["Code"].ToString());
                if (dr["KhoiLuongToanBoNhanThau"] != DBNull.Value)
                    dr["KhoiLuongToanBo"] = dr["KhoiLuongToanBoNhanThau"];
                if (dr["NgayBatDauNhanThau"] != DBNull.Value && dr["NgayKetThucNhanThau"] != DBNull.Value)
                {
                    dr["NgayBatDau"] = dr["NgayBatDauNhanThau"];
                    dr["NgayKetThuc"] = dr["NgayKetThucNhanThau"];
                }
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);

            var codesNhanThau = dt.AsEnumerable().Select(x => x["CodeNhanThau"].ToString());
            var codes = dt.AsEnumerable().Select(x => x["Code"].ToString());
            string dbStringHangNgay = $"SELECT hn.* \r\n" +
                $"FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} hn\r\n" +
                $"JOIN {Server.Tbl_TDKH_ChiTietCongTacTheoGiaiDoan} cttk\r\n" +
                $"ON hn.CodeCongTacTheoGiaiDoan = cttk.Code\r\n" +
                $"WHERE CodeCongTacTheoGiaiDoan IN ({MyFunction.fcn_Array2listQueryCondition(codesNhanThau)})";
            var dthnNew = DataProvider.InstanceTHDA.ExecuteQuery(dbStringHangNgay);


            dbStringHangNgay = $"SELECT hn.* \r\n" +
                $"FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} hn\r\n" +
                $"LEFT JOIN {Server.Tbl_TDKH_ChiTietCongTacTheoGiaiDoan} cttk\r\n" +
                $"ON hn.CodeCongTacTheoGiaiDoan = cttk.Code\r\n" +

                $"WHERE CodeCongTacTheoGiaiDoan IN ({MyFunction.fcn_Array2listQueryCondition(codes)})";
            var dthn = DataProvider.InstanceTHDA.ExecuteQuery(dbStringHangNgay);

            foreach (DataRow dr in dthnNew.Rows)
            {
                if (dr["KhoiLuongKeHoach"] == DBNull.Value)
                    continue;
                string CodeNT = (string)dr["CodeCongTacTheoGiaiDoan"];
                var hnIndb = dthn.AsEnumerable().SingleOrDefault(x => ((string)x["Ngay"] == (string)dr["Ngay"]) && ((string)x["CodeCongTacTheoGiaiDoan"] == dicCodes[CodeNT]));
                if (hnIndb is null)
                {
                    hnIndb = dthn.NewRow();
                    dthn.Rows.Add(hnIndb);
                    hnIndb.ItemArray = dr.ItemArray;
                    hnIndb["Code"] = Guid.NewGuid().ToString();

                }

                hnIndb["KhoiLuongKeHoach"] = dr["KhoiLuongKeHoach"];
                hnIndb["CodeCongTacTheoGiaiDoan"] = dicCodes[CodeNT];
            }

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dthn, Server.Tbl_TDKH_KhoiLuongCongViecTungNgay);
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!!!!");

        }
        private void fcn_Handle_Popup_TDKH_LayKLKHALLNhanThauNhom(object sender, EventArgs eventArgs)
        {

            var dres = MessageShower.ShowYesNoQuestion("Toàn bộ kế hoạch hàng ngày của nhóm sẽ được lấy từ đơn vị nhận thầu đẩy cho bên giao thầu và không thể hoàn tác!");
            if (dres != DialogResult.Yes)
            {
                return;
            }
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            Row crRow = ws.Rows[ws.SelectedCell.TopRowIndex];
            string crTypeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (crTypeRow != MyConstant.TYPEROW_HangMuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn dòng hạng mục để dùng tính năng này!");
            }
            string codeHM = crRow[dic[TDKH.COL_Code]].Value.ToString();
            string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();

            WaitFormHelper.ShowWaitForm("Đang lấy toàn bộ kế hoạch");
            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;

            //string dbString = $"SELECT cttk2.*, cttk.KhoiLuongToanBo AS KhoiLuongToanBoNhanThau, " +
            //    $"cttk.NgayBatDau AS NgayBatDauNhanThau, cttk.NgayKetThuc AS NgayKetThucNhanThau, cttk.Code AS CodeNhanThau " +
            //        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
            //        $"JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
            //        $"ON cttk.CodeCongTac = dmct.Code " +
            //        $"JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk2 " +
            //        $"ON cttk.CodeCongTac = cttk2.CodeCongTac AND cttk2.CodeNhaThau IS NOT NULL " +
            //        $"WHERE dmct.CodeHangMuc = '{codeHM}' " +
            //        $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
            //        $"AND cttk.{dvth.ColCodeFK} = '{dvth.Code}' " +
            //        $"ORDER BY \"SortId\" ASC";
            string dbString = $"SELECT cttk2.*, cttk.KhoiLuongKeHoach AS KhoiLuongToanBoNhanThau, " +
    $"cttk.NgayBatDau AS NgayBatDauGiaoThau, cttk.NgayKetThuc AS NgayKetThucGiaoThau, cttk.Code AS CodeNhanThau " +
        $"FROM {TDKH.TBL_NhomCongTac} cttk " +
        $"JOIN {TDKH.TBL_NhomCongTac} cttk2 " +
        $"ON cttk.CodeNhomGiaoThau = cttk2.Code AND cttk2.CodeNhomGiaoThau IS  NULL " +
        $"WHERE cttk.CodeHangMuc = '{codeHM}' ";

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            wb.BeginUpdate();
            Dictionary<string, string> dicCodes = new Dictionary<string, string>();
            foreach (DataRow dr in dt.Rows)
            {
                dicCodes.Add(dr["CodeNhanThau"].ToString(), dr["Code"].ToString());
                if (dr["KhoiLuongToanBoNhanThau"] != DBNull.Value)
                    dr["KhoiLuongToanBo"] = dr["KhoiLuongToanBoNhanThau"];
                if (dr["NgayBatDauNhanThau"] != DBNull.Value && dr["NgayKetThucNhanThau"] != DBNull.Value)
                {
                    dr["NgayBatDau"] = dr["NgayBatDauNhanThau"];
                    dr["NgayKetThuc"] = dr["NgayKetThucNhanThau"];
                }
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);

            var codesNhanThau = dt.AsEnumerable().Select(x => x["CodeNhanThau"].ToString());
            var codes = dt.AsEnumerable().Select(x => x["Code"].ToString());
            string dbStringHangNgay = $"SELECT hn.* \r\n" +
                $"FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} hn\r\n" +
                $"JOIN {Server.Tbl_TDKH_NhomCongTac} cttk\r\n" +
                $"ON hn.CodeNhom = cttk.Code\r\n" +
                $"WHERE CodeNhom IN ({MyFunction.fcn_Array2listQueryCondition(codesNhanThau)})";
            var dthnNew = DataProvider.InstanceTHDA.ExecuteQuery(dbStringHangNgay);


            dbStringHangNgay = $"SELECT hn.* \r\n" +
                       $"FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} hn\r\n" +
                       $"JOIN {Server.Tbl_TDKH_NhomCongTac} cttk\r\n" +
                       $"ON hn.CodeNhom = cttk.Code\r\n" +
                       $"WHERE CodeNhom IN ({MyFunction.fcn_Array2listQueryCondition(codes)})";
            var dthn = DataProvider.InstanceTHDA.ExecuteQuery(dbStringHangNgay);

            foreach (DataRow dr in dthnNew.Rows)
            {
                if (dr["KhoiLuongKeHoach"] == DBNull.Value)
                    continue;
                string CodeGT = (string)dr["CodeNhom"];
                var hnIndb = dthn.AsEnumerable().SingleOrDefault(x => ((string)x["Ngay"] == (string)dr["Ngay"]) && ((string)x["CodeNhom"] == dicCodes[CodeGT]));
                if (hnIndb is null)
                {
                    hnIndb = dthn.NewRow();
                    dthn.Rows.Add(hnIndb);
                    hnIndb.ItemArray = dr.ItemArray;
                    hnIndb["Code"] = Guid.NewGuid().ToString();

                }

                hnIndb["KhoiLuongKeHoach"] = dr["KhoiLuongKeHoach"];
                hnIndb["CodeNhom"] = dicCodes[CodeGT];
            }

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dthn, Server.Tbl_TDKH_KhoiLuongCongViecTungNgay);
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!!!!");

        }
        private void fcn_Handle_Popup_TDKH_LayKLKHALL(object sender, EventArgs eventArgs)
        {

            var dres = MessageShower.ShowYesNoQuestion("Toàn bộ kế hoạch hàng ngày sẽ được lấy lại từ đơn vị giao thầu và không thể hoàn tác!");
            if (dres != DialogResult.Yes)
            {
                return;
            }
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            Row crRow = ws.Rows[ws.SelectedCell.TopRowIndex];
            string crTypeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (crTypeRow != MyConstant.TYPEROW_HangMuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn dòng hạng mục để dùng tính năng này!");
            }
            string codeHM = crRow[dic[TDKH.COL_Code]].Value.ToString();
            string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();


            int sortId = 0;
            WaitFormHelper.ShowWaitForm("Đang lấy toàn bộ kế hoạch");
            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;

            string dbString = $"SELECT cttk.*, cttk2.KhoiLuongToanBo AS KhoiLuongToanBoGiaoThau, " +
                $"cttk2.NgayBatDau AS NgayBatDauGiaoThau, cttk2.NgayKetThuc AS NgayKetThucGiaoThau, cttk2.Code AS CodeGiaoThau " +
                    $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
                    $"JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
                    $"ON cttk.CodeCongTac = dmct.Code " +
                    $"JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk2 " +
                    $"ON cttk.CodeCongTac = cttk2.CodeCongTac AND cttk2.CodeNhaThau IS NOT NULL " +
                    $"WHERE dmct.CodeHangMuc = '{codeHM}' " +
                    $"AND cttk.CodeGiaiDoan = '{cbb_DBKH_ChonDot.SelectedValue}' " +
                    $"AND cttk.{dvth.ColCodeFK} = '{dvth.Code}' " +
                    $"ORDER BY \"SortId\" ASC";

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            wb.BeginUpdate();
            Dictionary<string, string> dicCodes = new Dictionary<string, string>();
            foreach (DataRow dr in dt.Rows)
            {
                dicCodes.Add(dr["CodeGiaoThau"].ToString(), dr["Code"].ToString());
                if (dr["KhoiLuongToanBoGiaoThau"] != DBNull.Value)
                    dr["KhoiLuongToanBo"] = dr["KhoiLuongToanBoGiaoThau"];
                if (dr["NgayBatDauGiaoThau"] != DBNull.Value && dr["NgayKetThucGiaoThau"] != DBNull.Value)
                {
                    dr["NgayBatDau"] = dr["NgayBatDauGiaoThau"];
                    dr["NgayKetThuc"] = dr["NgayKetThucGiaoThau"];
                }

                var cell = colCode.Search((string)dr["Code"], MyConstant.MySearchOptions).SingleOrDefault();
                if (cell is null)
                {
                    continue;
                }

                ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(dr["KhoiLuongToanBo"]);
                ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayBatDau]].SetValueFromText(dr["NgayBatDau"].ToString());
                ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayKetThuc]].SetValueFromText(dr["NgayKetThuc"].ToString());
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);

            var codesGiaoThau = dt.AsEnumerable().Select(x => x["CodeGiaoThau"].ToString());
            var codes = dt.AsEnumerable().Select(x => x["Code"].ToString());
            string dbStringHangNgay = $"SELECT hn.* \r\n" +
                $"FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} hn\r\n" +
                $"JOIN {Server.Tbl_TDKH_ChiTietCongTacTheoGiaiDoan} cttk\r\n" +
                $"ON hn.CodeCongTacTheoGiaiDoan = cttk.Code\r\n" +
                $"WHERE CodeCongTacTheoGiaiDoan IN ({MyFunction.fcn_Array2listQueryCondition(codesGiaoThau)})";
            var dthnNew = DataProvider.InstanceTHDA.ExecuteQuery(dbStringHangNgay);


            dbStringHangNgay = $"SELECT hn.* \r\n" +
                $"FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} hn\r\n" +
                $"LEFT JOIN {Server.Tbl_TDKH_ChiTietCongTacTheoGiaiDoan} cttk\r\n" +
                $"ON hn.CodeCongTacTheoGiaiDoan = cttk.Code\r\n" +

                $"WHERE CodeCongTacTheoGiaiDoan IN ({MyFunction.fcn_Array2listQueryCondition(codes)})";
            var dthn = DataProvider.InstanceTHDA.ExecuteQuery(dbStringHangNgay);

            foreach (DataRow dr in dthnNew.Rows)
            {
                if (dr["KhoiLuongKeHoach"] == DBNull.Value)
                    continue;
                string CodeGT = (string)dr["CodeCongTacTheoGiaiDoan"];
                var hnIndb = dthn.AsEnumerable().SingleOrDefault(x => ((string)x["Ngay"] == (string)dr["Ngay"]) && ((string)x["CodeCongTacTheoGiaiDoan"] == dicCodes[CodeGT]));
                if (hnIndb is null)
                {
                    hnIndb = dthn.NewRow();
                    dthn.Rows.Add(hnIndb);
                    hnIndb.ItemArray = dr.ItemArray;
                    hnIndb["Code"] = Guid.NewGuid().ToString();

                }

                hnIndb["KhoiLuongKeHoach"] = dr["KhoiLuongKeHoach"];
                hnIndb["CodeCongTacTheoGiaiDoan"] = dicCodes[CodeGT];
            }

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dthn, Server.Tbl_TDKH_KhoiLuongCongViecTungNgay);
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!!!!");

        }
        private void fcn_Handle_Popup_TDKH_LayKLKHALLNhom(object sender, EventArgs eventArgs)
        {

            var dres = MessageShower.ShowYesNoQuestion("Toàn bộ kế hoạch hàng ngày của nhóm sẽ được lấy lại từ đơn vị giao thầu và không thể hoàn tác!");
            if (dres != DialogResult.Yes)
            {
                return;
            }
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            Row crRow = ws.Rows[ws.SelectedCell.TopRowIndex];
            string crTypeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (crTypeRow != MyConstant.TYPEROW_HangMuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn dòng hạng mục để dùng tính năng này!");
            }
            string codeHM = crRow[dic[TDKH.COL_Code]].Value.ToString();
            string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();


            int sortId = 0;
            WaitFormHelper.ShowWaitForm("Đang lấy toàn bộ kế hoạch");
            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;

            string dbString = $"SELECT cttk.*, cttk2.KhoiLuongKeHoach AS KhoiLuongToanBoGiaoThau, " +
                $"cttk2.NgayBatDau AS NgayBatDauGiaoThau, cttk2.NgayKetThuc AS NgayKetThucGiaoThau, cttk2.Code AS CodeGiaoThau " +
                    $"FROM {TDKH.TBL_NhomCongTac} cttk " +
                    $"JOIN {TDKH.TBL_NhomCongTac} cttk2 " +
                    $"ON cttk.CodeNhomGiaoThau = cttk2.Code AND cttk2.CodeNhomGiaoThau IS  NULL " +
                    $"WHERE cttk.CodeHangMuc = '{codeHM}' ";

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            wb.BeginUpdate();
            Dictionary<string, string> dicCodes = new Dictionary<string, string>();
            foreach (DataRow dr in dt.Rows)
            {
                dicCodes.Add(dr["CodeGiaoThau"].ToString(), dr["Code"].ToString());
                if (dr["KhoiLuongToanBoGiaoThau"] != DBNull.Value)
                    dr["KhoiLuongToanBo"] = dr["KhoiLuongToanBoGiaoThau"];
                if (dr["NgayBatDauGiaoThau"] != DBNull.Value && dr["NgayKetThucGiaoThau"] != DBNull.Value)
                {
                    dr["NgayBatDau"] = dr["NgayBatDauGiaoThau"];
                    dr["NgayKetThuc"] = dr["NgayKetThucGiaoThau"];
                }
                var cell = colCode.Search((string)dr["Code"], MyConstant.MySearchOptions).SingleOrDefault();
                if (cell is null)
                {
                    continue;
                }
                ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(dr["KhoiLuongToanBo"]);
                ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayBatDau]].SetValueFromText(dr["NgayBatDau"].ToString());
                ws.Rows[cell.RowIndex][dic[TDKH.COL_NgayKetThuc]].SetValueFromText(dr["NgayKetThuc"].ToString());
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);

            var codesGiaoThau = dt.AsEnumerable().Select(x => x["CodeGiaoThau"].ToString());
            var codes = dt.AsEnumerable().Select(x => x["Code"].ToString());
            string dbStringHangNgay = $"SELECT hn.* \r\n" +
                $"FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} hn\r\n" +
                $"JOIN {Server.Tbl_TDKH_NhomCongTac} cttk\r\n" +
                $"ON hn.CodeNhom = cttk.Code\r\n" +
                $"WHERE CodeNhom IN ({MyFunction.fcn_Array2listQueryCondition(codesGiaoThau)})";
            var dthnNew = DataProvider.InstanceTHDA.ExecuteQuery(dbStringHangNgay);


            dbStringHangNgay = $"SELECT hn.* \r\n" +
                $"FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} hn\r\n" +
                $"JOIN {Server.Tbl_TDKH_NhomCongTac} cttk\r\n" +
                $"ON hn.CodeNhom = cttk.Code\r\n" +
                $"WHERE CodeNhom IN ({MyFunction.fcn_Array2listQueryCondition(codes)})";
            var dthn = DataProvider.InstanceTHDA.ExecuteQuery(dbStringHangNgay);

            foreach (DataRow dr in dthnNew.Rows)
            {
                if (dr["KhoiLuongKeHoach"] == DBNull.Value)
                    continue;
                string CodeGT = (string)dr["CodeNhom"];
                var hnIndb = dthn.AsEnumerable().SingleOrDefault(x => ((string)x["Ngay"] == (string)dr["Ngay"]) && ((string)x["CodeNhom"] == dicCodes[CodeGT]));
                if (hnIndb is null)
                {
                    hnIndb = dthn.NewRow();
                    dthn.Rows.Add(hnIndb);
                    hnIndb.ItemArray = dr.ItemArray;
                    hnIndb["Code"] = Guid.NewGuid().ToString();

                }
                hnIndb["KhoiLuongKeHoach"] = dr["KhoiLuongKeHoach"];
                hnIndb["CodeNhom"] = dicCodes[CodeGT];
            }

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dthn, Server.Tbl_TDKH_KhoiLuongCongViecTungNgay);
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!!!!");
        }

        private void fcn_Handle_Popup_TDKH_ResetCustomOrder(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            Column colCode = ws.Columns[dic[TDKH.COL_Code]];
            Row crRow = ws.Rows[ws.SelectedCell.TopRowIndex];
            string crTypeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (crTypeRow != MyConstant.TYPEROW_HangMuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn dòng hạng mục để dùng tính năng này!");
            }


            string codeHM = crRow[dic[TDKH.COL_Code]].Value.ToString();
            string[] conditions =
                {
                    TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan(),
                    $"dmct.CodeHangMuc = '{codeHM}'"
                };


            int sortId = 0;
            DataTable dt = TDKHHelper.GetCongTacTheoKys(conditions);
            wb.BeginUpdate();
            foreach (DataRow dr in dt.Rows)
            {
                dr["CustomOrder"] = ++sortId;

                var cell = colCode.Search((string)dr["Code"], MyConstant.MySearchOptions).SingleOrDefault();
                if (cell is null)
                {
                    continue;
                }

                ws.Rows[cell.RowIndex][dic[TDKH.COL_CustomOrder]].SetValue(sortId);
            }
            wb.EndUpdate();

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);
        }

        private void fcn_Handle_Popup_TDKH_DoBocChuan_ChiaPhatSinh(object sender, EventArgs eventArgs)
        {
            fcn_UpdateCongTacDoBoc();
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            string newGUID = Guid.NewGuid().ToString();
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            //string crCodeCT = "", crCodeHM = "", crCodeNhom = "";
            //int crIndCha = -1;
            //bool isCrChaisCTMacDinh = true;
            string crCodeCT = "";
            string lsCongTac = "";

            int indLuyKe = ws.Columns[dic[TDKH.COL_DBC_LuyKeDaThucHien]].Index;
            int indKLToanBo = ws.Columns[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Index;

            if (indLuyKe - indKLToanBo < 2)
            {
                MessageShower.ShowInformation("Chưa tạo đợt phát sinh nào");
                return;
            }

            //Bảng data
            DataTable dt = new DataTable();
            dt.Columns.Add("Code", typeof(string));
            dt.Columns.Add("CodeCongTrinh", typeof(string));
            dt.Columns.Add("CodeHangMuc", typeof(string));
            dt.Columns.Add("MaHieu", typeof(string));
            dt.Columns.Add("TenCongTac", typeof(string));
            dt.Columns.Add("KhoiLuongHopDong", typeof(double));
            dt.Columns.Add("KhoiLuongToanBo", typeof(double));
            dt.Columns.Add("Khối lượng dư", typeof(double));
            dt.Columns["Khối lượng dư"].Expression = $"[KhoiLuongToanBo] - [KhoiLuongHopDong]";

            dic.Where(x => x.Key.Contains('_')).ForEach(y => dt.Columns.Add(y.Key, typeof(double)));

            for (int i = range.TopRowIndex; i < range.BottomRowIndex; i++)
            {
                Row crRow = ws.Rows[i];
                string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
                string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                if (typeRow == MyConstant.TYPEROW_CVCha)
                {
                    bool isChecked = false;
                    bool.TryParse(crRow[TDKH.COL_Chon].Value.ToString(), out isChecked);
                    if (isChecked)
                    {
                        //if (crCodeCT != "") //Dừng nếu phát hiện ngắt quảng công tác
                        //{
                        DataRow newRow = dt.NewRow();
                        newRow["Code"] = crRow[dic[TDKH.COL_Code]].Value.ToString();
                        //newRow["CodeCongTrinh"] = crRow[dic[TDKH.COL_CongTrinh]].Value.ToString();
                        //newRow["CodeHangMuc"] = crRow[dic[TDKH.COL_HangMuc]].Value.ToString();
                        newRow["MaHieu"] = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
                        newRow["TenCongTac"] = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
                        newRow["KhoiLuongHopDong"] = crRow[dic[TDKH.COL_KhoiLuongHopDongChiTiet]].Value.ToString();
                        newRow["KhoiLuongToanBo"] = crRow[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.ToString();
                        //newRow["Khối lượng dư"].expre = crRow[TDKH.COL_CodeCT].Value.ToString();

                        dic.Where(x => x.Key.Contains('_')).ForEach(y =>
                        {
                            newRow[y.Key] = crRow[y.Value].Value.ToString();
                        });

                        dt.Rows.Add(newRow);
                        //}
                        //else
                        //    continue;
                    }
                }
            }
            if (dt.Rows.Count == 0)
            {
                MessageShower.ShowInformation("Chưa có công tác nào được chọn");
                return;
            }

            Form_DoBoc_ChiaKhoiLuongPhatSinh form = new Form_DoBoc_ChiaKhoiLuongPhatSinh(dt);
            if (form.ShowDialog() == DialogResult.OK)
                fcn_LoadCongTacDoBoc();
        }

        private void fcn_Handle_Popup_TDKH_DoBocChuan_GopCongTac(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            string newGUID = Guid.NewGuid().ToString();
            var crCell = ws.SelectedCell;

            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            //int indPrev = SpreadsheetHelper.FindPrevGreaterTypeInd(range, crCell.TopRowIndex, dicDoBoc[TDKH.COL_RowCha], dicDoBoc[TDKH.COL_TypeRow], MyConstant.TYPEROW_CVCha);

            var fstRow = ws.Rows[crCell.TopRowIndex];
            if (fstRow["A"].Value.ToString() != true.ToString() || fstRow[dicDoBoc[TDKH.COL_TypeRow]].Value.ToString() != MyConstant.TYPEROW_CVCha)
            {
                MessageShower.ShowWarning("Vui lòng chuột phải tại công tác đã được chọn!");
                return;
            }

            var indCha = (int)fstRow[dicDoBoc[TDKH.COL_RowCha]].Value.NumericValue - 1;
            string parentTypeRow = ws.Rows[indCha][dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();

            string codeHangMuc = "", codePhanTuyen = null;
            string codeParent = ws.Rows[indCha][dicDoBoc[TDKH.COL_Code]].Value.ToString();
            if (parentTypeRow == MyConstant.TYPEROW_HangMuc)
            {
                codeHangMuc = codeParent;

            }
            else if (parentTypeRow == MyConstant.TYPEROW_PhanTuyen)
            {
                codePhanTuyen = codeParent;
                int indHM = (int)ws.Rows[indCha][dicDoBoc[TDKH.COL_RowCha]].Value.NumericValue - 1;

                codeHangMuc = ws.Rows[indHM][dicDoBoc[TDKH.COL_Code]].Value.ToString();
            }
            else
            {
                MessageShower.ShowWarning("Vui lòng đặt chuột trong 1 hạng mục hoặc phân tuyến");
                return;
            }


            int indColRowCha = ws.Range.GetColumnIndexByName(dicDoBoc[TDKH.COL_RowCha]);

            var inds = ws.Range.FromLTRB(indColRowCha, indCha, indColRowCha, range.BottomRowIndex)
                                    .Search((indCha + 1).ToString(), MyConstant.MySearchOptions).Select(x => x.RowIndex);


            List<string> ctacs = new List<string>();
            foreach (var ind in inds)
            {
                var crRow = ws.Rows[ind];
                string code = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();
                if (crRow[TDKH.COL_Chon].Value.ToString() == true.ToString())
                {
                    ctacs.Add(code);
                }
            }

            string dbString = $"INSERT INTO {TDKH.TBL_NhomCongTac} (Code, Ten, CodeHangMuc, CodePhanTuyen) VALUES ('{newGUID}', 'Nhóm mới', '{codeHangMuc}', @CodePhanTuyen)";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new string[] { codePhanTuyen });

            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"CodeNhom\"='{newGUID}' WHERE \"Code\" in ({MyFunction.fcn_Array2listQueryCondition(ctacs)})";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            TDKHHelper.LoadCongTacDoBoc();
        }

        private void fcn_Handle_Popup_TDKH_DoBocChuan_GopPhanDoan(object sender, EventArgs eventArgs)
        {
            //fcn_UpdateCongTacDoBoc();
            //spsheet_TD_KH_LapKeHoach.BeginUpdate();
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            string newGUID = Guid.NewGuid().ToString();
            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            int indColTypeRow = ws.Range.GetColumnIndexByName(dicDoBoc[TDKH.COL_TypeRow]);
            int indColRowCha = ws.Range.GetColumnIndexByName(dicDoBoc[TDKH.COL_RowCha]);

            var res = ws.Range.FromLTRB(indColTypeRow, range.TopRowIndex, indColTypeRow, ws.SelectedCell.TopRowIndex - 1)
                        .Search(MyConstant.TYPEROW_HangMuc).LastOrDefault();
            if (res is null)
            {
                MessageShower.ShowWarning("Không tìm thấy hạng mục");
                return;
            }

            int indRowHM = res.RowIndex;
            string codeHangMuc = ws.Rows[indRowHM][dicDoBoc[TDKH.COL_Code]].Value.ToString();

            int nextind = SpreadsheetHelper.FindNextGreaterTypeInd(range, indRowHM, dicDoBoc[TDKH.COL_RowCha], dicDoBoc[TDKH.COL_TypeRow]);

            var ret = ws.Range.FromLTRB(indColRowCha, indRowHM, indColRowCha, nextind)
                        .Search((indRowHM + 1).ToString(), MyConstant.MySearchOptions).ToArray();

            if (!ret.Any())
            {
                MessageShower.ShowWarning("Không có Công tác/Nhóm nào được chọn");
                return;
            }

            List<string> ctacs = new List<string>();
            List<string> nhoms = new List<string>();

            foreach (var cell in ret)
            {
                var crRow = ws.Rows[cell.RowIndex];
                if (crRow[TDKH.COL_Chon].Value.ToString() == true.ToString())
                {
                    string typeRow = crRow[dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();
                    string code = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();

                    if (typeRow == MyConstant.TYPEROW_CVCha)
                    {
                        ctacs.Add(code);

                    }
                    else if (typeRow == MyConstant.TYPEROW_Nhom)
                    {
                        nhoms.Add(code);
                    }
                    //ctacs.Add(code);
                }
            }

            //foreach (var cell in ret)
            //{
            //    var crRow = ws.Rows[cell.RowIndex];
            //    string code = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();
            //    if (crRow[TDKH.COL_Chon].Value.ToString() == true.ToString())
            //    {
            //        ctacs.Add(code);
            //    }
            //}    
            if (!ctacs.Any() && !nhoms.Any())
            {
                MessageShower.ShowWarning("Không có Công tác/Nhóm nào được chọn");
                return;
            }
            string dbString = $"INSERT INTO {TDKH.Tbl_PhanTuyen} (\"Code\", \"Ten\", \"CodeHangMuc\") VALUES ('{newGUID}', 'Phân đoạn người dùng', '{codeHangMuc}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            if (ctacs.Any())
            {
                var lsCodes = MyFunction.fcn_Array2listQueryCondition(ctacs);
                dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET \"CodePhanTuyen\"='{newGUID}' WHERE \"Code\" IN " +
                    $"(SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy}\r\n" +
                    $"WHERE Code IN ({lsCodes}))";

                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }

            if (nhoms.Any())
            {
                var lsCodes = MyFunction.fcn_Array2listQueryCondition(nhoms);

                dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET \"CodePhanTuyen\"='{newGUID}'\r\n" +
                    $"WHERE \"Code\" IN ({lsCodes})";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                //dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoGiaiDoan} SET CodePhanTuyen = '{newGUID}'\r\n" +
                //    $"WHERE C";

            }


            //dbString = $"SELECT MaVatLieu " +
            //            $"FROM {TDKH.Tbl_HaoPhiVatTu} WHERE CodeCongTac IN ({lsCodes})";
            //DataTable dtdm = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //var MaVatTus = dtdm.AsEnumerable().Select(x => x[0].ToString());

            TDKHHelper.CapNhatAllVatTuHaoPhi(CodesHangMuc: new string[] { codeHangMuc });


            TDKHHelper.LoadCongTacDoBoc();
            //spsheet_TD_KH_LapKeHoach.EndUpdate();
        }

        private void Fcn_UpdateTongHopHopDong()
        {
            Worksheet ws = spread_Tonghopduan_HD.Document.Worksheets["Dữ liệu gốc"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            string[] doboc =
            {
                TDKH.COL_DanhMucCongTac,
                TDKH.COL_MaHieuCongTac,
                TDKH.COL_DonVi,
                TDKH.COL_DonGia,
                TDKH.COL_KhoiLuong,
                TDKH.COL_Code
            };
            spread_Tonghopduan_HD.BeginUpdate();
            //           spread_Tonghopduan_HD.Document.History.IsEnabled = false;
            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            string dbString = $"SELECT * FROM {MyConstant.TBL_HopDongDuLieuGoc}";
            DataTable dtCongTac = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (ws.Range[MyConstant.TBL_QUYETTHONGTIN].RowCount - 1 < (dtCT.Rows.Count + dtHM.Rows.Count + dtCongTac.Rows.Count))
                ws.Rows.Insert(ws.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex,
                dtCT.Rows.Count + dtHM.Rows.Count + dtCongTac.Rows.Count, RowFormatMode.FormatAsPrevious);
            int crRowInd = ws.Range[MyConstant.TBL_QUYETTHONGTIN].TopRowIndex + 1;
            int crRowHM = 0;

            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();
                //ws.rows.insert(crRowInd, 1);
                Row crRowWs = ws.Rows[crRowInd++];

                crRowWs.Font.Bold = true;
                crRowWs.Font.Color = Color.DarkTurquoise;
                crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeCT);
                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(CT["Ten"].ToString());
                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();
                    crRowWs = ws.Rows[crRowInd++];
                    crRowWs.Font.Bold = true;
                    crRowWs.Font.Color = Color.DarkGreen;
                    //crRowWs[Name[TDKH.COL_RowCha]].SetValue(crRowInd - 1);
                    crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeHM);
                    crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(HM["Ten"].ToString().ToUpper());
                    DataRow[] drs_ct = dtCongTac.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToArray();
                    foreach (var row in drs_ct)
                    {
                        ws.Rows[crRowInd].CopyFrom(ws.Rows[6], PasteSpecial.Formulas);
                        crRowWs = ws.Rows[crRowInd++];
                        crRowWs.Font.Bold = true;
                        crRowWs.Font.Color = Color.Black;
                        crRowWs.Visible = true;
                        foreach (string items in doboc)
                            crRowWs[Name[items]].SetValueFromText(row[items].ToString());
                    }
                }
            }
            spread_Tonghopduan_HD.EndUpdate();
            //           spread_Tonghopduan_HD.Document.History.IsEnabled = true;
        }
        private void Fcn_NghiemThuKhoiluong()
        {
            Worksheet ws = spread_Tonghopduan_HD.Document.Worksheets["Nghiệm thu khối lượng"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);

        }
        private void fcn_Handle_Popup_ChuyenPS(object sender, EventArgs eventArgs)
        {
            Worksheet ws = SharedControls.m_SpreadSheet.Document.Worksheets.ActiveWorksheet;
            Worksheet ws_PS = SharedControls.m_SpreadSheet.Document.Worksheets["Thanh toán KL phát sinh"];
            Cell cell = ws.SelectedCell[0];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws_PS.Range[MyConstant.TBL_QUYETTHONGTIN]);
            ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_LoaiCT]].SetValue(MyConstant.COL_HD_PS);
            string typeRowTemp = ws.Rows[cell.RowIndex][dic[TDKH.COL_TypeRow]].Value.TextValue;
            CellRange rangeSelect;
            string dbString = "", code = "", codeDB = "";
            double rowHm = 0;
            string codeHM = "";
            int rowinsert = 0;
            SharedControls.m_SpreadSheet.BeginUpdate();
            //           m_SpreadSheet.Document.History.IsEnabled = false;
            switch (typeRowTemp)
            {
                case MyConstant.TYPEROW_CVCha:
                    //string fomular= ws.Rows[cell.RowIndex][dic[MyConstant.KYNAYPHATSINH]].
                    string formualar = "";
                    rowHm = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_RowCha]].Value.NumericValue;
                    codeHM = ws.Rows[(int)rowHm - 1][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                    codeDB = ws.Rows[cell.RowIndex][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                    dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DoBoc} WHERE \"Code\"='{codeDB}'";
                    DataTable dt_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    for (int i = cell.RowIndex + 1; i <= ws.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex; i++)
                    {
                        Row crow = ws.Rows[i];
                        if ((crow[dic[TDKH.COL_TypeRow]].Value.TextValue == MyConstant.TYPEROW_CVCha || crow[dic[TDKH.COL_DBC_LoaiCT]].Value.IsEmpty))
                            break;
                        else
                        {
                            code = ws.Rows[i][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                            formualar += $"+ {ws.Rows[i][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                            ws.Rows[i][dic[TDKH.COL_IsCongTacPhatSinh]].Formula = $"={ws.Rows[i][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                            ws.Rows[i][dic[TDKH.COL_DBC_LoaiCT]].SetValue(MyConstant.COL_HD_PS);
                            ws.Rows[i][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(0);
                            dbString = $"UPDATE \"{TDKH.TBL_ChiTietCongTacCon}\" SET \"LoaiCT\" = '{4}' WHERE \"Code\" = '{code}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }
                    }
                    if (formualar == "" && ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].Value.NumericValue == 0)
                        ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].SetValue(ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue);
                    else if (ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].Value.NumericValue != 0)
                        ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].SetValue(ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].Value.NumericValue + ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue);
                    else
                        ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula = $"= {formualar}";
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula = ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula;
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(0);
                    rowinsert = fcn_GetRowVT(codeHM, ws_PS, "Dot_1");
                    foreach (DataRow row in dt_DB.Rows)
                    {
                        string codePS = Guid.NewGuid().ToString();

                        dbString = $"INSERT INTO '{MyConstant.TBL_hopdongAB_PS}' (\"CodeDB\",\"Code\",\"CodeDot\",\"Code_Goc\") VALUES ('{codeDB}','{codePS}','{cbo_AB_LanThanhToan.SelectedValue}','{row["Code_Goc"]}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        if (rowinsert == 0)
                            continue;
                        Row crRowWs = ws_PS.Rows[rowinsert];
                        crRowWs.CopyFrom(ws_PS.Rows[15], PasteSpecial.Formulas);
                        crRowWs[Name[TDKH.COL_Code]].SetValue(codePS);
                        crRowWs[Name[TDKH.COL_Code_Goc]].SetValue(row["Code_Goc"]);
                        crRowWs[Name[TDKH.COL_CodeDot]].Formula = $"='{ws.Name}'!{ws.Rows[cell.RowIndex][dic[TDKH.COL_CodeDot]].GetReferenceA1()}";
                        crRowWs[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{ws.Name}'!{ws.Rows[cell.RowIndex][dic[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                        crRowWs[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{ws.Name}'!{ws.Rows[cell.RowIndex][dic[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                        crRowWs[Name[TDKH.COL_DonVi]].Formula = $"='{ws.Name}'!{ws.Rows[cell.RowIndex][dic[TDKH.COL_DonVi]].GetReferenceA1()}";
                        crRowWs[Name["TheoHopDong"]].Formula = $"='{ws.Name}'!{ws.Rows[cell.RowIndex][dic["TheoHopDong"]].GetReferenceA1()}";
                        crRowWs[Name["CodeDB"]].Formula = $"='{ws.Name}'!{ws.Rows[cell.RowIndex][dic[TDKH.COL_Code]].GetReferenceA1()}";
                        crRowWs[Name["ThucHienKyNay"]].Formula = $"='{ws.Name}'!{ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].GetReferenceA1()}";

                    }
                    dbString = $"UPDATE \"{MyConstant.TBL_HopDong_DoBoc}\" SET \"LoaiCT\" = '{4}' WHERE \"Code\" = '{codeDB}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"UPDATE \"{MyConstant.TBL_hopdongAB_HT}\" SET \"ThucHienKyNay\" = '{0}' WHERE \"Code\" = '{codeDB}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    SharedControls.m_SpreadSheet.EndUpdate();
                    break;
                case MyConstant.TYPEROW_CVCON:
                    string condition = "";
                    int rowindex = (int)ws.Rows[cell.RowIndex][dic[GiaoViec.COL_RowCha]].Value.NumericValue - 1;
                    code = ws.Rows[cell.RowIndex][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                    codeDB = ws.Rows[rowindex][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                    dbString = $"UPDATE \"{TDKH.TBL_ChiTietCongTacCon}\" SET \"LoaiCT\" = '{4}' WHERE \"Code\" = '{code}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"UPDATE \"{MyConstant.TBL_HopDong_DoBoc}\" SET \"LoaiCT\" = '{4}' WHERE \"Code\" = '{codeDB}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"SELECT * FROM {MyConstant.TBL_hopdongAB_PS} WHERE \"CodeDB\"='{codeDB}'";
                    DataTable dt_PS = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    if (dt_PS.Rows.Count == 0)
                    {
                        rowHm = ws.Rows[rowindex][dic[GiaoViec.COL_RowCha]].Value.NumericValue;
                        codeHM = ws.Rows[(int)rowHm - 1][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                        rowinsert = fcn_GetRowVT(codeHM, ws_PS, "Dot_1");
                        dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DoBoc} WHERE \"Code\"='{codeDB}'";
                        dt_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        foreach (DataRow row in dt_DB.Rows)
                        {
                            string codePS = Guid.NewGuid().ToString();
                            dbString = $"INSERT INTO '{MyConstant.TBL_hopdongAB_PS}' (\"CodeDB\",\"Code\",\"CodeDot\",\"Code_Goc\") VALUES ('{codeDB}','{codePS}','{cbo_AB_LanThanhToan.SelectedValue}','{row["Code_Goc"]}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            if (rowinsert == 0)
                                continue;
                            Row crRowWs = ws_PS.Rows[rowinsert];
                            crRowWs.CopyFrom(ws_PS.Rows[15], PasteSpecial.Formulas);
                            crRowWs[Name[TDKH.COL_Code]].SetValue(codePS);
                            crRowWs[Name[TDKH.COL_Code_Goc]].SetValue(row["Code_Goc"]);
                            crRowWs[Name[TDKH.COL_CodeDot]].Formula = $"='{ws.Name}'!{ws.Rows[rowindex][dic[TDKH.COL_CodeDot]].GetReferenceA1()}";
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{ws.Name}'!{ws.Rows[rowindex][dic[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{ws.Name}'!{ws.Rows[rowindex][dic[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                            crRowWs[Name[TDKH.COL_DonVi]].Formula = $"='{ws.Name}'!{ws.Rows[rowindex][dic[TDKH.COL_DonVi]].GetReferenceA1()}";
                            crRowWs[Name["TheoHopDong"]].Formula = $"='{ws.Name}'!{ws.Rows[rowindex][dic["TheoHopDong"]].GetReferenceA1()}";
                            crRowWs[Name["CodeDB"]].Formula = $"='{ws.Name}'!{ws.Rows[rowindex][dic[TDKH.COL_Code]].GetReferenceA1()}";
                            crRowWs[Name["ThucHienKyNay"]].Formula = $"='{ws.Name}'!{ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].GetReferenceA1()}";
                        }

                    }
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(0);
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula = $"={ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                    if (ws.Rows[rowindex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula.Replace($"+ {ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}", "") == "=")
                        ws.Rows[rowindex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(0);
                    else
                        ws.Rows[rowindex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = (ws.Rows[rowindex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula).Replace($"+ {ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}", "");
                    //ws.Rows[rowindex][dic[MyConstant.KYNAYPHATSINH]].Formula=$"={ws.Rows[cell.RowIndex][dic[MyConstant.KHOILUONGCAUKIEN]].GetReferenceA1()}";
                    if (ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula.Contains("Thiết lập"))
                        ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula = $"=+ {ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                    else
                        ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula = $"=+ {ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}{ ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula.Replace("=", "")}";
                    SharedControls.m_SpreadSheet.EndUpdate();
                    break;
            }
            //           m_SpreadSheet.Document.History.IsEnabled = true;
        }
        private void fcn_Handle_Popup_ChuyenTT(object sender, EventArgs eventArgs)
        {
            Worksheet ws = SharedControls.m_SpreadSheet.Document.Worksheets.ActiveWorksheet;
            Cell cell = ws.SelectedCell[0];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_LoaiCT]].SetValue(MyConstant.COL_HD_TT);
            string typeRowTemp = ws.Rows[cell.RowIndex][dic[TDKH.COL_TypeRow]].Value.TextValue;
            CellRange rangeSelect;
            string dbString = "", code = "", codeDB = "";
            SharedControls.m_SpreadSheet.BeginUpdate();
            switch (typeRowTemp)
            {
                case MyConstant.TYPEROW_CVCha:
                    //string fomular= ws.Rows[cell.RowIndex][dic[MyConstant.KYNAYPHATSINH]].
                    string formualar = "";
                    codeDB = ws.Rows[cell.RowIndex][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                    dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DoBoc} WHERE \"Code\"='{codeDB}'";
                    DataTable dt_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    for (int i = cell.RowIndex + 1; i <= ws.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex; i++)
                    {
                        Row crow = ws.Rows[i];
                        if ((crow[dic[TDKH.COL_TypeRow]].Value.TextValue == MyConstant.TYPEROW_CVCha || crow[dic[TDKH.COL_DBC_LoaiCT]].Value.IsEmpty))
                            break;
                        else
                        {
                            code = ws.Rows[i][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                            formualar += $"+ {ws.Rows[i][dic[TDKH.COL_IsCongTacPhatSinh]].GetReferenceA1()}";
                            ws.Rows[i][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"={ws.Rows[i][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                            ws.Rows[i][dic[TDKH.COL_DBC_LoaiCT]].SetValue(MyConstant.COL_HD_TT);
                            ws.Rows[i][dic[TDKH.COL_IsCongTacPhatSinh]].SetValue(0);
                            dbString = $"UPDATE \"{TDKH.TBL_ChiTietCongTacCon}\" SET \"LoaiCT\" = '{3}' WHERE \"Code\" = '{code}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }
                    }
                    if (formualar == "" && ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue == 0)
                        ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].Value.NumericValue);
                    else if (ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue != 0)
                        ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue + ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue);
                    else
                        ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"= {formualar}";
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula;
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].SetValue(0);

                    dbString = $"UPDATE \"{MyConstant.TBL_HopDong_DoBoc}\" SET \"LoaiCT\" = '{3}' WHERE \"Code\" = '{codeDB}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"DELETE FROM '{MyConstant.TBL_hopdongAB_PS}' WHERE \"CodeDB\" = '{codeDB}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    SharedControls.m_SpreadSheet.EndUpdate();
                    break;
                case MyConstant.TYPEROW_CVCON:
                    string condition = "";
                    int rowindex = 0;
                    for (int i = cell.RowIndex; i >= ws.Range[MyConstant.TBL_QUYETTHONGTIN].TopRowIndex; i--)
                    {
                        //if (ws.Rows[i][dic[MyConstant.COL_TypeRow]].Value.ToString() == MyConstant.TYPEROW_CVCON)
                        //    condition += $"+ {dic[MyConstant.COL_KLCC]}{i + 1}";
                        if (ws.Rows[i][dic[TDKH.COL_TypeRow]].Value.TextValue == MyConstant.TYPEROW_CVCha)
                        {
                            rowindex = i;
                            break;
                        }
                    }
                    code = ws.Rows[cell.RowIndex][dic[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                    dbString = $"UPDATE \"{TDKH.TBL_ChiTietCongTacCon}\" SET \"LoaiCT\" = '{3}' WHERE \"Code\" = '{code}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"={ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                    ws.Rows[cell.RowIndex][dic[TDKH.COL_IsCongTacPhatSinh]].SetValue(0);
                    if (ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula.Replace($"+ {ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}", "") == "=")
                        ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].SetValue(0);
                    else
                        ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula = (ws.Rows[rowindex][dic[TDKH.COL_IsCongTacPhatSinh]].Formula).Replace($"+ {ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}", "");
                    //ws.Rows[rowindex][dic[MyConstant.KYNAYPHATSINH]].Formula=$"={ws.Rows[cell.RowIndex][dic[MyConstant.KHOILUONGCAUKIEN]].GetReferenceA1()}";
                    if (ws.Rows[rowindex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula.Contains("Thiết lập"))
                        ws.Rows[rowindex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"=+ {ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                    else
                        ws.Rows[rowindex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"=+ {ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}{ ws.Rows[rowindex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula.Replace("=", "")}";
                    SharedControls.m_SpreadSheet.EndUpdate();
                    break;
            }
        }
        private void fcn_Handle_Popup_TDKH_GopDienGiai(object sender, EventArgs eventArgs)
        {
            //fcn_UpdateCongTacDoB/*oc(*/);

            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            string newGUID = Guid.NewGuid().ToString();
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            //string crCodeCT = "", crCodeHM = "", crCodeNhom = "";
            //int crIndCha = -1;
            //bool isCrChaisCTMacDinh = true;
            string crCodeDg = "";
            string lsDienGiai = "";
            bool isAddedRowNhomDg = false;
            int indRowNhomDg = -1;
            int crRowChaInd = -1;
            string codeCongTacTheoGiaiDoan = "";
            for (int i = range.TopRowIndex; i < range.BottomRowIndex; i++)
            {
                Row crRow = ws.Rows[i];
                //string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
                string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                if (typeRow == MyConstant.TYPEROW_CVCON)
                {
                    bool isChecked = false;
                    bool.TryParse(crRow[TDKH.COL_Chon].Value.ToString(), out isChecked);
                    if (!isChecked)
                    {
                        if (crCodeDg != "") //Dừng nếu phát hiện ngắt quảng công tác
                            goto exitVongLap;
                        else
                            continue;
                    }
                    //crRow[dic[TDKH.COL_Nhom]].SetValue(newGUID);
                    crCodeDg = crRow[dic[TDKH.COL_Code]].Value.ToString();
                    lsDienGiai += $", '{crCodeDg}'";
                    if (!isAddedRowNhomDg)
                    {

                        crRowChaInd = int.Parse(ws.Rows[i][dic[TDKH.COL_RowCha]].Value.ToString()) - 1;
                        indRowNhomDg = i;
                        ws.Rows.Insert(i, 1, RowFormatMode.FormatAsPrevious);
                        ws.Rows[i][dic[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_NHOMDIENGIAI);
                        ws.Rows[i][dic[TDKH.COL_DanhMucCongTac]].SetValue("Nhóm diễn giải mới");
                        ws.Rows[i][dic[TDKH.COL_Code]].SetValue(newGUID);
                        ws.Rows[i][dic[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_NhomDienGiai);

                        codeCongTacTheoGiaiDoan = ws.Rows[crRowChaInd][dic[TDKH.COL_Code]].Value.ToString();
                        ws.Rows[i][dic[TDKH.COL_RowCha]].Formula = ws.Rows[i + 1][dic[TDKH.COL_RowCha]].Formula;
                        ws.Rows[i].Font.Color = MyConstant.color_Row_NhomDienGiai;
                        ws.Rows[i].Font.Bold = true;
                        i++;
                        isAddedRowNhomDg = true;
                    }

                    ws.Rows[i][dic[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCON);
                    ws.Rows[i][dic[TDKH.COL_RowCha]].Formula = $"ROW(A{indRowNhomDg + 1})";
                    ws.Rows[i].Font.Color = MyConstant.color_Row_NhomDienGiai;

                }
            }
            exitVongLap:
            if (lsDienGiai == "")
                return;
            lsDienGiai = lsDienGiai.Remove(0, 2);
            string dbString = $"INSERT INTO {TDKH.TBL_NhomDienGiai} (\"Code\", \"Ten\", \"CodeCongTacTheoGiaiDoan\") VALUES ('{newGUID}', 'Nhóm diễn giải mới', '{codeCongTacTheoGiaiDoan}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacCon} SET \"CodeNhom\"='{newGUID}' WHERE \"Code\" in ({lsDienGiai})";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            fcn_TDKH_CapNhatKhiThemDienGiai(crRowChaInd, dic);
        }

        private void fcn_TDKH_CapNhatKhiThemDienGiai(int rowInd, Dictionary<string, string> dic = null)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];

            if (dic == null)
            {
                dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);
            }

            Row crRowCha = ws.Rows[rowInd];
            string typerow = crRowCha[dic[TDKH.COL_TypeRow]].Value.ToString();
            if (typerow != MyConstant.TYPEROW_CVCha)
            {
                MessageShower.ShowInformation("Loỗi hàm cập nhật công tác");
                return;
            }

            //if (crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].Value.ToString() != true.ToString())
            //{
            //    return;
            //}
            crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = "";

            string crCodeCha = crRowCha[dic[TDKH.COL_Code]].Value.ToString();
            spsheet_TD_KH_LapKeHoach.BeginUpdate();
            Row crRowNhomDg = null;
            for (int i = rowInd + 1; i < range.BottomRowIndex; i++)
            {
                Row crRow = ws.Rows[i];
                typerow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                switch (typerow)
                {
                    case MyConstant.TYPEROW_CongTrinh:
                    case MyConstant.TYPEROW_HangMuc:
                    case MyConstant.TYPEROW_Nhom:
                    case MyConstant.TYPEROW_CVCha:
                        spsheet_TD_KH_LapKeHoach.EndUpdate();
                        return;
                    case MyConstant.TYPEROW_NhomDienGiai:
                        crRowNhomDg = crRow;
                        crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula += $"+{dic[TDKH.COL_DBC_KL1BoPhan]}{i + 1}";
                        break;
                    case MyConstant.TYPEROW_CVCON:
                        if (crRowNhomDg != null && crRow[dic[TDKH.COL_RowCha]].Value.ToString() == (crRowNhomDg.Index + 1).ToString())
                            crRowNhomDg[dic[TDKH.COL_DBC_KL1BoPhan]].Formula += $"+{dic[TDKH.COL_DBC_KL1BoPhan]}{i + 1}";
                        else
                            crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula += $"+{dic[TDKH.COL_DBC_KL1BoPhan]}{i + 1}";
                        break;
                    default:
                        break;
                }

            }
            spsheet_TD_KH_LapKeHoach.EndUpdate();

        }

        private void fcn_Handle_Popup_TDKH_XoaDong(object sender, EventArgs eventArgs)
        {
            //IWorkbook wb = spsheet_TDKH_DoBocKLKeHoach.Document;
            //Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            //CellRange rangeDoBoc = wb.Range[TDKH.RANGE_DoBocChuan];
            ////Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            //List<int> lsRow = new List<int>();
            //Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            //foreach (CellRange range in ws.GetSelectedRanges())
            //{
            //    for (int i = range.TopRowIndex; i <= range.BottomRowIndex; i++)
            //    {
            //        if (i == rangeDoBoc.TopRowIndex || i == rangeDoBoc.BottomRowIndex)
            //            continue;
            //        if (!lsRow.Contains(i))
            //            lsRow.Add(i);
            //    }
            //}
            //lsRow.Sort();
            //for (int i = lsRow.Count - 1; i >= 0; i--)
            //{
            //    Row crRow = ws.Rows[lsRow[i]];
            //    //string typeCT = crRow[TDKH_DBC.dic_Dbc[MyConstant.COL_TDKH_DBC_TypeRow]].Value.ToString();
            //    string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
            //    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
            //    if (typeRow == MyConstant.TYPEROW_CVCha)
            //    {
            //        string codeCT = crRow[dic[TDKH.COL_Code]].Value.ToString();
            //        string dbString = $"DELETE FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeCongTac\"='{codeCT}' AND \"CodeGiaiDoan\" = '{cbb_DBKH_ChonDot.SelectedValue}'";
            //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //    }
            //    crRow.Delete();

            //}

            //fcn_UpdateCongTacDoBoc();
        }


        private void fcn_Handle_Popup_TDKH_DBC_TaoLienKet(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            Cell cell = ws.SelectedCell[0];
            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);
            string Code = ws.Rows[cell.TopRowIndex][dicDoBoc[MyConstant.CODE]].Value.TextValue;
            //Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            string TypeRow = ws.Rows[cell.TopRowIndex][dicDoBoc[MyConstant.TYPEROW]].Value.TextValue;
            if (TypeRow != MyConstant.TYPEROW_CVCha && TypeRow != MyConstant.TYPEROW_CVCHIA)
            {
                MessageShower.ShowWarning("Vui lòng chọn dòng công tác hoặc công tác chia để tạo liên kết");
                return;
            }
            XtraForm_TaoLienKetCongTacThauChinhPhu Link = new XtraForm_TaoLienKetCongTacThauChinhPhu();
            Link.Fcn_LoadData(TypeRow, Code);
            Link.m_DataLink = new XtraForm_TaoLienKetCongTacThauChinhPhu.DE_TRUYENDATALink(Fcn_LinkData);
            Link.ShowDialog();
        }
        private void Fcn_LinkData(List<LayCongTac> Link, string CodeCT)
        {
            string dbString = "";
            if (Link is null)
                return;
            foreach (var item in Link)
            {
                if (item is null)
                    continue;
                if (item.Chon == true && !string.IsNullOrEmpty(item.CodeCongTacGiaoThau))
                    continue;
                else if (item.Chon == false && !string.IsNullOrEmpty(item.CodeCongTacGiaoThau))
                {
                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"CodeCongTacGiaoThau\" = NULL WHERE \"Code\" = '{item.Id}'";
                }
                else
                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"CodeCongTacGiaoThau\" = '{CodeCT}' WHERE \"Code\" = '{item.Id}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
        }
        private void fcn_Handle_Popup_TDKH_DBC_LayCongTacTuDanhMucTong(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            //Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            int crInd = ws.SelectedCell[0].RowIndex;
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            if (DVTH == null)
                return;
            Form_LayDauViecTuCSDL form = new Form_LayDauViecTuCSDL(MyConstant.CONST_TYPE_LAYDAUVIEC_DoBocChuan, DVTH.TenGhep);
            form.m_truyenData = new Form_LayDauViecTuCSDL.DE_TRUYENDATABANGCONGTAC(btn_NhanDataTuDialogForm);
            form.ShowDialog();
        }
        private void fcn_Handle_Popup_TDKH_AnSTT(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            //Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            wb.BeginUpdate();
            if (dic.Keys.Contains(TDKH.COL_STTDocVao) && dic.Keys.Contains(TDKH.COL_STTND))
            {
                ws.Columns[dic[TDKH.COL_STTDocVao]].Visible = false;
                ws.Columns[dic[TDKH.COL_STTND]].Visible = false;
            }
            wb.EndUpdate();
        }
        private void fcn_Handle_Popup_TDKH_HienSTT(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            //Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            wb.BeginUpdate();
            if (dic.Keys.Contains(TDKH.COL_STTDocVao) && dic.Keys.Contains(TDKH.COL_STTND))
            {
                ws.Columns[dic[TDKH.COL_STTDocVao]].Visible = true;
                ws.Columns[dic[TDKH.COL_STTND]].Visible = true;
            }
            wb.EndUpdate();
        }

        private void fcn_Handle_Popup_TDKH_DungCongthucMacDinh(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            Cell cell = ws.SelectedCell[0];
            Row crRowCha = ws.Rows[cell.RowIndex];
            //crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].SetValue(true);
            //CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            //crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = "";
            string headerKL1BP = dic[TDKH.COL_DBC_KL1BoPhan];
            string[] indColRowCha = ws.Columns[dic[TDKH.COL_RowCha]]
                                .Search((cell.RowIndex + 1).ToString(), MyConstant.MySearchOptions)
                                .Select(x => $"{headerKL1BP}{x.RowIndex + 1}").ToArray();

            crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = string.Join(" + ", indColRowCha);
            crRowCha[dic[TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh]].SetValue(true);
            //for (int i = cell.RowIndex + 1; i <= range.BottomRowIndex; i++)
            //{
            //    Row crRow = ws.Rows[i];
            //    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
            //    if (typeRow == MyConstant.TYPEROW_CVCON)
            //    {
            //        crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula += $" + {dic[TDKH.COL_DBC_KL1BoPhan]}{i + 1}";
            //    }
            //    else if (typeRow != "")
            //        break;
            //}
            ws.Calculate();
            string code = crRowCha[dic[TDKH.COL_Code]].Value.ToString();
            string dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"KhoiLuongToanBo\" = '{crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value}', " +
                $"\"{TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh}\" = '1' WHERE \"Code\" = '{code}'";

            if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) != 1)
            {
                MessageShower.ShowInformation("Lỗi cập nhật công thức mặc định");
            }
            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { code });

            //fcn_UpdateCongTacDoBoc();
            //fcn_TDKH_reloadFomulaCongTacDoBoc();
        }
        private void fcn_Handle_Popup_TDKH_DungCongthucMacDinh_HD(object sender, EventArgs eventArgs)
        {
            //IWorkbook wbtest = test.Document;
            //IWorkbook wb = spsheet_ThanhToanA_B.Document;
            //Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBoc];
            //Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[MyConstant.TBL_QUYETTHONGTIN]);

            //Cell cell = ws.SelectedCell[0];
            //Row crRowCha = ws.Rows[cell.RowIndex];
            //crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].SetValue(true);
            //CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            //crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = "";
            //for (int i = cell.RowIndex + 1; i <= range.BottomRowIndex; i++)
            //{
            //    Row crRow = ws.Rows[i];
            //    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
            //    if (typeRow == MyConstant.TYPEROW_CVCON)
            //    {
            //        crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula += $" + {dic[TDKH.COL_DBC_KL1BoPhan]}{i + 1}";
            //    }
            //    else if (typeRow != "")
            //        break;
            //}
            //ws.Calculate();
            //string dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"KhoiLuongToanBo\" = '{crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]]}', " +
            //    $"\"TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh\" = '1' WHERE \"Code\" = '{crRowCha[dic[TDKH.COL_Code]]}'";
            //if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) != 1)
            //{
            //    MessageShower.ShowInformation("Lỗi cập nhật công thức mặc định");
            //}
            //fcn_UpdateCongTacDoBoc();
            //fcn_TDKH_reloadFomulaCongTacDoBoc();
        }

#pragma warning disable CS0414 // The field 'PhanMemQuanLyThiCong360.isPasting_TDKH' is assigned but its value is never used
        bool isPasting_TDKH;
#pragma warning restore CS0414 // The field 'PhanMemQuanLyThiCong360.isPasting_TDKH' is assigned but its value is never used
        private void spsheet_TD_KH_DoBocKLKeHoach_RowsRemoving(object sender, RowsChangingEventArgs e)
        {
        }

        private bool _NhapKhongTinhToan = false;
        private void spsheet_TD_KH_DoBocKLKeHoach_CopiedRangePasting(object sender, CopiedRangePastingEventArgs e)
        {
            Worksheet ws = e.TargetRange.Worksheet;
            CellRange range = ws.Range[TDKH.RANGE_DoBocChuan];
            if (range.Intersect(e.TargetRange).ExistingCells.Count() > 0)
            {
                isPasting_TDKH = true;
                _NhapKhongTinhToan = BaseFrom.CheDoNhapKhongTinhToan;
                //BaseFrom.CheDoNhapKhongTinhToan = true;

                if (e.TargetRange.BottomRowIndex > range.BottomRowIndex)
                {
                    int soDongCanChen = e.TargetRange.BottomRowIndex - range.BottomRowIndex + 1;
                    ws.Rows.Insert(range.BottomRowIndex, soDongCanChen, RowFormatMode.FormatAsPrevious);
                }
            }
            //Worksheet ws = e.TargetRange.Worksheet;
            //if (ws.Name == TDKH_DBC.CONST_SheetName_TDKH_DoBocChuan)
            //{
            //    CellRange rangeDoBoc = ws.Range[TDKH_DBC.RANGE_DoBocChuan];
            //    if (!rangeDoBoc.Contains(e.TargetRange.First()))
            //        return;

            //}
        }

        private void spsheet_TD_KH_DoBocKLKeHoach_CopiedRangePasted(object sender, CopiedRangePastedEventArgs e)
        {
            fcn_TDKH_UpdateChaInRange(e.TargetRange);
            isPasting_TDKH = false;
            //BaseFrom.CheDoNhapKhongTinhToan = _NhapKhongTinhToan;

        }


        private void fcn_TDKH_UpdateChaInRange(CellRange range)
        {
            Worksheet ws = range.Worksheet;
            IWorkbook wb = ws.Workbook;
            //Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);

            for (int i = range.TopRowIndex; i <= range.BottomRowIndex; i++)
            {
                Row crRow = ws.Rows[i];
                //string typeCv = ws.Rows[i][TDKH_DBC.dic_Dbc[MyConstant.COL_TDKH_DBC_TypeRow]].Value.ToString();
                string MaDM = ws.Rows[i][dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
                string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
                string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                if ((typeRow == MyConstant.TYPEROW_CVCha) && MaDM != "")
                {
                    string dbString = $"SELECT * FROM {MyConstant.TBL_TBT_DINHMUCALL} WHERE \"MaDinhMuc\"=@MaDM";
                    DataTable dt = DataProvider.InstanceTBT.ExecuteQuery(dbString, parameter: new object[] { MaDM });
                    if (dt.Rows.Count > 0)
                    {
                        //DataRow row = dt.Rows[0];
                        string newGuid = Guid.NewGuid().ToString();
                        //crRow[TDKH_DBC.dic_Dbc[MyConstant.COL_TDKH_DBC_TypeRow]].SetValue(MyConstant.TYPEROW_KHGV_CVCha);
                        crRow[dic[TDKH.COL_Code]].SetValue(newGuid);
                        string TenCT = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
                        string DonVi = crRow[dic[TDKH.COL_DonVi]].Value.ToString();
                        int isPhatSinh = (cbb_DBKH_ChonDot.SelectedIndex == 0) ? 0 : 1;

                        dbString = $"INSERT INTO {TDKH.TBL_DanhMucCongTac} " +
                            $"(\"Code\", \"CodeDuAn\",\"MaHieuCongTac\", \"TenCongTac\", \"DonVi\", \"PhatSinh\") VALUES " +
                            $"('{newGuid}', '{slke_ThongTinDuAn.EditValue}', @MaDM, @TenCongTac, @DonVi, '{isPhatSinh}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { MaDM, TenCT, DonVi });

                        string KLToanBo = crRow[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.ToString();
                        dbString = $"INSERT INTO {TDKH.TBL_ChiTietCongTacTheoKy} " +
                            $"(\"Code\", \"CodeCongTac\",\"CodeGiaiDoan\", \"KhoiLuongToanBo\") VALUES " +
                            $"('{Guid.NewGuid()}', '{newGuid}', '{cbb_DBKH_ChonDot.SelectedValue}', '{KLToanBo}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                }
            }
            fcn_UpdateCongTacDoBoc();
        }

        private void spsheet_TD_KH_LapKeHoach_CellBeginEdit(object sender, SpreadsheetCellCancelEventArgs e)
        {
            //return;
            IWorkbook wb = e.Worksheet.Workbook;
            Worksheet ws = e.Worksheet;

            var allPermission = BaseFrom.allPermission;

            if (!allPermission.HaveInitProjectPermission && !allPermission.TabsInEdit.Contains(nameof(xtraTab_KeHoach)))
            {
                MessageShower.ShowWarning("Bạn không có quyền chỉnh sửa tab này. Vui lòng liên hệ Admin để được phân quyền chỉnh sửa");
                e.Cancel = true;
            }

            DonViThucHien dvth = SharedControls.ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;

            var crDuAn = SharedControls.slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;

            if (dvth is null || crDuAn is null)
            {
                MessageShower.ShowError("Không tìm thấy dự án/Đơn vị thực hiện");
                e.Cancel = true;
                return;
            }

            string colHeading = ws.Columns[e.Cell.ColumnIndex].Heading;
            Row crRow = ws.Rows[e.RowIndex];
            //Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_KeHoach]);
            ////Dictionary<string, string> dicVL = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_TDKH_KeHoach);
            //Dictionary<string, string> dicKPVL = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_KeHoachVatTu_VL_TuDong]);

            CellRange rangeKHHP = wb.Range[TDKH.RANGE_KeHoach];
            //CellRange rangeVL_ThuCong = wb.Range[TDKH.RANGE_KeHoachVatTu_VL_ThuCong];
            //CellRange rangeMTC_ThuCong = wb.Range[TDKH.RANGE_KeHoachVatTu_MTC_ThuCong];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            if (e.Cell.ColumnIndex == 0) //Ô chọn
            {
                e.Cancel = true;
                e.Cell.SetValue((e.Cell.Value == true) ? false : true);
                return;
            }

            //string colName = dic[colHeading];

            var crDVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
            switch (ws.Name)
            {
                case TDKH.SheetName_DoBocChuan:
                    #region Đo bóc chuẩn
                    ////Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
                    CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];

                    string colInDb = dic.Where(x => x.Value == colHeading).FirstOrDefault().Key;



                    //string colHeading = ws.Columns[e.Cell.ColumnIndex].Heading;
                    //string colInDb = TDKH
                    //Row crRow = ws.Rows[e.RowIndex];
                    if (!range.Contains(e.Cell)/* || string.IsNullOrEmpty(colInDb)*/)
                        return;


                    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    var indTypeRow = Array.IndexOf(MyConstant.TypeRows, typeRow);

                    var typeRowWithTenGop = new string[]
                    {
                         MyConstant.TYPEROW_PhanTuyen,
                         MyConstant.TYPEROW_Nhom,
                         MyConstant.TYPEROW_CVCha
                    };


                    if (colHeading == dic[TDKH.COL_TenGop] && !typeRowWithTenGop.Contains(typeRow))
                    {
                        AlertShower.ShowInfo("Chỉ có thể thay đổi tên gộp cho Nhóm, Phân đoạn và Công tác");
                        e.Cancel = true;
                        return;
                    }

                    if (colHeading != dic[TDKH.COL_DanhMucCongTac] && colHeading != dic[TDKH.COL_TenGop] && indTypeRow >= 0 && indTypeRow < Array.IndexOf(MyConstant.TypeRows, MyConstant.TYPEROW_Nhom))
                    {
                        AlertShower.ShowInfo("Chỉ có thể thay đổi tên cho Nhóm, Hạng Mục, Công Trình");
                        e.Cancel = true;
                        return;
                    }

                    if (colHeading == dic[TDKH.COL_MaHieuCongTac])
                    {
                        //if (!crDVTH.IsGiaoThau)
                        //{
                        //    AlertShower.ShowInfo("Không được thay đổi mã ở nhận thầu");
                        //    e.Cancel = true;
                        //    return;
                        //}

                        Guid guid;
                        string codeHM = "";
                        string prevCTac = "", prevHM = "", nextCTac = "", nextHM = "", nextCTrinh = "", nextCode = "", codeNhom = "";

                        var colTypeRowInd = ws.Range.GetColumnIndexByName(dic[TDKH.COL_TypeRow]);

                        var prevIndHM = SpreadsheetHelper.FindPrevGreaterTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HangMuc);
                        string prevTypeRowHM = ws.Rows[prevIndHM][dic[TDKH.COL_TypeRow]].Value.ToString();
                        //string nextTypeRow = ws.Rows[nextInd][dic[TDKH.COL_TypeRow]].Value.ToString();

                        if (prevTypeRowHM == MyConstant.TYPEROW_HangMuc)
                        {
                            codeHM = ws.Rows[prevIndHM][dic[TDKH.COL_Code]].Value.ToString();
                        }


                        var prevIndn = SpreadsheetHelper.FindNextGreaterTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HangMuc);
                        string prevTypeRown = ws.Rows[prevIndn][dic[TDKH.COL_TypeRow]].Value.ToString();
                        //string nextTypeRow = ws.Rows[nextInd][dic[TDKH.COL_TypeRow]].Value.ToString();


                        nextCode = ws.Rows[prevIndn][dic[TDKH.COL_Code]].Value.ToString();


                        var prevIndCT = SpreadsheetHelper.FindPrevSameTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_CVCha);
                        //string prevTypeRowCT = ws.Rows[prevIndCT][dic[TDKH.COL_TypeRow]].Value.ToString();
                        //string nextTypeRow = ws.Rows[nextInd][dic[TDKH.COL_TypeRow]].Value.ToString();

                        if (prevTypeRowHM == MyConstant.TYPEROW_CVCha)
                        {
                            if (prevIndCT < 0)
                            {

                                e.Cancel = true;
                                return;
                            }
                            prevCTac = ws.Rows[prevIndCT][dic[TDKH.COL_Code]].Value.ToString();
                        }


                        if (codeHM != "")
                        {
                            string codePhanTuyen = null;
                            var prevInd = SpreadsheetHelper.FindPrevGreaterTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HTPhanTuyen);
                            string prevTypeRow = ws.Rows[prevInd][dic[TDKH.COL_TypeRow]].Value.ToString();
                            //string nextTypeRow = ws.Rows[nextInd][dic[TDKH.COL_TypeRow]].Value.ToString();

                            if (prevTypeRow == MyConstant.TYPEROW_PhanTuyen)
                            {
                                string cpt = ws.Rows[prevInd][dic[TDKH.COL_Code]].Value.ToString();
                                DataTable dtPT = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT Code FROM {TDKH.Tbl_PhanTuyen} WHERE Code = '{cpt}'");
                                if (dtPT.Rows.Count > 0)
                                    codePhanTuyen = cpt;
                            }
                            //data
                            m_ctrlTKDM.fcn_LoadPositionDoBoc(prevCTac, nextCode, codeNhom, codePhanTuyen);

                        }
                        //ctrl_DonViThucHienDuAnTDKH.IsGiaoThau &&
                        if (codeHM != "")
                        {
                            if (!allPermission.HaveInitProjectPermission
                                && !allPermission.AllContractorThatUserIsAdmin.Contains(ctrl_DonViThucHienDuAnTDKH.SelectedDVTH?.Code)
                                && !allPermission.AllContractorThatUserIsAdmin.Contains(slke_ThongTinDuAn.EditValue as string)
                                && !allPermission.TabsInCreate.Contains(nameof(xtraTab_KeHoach)))
                            {
                                MessageShower.ShowError("Bạn có quyền thêm công tác, vui lòng liên hệ Admin!");
                                e.Cancel = true;
                                return;
                            }

                            m_ctrlTKDM.fcn_LoadCodeAndType(MyConstant.CONST_TYPE_DinhMuc_DoBocChuan, CodeHM: codeHM);
                            BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                            {

                                TextBox tb = FindTextBox(ss.Controls);
                                if (tb != null)
                                {
                                    tb.TextChanged += fcn_handle_txtBoxTimKiem_TextChange;
                                }
                            }), sender as SpreadsheetControl);
                            Debug.WriteLine("Finished");
                        }
                        return;
                    }
                    if (colHeading == dic[TDKH.COL_MuiThiCong])
                    {
                        if (typeRow != MyConstant.TYPEROW_CVCHIA && typeRow != MyConstant.TYPEROW_CVCha)
                        {
                            e.Cancel = true;
                            return;
                        }
                    }
                    //string typeRow = crRow[TDKH_DBC.dic_Dbc[MyConstant.COL_TDKH_DBC_TypeRow]].Value.ToString();
                    //string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    //string typeRow = fcn_TDKH_GetTypeRow(MHCT);
                    int indTypeCol = ws.Columns[dic[TDKH.COL_TypeRow]].Index;
                    //int? indPrevCha = ws.Range.FromLTRB(indTypeCol, range.TopRowIndex, indTypeCol, e.RowIndex)
                    //                    .Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions).LastOrDefault()?.RowIndex;

                    //if (!indPrevCha.HasValue)
                    //{
                    //    MessageShower.ShowError("Không được phép sửa nội dung này");
                    //    e.Cancel = true;
                    //    return;
                    //}

                    //string codePrevCha = ws.Rows[indPrevCha.Value][dic[TDKH.COL_Code]].Value.ToString();

                    if (!allPermission.HaveInitProjectPermission
                    && !allPermission.AllProjectThatUserIsAdmin.Contains(crDuAn.Code)
                    && !allPermission.AllContractorThatUserIsAdmin.Contains(dvth.Code)
                    /*&& !allPermission.TasksInEdit.Contains(codePrevCha)*/)
                    {
                        MessageShower.ShowError("Bạn không có quyền chỉnh sửa dự án này! Liên hệ Admin để được phân quyền!");
                        e.Cancel = true;
                        return;
                    }



                    string[] lsColDisable =
                    {
                        dic[TDKH.COL_STT],
                        dic[TDKH.COL_KhoiLuongHopDongDuAn],
                        dic[TDKH.COL_KhoiLuongHopDongDuAn],
                        dic[TDKH.COL_DBC_LuyKeDaThucHien],

                    };

                    if (lsColDisable.Contains(colHeading))
                    {
                        e.Cancel = true;
                        return;
                    }

                    if (typeRow == MyConstant.TYPEROW_HTPhanTuyen)
                    {
                        e.Cancel = true;
                        return;
                    }

                    if (e.Cell.ColumnIndex == ws.Range.GetColumnIndexByName(dic[TDKH.COL_HasHopDongAB]))
                    {

                        e.Cancel = true;

                        if (typeRow == MyConstant.TYPEROW_CVCha)
                        {
                            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
                            bool newVal = (e.Cell.Value == true) ? false : true;
                            e.Cell.SetValue(newVal);
                            int boolVal = newVal ? 1 : 0;
                            string dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET HasHopDongAB = '{boolVal}'\r\n" +
                                    $"WHERE Code IN" +
                                    $"(SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy}\r\n" +
                                    $"WHERE Code = '{code}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { code });


                        }

                        return;
                    }

                    if (e.Cell.ColumnIndex == ws.Range.GetColumnIndexByName(dic[TDKH.COL_IsUseMTC]))
                    {

                        e.Cancel = true;

                        if (typeRow == MyConstant.TYPEROW_CVCha)
                        {
                            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
                            bool newVal = (e.Cell.Value == true) ? false : true;
                            e.Cell.SetValue(newVal);
                            int boolVal = newVal ? 1 : 0;
                            string dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET IsUseMTC = '{boolVal}'\r\n" +
                                    $"WHERE Code = '{code}'";
                            int num = DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            //TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { code });


                        }

                        return;
                    }

                    if (e.Cell.ColumnIndex == ws.Range.GetColumnIndexByName(dic[TDKH.COL_PhanTichVatTu]))
                    {

                        e.Cancel = true;

                        if (typeRow == MyConstant.TYPEROW_CVCha)
                        {
                            if (crRow[dic[TDKH.COL_HasHopDongAB]].Value != false)
                            {
                                AlertShower.ShowInfo("Chỉ áp dụng các công tác không có hợp đồng AB");
                                return;
                            }
                            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
                            bool newVal = (e.Cell.Value == true) ? false : true;
                            e.Cell.SetValue(newVal);
                            int boolVal = newVal ? 1 : 0;
                            string dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET {TDKH.COL_PhanTichVatTu} = '{boolVal}'\r\n" +
                                    $"WHERE Code IN" +
                                    $"(SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy}\r\n" +
                                    $"WHERE Code = '{code}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { code });
                        }

                        return;
                    }

                    if (typeRow == MyConstant.TYPEROW_Nhom)
                    {
                        /*                        if (crDVTH.IsGiaoThau && colInDb != TDKH.COL_DanhMucCongTac)
                                                {
                                                    MessageShower.ShowError("Không được phép sửa nội dung này tại giao thầu");
                                                    e.Cancel = true;
                                                    return;
                                                }
                                                else *//*if (!crDVTH.IsGiaoThau)*//*
                                                {*/
                        string[] lsColWithEditPermission =
                        {
                                TDKH.COL_DanhMucCongTac,
                                TDKH.COL_TenGop,
                                TDKH.COL_DonVi,
                                TDKH.COL_DBC_KhoiLuongToanBo,
                                TDKH.COL_KhoiLuongHopDongChiTiet,
                            };

                        if (!lsColWithEditPermission.Contains(colInDb))
                        {
                            MessageShower.ShowError("Không được phép sửa nội dung này cho nhóm");
                            e.Cancel = true;
                            return;
                        }
                        //}
                    }
                    else if (typeRow == MyConstant.TYPEROW_CVCha)
                    {




                        List<string> lsUpdateCha = new List<string>()
                            {
                                dic[TDKH.COL_CustomOrder],
                                dic[TDKH.COL_DanhMucCongTac],
                                dic[TDKH.COL_DonVi],
                                dic[TDKH.COL_DBC_KhoiLuongToanBo],
                                dic[TDKH.COL_KhoiLuongHopDongChiTiet],
                                dic[TDKH.COL_KhoiLuongHopDongDuAn]
                            };
                        //if (!lsUpdateCha.Contains(colHeading) && )
                        //    e.Cancel = true;
                    }
                    else if (typeRow == "" && colHeading != dic[TDKH.COL_DanhMucCongTac])
                    {
                        e.Cancel = true;
                        break;
                    }
                    else if (typeRow == MyConstant.TYPEROW_CVCON)
                    //bool isCongThucMacDinh = false;
                    //bool.TryParse(crRow[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh].Value.ToString(), out isCongThucMacDinh);
                    //dic = dic_All;
                    {
                        //string DienGiai = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString().Split('=').First();
                        //bool isCongThuc;
                        //try
                        //{
                        //    fcn_TDKH_KiemTraCongThuc(DienGiai);
                        //    isCongThuc = true;
                        //}
                        //catch
                        //{
                        //    isCongThuc = false;
                        //}
                        //if (!isCongThuc && colHeading == dic[TDKH.COL_DanhMucCongTac])
                        //{
                        //    BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                        //    {
                        //        TextBox tb = FindTextBox(ss.Controls);
                        //        tb.Text = DienGiai;
                        //        tb.Select(tb.Text.Length, 0);
                        //    }), sender as SpreadsheetControl);
                        //}
                        List<string> lsUpdateCon = new List<string>()
                            {

                                dic[TDKH.COL_DBC_SoBoPhanGiongNhau],
                                dic[TDKH.COL_DBC_Dai],
                                dic[TDKH.COL_DBC_Rong],
                                dic[TDKH.COL_DBC_Cao],
                                dic[TDKH.COL_DBC_HeSoCauKien],
                                dic[TDKH.COL_DBC_KL1BoPhan]
                            };

                        if (colHeading == dic[TDKH.COL_DanhMucCongTac])
                        {
                            string DienGiai = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString().Split('=').First().Trim();
                            bool isCongThuc;
                            try
                            {
                                fcn_TDKH_KiemTraCongThuc(DienGiai);
                                isCongThuc = true;
                            }
                            catch
                            {
                                isCongThuc = false;
                            }
                            BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                            {
                                TextBox tb = FindTextBox(ss.Controls);
                                tb.Text = DienGiai;
                                tb.Select(tb.Text.Length, 0);
                            }), sender as SpreadsheetControl);
                        }

                        else if (!lsUpdateCon.Contains(colHeading))
                        {
                            e.Cancel = true;
                            break;
                        }

                    }
                    #endregion
                    break;
                case TDKH.SheetName_KeHoachKinhPhi:
                    if (colHeading == "A")
                    {
                        e.Cancel = true;
                        return;
                    }
                    //dic = dic;
                    colInDb = dic.Where(x => x.Value == colHeading).FirstOrDefault().Key;
                    typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    indTypeRow = Array.IndexOf(MyConstant.TypeRows, typeRow);

                    range = wb.Range[TDKH.RANGE_KeHoach];

                    if (e.Cell.ColumnIndex == ws.Range.GetColumnIndexByName(dic[TDKH.COL_KhoiLuongNhapVao]))
                    {
                        if (ce_replan.Checked)
                            e.Cancel = true;
                        return;
                    }
                    if (typeRow != dic[TDKH.COL_DanhMucCongTac] && indTypeRow >= 0 && indTypeRow < Array.IndexOf(MyConstant.TypeRows, MyConstant.TYPEROW_Nhom))
                    {
                        AlertShower.ShowInfo("Chỉ có thể thay đổi tên cho Nhóm, Hạng Mục, Công Trình");
                        e.Cancel = true;
                        return;
                    }

                    var d = dic.Where(x => x.Value == colHeading);
                    string colName = (d.Any()) ? d.Single().Key : null;
                    string[] colsFromDoBoc =
                    {
                        TDKH.COL_DBC_KhoiLuongToanBo,
                        TDKH.COL_KhoiLuongHopDongChiTiet,
                        TDKH.COL_DanhMucCongTac,
                        TDKH.COL_MaHieuCongTac,
                        TDKH.COL_DonVi,
                    };

                    string[] colsDisable =
                    {
                        TDKH.COL_PhanTramThucHien,
                        TDKH.COL_NhanCong,
                        TDKH.COL_NgayBatDauThiCong,
                        TDKH.COL_NgayKetThucThiCong,
                        TDKH.COL_SoNgayThiCong,
                    };

                    if (colName is null || colsFromDoBoc.Contains(colName))
                    {
                        MessageShower.ShowWarning("Vui lòng sang bảng ĐO BÓC CHUẨN để thay đổi dữ liệu này");
                        e.Cancel = true;
                        return;
                    }
                    else if (colsDisable.Contains(colName) || colName.StartsWith("KinhPhi"))
                    {
                        MessageShower.ShowWarning("Không thể thay đổi dữ liệu này");
                        e.Cancel = true;
                        return;
                    }

                    if (typeRow == MyConstant.TYPEROW_Nhom)
                    {
                        /*                        if (crDVTH.IsGiaoThau && colInDb != TDKH.COL_DanhMucCongTac)
                                                {
                                                    AlertShower.ShowInfo("Không được phép sửa nội dung này tại giao thầu");
                                                    e.Cancel = true;
                                                    return;
                                                }
                                                else *//*if (!crDVTH.IsGiaoThau)*//*
                                                {*/
                        string[] lsColWithEditPermission =
                        {
                                TDKH.COL_DonGia,
                                TDKH.COL_DonGiaThiCong,
                                TDKH.COL_NgayBatDau,
                                TDKH.COL_NgayKetThuc,
                                TDKH.COL_SoNgayThucHien,
                            };

                        if (!lsColWithEditPermission.Contains(colInDb))
                        {
                            AlertShower.ShowInfo("Không được phép sửa nội dung này cho nhóm");
                            e.Cancel = true;
                            return;
                        }

                        if (colInDb == TDKH.COL_DonGia || colInDb == TDKH.COL_DonGiaThiCong)
                        {
                            var dr = MessageShower.ShowYesNoQuestion("Nhập đơn giá mới sẽ làm mất mối liên hệ đơn giá giữa nhóm và công tác!\r\n" +
                                "Chuột phải vào nhóm để lấy lại đơn giá theo công tác!");
                            if (dr != DialogResult.Yes)
                            {
                                e.Cancel = true;
                                return;
                            }
                        }
                        //}
                    }
                    else if (typeRow == MyConstant.TYPEROW_CVCha)
                    {
                        int indRowCha = (int)crRow[dic[TDKH.COL_RowCha]].Value.NumericValue - 1;
                        string typeRowCha = ws.Rows[indRowCha][dic[TDKH.COL_TypeRow]].Value.ToString();

                        if (typeRowCha == MyConstant.TYPEROW_Nhom && (colInDb == TDKH.COL_DonGia || colInDb == TDKH.COL_DonGiaThiCong))
                        {
                            AlertShower.ShowInfo("Nhập đơn giá mới sẽ làm mất mối liên hệ đơn giá giữa nhóm và công tác!\r\n" +
                                "Chuột phải vào nhóm để lấy lại đơn giá theo công tác!");
                            //if (dr != DialogResult.Yes)
                            //{
                            //    e.Cancel = true;
                            //    return;
                            //}
                        }
                    }
                    break;
                case TDKH.SheetName_VatLieu:
                case TDKH.SheetName_NhanCong:
                case TDKH.SheetName_MayThiCong:


                    typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    indTypeRow = Array.IndexOf(MyConstant.TypeRows, typeRow);
                    if (colHeading != dic[TDKH.COL_DanhMucCongTac] && indTypeRow >= 0 && indTypeRow < Array.IndexOf(MyConstant.TypeRows, MyConstant.TYPEROW_CVCha))
                    {
                        AlertShower.ShowInfo("Chỉ có thể thay đổi tên cho Nhóm, Hạng Mục, Công Trình");
                        e.Cancel = true;
                        return;
                    }
                    d = dic.Where(x => x.Value == colHeading);
                    colName = (d.Any()) ? d.Single().Key : null;
                    string[] colEnable =
                    {
                        TDKH.COL_DonGia,
                        TDKH.COL_DonGiaThiCong,
                        TDKH.COL_MayQuyDoi,
                        TDKH.COL_NgayBatDauThiCong,
                        TDKH.COL_NgayKetThucThiCong,
                        TDKH.COL_KHVT_MaTXHientruong,
                        TDKH.COL_LyTrinhCaoDo,
                    };

                    string typerow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    string codeVT = crRow[dic[TDKH.COL_Code]].Value.ToString();

                    if (ws.Name == TDKH.SheetName_MayThiCong && typerow == MyConstant.TYPEROW_CVCha && colHeading == dic[TDKH.COL_MayQuyDoi])
                    {
                        m_ctrlMTCs.Show();
                        var spsheetLoc = spsheet_TD_KH_LapKeHoach.Location;

                        Rectangle rec = spsheet_TD_KH_LapKeHoach.GetCellBounds(e.RowIndex, e.ColumnIndex);
                        m_ctrlMTCs.Parent = spsheet_TD_KH_LapKeHoach.Parent;
                        m_ctrlMTCs.Location = new Point(rec.Right + spsheetLoc.X, rec.Top + spsheetLoc.Y);
                        m_ctrlMTCs.BringToFront();

                        m_ctrlMTCs.loadData(codeVT);
                        e.Cancel = true;
                        return;
                    }

                    if (colName is null || !colEnable.Contains(colName)
                        || (typerow == MyConstant.TYPEROW_CVCON && colName == TDKH.COL_DonGia))
                    {
                        MessageShower.ShowWarning("Không thể thay đổi dữ liệu này (Được tính tự động từ công tác và hao phí)");
                        e.Cancel = true;
                        return;
                    }

                    if (typerow.HasValue() && !codeVT.HasValue())
                    {
                        MessageShower.ShowWarning("Vật tư này không có kế hoạch tại đơn vị giao thầu");
                        e.Cancel = true;
                        return;
                    }

                    break;
                default:
                    break;
            }

            if (dic != null)
            {
                if (dic.ContainsKey(TDKH.COL_TypeRow))
                {
                    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    string code = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

                    if (!allPermission.HaveInitProjectPermission
                        && !allPermission.AllContractorThatUserIsAdmin.Contains(crDuAn.Code)
                        && !allPermission.AllContractorThatUserIsAdmin.Contains(dvth.Code)
                        && !allPermission.TasksInEdit.Contains(code))
                    {
                        MessageShower.ShowError("Bạn không có quyền chỉnh sửa công tác này! Vui lòng liên hệ admin");
                        e.Cancel = true;
                        return;
                    }

                    //if (!string.IsNullOrEmpty(typeRow) && (typeRow != MyConstant.TYPEROW_CVCha && typeRow != MyConstant.TYPEROW_CVCON) &&
                    //    (colHeading != dic[TDKH.COL_DanhMucCongTac] && string.IsNullOrEmpty(crRow[colHeading].Value.ToString())))
                    //    e.Cancel = true;
                }
            }
        }

        private void cbo_TDKH_ChonDot_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox cbb = sender as ComboBox;
            if (cbb.SelectedIndex < 0)
            {
                spsheet_TD_KH_LapKeHoach.Enabled = false;
                return;
            }
            spsheet_TD_KH_LapKeHoach.Enabled = true;

            if (cbb.SelectedIndex == cbb.Items.Count - 1)
            {
                cbb_DBKH_ChonDot.SelectedIndex = cbb_DBKH_ChonDot.Items.Count - 1;
                return;
            }


            //string filePath = $@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\Tiến độ - Kế hoạch\Kế hoạch\{cbb.SelectedValue}\6.aBangNhapKeHachDanhGiaLoiNhuan.xlsx";
            //if (!File.Exists(filePath))
            //{
            //    if (!Directory.Exists(Path.GetDirectoryName(filePath)))
            //        Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            //    File.Copy($@"{BaseFrom.m_templatePath}\FileExcel\6.aBangNhapKeHachDanhGiaLoiNhuan.xlsx", filePath);
            //}
            //spsheet_TD_KH_LapKeHoach.LoadDocument(filePath);

        }

        private Dictionary<string, string> _DicInPastring = null;
        private async void spsheet_TD_KH_LapKeHoach_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            bool isReloadDoBoc = false;
            Worksheet ws = e.Worksheet;
            IWorkbook wb = ws.Workbook;
            try
            {
                string newValStr = e.Value.ToString();
                string colHeading = ws.Columns[e.ColumnIndex].Heading;
                //string colIndb = ws.Columns[e.ColumnIndex][0].Value.ToString();
                int IndexOf1stDate = wb.Range[TDKH.RANGE_KeHoach].RightColumnIndex + 1;
                int tryParse;
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                NavigationPaneState StateNP = np_KhoiLuongHangNgay.State;
                if (e.Cell == wb.Range[TDKH.RANGE_KinhPhiPhanBoToanDuAn].First())
                {
                    long KPDK = 0;
                    if (!long.TryParse(e.Value.ToString(), out KPDK))
                    {
                        MyFunction.fcn_ReverseCell(e);
                    }
                    goto Return;
                }


                Dictionary<string, string> dic;// = (_DicInPastring && TDKHPasting.IsPasting) ?? MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

                if (TDKHPasting.IsPasting && _DicInPastring is null)
                {
                    dic = _DicInPastring = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
                }
                else if (!TDKHPasting.IsPasting)
                {
                    _DicInPastring = null;
                    dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
                }
                else
                {
                    dic = _DicInPastring;
                }


                if (ws.Name == TDKH.SheetName_KeHoachKinhPhi && colHeading == dic[TDKH.COL_KhoiLuongNhapVao])
                {

                    return;
                }

                wb.BeginUpdate();
                wb.Calculate();



                string[] lsSoThuc =
                {
                TDKH.COL_DBC_KhoiLuongToanBo,
                TDKH.COL_KhoiLuongHopDongDuAn,
                TDKH.COL_PhanTramThucHien,
                TDKH.COL_DonGia,
                TDKH.COL_SoNgayThucHien,
                TDKH.COL_SoNgayThiCong,
                TDKH.COL_NhanCong,
                TDKH.COL_KinhPhiDuKien,
                TDKH.COL_GiaTri,
                TDKH.COL_GiaTriNhanThau,
                TDKH.COL_GiaTriThiCong,
                TDKH.COL_DBC_HeSoCauKien,
            };

                string[] lsSoNguyen =
                {
                TDKH.COL_DBC_SoBoPhanGiongNhau,
                TDKH.COL_DBC_Dai,
                TDKH.COL_DBC_Rong,
                TDKH.COL_DBC_Cao,
            };

                string[] lsNgay =
                {
                TDKH.COL_NgayBatDau,
                TDKH.COL_NgayBatDauThiCong,
                TDKH.COL_NgayKetThuc,
                TDKH.COL_NgayKetThucThiCong,
            };

                //CellRange rangeNgay;
                DateTime dayBD, dayKT, dayBDTC, dayKTTC, dayBDGT, dayKTGT;
                string dbString = "";
                Guid guid;

                string codeCongTac;

                if (ws.Name == TDKH.SheetName_DoBocChuan)
                {
                    string colInDb = ws.Rows[0][e.ColumnIndex].Value.ToString();
                    CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
                    //Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(range);
                    Row crRow = ws.Rows[e.RowIndex];
                    codeCongTac = crRow[dic[TDKH.COL_Code]].Value.ToString();
                    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    bool isHaveCode = Guid.TryParse(codeCongTac, out guid); //Trường hợp là dòng trống, chưa có công tác

                    if (!range.Contains(e.Cell))
                    {
                        MyFunction.fcn_ReverseCell(e);
                        goto Return;

                    }

                    if (colInDb == TDKH.COL_MaHieuCongTac)
                    {
                        Invoke(new Action<SpreadsheetControl>((ss) =>
                        {
                            TextBox tb = FindTextBox(ss.Controls);
                            if (tb != null)
                            {
                                tb.TextChanged -= fcn_handle_txtBoxTimKiem_TextChange;
                            }
                        }), sender as SpreadsheetControl);


                        if (newValStr.ToUpper() == MyConstant.CONST_TYPE_HANGMUC)
                        {
                            MyFunction.fcn_ReverseCell(e);


                            m_ctrlTKDM.Hide();

                            Column colTypeRow = ws.Columns[dic[TDKH.COL_TypeRow]];
                            Column colRowCha = ws.Columns[dic[TDKH.COL_RowCha]];

                            int indCT = SpreadsheetHelper.FindPrevSameTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_CongTrinh);
                            int indHM = SpreadsheetHelper.FindPrevSameTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HangMuc);


                            if (indCT < 0)
                            {
                                MessageShower.ShowInformation("Lỗi tìm công trình");
                                goto Return;

                            }
                            var RowCongTrinh = ws.Rows[indCT];
                            string codeCongTrinh = RowCongTrinh[dic[TDKH.COL_Code]].Value.ToString();
                            //Cell cellPrevHM = colRowCha.Search((RowCongTrinh.Index + 1).ToString(), MyConstant.MySearchOptions).Where(x => x.RowIndex < e.RowIndex).LastOrDefault();

                            int indNewHM;// = (cellPrevHM is null)?0:;
                            string oldHM = "";
                            if (indHM < 0)
                            {
                                indNewHM = 0;
                            }
                            else
                            {
                                oldHM = ws.Rows[indHM][dic[TDKH.COL_Code]].Value.ToString();
                                dbString = $"SELECT SortId FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE Code = '{oldHM}'";
                                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                                if (dt.Rows.Count != 1)
                                {
                                    MessageShower.ShowInformation("Lỗi hạng mục");
                                    goto Return;

                                }

                                indNewHM = int.Parse(dt.Rows[0][0].ToString()) + 1;
                            }

                            string newCodeHM = Guid.NewGuid().ToString();
                            dbString = $"UPDATE {MyConstant.TBL_THONGTINHANGMUC} SET SortId = SortId + 1 WHERE SortId >= {indNewHM}";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            dbString = $"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (Code, CodeCongTrinh, Ten, SortId) VALUES " +
                                $"('{newCodeHM}', '{codeCongTrinh}', 'Hạng mục mới', '{indNewHM}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            List<string> codesCongTacNeedChange = new List<string>();
                            List<string> codesPhanTuyenNeedChange = new List<string>();

                            int nextInd = SpreadsheetHelper.FindNextGreaterTypeInd(range, indHM, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow]);

                            for (int i = e.RowIndex; i < nextInd; i++)
                            {
                                var r = ws.Rows[i];
                                string tr = r[dic[TDKH.COL_TypeRow]].Value.ToString();

                                if (tr == MyConstant.TYPEROW_PhanTuyen)
                                    codesPhanTuyenNeedChange.Add(r[dic[TDKH.COL_Code]].Value.ToString());

                                if (tr == MyConstant.TYPEROW_CVCha)
                                    codesCongTacNeedChange.Add(r[dic[TDKH.COL_Code]].Value.ToString());

                            }
                            //string[] codesCongTacNeedChange = colRowCha.Search((cellPrevHM.RowIndex + 1).ToString(), MyConstant.MySearchOptions)
                            //    .Where(x => x.RowIndex >= e.RowIndex)
                            //    .Select(x => $"'{ws.Rows[x.RowIndex][dic[TDKH.COL_Code]].Value}'")
                            //    .ToArray();

                            if (codesCongTacNeedChange.Any())
                            {
                                //string codes = string.Join(", ", codesDMCT);
                                dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET CodeHangMuc = '{newCodeHM}' WHERE Code IN " +
                                    $"(SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(codesCongTacNeedChange)}))";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);


                            }

                            if (codesPhanTuyenNeedChange.Any())
                            {
                                dbString = $"UPDATE {TDKH.Tbl_PhanTuyen} SET CodeHangMuc = '{newCodeHM}' WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(codesPhanTuyenNeedChange)})";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            }

                            TDKHHelper.CapNhatAllVatTuHaoPhi(CodesHangMuc: new string[] { oldHM, newCodeHM });
                            fcn_LoadCongTrinhHangMuc();

                            //fcn_GV_CapNhatHangMucCongViec(false);
                            //fcn_LoadCongTacDoBoc();
                            goto Return;
                        }

                        else if (newValStr.ToUpper().Trim() == MyConstant.CONST_TYPE_PhanTuyen)
                        {

                            m_ctrlTKDM.Hide();
                            e.Cell.SetValue("");

                            int indColTypeRow = ws.Range.GetColumnIndexByName(dic[TDKH.COL_TypeRow]);
                            var s = ws.Range.FromLTRB(indColTypeRow, range.TopRowIndex, indColTypeRow, crRow.Index - 1).Search(MyConstant.TYPEROW_HangMuc, MyConstant.MySearchOptions).LastOrDefault();

                            if (s is null)
                            {
                                AlertShower.ShowInfo("Không tìm thấy hạng mục");
                                MyFunction.fcn_ReverseCell(e);

                                goto Return;
                            }

                            string codeHM = ws.Rows[s.RowIndex][dic[TDKH.COL_Code]].Value.ToString();

                            var prevInd = SpreadsheetHelper.FindPrevGreaterTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HTPhanTuyen);

                            string prevTypeRow = ws.Rows[prevInd][dic[TDKH.COL_TypeRow]].Value.ToString();

                            if (prevTypeRow == MyConstant.TYPEROW_PhanTuyen)
                            {
                                AlertShower.ShowInfo("Không thể thêm phân đoạn khi chưa hoàn thành phân đoạn trước, Hoặc giữa một phân đoạn khác");
                                MyFunction.fcn_ReverseCell(e);

                                goto Return;
                            }
                            string crCode = crRow[dic[TDKH.COL_Code]].Value.ToString();
                            if (crCode.HasValue())
                                ws.Rows.Insert(crRow.Index, 1, RowFormatMode.FormatAsNext);
                            var crInd = e.RowIndex;
                            string newGuid = Guid.NewGuid().ToString();
                            ws.Rows[crInd].Font.Color = MyConstant.color_Row_PhanTuyen;
                            ws.Rows[crInd].Font.Bold = true;
                            ws.Rows[crInd][dic[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_PhanTuyen);
                            ws.Rows[crInd][dic[TDKH.COL_DanhMucCongTac]].SetValue("Phân đoạn người dùng");
                            ws.Rows[crInd][dic[TDKH.COL_Code]].SetValue(newGuid);
                            ws.Rows[crInd][dic[TDKH.COL_RowCha]].Formula = $"ROW(A{s.RowIndex + 1})";
                            ws.Rows[crInd][dic[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_PhanTuyen);

                        }
                        else if (newValStr.ToUpper().Trim() == "HT")
                        {
                            m_ctrlTKDM.Hide();
                            e.Cell.SetValue("");
                            var prevInd = SpreadsheetHelper.FindPrevGreaterTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HTPhanTuyen);
                            var nextInd = SpreadsheetHelper.FindNextGreaterTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HTPhanTuyen);

                            string prevTypeRow = ws.Rows[prevInd][dic[TDKH.COL_TypeRow]].Value.ToString();
                            //string nextTypeRow = ws.Rows[nextInd][dic[TDKH.COL_TypeRow]].Value.ToString();

                            if (prevTypeRow != MyConstant.TYPEROW_PhanTuyen)
                            {
                                AlertShower.ShowInfo("Không tìm thấy Bắt đầu phân đoạn");
                                MyFunction.fcn_ReverseCell(e);
                                goto Return;

                            }

                            string nextTypeRow = ws.Rows[nextInd][dic[TDKH.COL_TypeRow]].Value.ToString();
                            //string nextTypeRow = ws.Rows[nextInd][dic[TDKH.COL_TypeRow]].Value.ToString();

                            if (nextTypeRow == MyConstant.TYPEROW_HTPhanTuyen)
                            {
                                AlertShower.ShowInfo("Phân đoạn đã có hoàn thành phía dưới");
                                MyFunction.fcn_ReverseCell(e);
                                goto Return;

                            }

                            string newGuid = ws.Rows[prevInd][dic[TDKH.COL_Code]].Value.ToString();
                            string ten = ws.Rows[prevInd][dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
                            int indRowHM = int.Parse(ws.Rows[prevInd][dic[TDKH.COL_RowCha]].Value.ToString()) - 1;
                            string codeHM = ws.Rows[indRowHM][dic[TDKH.COL_Code]].Value.ToString();

                            string dbStringIns = $"INSERT INTO {TDKH.Tbl_PhanTuyen} " +
                                $"(Code, Ten, CodeHangMuc) " +
                                $"VALUES ('{newGuid}', '{ten}', '{codeHM}') ";
                            DataProvider.InstanceTHDA.ExecuteQuery(dbStringIns);


                            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
                            if (code.HasValue())
                                ws.Rows.Insert(crRow.Index, 1, RowFormatMode.FormatAsNext);


                            isReloadDoBoc = true;
                            var crInd = e.RowIndex;
                            /*                        ws.Rows[crInd].Font.Color = MyConstant.color_Row_PhanTuyen;
                                                    ws.Rows[crInd].Font.Bold = true; ;
                                                    ws.Rows[crInd][dic[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                                    ws.Rows[crInd][dic[TDKH.COL_DanhMucCongTac]].Formula = $"\"HT\" & {dic[TDKH.COL_DanhMucCongTac]}{prevInd + 1}";
                                                    ws.Rows[crInd][dic[TDKH.COL_Code]].SetValue(newGuid);
                                                    ws.Rows[crInd][dic[TDKH.COL_RowCha]].Formula = $"ROW(A{prevInd + 1})";
                                                    ws.Rows[crInd][dic[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_HTPhanTuyen);*/

                            int indColTypeRow = ws.Range.GetColumnIndexByName(dic[TDKH.COL_TypeRow]);

                            var res = ws.Range.FromLTRB(indColTypeRow, prevInd, indColTypeRow, crInd)
                                .Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions).Select(x => x.RowIndex);
                            List<string> codesUpdate = new List<string>();
                            foreach (int ind in res)
                            {
                                Row row = ws.Rows[ind];
                                string crCode = row[dic[TDKH.COL_Code]].Value.ToString();
                                codesUpdate.Add(crCode);
                                row[dic[TDKH.COL_RowCha]].Formula = $"ROW(A{prevInd + 1})";
                            }

                            //wb.EndUpdate();

                            if (codesUpdate.Any())
                            {
                                string lsCodes = MyFunction.fcn_Array2listQueryCondition(codesUpdate);
                                dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET CodePhanTuyen = '{newGuid}' " +
                                    $"WHERE Code IN " +
                                    $"(SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                                    $"WHERE Code IN ({lsCodes}))";

                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                                dbString = $"SELECT MaVatLieu " +
                                         $"FROM {TDKH.Tbl_HaoPhiVatTu} WHERE CodeCongTac IN ({lsCodes})";
                                DataTable dtdm = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                var MaVatTus = dtdm.AsEnumerable().Select(x => x[0].ToString());

                                TDKHHelper.CapNhatAllVatTuHaoPhi(CodesHangMuc: new string[] { codeHM });
                            }
                        }
                        else if (typeRow == MyConstant.TYPEROW_CVCha)
                        {
                            dbString = $"SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE Code = '{codeCongTac}'";
                            DataTable dtKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                            dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET \"{colInDb}\" = @NewVal WHERE \"Code\" = '{dtKy.Rows[0][0]}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                            dbString = $"SELECT * FROM tbl_DinhMucAll WHERE MaDinhMuc = '{newValStr}'";
                            DataTable dtDm = DataProvider.InstanceTBT.ExecuteQuery(dbString);

                            if (dtDm.Rows.Count == 0)
                                e.Cell.FillColor = MyColor.InvalidMHCT;
                            else
                                e.Cell.FillColor = MyColor.NormalBackground;

                        }
                        goto Return;

                    }

                    else if (colInDb == "Chon")
                        goto Return;

                    if (!Guid.TryParse(codeCongTac, out guid)) //Trường hợp là dòng trống, chưa có công tác
                    {
                        if (colInDb == TDKH.COL_TenGop)
                        {
                            AlertShower.ShowInfo("Không thể điền công tác gộp cho dòng trống!");
                            goto Return;
                        }
                        string newGuid = Guid.NewGuid().ToString();
                        Row crRowCha = null;
                        for (int i = e.RowIndex - 1; i > range.TopRowIndex; i--)
                        {
                            string typeRowTemp = ws.Rows[i][dic[TDKH.COL_TypeRow]].Value.ToString();

                            if (typeRowTemp == MyConstant.TYPEROW_CVCha)
                            {
                                crRowCha = ws.Rows[i];
                                break;
                            }
                        }

                        if (crRowCha == null)
                        {
                            MessageShower.ShowInformation("Không thể tìm công tác cha");
                            goto Return;
                        }
                        string codeCha = crRowCha[dic[TDKH.COL_Code]].Value.ToString();
                        dbString = $"INSERT INTO {TDKH.TBL_ChiTietCongTacCon} (\"Code\", \"CodeCongTacCha\", \"{ws.Rows[0][colHeading].Value}\") VALUES " +
                            $"('{newGuid}', '{codeCha}', @NewVal)";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });
                        crRow[dic[TDKH.COL_Code]].SetValue(newGuid);
                        crRow[dic[TDKH.COL_RowCha]].Formula = $"ROW(A{crRowCha.Index + 1})";
                        crRow[dic[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCON);
                        //e.Cell.SetValue(newValStr);
                        TDKHHelper.fcn_TDKH_UpdateRowConTheoTenCongTac_Suacongtac(ws, crRow.Index, out double KLKH);

                        crRow.Font.Bold = false;
                        crRow.Font.Color = MyConstant.color_Row_DienGiai;

                        if (crRowCha[dic[TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh]].Value.ToString() == true.ToString())
                        {
                            if (crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula.HasValue())
                            {
                                crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"+ {dic[TDKH.COL_DBC_KL1BoPhan]}{e.RowIndex + 1}  + {crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula.Replace("=", "")}";
                            }
                            else
                            {
                                crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"+ {dic[TDKH.COL_DBC_KL1BoPhan]}{e.RowIndex + 1}";

                            }

                            goto CapNhatCongTacCha;
                        }
                        goto Return;

                    }
                    else
                    {
                        if (colInDb == TDKH.COL_TenGop)
                        {
                            string codeDuAn = SharedControls.slke_ThongTinDuAn.EditValue.ToString();
                            string tblGop, tblMain;
                            if (typeRow == MyConstant.TYPEROW_CVCha)
                            {
                                tblGop = TDKH.TBL_TenGopCongTac;
                                tblMain = TDKH.TBL_DanhMucCongTac;
                            }
                            else if (typeRow == MyConstant.TYPEROW_Nhom)
                            {
                                tblGop = TDKH.TBL_TenGopNhom;
                                tblMain = TDKH.TBL_NhomCongTac;
                            }
                            else if (typeRow == MyConstant.TYPEROW_PhanTuyen)
                            {
                                tblGop = TDKH.TBL_TenGopPhanDoan;
                                tblMain = TDKH.Tbl_PhanTuyen;
                            }
                            else
                            {
                                MessageShower.ShowWarning($"Chỉ được nhập tên gộp cho công tác và nhóm");
                                MyFunction.fcn_ReverseCell(e);
                                goto Return;
                            }

                            string trimVal = newValStr.Trim();

                            if (trimVal.Contains(" "))
                            {
                                MessageShower.ShowWarning($"Tên gộp không được chứa khoảng trắng");
                                MyFunction.fcn_ReverseCell(e);
                                goto Return;
                            }

                            string dbStringGop = $"SELECT * FROM {tblGop} WHERE Ten = '{trimVal}'";
                            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbStringGop);
                            string code;
                            if (dt.Rows.Count == 0)
                            {
                                var dr = MessageShower.ShowYesNoQuestion($"Tên gộp \"{trimVal}\" chưa được tạo. Bạn có muốn tạo mới không?");
                                if (dr == DialogResult.No)
                                {
                                    MyFunction.fcn_ReverseCell(e);
                                    goto Return;
                                }

                                code = Guid.NewGuid().ToString();
                                DataProvider.InstanceTHDA.ExecuteNonQuery($"INSERT INTO {tblGop} (Code, Ten, DienGiai, CodeDuAn) " +
                                    $"VALUES ('{code}', @Ten, @DienGiai, '{codeDuAn}')", parameter: new string[] { trimVal, trimVal });
                                e.Cell.SetValue(trimVal);

                            }
                            else
                                code = dt.Rows[0]["Code"].ToString();

                            if (typeRow == MyConstant.TYPEROW_CVCha)
                            {
                                DataProvider.InstanceTHDA.ExecuteNonQuery($"UPDATE {tblMain} SET CodeGop = '{code}' WHERE Code IN\r\n" +
                                    $" (SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE Code = '{codeCongTac}')");

                            }
                            else
                            {
                                DataProvider.InstanceTHDA.ExecuteNonQuery($"UPDATE {tblMain} SET CodeGop = '{code}' WHERE Code = '{codeCongTac}'");

                            }

                            goto Return;
                        }
                        else if (colInDb == TDKH.COL_MuiThiCong)
                        {
                            if (typeRow != MyConstant.TYPEROW_CVCha && typeRow != MyConstant.TYPEROW_CVCHIA)
                            {
                                MyFunction.fcn_ReverseCell(e);
                                goto Return;
                            }
                        }
                        switch (typeRow)
                        {
                            case MyConstant.TYPEROW_CVCha:

                                if (colInDb == TDKH.COL_CustomOrder)
                                {
                                    if (!int.TryParse(newValStr, out int newOrder))
                                    {
                                        MessageShower.ShowError("Vui lòng nhập số nguyên dương!");
                                        MyFunction.fcn_ReverseCell(e);
                                        goto Return;
                                    }

                                    int oldOrder = 0;
                                    //int.TryParse(newValStr, out newOrder);
                                    int.TryParse(e.OldValue.ToString(), out oldOrder);


                                    int IndcrRowHMDoBoc = (int)crRow[dic[TDKH.COL_RowCha]].Value.NumericValue - 1;

                                    string codeHM = ws.Rows[IndcrRowHMDoBoc][dic[TDKH.COL_Code]].Value.ToString();

                                    int indColRowChaDb = ws.Columns[dic[TDKH.COL_RowCha]].Index;

                                    Row[] rowsCha = ws.Range.FromLTRB(indColRowChaDb, range.TopRowIndex, indColRowChaDb, range.BottomRowIndex)
                                                    .Search((IndcrRowHMDoBoc + 1).ToString(), MyConstant.MySearchOptions)
                                                    .Select(x => ws.Rows[x.RowIndex]).ToArray();


                                    if (newOrder <= 0)
                                    {
                                        newOrder = 1;
                                        newValStr = newOrder.ToString();
                                    }
                                    else if (newOrder > rowsCha.Length)
                                    {
                                        newOrder = rowsCha.Length;
                                        newValStr = newOrder.ToString();

                                    }
                                    if (newOrder == oldOrder)
                                    {
                                        e.Cell.Value = newOrder;
                                        goto Return;
                                    }

                                    int heSo = (newOrder > oldOrder) ? -1 : 1;
                                    int min = Math.Min(newOrder, oldOrder);
                                    int max = Math.Max(newOrder, oldOrder);


                                    List<string> dicNewSort = new List<string>();
                                    foreach (Row rowSheet in rowsCha)
                                    {
                                        if (int.TryParse(rowSheet[dic[TDKH.COL_CustomOrder]].Value.ToString(), out int ind))
                                        {
                                            if ((ind > min && ind < max) || ind == newOrder)
                                            {
                                                //string code = rowSheet[dic[TDKH.COL_Cod]].Value.ToString();
                                                rowSheet[dic[TDKH.COL_CustomOrder]].SetValue(ind + heSo);

                                                string crCode = rowSheet[dic[TDKH.COL_Code]].Value.ToString();
                                                dicNewSort.Add(crCode);
                                            }
                                        }
                                    }



                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET {TDKH.COL_CustomOrder} = {TDKH.COL_CustomOrder} +{heSo} WHERE \"Code\" IN ({MyFunction.fcn_Array2listQueryCondition(dicNewSort)});\r\n" +
                                        $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET {TDKH.COL_CustomOrder} = '{newOrder}' WHERE \"Code\" = '{codeCongTac}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                                    e.Cell.Value = newOrder;
                                    goto Return;
                                }
                                else if (colInDb == TDKH.COL_CustomOrderWholeHM)
                                {
                                    if (!int.TryParse(newValStr, out int newOrder))
                                    {
                                        MessageShower.ShowError("Vui lòng nhập số nguyên dương!");
                                        MyFunction.fcn_ReverseCell(e);
                                        goto Return;
                                    }

                                    int oldOrder = 0;
                                    //int.TryParse(newValStr, out newOrder);
                                    int.TryParse(e.OldValue.ToString(), out oldOrder);

                                    int prevInd = SpreadsheetHelper.FindPrevSameTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HangMuc);
                                    //int IndcrRowHMDoBoc = (int)crRow[dic[TDKH.COL_RowCha]].Value.NumericValue - 1;
                                    int nextInd = SpreadsheetHelper.FindNextGreaterTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HangMuc);

                                    int indColTypeRow = ws.Range.GetColumnIndexByName(dic[TDKH.COL_TypeRow]);
                                    var indsCha = ws.Range.FromLTRB(indColTypeRow, prevInd, indColTypeRow, nextInd)
                                        .Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions).Select(x => x.RowIndex).ToArray();
                                    //string codeHM = ws.Rows[IndcrRowHMDoBoc][dic[TDKH.COL_Code]].Value.ToString();

                                    //int indColRowChaDb = ws.Columns[dic[TDKH.COL_RowCha]].Index;

                                    //Row[] rowsCha = ws.Range.FromLTRB(indColRowChaDb, range.TopRowIndex, indColRowChaDb, range.BottomRowIndex)
                                    //                .Search((IndcrRowHMDoBoc + 1).ToString(), MyConstant.MySearchOptions)
                                    //                .Select(x => ws.Rows[x.RowIndex]).ToArray();


                                    if (newOrder <= 0)
                                    {
                                        newOrder = 1;
                                        newValStr = newOrder.ToString();
                                    }
                                    else if (newOrder > indsCha.Length)
                                    {
                                        newOrder = indsCha.Length;
                                        newValStr = newOrder.ToString();

                                    }
                                    if (newOrder == oldOrder)
                                    {
                                        e.Cell.Value = newOrder;
                                        goto Return;
                                    }

                                    int heSo = (newOrder > oldOrder) ? -1 : 1;
                                    int min = Math.Min(newOrder, oldOrder);
                                    int max = Math.Max(newOrder, oldOrder);


                                    List<string> dicNewSort = new List<string>();
                                    foreach (var indCha in indsCha)
                                    {
                                        Row rowSheet = ws.Rows[indCha];
                                        if (int.TryParse(rowSheet[dic[TDKH.COL_CustomOrderWholeHM]].Value.ToString(), out int ind))
                                        {
                                            if ((ind > min && ind < max) || ind == newOrder)
                                            {
                                                rowSheet[dic[TDKH.COL_CustomOrderWholeHM]].SetValue(ind + heSo);

                                                string crCode = rowSheet[dic[TDKH.COL_Code]].Value.ToString();
                                                dicNewSort.Add(crCode);
                                            }
                                        }
                                    }
                                    e.Cell.Value = newOrder;
                                    goto Return;
                                }
                                else if (colInDb.Contains('_')) //Là công tác phát sinh
                                {
                                    double val = -1;
                                    if (!double.TryParse(newValStr, out val) || val < 0)
                                    {
                                        MessageShower.ShowInformation("Vui lòng nhập số thực dương");
                                        MyFunction.fcn_ReverseCell(e);
                                        goto Return;
                                    }

                                    dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"Code\" = '{codeCongTac}'";
                                    DataTable dtCTac = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                    if (dtCTac.Rows.Count != 1)
                                    {
                                        MessageShower.ShowInformation("Lỗi lấy codeCha danh mục công tác");
                                        goto Return;
                                    }

                                    string codeDMCT = dtCTac.Rows[0]["CodeCongTac"].ToString();
                                    string CodePhatSinh = colInDb.Split('_').Last();
                                    string TenPhatSinh = colInDb.Split('_').First();
                                    string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();

                                    dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk WHERE \"CodePhatSinh\" = '{CodePhatSinh}' " +
                                        $"AND \"CodeCongTac\" = '{codeDMCT}' AND {condition}";
                                    DataTable dtCTacPhatSinh = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                    switch (dtCTacPhatSinh.Rows.Count)
                                    {
                                        case 0:
                                            DataRow newRow = dtCTacPhatSinh.NewRow();
                                            string newCode = Guid.NewGuid().ToString();
                                            newRow["Code"] = newCode;
                                            newRow["CodeCongTac"] = codeDMCT;
                                            newRow["CodeGiaiDoan"] = cbb_DBKH_ChonDot.SelectedValue.ToString();
                                            newRow["CodePhatSinh"] = CodePhatSinh;
                                            newRow["KhoiLuongToanBo"] = val;
                                            newRow["NgayBatDau"] /*= newRow["NgayBatDauThiCong"]*/ = DateTime.Now.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                                            newRow["NgayKetThuc"] /*= newRow["NgayKetThucThiCong"]*/ = DateTime.Now.AddDays(9).Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

                                            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
                                            if (dvth != null)
                                                newRow[dvth.ColCodeFK] = dvth.Code;

                                            dtCTacPhatSinh.Rows.Add(newRow);
                                            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtCTacPhatSinh, TDKH.TBL_ChiTietCongTacTheoKy);
                                            //fcn_TDKH_ThemDinhMucMacDinhChoCongTac(newCode, crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString());

                                            //Thêm định mức cho phát sinh giống kế hoạch
                                            MyFunction.fcn_TDKH_CopyDinhMuc(codeCongTac, newCode, TDKH.Tbl_HaoPhiVatTu);

                                            /*IEnumerable<Cell>*///[] cells = { null, null };
                                            int crIndKeHoach = -1;

                                            break;
                                        case 1:
                                            dtCTacPhatSinh.Rows[0]["KhoiLuongToanBo"] = val;
                                            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtCTacPhatSinh, TDKH.TBL_ChiTietCongTacTheoKy);

                                            break;
                                        default:
                                            MessageShower.ShowInformation("Lỗi dữ liệu khối lượng phát sinh");
                                            MyFunction.fcn_ReverseCell(e);
                                            goto Return;
                                    }
                                    goto Return;
                                }
                                else if (colInDb == TDKH.COL_DBC_KhoiLuongToanBo)
                                {
                                    if (!double.TryParse(newValStr, out double parse))
                                    {
                                        MessageShower.ShowError("Lỗi công thức: Giá trị không phải số thực");
                                        MyFunction.fcn_ReverseCell(e);
                                        goto Return;
                                    }
                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{TDKH.COL_DBC_KhoiLuongToanBo}\" = '{e.Value}', " +
                                    $"\"{TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh}\" = 0 " +
                                    $"WHERE \"{TDKH.COL_Code}\" = '{codeCongTac}'";
                                    crRow[dic[TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh]].SetValue(false);
                                    if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) != 1)
                                    {
                                        MessageShower.ShowInformation("Lỗi cập nhật công tác đo bóc!");
                                        goto Return;
                                    }
                                    //crRow[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].SetValue(false);
                                    if (!TDKHPasting.IsPasting)
                                        TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                                    else if (!TDKHPasting.Codes.Contains(codeCongTac))
                                        TDKHPasting.Codes.Add(codeCongTac);
                                    goto Return;
                                }
                                else if (colInDb == TDKH.COL_KhoiLuongHopDongChiTiet)
                                {
                                    if (!double.TryParse(newValStr, out double parse))
                                    {
                                        MessageShower.ShowError("Lỗi công thức: Giá trị không phải số thực");
                                        MyFunction.fcn_ReverseCell(e);
                                        goto Return;
                                    }
                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{TDKH.COL_KhoiLuongHopDongChiTiet}\" = '{e.Value}' " +
                                    $"WHERE \"{TDKH.COL_Code}\" = '{codeCongTac}'";

                                    if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) != 1)
                                    {
                                        MessageShower.ShowInformation("Lỗi cập nhật công tác đo bóc!");
                                        goto Return;
                                    }
                                    //crRow[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].SetValue(false);
                                    if (!TDKHPasting.IsPasting)
                                        TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                                    else if (!TDKHPasting.Codes.Contains(codeCongTac))
                                        TDKHPasting.Codes.Add(codeCongTac);
                                    goto Return;
                                }
                                else if (colInDb == TDKH.COL_DanhMucCongTac || colInDb == TDKH.COL_DonVi)
                                {
                                    dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET {colInDb} = @NewVal WHERE " +
                                        $"Code IN" +
                                        $"(SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy}\r\n" +
                                        $"WHERE Code = '{codeCongTac}')";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                }

                                break;
                            case MyConstant.TYPEROW_CVCON:
                                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacCon} SET \"{colInDb}\" = @NewVal WHERE \"Code\" = '{codeCongTac}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                if (ws.Columns[e.ColumnIndex].Heading == dic[TDKH.COL_DanhMucCongTac])
                                {
                                    TDKHHelper.fcn_TDKH_UpdateRowConTheoTenCongTac_Suacongtac(ws, e.RowIndex, out double KLKH);
                                }

                                goto CapNhatCongTacCha;
                            case MyConstant.TYPEROW_CongTrinh:
                                if (colInDb != TDKH.COL_DanhMucCongTac)
                                {
                                    MessageShower.ShowInformation("Chỉ có thể thay đổi tên Công Trình!");
                                    goto Return;
                                }

                                dbString = $"UPDATE {MyConstant.TBL_THONGTINCONGTRINH} SET Ten = @NewVal WHERE Code = '{codeCongTac}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                goto Return;
                            case MyConstant.TYPEROW_HangMuc:
                                if (colInDb != TDKH.COL_DanhMucCongTac)
                                {
                                    MessageShower.ShowInformation("Chỉ có thể thay đổi tên Hạng Mục!");
                                    goto Return;
                                }

                                dbString = $"UPDATE {MyConstant.TBL_THONGTINHANGMUC} SET Ten = @NewVal WHERE Code = '{codeCongTac}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                goto Return;
                            case MyConstant.TYPEROW_PhanTuyen:
                                if (colInDb != TDKH.COL_DanhMucCongTac)
                                {
                                    MessageShower.ShowInformation("Chỉ có thể thay đổi tên Nhóm!");
                                    goto Return;
                                }

                                dbString = $"UPDATE {TDKH.Tbl_PhanTuyen} SET Ten = @NewVal WHERE Code = '{codeCongTac}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                goto Return;
                            case MyConstant.TYPEROW_Nhom:
                                string codeNhom = crRow[dic[TDKH.COL_Code]].Value.ToString();
                                /*                            if (DVTH.IsGiaoThau)
                                                            {
                                                                if (colInDb != TDKH.COL_DanhMucCongTac)
                                                                {
                                                                    MessageShower.ShowInformation("Chỉ có thể thay đổi tên Nhóm!");
                                                                    goto Return;
                                                                }

                                                                dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET Ten = '{newValStr}' WHERE Code = '{codeCongTac}'";
                                                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                                            }
                                                            else
                                                            {*/
                                if (colInDb == TDKH.COL_DanhMucCongTac)
                                {
                                    dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET Ten = @NewVal WHERE Code = '{codeCongTac}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });
                                }
                                else
                                {
                                    if (colInDb == "KhoiLuongToanBo")
                                        colInDb = "KhoiLuongKeHoach";
                                    dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET {colInDb} = @NewValue WHERE Code = '{codeCongTac}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                    //TDKHHelper.LoadCongTacDoBoc();
                                }

                                /*}  */

                                goto Return;
                            case MyConstant.TYPEROW_NhomDienGiai:
                                if (colInDb != TDKH.COL_DanhMucCongTac)
                                {
                                    MessageShower.ShowInformation("Chỉ có thể thay đổi tên Nhóm!");
                                    goto Return;
                                }

                                dbString = $"UPDATE {TDKH.TBL_NhomDienGiai} SET Ten = @NewVal WHERE Code = '{codeCongTac}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                goto Return;
                            case MyConstant.TYPEROW_CVCHIA:
                                if (colInDb == TDKH.COL_DBC_KhoiLuongToanBo || colInDb == TDKH.COL_KhoiLuongHopDongChiTiet)
                                {
                                    double RowCha = ws.Rows[e.RowIndex][dic[TDKH.COL_RowCha]].Value.NumericValue;
                                    double KLTBCha = ws.Rows[(int)RowCha - 1][dic[colInDb]].Value.NumericValue;
                                    string TypeRowNext = ws.Rows[e.RowIndex + 1][dic[TDKH.COL_TypeRow]].Value.TextValue;
                                    double KLCon = 0;
                                    if (TypeRowNext == MyConstant.TYPEROW_CVCha)
                                    {
                                        if (e.RowIndex + 2 - RowCha == 2)
                                        {
                                            if (double.Parse(e.Value.ToString()) > KLTBCha)
                                            {
                                                MessageShower.ShowError("Khối lượng công công việc chia không được lớn hơn khối lượng ban đầu!!!!");
                                                MyFunction.fcn_ReverseCell(e);
                                                goto Return;
                                            }
                                        }
                                        else
                                        {
                                            for (int i = (int)RowCha; i <= ws.GetUsedRange().BottomRowIndex; i++)
                                            {
                                                if (e.RowIndex - 1 == i)
                                                {
                                                    KLCon += double.Parse(e.Value.ToString());
                                                    codeCongTac = ws.Rows[i][dic[TDKH.COL_Code]].Value.TextValue;
                                                    double KLCL = KLTBCha - KLCon;
                                                    ws.Rows[i][dic[colInDb]].SetValue(KLCL);
                                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = '{KLCL}' " +
                        $"WHERE \"{TDKH.COL_Code}\" = '{codeCongTac}'";
                                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                                }
                                                else if (e.RowIndex == i)
                                                {
                                                    codeCongTac = ws.Rows[i][dic[TDKH.COL_Code]].Value.TextValue;
                                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = '{e.Value}' " +
                                  $"WHERE \"{TDKH.COL_Code}\" = '{codeCongTac}'";
                                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                                                    goto Return;
                                                }
                                                else
                                                {
                                                    KLCon += ws.Rows[i][dic[colInDb]].Value.NumericValue;
                                                }
                                            }



                                        }
                                    }
                                    else
                                    {
                                        for (int i = (int)RowCha; i <= ws.GetUsedRange().BottomRowIndex; i++)
                                        {
                                            TypeRowNext = ws.Rows[i + 1][dic[TDKH.COL_TypeRow]].Value.TextValue;
                                            if (TypeRowNext == MyConstant.TYPEROW_CVCha)
                                            {
                                                codeCongTac = ws.Rows[i][dic[TDKH.COL_Code]].Value.TextValue;
                                                double KLCL = KLTBCha - KLCon;
                                                ws.Rows[i][dic[colInDb]].SetValue(KLCL);
                                                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = '{KLCL}' " +
                    $"WHERE \"{TDKH.COL_Code}\" = '{codeCongTac}'";
                                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                                                goto Return;
                                            }
                                            else if (i == e.RowIndex)
                                            {
                                                KLCon += double.Parse(e.Value.ToString());
                                                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = '{e.Value}' " +
                                                    $"WHERE \"{TDKH.COL_Code}\" = '{codeCongTac}'";
                                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                            }
                                            else
                                            {
                                                KLCon += ws.Rows[i][dic[colInDb]].Value.NumericValue;
                                            }
                                        }
                                    }
                                }
                                else if (colInDb == TDKH.COL_DanhMucCongTac || colInDb == TDKH.COL_DonVi)
                                {
                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET {colInDb} = @NewVal WHERE " +
                                        $"Code='{codeCongTac}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                }
                                else
                                {
                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = @NewVal WHERE \"Code\" = '{codeCongTac}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });
                                }

                                goto Return;
                            default:
                                goto Return;
                        }
                        //return;
                    }

                    try
                    {
                        dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = @NewValue WHERE \"Code\" = '{codeCongTac}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                        if (colInDb == TDKH.COL_KhoiLuongHopDongChiTiet)
                            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                        goto Return;
                    }
                    catch
                    {

                    }

                    CapNhatCongTacCha:
                    ws.Calculate();
                    int indChaDBC = int.Parse(crRow[dic[TDKH.COL_RowCha]].Value.ToString()) - 1;
                    Row crRowCha1 = ws.Rows[indChaDBC];
                    string codeCha1 = crRowCha1[dic[TDKH.COL_Code]].Value.ToString();
                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} " +
                        $"SET \"KhoiLuongToanBo\" = '{crRowCha1[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue}' WHERE \"Code\" = '{codeCha1}'";
                    int num = DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    if (!TDKHPasting.IsPasting)
                        TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCha1 });

                    goto Return;
                }
                else if (ws.Name == TDKH.SheetName_KeHoachKinhPhi)
                {

                    //Dictionary<string, string> dic = dic;
                    codeCongTac = ws.Rows[e.RowIndex][dic[TDKH.COL_Code]].Value.ToString();

                    string typeRowCha = ws.Rows[e.RowIndex][dic[TDKH.COL_TypeRow]].Value.ToString();

                    if (!Guid.TryParse(codeCongTac, out guid))
                    {
                        MyFunction.fcn_ReverseCell(e);
                        goto Return;
                    }

                    string stringBD = (colHeading != dic[TDKH.COL_NgayBatDau])
                        ? ws.Rows[e.RowIndex][dic[TDKH.COL_NgayBatDau]].Value.ToString()
                        : newValStr;

                    string stringKT = (colHeading != dic[TDKH.COL_NgayKetThuc])
                        ? ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThuc]].Value.ToString()
                        : newValStr;

                    bool isBD = DateTime.TryParse(stringBD, out dayBD);
                    bool isKT = DateTime.TryParse(stringKT, out dayKT);

                    string stringBDTC = (colHeading != dic[TDKH.COL_NgayBatDauThiCong])
                        ? ws.Rows[e.RowIndex][dic[TDKH.COL_NgayBatDauThiCong]].Value.ToString()
                        : newValStr;

                    string stringKTTC = (colHeading != dic[TDKH.COL_NgayKetThucThiCong])
                        ? ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThucThiCong]].Value.ToString()
                        : newValStr;


                    bool isBDTC = DateTime.TryParse(stringBDTC, out dayBDTC);
                    bool isKTTC = DateTime.TryParse(stringKTTC, out dayKTTC);

                    var oldKetThuc = ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThuc]].Value.DateTimeValue;



                    if (colHeading == dic[TDKH.COL_SoNgayThiCong])
                    {
                        if (!isBDTC)
                        {
                            MessageShower.ShowError("Vui lòng nhập Ngày bắt đầu trước");

                        }

                        if (!int.TryParse(newValStr, out tryParse) || tryParse <= 0)
                        {
                            MessageShower.ShowWarning("Vui lòng nhập số nguyên dương cho ô này!");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }
                        else if (tryParse > MyConstant.MaxSoNgayThucHien)
                        {
                            MessageShower.ShowError($"Số ngày quá lớn (Vui lòng nhập không quá {MyConstant.MaxSoNgayThucHien} Ngày)");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }
                        else
                        {
                            dayKTTC = dayBDTC.AddDays(tryParse);
                            ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThucThiCong]].SetValue(dayKTTC);
                            ws.Rows[e.RowIndex][dic[TDKH.COL_SoNgayThiCong]].Formula = $"{dic[TDKH.COL_NgayKetThucThiCong]}{e.RowIndex + 2} - {dic[TDKH.COL_NgayBatDauThiCong]}{e.RowIndex + 1} + 1";
                            colHeading = dic[TDKH.COL_NgayKetThucThiCong];
                            newValStr = dayKTTC.ToString();
                        }
                    }

                    else if (colHeading == dic[TDKH.COL_SoNgayThucHien])
                    {
                        if (!isBD || !isKT)
                        {
                            MessageShower.ShowInformation("Vui lòng nhập đúng định dạng ngày bắt đầu và kết thúc");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }

                        if (!int.TryParse(newValStr, out tryParse) || tryParse <= 0)
                        {
                            MessageShower.ShowWarning("Vui lòng nhập số nguyên dương cho ô này!");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }
                        else if (tryParse > MyConstant.MaxSoNgayThucHien)
                        {
                            MessageShower.ShowError($"Số ngày quá lớn (Vui lòng nhập không quá {MyConstant.MaxSoNgayThucHien} Ngày)");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }
                        else
                        {

                            dayKT = dayBD.AddDays(tryParse - 1);
                            ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThuc]].SetValue(dayKT);
                            ws.Rows[e.RowIndex][dic[TDKH.COL_SoNgayThucHien]].Formula = $"{dic[TDKH.COL_NgayKetThuc]}{e.RowIndex + 1} - {dic[TDKH.COL_NgayBatDau]}{e.RowIndex + 1} + 1";
                            colHeading = dic[TDKH.COL_NgayKetThuc];

                            newValStr = dayKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);


                            if (!TDKHPasting.Codes.Contains(codeCongTac) && !BaseFrom.CheDoNhapKhongTinhToan)
                                TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                            else if (!BaseFrom.CheDoNhapKhongTinhToan)
                            {
                                ws.Rows[e.RowIndex][dic[TDKH.COL_CustomNote]].SetValue(true);
                            }
                            else
                            {
                                TDKHPasting.Codes.Add(codeCongTac);

                            }
                        }
                    }


                    var item = dic.Where(x => x.Value == colHeading);

                    string colInDb = (item.Any()) ? item.Single().Key : "";


                    if (colHeading == dic[TDKH.COL_DBC_KhoiLuongToanBo] || colHeading == dic[TDKH.COL_KhoiLuongHopDongChiTiet])
                    {
                        MessageShower.ShowError("Đây là khối lượng lấy từ bảng đo bóc", "Cảnh báo");
                        MyFunction.fcn_ReverseCell(e);
                        /*                    else
                                            {
                                                ws.Calculate();
                                                long KinhPhi = (long)ws.Rows[e.RowIndex][dicKH[TDKH.COL_KinhPhiDuKien]].Value.NumericValue;
                                                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET KinhPhiDuKien = '{KinhPhi}' WHERE Code = '{codeCongTac}'";
                                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                            }*/
                    }
                    else if (colHeading == dic[TDKH.COL_NgayBatDau] || colHeading == dic[TDKH.COL_NgayKetThuc])
                    {
                        if (!isBD && !isKT)
                        {
                            MessageShower.ShowInformation("Vui lòng nhập đúng định dạng ngày bắt đầu và kết thúc");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }
                        else if (!isBD)
                            dayBD = dayKT;
                        else if (!isKT)
                            dayKT = dayBD;

                        Color cl;
                        int soNgay = (dayKT - dayBD).Days + 1;


                        if (soNgay <= 0)
                        {
                            MessageShower.ShowInformation("Vui lòng nhập NGÀY KẾT THÚC > NGÀY BẮT ĐẦU");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }
                        else if (soNgay > MyConstant.MaxSoNgayThucHien)
                        {
                            MessageShower.ShowError($"Số ngày quá lớn (Vui lòng nhập không quá {MyConstant.MaxSoNgayThucHien} Ngày)");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }

                        newValStr = DateTime.Parse(newValStr).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

                        int indTypeRow = Array.IndexOf(MyConstant.TypeRows, typeRowCha);
                        if (indTypeRow >= 0 && indTypeRow < Array.IndexOf(MyConstant.TypeRows, MyConstant.TYPEROW_Nhom))
                        {

                            var dr = MessageShower.ShowYesNoQuestion("Bạn có muộn cập nhật ngày cho toàn bộ công tác con?");

                            if (dr == DialogResult.Yes)
                            {
                                int nextInd = SpreadsheetHelper.FindNextGreaterTypeInd(ws.Range[TDKH.RANGE_KeHoach], e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow]);
                                List<string> codes = new List<string>();
                                for (int i = e.RowIndex + 1; i <= nextInd; i++)
                                {
                                    string typeRowCtac = ws.Rows[i][dic[TDKH.COL_TypeRow]].Value.ToString();
                                    if (typeRowCtac == MyConstant.TYPEROW_CVCha)
                                    {
                                        string codeCha = ws.Rows[i][dic[TDKH.COL_Code]].Value.ToString();
                                        codes.Add(codeCha);
                                        ws.Rows[i][colHeading].SetValueFromText(newValStr);

                                        if (BaseFrom.CheDoNhapKhongTinhToan)
                                            ws.Rows[e.RowIndex][dic[TDKH.COL_CustomNote]].SetValue(true);

                                    }
                                }
                                if (codes.Any())
                                {
                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET {colInDb} = '{newValStr}' WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(codes)})";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                                    if (!BaseFrom.CheDoNhapKhongTinhToan)
                                        TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(codes);

                                    if (!TDKHPasting.Codes.Contains(codeCongTac) && !BaseFrom.CheDoNhapKhongTinhToan)
                                        TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                                    else if (!TDKHPasting.Codes.Contains(codeCongTac))
                                    {
                                        TDKHPasting.Codes.Add(codeCongTac);
                                    }
                                }
                            }
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }


                        if (ce_NgayTuDong.Checked && colHeading == dic[TDKH.COL_NgayKetThuc])
                        {
                            var olddate = oldKetThuc;
                            int offset = (dayKT - olddate).Days;

                            List<string> lsCongTac = new List<string>();
                            CellRange range = ws.Range[TDKH.RANGE_KeHoach];


                            var indCrHM = SpreadsheetHelper.FindPrevSameTypeInd(range, e.RowIndex, dic[TDKH.COL_RowCha], dic[TDKH.COL_TypeRow], MyConstant.TYPEROW_HangMuc);
                            if (indCrHM > 0)
                            {
                                string CodeHM = ws.Rows[indCrHM][dic[TDKH.COL_Code]].Value.ToString();
                                //dbString = $""


                                /*                            for (int i = indCrHM; i <= indNextHM; i++)
                                                            {
                                                                if (i == e.RowIndex)
                                                                    continue;
                                                                Row crRow = ws.Rows[i];
                                                                string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

                                                                if (typeRow == MyConstant.TYPEROW_HTPhanTuyen || typeRow == MyConstant.TYPEROW_HangMuc || typeRow == MyConstant.TYPEROW_CongTrinh)
                                                                    continue;

                                                                if (typeRow == MyConstant.TYPEROW_CVCha)
                                                                {
                                                                    string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
                                                                    lsCongTac.Add(code);
                                                                }
                                                            }*/

                                /*                            if (lsCongTac.Any())
                                                            {*/
                                dbString = $"SELECT cttk.* FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk\r\n" +
                                $"LEFT JOIN {TDKH.TBL_DanhMucCongTac} dmct\r\n" +
                                $"ON cttk.CodeCongTac = dmct.Code\r\n" +

                                $"WHERE COALESCE(cttk.CodeHangMuc, dmct.CodeHangMuc) = '{CodeHM}'\r\n" +
                                $"AND cttk.{DVTH.ColCodeFK} = '{DVTH.Code}'\r\n" +
                                $"AND cttk.NgayBatDau >= '{olddate.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
                                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                                foreach (DataRow dr in dt.Rows)
                                {
                                    dr["NgayBatDau"] = DateTime.Parse(dr["NgayBatDau"].ToString()).AddDays(offset).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                                    dr["NgayKetThuc"] = DateTime.Parse(dr["NgayKetThuc"].ToString()).AddDays(offset).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                                }

                                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_ChiTietCongTacTheoKy);
                                var colummCode = ws.Columns[dic[TDKH.COL_Code]];

                                foreach (DataRow dr in dt.Rows)
                                {
                                    string code = (string)dr["Code"];
                                    var ind = colummCode.Search(code, MyConstant.MySearchOptions).Single().RowIndex;
                                    var crRow = ws.Rows[ind];
                                    crRow[dic[TDKH.COL_NgayBatDau]].SetValueFromText(dr["NgayBatDau"].ToString());
                                    crRow[dic[TDKH.COL_NgayKetThuc]].SetValueFromText(dr["NgayKetThuc"].ToString());
                                }
                                //}
                            }

                        }

                        CellRange rangeFm = ws.Range[$"{dic[TDKH.COL_SoNgayThucHien]}{e.RowIndex + 1}:" +
                            $"{dic[TDKH.COL_NgayKetThuc]}{e.RowIndex + 1}"];
                        if (colHeading == dic[TDKH.COL_NgayBatDau])
                        {
                            bool isBDGT = DateTime.TryParse(ws.Rows[e.RowIndex][dic[TDKH.COL_NgayBatDauGT]].Value.ToString(), out dayBDGT);
                            if (isBDGT && dayBDGT.Date > dayBD)
                            {
                                ws.Rows[e.RowIndex][e.ColumnIndex].Font.Color = MyConstant.colorNhanhCham;
                                MessageShower.ShowWarning("Ngày bắt đầu đang nhỏ hơn Ngày bắt đầu Giao Thầu");
                            }
                        }
                        else if (colHeading == dic[TDKH.COL_NgayKetThuc])
                        {
                            bool isKTGT = DateTime.TryParse(ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThucGT]].Value.ToString(), out dayKTGT);
                            if (isKTGT && dayKTGT.Date < dayKT)
                            {
                                ws.Rows[e.RowIndex][e.ColumnIndex].Font.Color = MyConstant.colorNhanhCham;
                                MessageShower.ShowWarning("Ngày kết thúc lớn hơn Ngày kết thúc bên Giao Thầu");
                            }
                        }


                        //rangeFm.Font.Color = cl;

                        /*                    dbString = $"SELECT {GiaoViec.TBL_CONGVIECCHA}.NgayBatDau, {GiaoViec.TBL_CONGVIECCHA}.NgayKetThuc " +
                                                $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                                                $"INNER JOIN {GiaoViec.TBL_CONGVIECCHA} " +
                                                $"ON {GiaoViec.TBL_CONGVIECCHA}.CodeCongTacTheoGiaiDoan = {TDKH.TBL_ChiTietCongTacTheoKy}.Code " +
                                                $"WHERE {TDKH.TBL_ChiTietCongTacTheoKy}.Code = '{codeCongTac}'";

                                            DataTable dtGiaoViec = DataProvider.InstanceTHDA.ExecuteQuery(dbString);*/


                        /*                    if (dayBD < dayKT)
                                            {
                                                //MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(ws.Rows[e.RowIndex]);
                                                //DinhMucHelper.CapNhatVatTuTheoHaoPhiVaoVatTu(codeCongTac);
                                            }*/
                    }
                    else if (colHeading == dic[TDKH.COL_TrangThai])
                    {
                        DinhMucHelper.capNhatTrangThaiCacBang(codeCongTac, SourceDataEnum.TDKH, newValStr);
                    }
                    else if (colHeading == dic[TDKH.COL_NgayBatDauThiCong]
                        || colHeading == dic[TDKH.COL_NgayKetThucThiCong])
                    {
                        if (!DateTime.TryParse(newValStr, out DateTime tryP))
                        {
                            MessageShower.ShowError("Vui lòng nhập đúng định dạng ngày tháng!");
                            MyFunction.fcn_ReverseCell(e);
                            goto Return;
                        }
                        if (isBDTC && isKTTC)
                        {
                            Color cl;
                            if (dayBDTC > dayKTTC)
                                cl = MyConstant.color_Error;
                            else cl = MyConstant.color_Nomal;

                            CellRange rangeFm = ws.Range[$"{dic[TDKH.COL_SoNgayThucHien]}{e.RowIndex + 1}:" +
                                $"{dic[TDKH.COL_NgayKetThucThiCong]}{e.RowIndex + 1}"];
                            rangeFm.Font.Color = cl;
                        }

                        newValStr = DateTime.Parse(newValStr).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                        //dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = '{DateTime.Parse(newValStr).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE \"Code\" = '{codeCongTac}'";
                        //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);


                        //if (dayBD < dayKT)
                        //{
                        //    MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(ws.Rows[e.RowIndex]);
                        //    //DinhMucHelper.CapNhatVatTuTheoHaoPhiVaoVatTu(codeCongTac);
                        //}
                    }

                    try
                    {
                        string typeRow = ws.Rows[e.RowIndex][dic[TDKH.COL_TypeRow]].Value.ToString();

                        if (typeRow == MyConstant.TYPEROW_CVCha)
                        {
                            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = @NewVal WHERE \"Code\" = '{codeCongTac}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                            if (colHeading == dic[TDKH.COL_NgayBatDau]
                                || colHeading == dic[TDKH.COL_NgayKetThuc] || colHeading == dic[TDKH.COL_DonGia]
                                || colHeading == dic[TDKH.COL_SoNgayThucHien])
                            {
                                if (colHeading == dic[TDKH.COL_DonGia])
                                {
                                    ws.Calculate();
                                    long KinhPhi = (long)ws.Rows[e.RowIndex][dic[TDKH.COL_KinhPhiDuKien]].Value.NumericValue;
                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET KinhPhiDuKien = '{KinhPhi}' WHERE Code = '{codeCongTac}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                }

                                if (!TDKHPasting.IsPasting && !BaseFrom.CheDoNhapKhongTinhToan)
                                    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                                else if (BaseFrom.CheDoNhapKhongTinhToan)
                                {
                                    ws.Rows[e.RowIndex][dic[TDKH.COL_CustomNote]].SetValue(true);
                                }
                                else if (!TDKHPasting.Codes.Contains(codeCongTac))
                                    TDKHPasting.Codes.Add(codeCongTac);


                                ctrl_NhapKLHN.pushData(StateNP, DVTH, dic, false, TypeKLHN.CongTac, codeCongTac);
                            }

                            else if (colHeading == dic[TDKH.COL_NgayBatDauThiCong]
                            || colHeading == dic[TDKH.COL_NgayKetThucThiCong] || colHeading == dic[TDKH.COL_DonGiaThiCong]
                            || colHeading == dic[TDKH.COL_SoNgayThucHien]
                            || colHeading == dic[TDKH.COL_TrangThai])
                            {
                                //MyFunction.Fcn_CalKLKHNew(TypeKLHN.CongTac, new string[] { codeCongTac });
                                ctrl_NhapKLHN.pushData(StateNP, DVTH, dic, false, TypeKLHN.CongTac, codeCongTac);
                            }
                        }
                        else if (typeRow == MyConstant.TYPEROW_Nhom)
                        {
                            dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET \"{colInDb}\" = @NewVal WHERE \"Code\" = '{codeCongTac}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });



                            if (!TDKHPasting.Codes.Contains(codeCongTac) && !BaseFrom.CheDoNhapKhongTinhToan)
                            {


                            }
                            else if (BaseFrom.CheDoNhapKhongTinhToan)
                            {
                                ws.Rows[e.RowIndex][dic[TDKH.COL_CustomNote]].SetValue(true);
                            }
                            else
                            {
                                TDKHPasting.CodesNhom.Add(codeCongTac);
                            }


                        }
                    }
                    catch
                    {

                    }

                }
                else if (TDKH.sheetsName.Contains(ws.Name) && Array.IndexOf(TDKH.sheetsName, ws.Name) >= 2)
                {
                    int type = Array.IndexOf(TDKH.sheetsName, ws.Name);
                    //CellRange rangeNgay = wb.Range[TDKH.rangesNgayName[type]];
                    CellRange rangeData = wb.Range[TDKH.rangesNameData[type]];

                    int cellInd = e.RowIndex;
                    Cell cell = e.Cell;
                    //Dictionary<string, string> dic = dicKPVL_All;
                    Row crRow = ws.Rows[cellInd];
                    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    codeCongTac = crRow[dic[TDKH.COL_Code]].Value.ToString();
                    //Dictionary<string, int> dicDate = MyFunction.fcn_getDicDate(rangeNgay);
                    //Row rowDate = ws.Rows[rangeNgay.TopRowIndex];
                    string codeHP = crRow[dic[TDKH.COL_KHVT_Search]].Value.ToString();

                    if (rangeData.Contains(cell))
                    {
                        string colName = dic.Single(x => x.Value == colHeading).Key;

                        //string stringBD = ws.Rows[e.RowIndex][dic[TDKH.COL_NgayBatDau]].Value.ToString();
                        //string stringKT = ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThuc]].Value.ToString();
                        //if (colName == TDKH.COL_NgayBatDau || colName == TDKH.COL_NgayKetThuc)
                        //{
                        //    if (!DateTime.TryParse(stringBD, out dayBD) ||
                        //        !DateTime.TryParse(stringKT, out dayKT))
                        //    {
                        //        MessageShower.ShowInformation("Vui lòng nhập đúng định dạng ngày bắt đầu và kết thúc");
                        //        e.Cancel = true;
                        //        goto Return;
                        //    }
                        //}

                        string stringBDTC = (colHeading != dic[TDKH.COL_NgayBatDauThiCong])
                            ? ws.Rows[e.RowIndex][dic[TDKH.COL_NgayBatDauThiCong]].Value.ToString()
                            : newValStr;

                        string stringKTTC = (colHeading != dic[TDKH.COL_NgayKetThucThiCong])
                            ? ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThucThiCong]].Value.ToString()
                            : newValStr;


                        bool isBDTC = DateTime.TryParse(stringBDTC, out dayBDTC);
                        bool isKTTC = DateTime.TryParse(stringKTTC, out dayKTTC);

                        if (colHeading == dic[TDKH.COL_SoNgayThiCong] || colHeading == dic[TDKH.COL_NgayBatDauThiCong]
                            || colHeading == dic[TDKH.COL_NgayKetThucThiCong])
                        {
                            MessageShower.ShowWarning("Vui lòng nhập khối lượng thi công hàng ngày bên phải, Ngày tháng sẽ được cập nhật tự động");
                            goto Return;
                            //if (!isBDTC)
                            //{
                            //    MessageShower.ShowError("Vui lòng nhập Ngày bắt đầu trước");
                            //    MyFunction.fcn_ReverseCell(e);
                            //    goto Return;

                            //}

                            //if (!int.TryParse(newValStr, out tryParse) || tryParse <= 0)
                            //{
                            //    MessageShower.ShowWarning("Vui lòng nhập số nguyên dương cho ô này!");
                            //    MyFunction.fcn_ReverseCell(e);
                            //    goto Return;
                            //}
                            //else if (tryParse > MyConstant.MaxSoNgayThucHien)
                            //{
                            //    MessageShower.ShowError($"Số ngày quá lớn (Vui lòng nhập không quá {MyConstant.MaxSoNgayThucHien} Ngày)");
                            //    MyFunction.fcn_ReverseCell(e);
                            //    goto Return;
                            //}
                            //else
                            //{
                            //    dayKTTC = dayBDTC.AddDays(tryParse);

                            //    ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThucThiCong]].SetValue(dayKTTC);
                            //    ws.Rows[e.RowIndex][dic[TDKH.COL_SoNgayThiCong]].Formula = $"{dic[TDKH.COL_NgayKetThucThiCong]}{e.RowIndex + 1} - {dic[TDKH.COL_NgayBatDauThiCong]}{e.RowIndex + 1} + 1";

                            //    newValStr = dayKTTC.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                            //    colName = TDKH.COL_NgayKetThucThiCong;
                            //}
                        }


                        if (typeRow == MyConstant.TYPEROW_CVCha)
                        {
                            if (colName == TDKH.COL_DonGia || colName == TDKH.COL_DonGiaThiCong)
                            {
                                if (!int.TryParse(e.Value.ToString(), out int DonGia))
                                {
                                    MessageShower.ShowInformation("Vui lòng nhập số nguyên cho đơn giá!");
                                    MyFunction.fcn_ReverseCell(e);
                                    goto Return;

                                }

                                dbString = $"UPDATE {TDKH.TBL_KHVT_VatTu} SET {colName} = @NewVal WHERE Code = '{codeCongTac}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });

                                //if (colName != TDKH.COL_DonGiaThiCong)
                                //{

                                var indsCon = ws.Columns[dic[TDKH.COL_RowCha]].Search((e.RowIndex + 1).ToString(), MyConstant.MySearchOptions)
                                    .Select(x => x.RowIndex).ToArray();
                                List<string> codeCons = new List<string>();
                                foreach (var indCon in indsCon)
                                {
                                    Row crRowCon = ws.Rows[indCon];
                                    string codeCon = crRowCon[dic[TDKH.COL_Code]].Value.ToString();
                                    crRowCon[dic[colName]].SetValueFromText(newValStr);

                                    codeCons.Add(codeCon);
                                }
                                string query = $"UPDATE {TDKH.Tbl_HaoPhiVatTu} SET {colName} = @NewVal WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(codeCons)})";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(query, parameter: new object[] { newValStr });

                                //string[] codesHaoPhiTuongUng = ws.Columns[dic[TDKH.COL_RowCha]].Search((e.RowIndex + 1).ToString(), MyConstant.MySearchOptions)
                                //        .Select(x => $"'{ws.Rows[x.RowIndex][dic[TDKH.COL_KHVT_Search]].Value}'").ToArray();

                                //    dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu} SET {colName} = '{newValStr}' WHERE Code IN ({string.Join(", ", codesHaoPhiTuongUng)})";
                                //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                ////}
                                //string codeVT = crRow[dic[TDKH.COL_Code]].Value.ToString();
                                //string codeHMuc = MyFunction.GetCodeHangMucFromCodeHaoPhi(codeVT);

                                //MyFunction.Fcn_CalKLKHNew(TypeKLHN.VatLieu, new string[] { codeVT });
                                //DinhMucHelper.SaveVatTuTheoHangMuc(new string[] { codeHMuc });
                            }
                            goto Return;

                        }
                        else if (typeRow == MyConstant.TYPEROW_CVCON) //Hao phí vật tư
                        {
                            if (colName == TDKH.COL_DonGiaThiCong)
                            {
                                if (!int.TryParse(e.Value.ToString(), out int DonGia))
                                {
                                    MessageShower.ShowInformation("Vui lòng nhập số nguyên cho đơn giá!");
                                    MyFunction.fcn_ReverseCell(e);
                                    goto Return;

                                }

                                dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu} SET {colName} = @NewVal WHERE Code = '{codeCongTac}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newValStr });
                            }
                            //if (colName == TDKH.COL_NgayBatDau || colName == TDKH.COL_NgayKetThuc)
                            //{

                            //    string dateString = DateTime.Parse(newValStr).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                            //    dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu} SET {colName} = '{dateString}' WHERE Code = '{codeHP}'";
                            //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            //    //DinhMucHelper.TinhLaiKhoiLuongKeHoach(TypeKLHN.HaoPhiVatTu, codeHP, crRow);
                            //    goto Return;

                            //}
                            //else if (colName == TDKH.COL_DBC_KhoiLuongToanBo)
                            //{
                            //    //DinhMucHelper.TinhLaiKhoiLuongKeHoach(TypeKLHN.HaoPhiVatTu, codeHP, crRow);
                            //    //DinhMucHelper.SaveVatTuUngVoiRowHaoPhi_VatTu(crRow);
                            //    //goto Return;
                            //}
                        }
                        else
                        {
                            MyFunction.fcn_ReverseCell(e);// = true;
                        }
                    }
                }
                Return:
                if (TDKHPasting.IsPasting && TDKHPasting.LastCell.GetReferenceA1() == e.Cell.GetReferenceA1())
                {
                    TDKHPasting.IsPasting = false;
                    if (!BaseFrom.CheDoNhapKhongTinhToan)
                    {
                        if (TDKHPasting.Codes?.Any() == true)
                            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(TDKHPasting.Codes);

                    }

                }
                wb.EndUpdate();

                if (isReloadDoBoc)
                    TDKHHelper.LoadCongTacDoBoc();
            }
            catch (Exception ex)
            {
                var err = $"Lỗi LKH CellValueChanged: ERR: {ex.Message}__Inner: {ex.InnerException?.Message}";
                Logging.Error(err);

                MyFunction.fcn_ReverseCell(e);
                if (!TDKHPasting.IsPasting)
                {
                    MessageShower.ShowWarning("Lỗi thay đổi giá trị");
                }
                wb.EndUpdate();

            }
        }


        /*private void spsheet_TD_KH_LapKeHoach_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            Worksheet ws = e.Worksheet;
            IWorkbook wb = ws.Workbook;
            string newVal = e.Value.ToString();
            string colHeading = ws.Columns[e.ColumnIndex].Heading;
            //string colIndb = ws.Columns[e.ColumnIndex][0].Value.ToString();
            int IndexOf1stDate = wb.Range[TDKH.RANGE_KeHoach].RightColumnIndex + 1;
            int tryParse;
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            NavigationPaneState StateNP = np_KhoiLuongHangNgay.State;
            wb.BeginUpdate();
            wb.Calculate();
            if (e.Cell == wb.Range[TDKH.RANGE_KinhPhiPhanBoToanDuAn].First())
            {
                long KPDK = 0;
                if (!long.TryParse(e.Value.ToString(), out KPDK))
                {
                    MyFunction.fcn_ReverseCell(e);
                }
                goto Return;
            }

            string[] lsSoThuc =
            {
                TDKH.COL_DBC_KhoiLuongToanBo,
                TDKH.COL_KhoiLuongHopDongDuAn,
                TDKH.COL_PhanTramThucHien,
                TDKH.COL_DonGia,
                TDKH.COL_GiaTri,
                TDKH.COL_SoNgayThucHien,
                TDKH.COL_SoNgayThiCong,
                TDKH.COL_NhanCong,
                TDKH.COL_KinhPhiDuKien,
                TDKH.COL_GiaTri,
                TDKH.COL_GiaTriThiCong,
                TDKH.COL_DBC_HeSoCauKien,
            };

            string[] lsSoNguyen =
            {
                TDKH.COL_DBC_SoBoPhanGiongNhau,
                TDKH.COL_DBC_Dai,
                TDKH.COL_DBC_Rong,
                TDKH.COL_DBC_Cao,
            };

            string[] lsNgay =
            {
                TDKH.COL_NgayBatDau,
                TDKH.COL_NgayBatDauThiCong,
                TDKH.COL_NgayKetThuc,
                TDKH.COL_NgayKetThucThiCong,
            };

            //CellRange rangeNgay;
            DateTime dayBD, dayKT;
            string dbString = "";
            Guid guid;

            string codeCongTac;
            if (ws.Name == TDKH.SheetName_DoBocChuan)
            {
                string colInDb = ws.Rows[0][e.ColumnIndex].Value.ToString();
                CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
                Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(range);
                Row crRow = ws.Rows[e.RowIndex];
                codeCongTac = crRow[dic[TDKH.COL_Code]].Value.ToString();
                string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                bool isHaveCode = Guid.TryParse(codeCongTac, out guid); //Trường hợp là dòng trống, chưa có công tác

                if (!range.Contains(e.Cell))
                {
                    MyFunction.fcn_ReverseCell(e);
                    goto Return;

                }

                if (colInDb == TDKH.COL_MaHieuCongTac)
                {
                    if (newVal.ToUpper() == MyConstant.CONST_TYPE_HANGMUC)
                    {
                        MyFunction.fcn_ReverseCell(e);

                        BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                        {
                            TextBox tb = FindTextBox(ss.Controls);
                            if (tb != null)
                            {
                                tb.TextChanged -= fcn_handle_txtBoxTimKiem_TextChange;
                            }
                        }), sender as SpreadsheetControl);
                        m_ctrlTKDM.Hide();

                        Column colTypeRow = ws.Columns[dic[TDKH.COL_TypeRow]];
                        Column colRowCha = ws.Columns[dic[TDKH.COL_RowCha]];

                        Row RowCongTrinh = ws.Range.FromLTRB(colTypeRow.Index, range.TopRowIndex, colTypeRow.Index, e.Cell.RowIndex)
                                            .Search(MyConstant.TYPEROW_CongTrinh, MyConstant.MySearchOptions)
                                            .Select(x => ws.Rows[x.RowIndex])
                                            .LastOrDefault();

                        if (RowCongTrinh is null)
                        {
                            MessageShower.ShowInformation("Lỗi tìm công trình");
                            goto Return;

                        }
                        string codeCongTrinh = RowCongTrinh[dic[TDKH.COL_Code]].Value.ToString();
                        Cell cellPrevHM = colRowCha.Search((RowCongTrinh.Index + 1).ToString(), MyConstant.MySearchOptions).Where(x => x.RowIndex < e.RowIndex).LastOrDefault();

                        int indNewHM;// = (cellPrevHM is null)?0:;
                        if (cellPrevHM is null)
                        {
                            indNewHM = 0;
                        }
                        else
                        {
                            dbString = $"SELECT SortId FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE Code = '{ws.Rows[cellPrevHM.RowIndex][dic[TDKH.COL_Code]].Value}'";
                            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                            if (dt.Rows.Count != 1)
                            {
                                MessageShower.ShowInformation("Lỗi hạng mục");
                                goto Return;

                            }

                            indNewHM = int.Parse(dt.Rows[0][0].ToString()) + 1;
                        }

                        string newCodeHM = Guid.NewGuid().ToString();
                        dbString = $"UPDATE {MyConstant.TBL_THONGTINHANGMUC} SET SortId = SortId + 1 WHERE SortId >= {indNewHM}";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                        dbString = $"INSERT INTO {MyConstant.TBL_THONGTINHANGMUC} (Code, CodeCongTrinh, Ten, SortId) VALUES " +
                            $"('{newCodeHM}', '{codeCongTrinh}', 'Hạng mục mới', '{indNewHM}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                        string[] codesCongTacNeedChange = colRowCha.Search((cellPrevHM.RowIndex + 1).ToString(), MyConstant.MySearchOptions)
                            .Where(x => x.RowIndex >= e.RowIndex)
                            .Select(x => $"'{ws.Rows[x.RowIndex][dic[TDKH.COL_Code]].Value}'")
                            .ToArray();

                        if (codesCongTacNeedChange.Any())
                        {
                            dbString = $"SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE Code IN ({string.Join(", ", codesCongTacNeedChange)})";
                            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                            string[] codesDMCT = dt.AsEnumerable().Select(x => $"'{x["CodeCongTac"]}'").ToArray();

                            dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET CodeHangMuc = '{newCodeHM}' WHERE Code IN ({string.Join(", ", codesDMCT)})";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }

                        GiaoViecHelper.LoadAllKeHoachGiaoViecThiCong();
                        fcn_LoadCongTacDoBoc();
                        goto Return;


                    }
                    else if (typeRow == MyConstant.TYPEROW_CVCha)
                    {
                        dbString = $"SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE Code = '{codeCongTac}'";
                        DataTable dtKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                        dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET \"{colInDb}\" = '{newVal}' WHERE \"Code\" = '{dtKy.Rows[0][0]}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                        dbString = $"SELECT * FROM tbl_DinhMucAll WHERE MaDinhMuc = '{newVal}'";
                        DataTable dtDm = DataProvider.InstanceTBT.ExecuteQuery(dbString);

                        if (dtDm.Rows.Count == 0)
                            e.Cell.FillColor = MyColor.InvalidMHCT;
                        else
                            e.Cell.FillColor = MyColor.NormalBackground;

                    }
                    goto Return;

                }


                if (!Guid.TryParse(codeCongTac, out guid)) //Trường hợp là dòng trống, chưa có công tác
                {
                    string newGuid = Guid.NewGuid().ToString();
                    Row crRowCha = null;
                    for (int i = e.RowIndex - 1; i > range.TopRowIndex; i--)
                    {
                        string typeRowTemp = ws.Rows[i][dic[TDKH.COL_TypeRow]].Value.ToString();

                        if (typeRowTemp == MyConstant.TYPEROW_CVCha)
                        {
                            crRowCha = ws.Rows[i];
                            break;
                        }
                    }

                    if (crRowCha == null)
                    {
                        MessageShower.ShowInformation("Không thể tìm công tác cha");
                        goto Return;
                    }
                    string codeCha = crRowCha[dic[TDKH.COL_Code]].Value.ToString();
                    dbString = $"INSERT INTO {TDKH.TBL_ChiTietCongTacCon} (\"Code\", \"CodeCongTacCha\", \"{ws.Rows[0][colHeading].Value}\") VALUES " +
                        $"('{newGuid}', '{codeCha}', '{newVal}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    crRow[dic[TDKH.COL_Code]].SetValue(newGuid);
                    crRow[dic[TDKH.COL_RowCha]].Formula = $"ROW(A{crRowCha.Index + 1})";
                    crRow[dic[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCON);
                    TDKHHelper.fcn_TDKH_UpdateRowConTheoTenCongTac_Suacongtac(ws, crRow.Index);

                    crRow.Font.Bold = false;
                    crRow.Font.Color = MyConstant.color_Row_DienGiai;

                    //if (crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].Value.ToString() == true.ToString())
                    //{
                        crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"+ {dic[TDKH.COL_DBC_KL1BoPhan]}{e.RowIndex + 1}" + crRowCha[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Formula.Replace("=", "");
                        goto CapNhatCongTacCha;
                    //}

                }
                else
                {
                    switch (typeRow)
                    {
                        case MyConstant.TYPEROW_CVCha:

                            if (colInDb == TDKH.COL_CustomOrder)
                            {
                                if (!int.TryParse(newVal, out int newOrder))
                                {
                                    MessageShower.ShowError("Vui lòng nhập số nguyên dương!");
                                    MyFunction.fcn_ReverseCell(e);
                                    goto Return;
                                }

                                int oldOrder = 0;
                                int.TryParse(newVal, out newOrder);
                                int.TryParse(e.OldValue.ToString(), out oldOrder);


                                int IndcrRowHMDoBoc = (int)crRow[dic[TDKH.COL_RowCha]].Value.NumericValue - 1;

                                string codeHM = ws.Rows[IndcrRowHMDoBoc][dic[TDKH.COL_Code]].Value.ToString();

                                int indColRowChaDb = ws.Columns[dic[TDKH.COL_RowCha]].Index;

                                Row[] rowsCha = ws.Range.FromLTRB(indColRowChaDb, range.TopRowIndex, indColRowChaDb, range.BottomRowIndex)
                                                .Search((IndcrRowHMDoBoc + 1).ToString(), MyConstant.MySearchOptions).Select(x => ws.Rows[x.RowIndex]).ToArray();


                                if (newOrder <= 0)
                                {
                                    newOrder = 1;
                                    newVal = newOrder.ToString();
                                }
                                else if (newOrder > rowsCha.Length)
                                {
                                    newOrder = rowsCha.Length;
                                    newVal = newOrder.ToString();

                                }
                                if (newOrder == oldOrder)
                                {
                                    e.Cell.Value = newOrder;
                                    goto Return;
                                }

                                int heSo = (newOrder > oldOrder) ? -1 : 1;
                                int min = Math.Min(newOrder, oldOrder);
                                int max = Math.Max(newOrder, oldOrder);

                                //var DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
                                dbString = $"SELECT {TDKH.TBL_ChiTietCongTacTheoKy}.* " +
                                                    $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                                                    $"JOIN {TDKH.TBL_DanhMucCongTac} " +
                                                    $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac = {TDKH.TBL_DanhMucCongTac}.Code " +
                                                    $"WHERE CodeGiaiDoan = '{SharedControls.cbb_DBKH_ChonDot.SelectedValue}' AND {DVTH.ColCodeFK} = '{DVTH.Code}' " +
                                                    $"AND CodeHangMuc = '{codeHM}' " +
                                                    $"AND ((CustomOrder > '{min}' AND CustomOrder < '{max}') OR CustomOrder = '{newOrder}')";

                                DataTable dtNew = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                                foreach (DataRow dr in dtNew.Rows)
                                {

                                    if (int.TryParse(dr["CustomOrder"].ToString(), out int customOrderParse))
                                        dr["CustomOrder"] = customOrderParse + heSo;
                                }

                                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNew, TDKH.TBL_ChiTietCongTacTheoKy);

                                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET {TDKH.COL_CustomOrder} = '{newOrder}' WHERE \"Code\" = '{codeCongTac}'";
                                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                                foreach (Row rowSheet in rowsCha)
                                {
                                    if (int.TryParse(rowSheet[dic[TDKH.COL_CustomOrder]].Value.ToString(), out int ind))
                                    {
                                        if ((ind > min && ind < max) || ind == newOrder)
                                            rowSheet[dic[TDKH.COL_CustomOrder]].SetValue(ind + heSo);
                                    }
                                }
                                e.Cell.Value = newOrder;
                                goto Return;
                            }    
                            else if (colInDb.Contains('_')) //Là công tác phát sinh
                            {
                                double val = -1;
                                if (!double.TryParse(newVal, out val) || val < 0)
                                {
                                    MessageShower.ShowInformation("Vui lòng nhập số thực dương");
                                    MyFunction.fcn_ReverseCell(e);
                                    goto Return;
                                }

                                dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"Code\" = '{codeCongTac}'";
                                DataTable dtCTac = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                if (dtCTac.Rows.Count != 1)
                                {
                                    MessageShower.ShowInformation("Lỗi lấy codeCha danh mục công tác");
                                    goto Return;
                                }

                                string codeDMCT = dtCTac.Rows[0]["CodeCongTac"].ToString();
                                string CodePhatSinh = colInDb.Split('_').Last();
                                string TenPhatSinh = colInDb.Split('_').First();
                                string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();

                                dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodePhatSinh\" = '{CodePhatSinh}' " +
                                    $"AND \"CodeCongTac\" = '{codeDMCT}' AND {condition}";
                                DataTable dtCTacPhatSinh = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                switch (dtCTacPhatSinh.Rows.Count)
                                {
                                    case 0:
                                        DataRow newRow = dtCTacPhatSinh.NewRow();
                                        string newCode = Guid.NewGuid().ToString();
                                        newRow["Code"] = newCode;
                                        newRow["CodeCongTac"] = codeDMCT;
                                        newRow["CodeGiaiDoan"] = cbb_DBKH_ChonDot.SelectedValue.ToString();
                                        newRow["CodePhatSinh"] = CodePhatSinh;
                                        newRow["KhoiLuongToanBo"] = val;
                                        newRow["NgayBatDau"] *//*= newRow["NgayBatDauThiCong"]*//* = DateTime.Now.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                                        newRow["NgayKetThuc"] *//*= newRow["NgayKetThucThiCong"]*//* = DateTime.Now.AddDays(9).Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

                                        DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
                                        if (dvth != null)
                                            newRow[dvth.ColCodeFK] = dvth.Code;

                                        dtCTacPhatSinh.Rows.Add(newRow);
                                        DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtCTacPhatSinh, TDKH.TBL_ChiTietCongTacTheoKy);
                                        //fcn_TDKH_ThemDinhMucMacDinhChoCongTac(newCode, crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString());

                                        //Thêm định mức cho phát sinh giống kế hoạch
                                        MyFunction.fcn_TDKH_CopyDinhMuc(codeCongTac, newCode, TDKH.Tbl_HaoPhiVatTu);

                                        *//*IEnumerable<Cell>*//*//[] cells = { null, null };
                                        int crIndKeHoach = -1;
                                        for (int i = 1; i < 2; i++)
                                        {
                                            string colBD = TDKH.dicsAll[i][TDKH.ColsNgayBatDau[i]];
                                            string colKT = TDKH.dicsAll[i][TDKH.ColsNgayKetThuc[i]];
                                            Worksheet crWs = wb.Worksheets[TDKH.wss_Name[i]];
                                            Dictionary<string, string> crDicRef = TDKH.dicsRef[i];
                                            Dictionary<string, string> crDicAll = TDKH.dicsAll[i];
                                            //Dictionary<string, string> crDic = TDKH.dicsAll[i];
                                            IEnumerable<Cell> cells = crWs.Columns[crDicRef[TDKH.COL_Code]].Search(codeCongTac);
                                            int indCha, crInd;
                                            if (cells.Count() == 1)
                                            {
                                                int ind = cells.First().RowIndex;
                                                crWs.Rows.Insert(ind + 1, 2, RowFormatMode.FormatAsPrevious);
                                                crWs.Rows[ind + 1].CopyFrom(crWs.Rows[ind]);
                                                crWs.Rows[ind][crDicAll[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVTong);
                                                foreach (var item in crDicRef)
                                                {
                                                    if (!TDKH.lsColRowTongKeHoachCapNhat.Contains(item.Key))
                                                    {
                                                        crWs.Rows[ind][item.Value].SetValue(0);
                                                    }
                                                }

                                                crWs.Rows[ind + 1][crDicRef[TDKH.COL_DanhMucCongTac]].SetValue("Kế hoạch");
                                                crWs.Rows[ind + 1][crDicRef[TDKH.COL_MaHieuCongTac]].SetValue("");
                                                crWs.Rows[ind + 1].Font.Color = MyConstant.color_Row_DienGiai;
                                                crWs.Rows[ind + 1][crDicAll[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCON);

                                                //DinhMucHelper.fcn_TDKH_CapNhatRowChaConTienDoKeHoach(crWs.Rows[ind], crWs.Rows[ind + 1]);
                                                //MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(crWs.Rows[ind + 1]);
                                                indCha = ind;
                                                crInd = ind + 2;


                                            }
                                            else
                                            {
                                                int IndTong = cells.First().RowIndex;

                                                // Specify search options.
                                                SearchOptions options = new SearchOptions();
                                                //options.SearchBy = SearchBy.Columns;
                                                options.SearchIn = SearchIn.ValuesAndFormulas;
                                                options.MatchEntireCellContents = true;

                                                IEnumerable<Cell> cellLastRow = crWs.Columns[crDicAll[TDKH.COL_RowCha]].Search($"{IndTong + 1}", options);
                                                int indLastRow = cellLastRow.Last().RowIndex;
                                                indCha = int.Parse(crWs.Rows[indLastRow][crDicAll[TDKH.COL_RowCha]].Value.ToString()) - 1;
                                                crWs.Rows.Insert(indLastRow + 1, 1, RowFormatMode.FormatAsPrevious);
                                                crInd = indLastRow + 1;
                                            }

                                            Row crRowPs = crWs.Rows[crInd];
                                            crRowPs[crDicRef[TDKH.COL_DanhMucCongTac]].SetValue(TenPhatSinh);
                                            crRowPs[crDicRef[TDKH.COL_Code]].SetValue(newCode);
                                            crRowPs[crDicRef[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"'{TDKH.SheetName_DoBocChuan}'!{dic[colInDb]}{e.RowIndex + 1}";
                                            crRowPs[colBD].SetValue(DateTime.Now.Date);
                                            crRowPs[colKT].SetValue(DateTime.Now.Date.AddDays(9));
                                            crRowPs.Font.Color = MyConstant.color_PhatSinh;
                                            crRowPs[crDicAll[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCON);

                                            if (crWs.Name == TDKH.SheetName_KeHoachKinhPhi)
                                                crRowPs[crDicAll[TDKH.COL_DonGiaThiCong]].SetValueFromText(crWs.Rows[crInd - 1][crDicAll[TDKH.COL_DonGiaThiCong]].Value.ToString());

                                            if (i == TDKH.TYPELOAD_KeHoach)
                                            {
                                                crRowPs[crDicAll[TDKH.COL_DonGia]].SetValue(0);
                                                crIndKeHoach = crInd;
                                            }
                                            DinhMucHelper.fcn_TDKH_CapNhatRowChaConTienDoKeHoach(crWs.Rows[indCha]);
                                            TDKHHelper.fcn_loadCongThucKeHoach(crRowPs);
                                            //MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(crRowPs);
                                        }
                                        break;
                                    case 1:
                                        dtCTacPhatSinh.Rows[0]["KhoiLuongToanBo"] = val;
                                        DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtCTacPhatSinh, TDKH.TBL_ChiTietCongTacTheoKy);

                                        break;
                                    default:
                                        MessageShower.ShowInformation("Lỗi dữ liệu khối lượng phát sinh");
                                        MyFunction.fcn_ReverseCell(e);
                                        goto Return;
                                }
                                goto Return;
                            }
                            else if (colInDb == TDKH.COL_DBC_KhoiLuongToanBo)
                            {
                                if (!double.TryParse(newVal, out double parse))
                                {
                                    MessageShower.ShowError("Lỗi công thức: Giá trị không phải số thực");
                                    MyFunction.fcn_ReverseCell(e);
                                    goto Return;
                                }    
                                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{TDKH.COL_DBC_KhoiLuongToanBo}\" = '{e.Value}', " +
                                $"\"{TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh}\" = 0 " +
                                $"WHERE \"{TDKH.COL_Code}\" = '{codeCongTac}'";
                                crRow[dic[TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh]].SetValue(false);
                                if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) != 1)
                                {
                                    MessageShower.ShowInformation("Lỗi cập nhật công tác đo bóc!");
                                    goto Return;
                                }
                                //crRow[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].SetValue(false);
                                if (!TDKHPasting.IsPasting)
                                    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                                else if (!TDKHPasting.Codes.Contains(codeCongTac))
                                    TDKHPasting.Codes.Add(codeCongTac);
                                goto Return;
                            }
                            else if (colInDb == TDKH.COL_DBC_HopDong_BoPhan)
                            {
                                if (!double.TryParse(newVal, out double parse))
                                {
                                    MessageShower.ShowError("Lỗi công thức: Giá trị không phải số thực");
                                    MyFunction.fcn_ReverseCell(e);
                                    goto Return;
                                }
                                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{TDKH.COL_DBC_HopDong_BoPhan}\" = '{e.Value}' " +
                                $"WHERE \"{TDKH.COL_Code}\" = '{codeCongTac}'";

                                if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) != 1)
                                {
                                    MessageShower.ShowInformation("Lỗi cập nhật công tác đo bóc!");
                                    goto Return;
                                }
                                //crRow[dic[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].SetValue(false);
                                if (!TDKHPasting.IsPasting)
                                    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                                else if (!TDKHPasting.Codes.Contains(codeCongTac))
                                    TDKHPasting.Codes.Add(codeCongTac);
                                goto Return;
                            }
                            break;
                        case MyConstant.TYPEROW_CVCON:
                            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacCon} SET \"{colInDb}\" = '{newVal}' WHERE \"Code\" = '{codeCongTac}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            if (ws.Columns[e.ColumnIndex].Heading == dic[TDKH.COL_DanhMucCongTac])
                            {
                                string checkvalue = TDKHHelper.fcn_TDKH_UpdateRowConTheoTenCongTac_Suacongtac(ws, e.RowIndex);
                            }

                            goto CapNhatCongTacCha;
                        case MyConstant.TYPEROW_CongTrinh:
                            if (colInDb != TDKH.COL_DanhMucCongTac)
                            {
                                MessageShower.ShowInformation("Chỉ có thể thay đổi tên Công Trình!");
                                goto Return;
                            }

                            dbString = $"UPDATE {MyConstant.TBL_THONGTINCONGTRINH} SET Ten = '{newVal}' WHERE Code = '{codeCongTac}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            goto Return;
                        case MyConstant.TYPEROW_HangMuc:
                            if (colInDb != TDKH.COL_DanhMucCongTac)
                            {
                                MessageShower.ShowInformation("Chỉ có thể thay đổi tên Hạng Mục!");
                                goto Return;
                            }

                            dbString = $"UPDATE {MyConstant.TBL_THONGTINHANGMUC} SET Ten = '{newVal}' WHERE Code = '{codeCongTac}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            goto Return;

                        default:
                            goto Return;
                    }
                    //return;
                }

              

                try
                {
                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = '{newVal}' WHERE \"Code\" = '{codeCongTac}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                    if (colInDb == TDKH.COL_KhoiLuongHopDongChiTiet)
                        TDKHHelper.TinhLaiToanBoKhoiLuongHopDong(new string[] { codeCongTac });
                    goto Return;
                }
                catch
                {

                }

                CapNhatCongTacCha:
                ws.Calculate();
                int indChaDBC = int.Parse(crRow[dic[TDKH.COL_RowCha]].Value.ToString()) - 1;
                Row crRowCha1 = ws.Rows[indChaDBC];
                string codeCha1 = crRowCha1[dic[TDKH.COL_Code]].Value.ToString();
                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} " +
                    $"SET \"KhoiLuongToanBo\" = '{crRowCha1[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value}' WHERE \"Code\" = '{codeCha1}'";
                int num = DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                if (!TDKHPasting.IsPasting)
                    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCha1 });


                goto Return;
            }
            else if (ws.Name == TDKH.SheetName_KeHoachKinhPhi)
            {
                Dictionary<string, string> dicKH = dic_All;
                codeCongTac = ws.Rows[e.RowIndex][dicKH[TDKH.COL_Code]].Value.ToString();

                if (!Guid.TryParse(codeCongTac, out guid))
                {
                    MyFunction.fcn_ReverseCell(e);
                    goto Return;
                }

                string stringBD = ws.Rows[e.RowIndex][dicKH[TDKH.COL_NgayBatDau]].Value.ToString();
                string stringKT = ws.Rows[e.RowIndex][dicKH[TDKH.COL_NgayKetThuc]].Value.ToString();

                if (!DateTime.TryParse(stringBD, out dayBD) ||
                    !DateTime.TryParse(stringKT, out dayKT))
                {
                    MessageShower.ShowInformation("Vui lòng nhập đúng định dạng ngày bắt đầu và kết thúc");
                    MyFunction.fcn_ReverseCell(e);
                    goto Return;
                }

                string stringBDTC = ws.Rows[e.RowIndex][dicKH[TDKH.COL_NgayBatDauThiCong]].Value.ToString();
                string stringKTTC = ws.Rows[e.RowIndex][dicKH[TDKH.COL_NgayKetThucThiCong]].Value.ToString();

                bool isBD = DateTime.TryParse(stringBD, out dayBD);
                bool isKT = DateTime.TryParse(stringKT, out dayKT);

                if (colHeading == dicKH[TDKH.COL_SoNgayThiCong])
                {
                    if (!isBD)
                    {
                        MessageShower.ShowError("Vui lòng nhập Ngày bắt đầu trước");

                    }
                    if (int.TryParse(newVal, out tryParse) && tryParse > 0)
                    {
                        dayKT = dayBD.AddDays(tryParse);
                        ws.Rows[e.RowIndex][dicKH[TDKH.COL_NgayKetThucThiCong]].SetValue(dayKT);
                        ws.Rows[e.RowIndex][dicKH[TDKH.COL_SoNgayThiCong]].Formula = $"{dicKH[TDKH.COL_NgayKetThucThiCong]}{e.RowIndex + 1} - {dicKH[TDKH.COL_NgayBatDauThiCong]}{e.RowIndex + 1} + 1";
                        colHeading = dicKH[TDKH.COL_NgayKetThucThiCong];
                        newVal = dayKT.ToString();
                    }
                    else
                    {
                        MessageShower.ShowInformation("Vui lòng nhập số nguyên dương cho ô này!");
                        MyFunction.fcn_ReverseCell(e);
                        goto Return;

                    }
                }

                else if (colHeading == dic[TDKH.COL_SoNgayThucHien])
                {
                    if (int.TryParse(newVal, out tryParse) && tryParse > 0)
                    {
                        dayKT = dayBD.AddDays(tryParse - 1);
                        ws.Rows[e.RowIndex][dicKH[TDKH.COL_NgayKetThuc]].SetValue(dayKT);
                        ws.Rows[e.RowIndex][dicKH[TDKH.COL_SoNgayThucHien]].Formula = $"{dicKH[TDKH.COL_NgayKetThuc]}{e.RowIndex + 1} - {dicKH[TDKH.COL_NgayBatDau]}{e.RowIndex + 1} + 1";
                        colHeading = dicKH[TDKH.COL_NgayKetThuc];

                        newVal = dayKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

                        TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac});
                    }
                    else
                    {
                        MessageShower.ShowInformation("Vui lòng nhập số nguyên dương cho ô này!");
                        MyFunction.fcn_ReverseCell(e);
                        goto Return;
                    }
                }


                var item = dicKH.Where(x => x.Value == colHeading);

                string colInDb = (item.Any()) ? item.Single().Key : "";


                if (colHeading == dic[TDKH.COL_DBC_KhoiLuongToanBo] || colHeading == dic[TDKH.COL_DBC_HopDong_BoPhan])
                {
                    MessageShower.ShowError("Đây là khối lượng lấy từ bảng đo bóc", "Cảnh báo");
                    MyFunction.fcn_ReverseCell(e);
*//*                    else
                    {
                        ws.Calculate();
                        long KinhPhi = (long)ws.Rows[e.RowIndex][dicKH[TDKH.COL_KinhPhiDuKien]].Value.NumericValue;
                        dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET KinhPhiDuKien = '{KinhPhi}' WHERE Code = '{codeCongTac}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }*//*
                }
                else if (colHeading == dic[TDKH.COL_NgayBatDau] || colHeading == dic[TDKH.COL_NgayKetThuc])
                {

                    Color cl;
                    if (dayBD > dayKT)
                        cl = MyConstant.color_Error;
                    else cl = MyConstant.color_Nomal;

                    CellRange rangeFm = ws.Range[$"{dic[TDKH.COL_SoNgayThucHien]}{e.RowIndex + 1}:" +
                        $"{dic[TDKH.COL_NgayKetThuc]}{e.RowIndex + 1}"];
                    rangeFm.Font.Color = cl;

*//*                    dbString = $"SELECT {GiaoViec.TBL_CONGVIECCHA}.NgayBatDau, {GiaoViec.TBL_CONGVIECCHA}.NgayKetThuc " +
                        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                        $"INNER JOIN {GiaoViec.TBL_CONGVIECCHA} " +
                        $"ON {GiaoViec.TBL_CONGVIECCHA}.CodeCongTacTheoGiaiDoan = {TDKH.TBL_ChiTietCongTacTheoKy}.Code " +
                        $"WHERE {TDKH.TBL_ChiTietCongTacTheoKy}.Code = '{codeCongTac}'";

                    DataTable dtGiaoViec = DataProvider.InstanceTHDA.ExecuteQuery(dbString);*/


        /*                    if (dayBD < dayKT)
                            {
                                //MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(ws.Rows[e.RowIndex]);
                                //DinhMucHelper.CapNhatVatTuTheoHaoPhiVaoVatTu(codeCongTac);
                            }*//*
                            newVal = DateTime.Parse(newVal).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                        }
                        else if (colHeading == dic[TDKH.COL_TrangThai])
                        {
                            DinhMucHelper.capNhatTrangThaiCacBang(codeCongTac, SourceDataEnum.TDKH, newVal);
                        }
                        else if (colHeading == dic[TDKH.COL_NgayBatDauThiCong]
                            || colHeading == dic[TDKH.COL_NgayKetThucThiCong])
                        {
                            if (!DateTime.TryParse(newVal, out DateTime tryP))
                            {
                                MessageShower.ShowError("Vui lòng nhập đúng định dạng ngày tháng!");
                                MyFunction.fcn_ReverseCell(e);
                                goto Return;
                            }
                            if (isBD && isKT)
                            {
                                Color cl;
                                if (dayBD > dayKT)
                                    cl = MyConstant.color_Error;
                                else cl = MyConstant.color_Nomal;

                                CellRange rangeFm = ws.Range[$"{dic[TDKH.COL_SoNgayThucHien]}{e.RowIndex + 1}:" +
                                    $"{dic[TDKH.COL_NgayKetThucThiCong]}{e.RowIndex + 1}"];
                                rangeFm.Font.Color = cl;
                            }

                            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = '{DateTime.Parse(newVal).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE \"Code\" = '{codeCongTac}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);


                            //if (dayBD < dayKT)
                            //{
                            //    MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(ws.Rows[e.RowIndex]);
                            //    //DinhMucHelper.CapNhatVatTuTheoHaoPhiVaoVatTu(codeCongTac);
                            //}
                        }



                        try
                        {
                            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{colInDb}\" = '{newVal}' WHERE \"Code\" = '{codeCongTac}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                            if (colHeading == dic[TDKH.COL_NgayBatDau] 
                                || colHeading == dic[TDKH.COL_NgayKetThuc] || colHeading == dic[TDKH.COL_DonGia]
                                || colHeading == dic[TDKH.COL_SoNgayThucHien])
                            {
                                if (colHeading == dic[TDKH.COL_DonGia])
                                {
                                    ws.Calculate();
                                    long KinhPhi = (long)ws.Rows[e.RowIndex][dicKH[TDKH.COL_KinhPhiDuKien]].Value.NumericValue;
                                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET KinhPhiDuKien = '{KinhPhi}' WHERE Code = '{codeCongTac}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                }

                                if (!TDKHPasting.IsPasting)
                                    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { codeCongTac });
                                else if (!TDKHPasting.Codes.Contains(codeCongTac))
                                    TDKHPasting.Codes.Add(codeCongTac);
                                ctrl_NhapKLHN.pushData(StateNP, DVTH,dic, true,TypeKLHN.CongTac, codeCongTac);
                            }

                            else if (colHeading == dic_All[TDKH.COL_NgayBatDauThiCong]
                            || colHeading == dic_All[TDKH.COL_NgayKetThucThiCong] || colHeading == dic_All[TDKH.COL_DonGiaThiCong]
                            || colHeading == dic_All[TDKH.COL_SoNgayThucHien])
                            {
                                //MyFunction.Fcn_CalKLKHNew(TypeKLHN.CongTac, new string[] { codeCongTac });
                                ctrl_NhapKLHN.pushData(StateNP,DVTH, dic_All, true, TypeKLHN.CongTac, codeCongTac);
                            }

                        }
                        catch
                        {

                        }

                    }
                    else if (TDKH.sheetsName.Contains(ws.Name) && Array.IndexOf(TDKH.sheetsName, ws.Name) >= 2)
                    {
                        int type = Array.IndexOf(TDKH.sheetsName, ws.Name);
                        //CellRange rangeNgay = wb.Range[TDKH.rangesNgayName[type]];
                        CellRange rangeData = wb.Range[TDKH.rangesNameData[type]];

                        int cellInd = e.RowIndex;
                        Cell cell = e.Cell;
                        Dictionary<string, string> dic = dicKPVL_All;
                        Row crRow = ws.Rows[cellInd];
                        string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

                        //Dictionary<string, int> dicDate = MyFunction.fcn_getDicDate(rangeNgay);
                        //Row rowDate = ws.Rows[rangeNgay.TopRowIndex];
                        string codeHP = crRow[dic[TDKH.COL_KHVT_Search]].Value.ToString();

                        if (rangeData.Contains(cell))
                        {
                            string colName = dic.Single(x => x.Value == colHeading).Key;

                            string stringBD = ws.Rows[e.RowIndex][dic[TDKH.COL_NgayBatDau]].Value.ToString();
                            string stringKT = ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThuc]].Value.ToString();

                            if (!DateTime.TryParse(stringBD, out dayBD) ||
                                !DateTime.TryParse(stringKT, out dayKT))
                            {
                                MessageShower.ShowInformation("Vui lòng nhập đúng định dạng ngày bắt đầu và kết thúc");
                                MyFunction.fcn_ReverseCell(e);
                                goto Return;

                            }

                            if (colName == dic[TDKH.COL_SoNgayThucHien])
                            {
                                if (int.TryParse(newVal, out tryParse) && tryParse > 0)
                                {
                                    dayKT = dayBD.AddDays(tryParse);

                                    ws.Rows[e.RowIndex][dic[TDKH.COL_NgayKetThuc]].SetValue(dayKT);
                                    ws.Rows[e.RowIndex][dic[TDKH.COL_SoNgayThucHien]].Formula = $"{dic[TDKH.COL_NgayKetThuc]}{e.RowIndex + 1} - {dic[TDKH.COL_NgayBatDau]}{e.RowIndex + 1} + 1";

                                    newVal = dayKT.ToString();
                                    colName = TDKH.COL_NgayKetThuc;

                                }
                                else
                                {
                                    MessageShower.ShowInformation("Vui lòng nhập số nguyên dương cho ô này!");
                                    MyFunction.fcn_ReverseCell(e);
                                    goto Return;

                                }
                            }

                            if (typeRow == MyConstant.TYPEROW_CVCha)
                            {
                                if (colName == TDKH.COL_DonGia || colName == TDKH.COL_DonGiaThiCong)
                                {
                                    if (!int.TryParse(e.Value.ToString(), out int DonGia))
                                    {
                                        MessageShower.ShowInformation("Vui lòng nhập số nguyên cho đơn giá!");
                                        MyFunction.fcn_ReverseCell(e);
                                        goto Return;

                                    }
                                    if (colName != TDKH.COL_DonGiaThiCong)
                                    {
                                        string[] codesHaoPhiTuongUng = ws.Columns[dic[TDKH.COL_RowCha]].Search((e.RowIndex + 1).ToString(), MyConstant.MySearchOptions)
                                            .Select(x => $"'{ws.Rows[x.RowIndex][dic[TDKH.COL_KHVT_Search]].Value}'").ToArray();

                                        dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu} SET {colName} = '{newVal}' WHERE Code IN ({string.Join(", ", codesHaoPhiTuongUng)})";
                                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                    }
                                    string codeVT = crRow[dic[TDKH.COL_Code]].Value.ToString();
                                    string codeHMuc = MyFunction.GetCodeHangMucFromCodeHaoPhi(codeVT);

                                    //MyFunction.Fcn_CalKLKHNew(TypeKLHN.VatLieu, new string[] { codeVT });
                                    //DinhMucHelper.SaveVatTuTheoHangMuc(new string[] { codeHMuc });
                                }
                                goto Return;

                            }
                            else if (typeRow == MyConstant.TYPEROW_CVCON) //Hao phí vật tư
                            {
                                if (colName == TDKH.COL_NgayBatDau || colName == TDKH.COL_NgayKetThuc)
                                {

                                    string dateString = DateTime.Parse(newVal).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                                    dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu} SET {colName} = '{dateString}' WHERE Code = '{codeHP}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                    //DinhMucHelper.TinhLaiKhoiLuongKeHoach(TypeKLHN.HaoPhiVatTu, codeHP, crRow);
                                    goto Return;

                                }
                                else if (colName == TDKH.COL_DBC_KhoiLuongToanBo)
                                {
                                    //DinhMucHelper.TinhLaiKhoiLuongKeHoach(TypeKLHN.HaoPhiVatTu, codeHP, crRow);
                                    //DinhMucHelper.SaveVatTuUngVoiRowHaoPhi_VatTu(crRow);
                                    //goto Return;
                                }    
                            }
                            else
                            {
                                MyFunction.fcn_ReverseCell(e);
                            }
                        }
                    }
                    Return:
                    if (TDKHPasting.IsPasting && TDKHPasting.LastCell.GetReferenceA1() == e.Cell.GetReferenceA1())
                    {
                        TDKHPasting.IsPasting = false;
                        if (TDKHPasting.Codes.Any())
                            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(TDKHPasting.Codes);
                    }
                    wb.EndUpdate();
                }*/



        private void spsheet_TD_KH_LapKeHoach_TabIndexChanged(object sender, EventArgs e)
        {

        }

        private void LoadSheetTDKH(bool isForce = true)
        {
            //spsheet_TD_KH_LapKeHoach.ActiveSheetChanged -= spsheet_TD_KH_LapKeHoach_ActiveSheetChanged;
            //simpleButton2.PerformClick();

            if (ctrl_DonViThucHienDuAnTDKH.SelectedDVTH is null || xtraTabControl_TabMain.SelectedTabPage != xtraTab_QLTienDo_KeHoach
                 || xtraTabControl_TienDoKeHoach.SelectedTabPage != xtraTab_KeHoach)
                return;

            cb_TDKH_HienCongTac.CheckedChanged -= cb_TDKH_HienCongTac_CheckedChanged;
            cb_TDKH_HienCongTac.Checked = false;
            cb_TDKH_HienCongTac.CheckedChanged += cb_TDKH_HienCongTac_CheckedChanged;

            string name = spsheet_TD_KH_LapKeHoach.ActiveWorksheet.Name;
            switch (name)
            {
                case TDKH.SheetName_DoBocChuan:
                    cb_TDKH_HienCongTac.Visible = false;
                    cb_TDKH_HienDienGiai.Visible = true;
                    bt_ImportDonGiaVatTu.Visible = false;
                    lc_LocTheoNgay.Visible = false;
                    AnHien_TDKH_KH_HaoPhi.Size = new System.Drawing.Size(AnHien_TDKH_KH_HaoPhi.Size.Width, 200);
                    if (isForce || !BaseFrom.DoBocChuanLoaded)
                        TDKHHelper.LoadCongTacDoBoc();
                    BaseFrom.DoBocChuanLoaded = true;
                    break;
                case TDKH.SheetName_KeHoachKinhPhi:
                    cb_TDKH_HienCongTac.Visible = false;
                    cb_TDKH_HienDienGiai.Visible = false;
                    bt_ImportDonGiaVatTu.Visible = false;
                    lc_LocTheoNgay.Visible = ce_LocTheoNgay.Checked;
                    AnHien_TDKH_KH_HaoPhi.Size = new System.Drawing.Size(AnHien_TDKH_KH_HaoPhi.Size.Width, 200);
                    if (isForce || !BaseFrom.KeHoachLoaded)
                        TDKHHelper.LoadCongKinhPhiTienDo();
                    BaseFrom.KeHoachLoaded = true;


                    break;
                case TDKH.SheetName_VatLieu:
                    bt_ImportDonGiaVatTu.Visible = true;
                    if (isForce || !BaseFrom.VatLieuLoaded)
                        TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, name));
                    BaseFrom.VatLieuLoaded = true;

                    cb_TDKH_HienCongTac.Visible = true;
                    cb_TDKH_HienDienGiai.Visible = false;
                    ctrl_HaoPhiVatTuTDKH.Clear();
                    AnHien_TDKH_KH_HaoPhi.Size = new System.Drawing.Size(AnHien_TDKH_KH_HaoPhi.Size.Width, 200);
                    break;
                case TDKH.SheetName_NhanCong:

                    bt_ImportDonGiaVatTu.Visible = true;
                    if (isForce || !BaseFrom.NhanCongLoaded)
                        TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, name));

                    BaseFrom.NhanCongLoaded = true;

                    cb_TDKH_HienCongTac.Visible = true;
                    cb_TDKH_HienDienGiai.Visible = false;
                    ctrl_HaoPhiVatTuTDKH.Clear();
                    AnHien_TDKH_KH_HaoPhi.Size = new System.Drawing.Size(AnHien_TDKH_KH_HaoPhi.Size.Width, 200);
                    break;
                case TDKH.SheetName_MayThiCong:
                    bt_ImportDonGiaVatTu.Visible = true;
                    if (isForce || !BaseFrom.MayThiCongLoaded)
                        TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, name));
                    BaseFrom.MayThiCongLoaded = true;


                    cb_TDKH_HienCongTac.Visible = true;
                    cb_TDKH_HienDienGiai.Visible = false;
                    ctrl_HaoPhiVatTuTDKH.Clear();
                    //groupCtrl_LocNgay.Visible = false;
                    AnHien_TDKH_KH_HaoPhi.Size = new System.Drawing.Size(AnHien_TDKH_KH_HaoPhi.Size.Width, 200);
                    break;
                case TDKH.SheetName_TongHopHaoPhi:
                    if (isForce || !BaseFrom.TongHopVatTuLoaded)
                        TDKHHelper.LoadTongHopVatTuKeHoachBrief();
                    BaseFrom.TongHopVatTuLoaded = true;

                    cb_TDKH_HienCongTac.Visible = true;
                    cb_TDKH_HienDienGiai.Visible = false;
                    ctrl_HaoPhiVatTuTDKH.Clear();
                    //lc_LocTheoNgay.Visible = true;


                    AnHien_TDKH_KH_HaoPhi.Size = new System.Drawing.Size(AnHien_TDKH_KH_HaoPhi.Size.Width, 75);
                    break;
                default:
                    break;
            }
            ctrl_NhapKLHN.Clear();

            //spsheet_TD_KH_LapKeHoach.ActiveSheetChanged += spsheet_TD_KH_LapKeHoach_ActiveSheetChanged;
        }
        //private void 
        private void spsheet_TD_KH_LapKeHoach_ActiveSheetChanged(object sender, ActiveSheetChangedEventArgs e)
        {
            LoadSheetTDKH(false);
        }
        private void fcn_TDKH_CapNhatVatTu(List<Row> lsRowVT)
        {
            foreach (Row row in lsRowVT)
            {

            }
        }

        private void bt_TDKH_KH_LuuCSDL_Click(object sender, EventArgs e)
        {
            fcn_TDKH_LuuKeHoachVaoCSDL();
        }

        private void fcn_TDKH_LuuKeHoachVaoCSDL()
        {
            //IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            //Worksheet wsKP = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            ////Worksheet wsHPVT = wb.Worksheets[TDKH.SheetName_KeHoachVatTu];

            //CellRange rangeKP = wsKP.Range[TDKH.RANGE_KeHoach];
            //CellRange rangeVLTuDong = wsKP.Range[TDKH.RANGE_KeHoachVatTu_VL_TuDong];
            //CellRange rangeMTCTuDong = wsKP.Range[TDKH.RANGE_KeHoachVatTu_MTC_TuDong];

            ////Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(rangeKP);
            ////Dictionary<string, string> dicKHVT = MyFunction.fcn_getDicOfColumn(rangeVLTuDong);

            //CellRange rangeVLThuCong = wsKP.Range[TDKH.RANGE_KeHoachVatTu_VL_TuDong];
            //CellRange rangeMTCThuCong = wsKP.Range[TDKH.RANGE_KeHoachVatTu_MTC_TuDong];

            //string dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}' ORDER BY \"SortId\" ASC";
            //DataTable dtCT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //string lsCodeCT = MyFunction.fcn_Array2listQueryCondition(dtCT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            //dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeCongTrinh\" IN ({lsCodeCT})";
            //DataTable dtHM = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //string lsHMToQuery = MyFunction.fcn_Array2listQueryCondition(dtHM.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            ////string tblChiTietCongTacTheoKy, tblChiTietCongTacCon;
            ////fcn_TDKH_DBC_GettableDoBoc(out tblChiTietCongTacTheoKy, out tblChiTietCongTacCon);

            //dbString = $"SELECT * FROM {TDKH.TBL_DanhMucCongTac} WHERE \"CodeHangMuc\" IN ({lsHMToQuery})";
            //DataTable dtDanhMucCongTac = DataProvider.InstanceTHDA.ExecuteQuery(dbString);


            //DataTable dtChiTietCongTac = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'");
            ////DataTable dtKhoiLuongCongViecTungNgay = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT * FROM {TDKH.TBL_KhoiLuongCongViecTheoNgay}").Clone();

            //Guid guid;
            //List<string> lsCodeCongTacTheoKy = new List<string>();
            //List<string> lsCodeDanhMucCongTac = new List<string>();

            ////Cập nhật kinh phí dự kiến
            //if (DataProvider.InstanceTHDA.ExecuteNonQuery($"UPDATE {TDKH.TBL_KinhPhiDuKien} SET \"KinhPhiDuKien\" = '{wb.Range[TDKH.RANGE_KinhPhiPhanBoToanDuAn].Value}' WHERE \"CodeGiaiDoan\" = '{cbb_DBKH_ChonDot.SelectedValue}' AND \"CodeToDoi\" IS NULL AND \"CodeNhaThau\" IS NULL") == 0)
            //{
            //    MessageShower.ShowInformation("Lỗi cập nhật kinh phí dự kiến");
            //    return;
            //};
            ////string[] lsColNullAble = { TDKH.COL_Nhom };

            //for (int i = rangeKP.TopRowIndex + 1; i < rangeKP.BottomRowIndex; i++)
            //{
            //    string MHCT = wsKP.Rows[i][dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
            //    string typeRow = fcn_TDKH_GetTypeRow(MHCT, wsKP.Rows[i][dic[TDKH.COL_DanhMucCongTac]].Value.ToString());
            //    if (typerow != MyConstant.TYPEROW_CVCha)
            //        continue;
            //    string codeCT = wsKP.Rows[i][dic[TDKH.COL_Code]].Value.ToString();
            //    string codeCha = wsKP.Rows[i][dic[TDKH.COL_Code]].Value.ToString();
            //    if (!Guid.TryParse(codeCT, out guid))
            //        continue;
            //    lsCodeDanhMucCongTac.Add(codeCT);
            //    lsCodeCongTacTheoKy.Add(codeCha);
            //    //string MaDM = wsKP.Rows[i][dic[TDKH_DBC.COL_TDKH_DBC_MaHieuCongTac]].ToString();
            //    string filterString = $"Code = '{codeCT}'";
            //    //DataRow[] rowInDb = dtDanhMucCongTac.Select(filterString);
            //    //if (rowInDb.Count() == 0)
            //    //{
            //    //    MessageShower.ShowInformation("Lỗi");
            //    //    return;
            //    //}

            //    //row = dtDanhMucCongTac.NewRow();
            //    //row["Code"] = codeCT;
            //    //row["CodeDuAn"] = slke_ThongTinDuAn.EditValue;
            //    //dtDanhMucCongTac.Rows.Add(row);

            //    //row["MaHieuCongTac"] = wsKP.Rows[i][dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
            //    //row["TenCongTac"] = wsKP.Rows[i][dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
            //    //row["DonVi"] = wsKP.Rows[i][dic[TDKH.COL_DonVi]].Value.ToString();
            //    //row["KhoiLuongHopDong"] = wsKP.Rows[i][dic[TDKH.COL_KhoiLuongHopDongDuAn]].Value.ToString();
            //    //row["PhatSinh"] = (wsKP.Rows[i][0].Font.Color.ToArgb() == MyConstant.color_Nomal.ToArgb()) ? 0 : 1;

            //    //Cập nhật công tác theo kỳ
            //    //DataRow row = rowInDb[0]; ;

            //    filterString = $"Code = '{codeCha}'";
            //    //DataRow[] rowInDb = dtChiTietCongTac.Select(filterString);
            //    DataRow rChiTiet = dtChiTietCongTac.Select(filterString).FirstOrDefault();
            //    if (rChiTiet == null)
            //    {
            //        MessageShower.ShowInformation("Lỗi tải chi tiết công tác theo giai đoạn");
            //        continue;
            //    }

            //    DataRow rDanhMuc = dtDanhMucCongTac.AsEnumerable().Where(x => x["Code"].ToString() == rChiTiet["CodeCongTac"].ToString()).FirstOrDefault();
            //    if (rDanhMuc == null)
            //    {
            //        MessageShower.ShowInformation("Lỗi tải danh mục công tác");
            //        continue;
            //    }

            //    //rChiTiet["CodeCongTac"] = codeCT;
            //    rChiTiet["CodeGiaiDoan"] = cbb_DBKH_ChonDot.SelectedValue;
            //    //rChiTiet[TDKH.COL_DBC_HopDong_BoPhan] = cbo_TDKH_ChonDot.SelectedValue;
            //    //rChiTiet["CodeGiaiDoan"] = cbo_TDKH_ChonDot.SelectedValue;
            //    foreach (var item in dic)
            //    {

            //        if (item.Key != TDKH.COL_Code && dtDanhMucCongTac.Columns.Contains(item.Key))
            //        {
            //            string newVal = wsKP.Rows[i][item.Value].Value.ToString();

            //            try
            //            {
            //                rDanhMuc[item.Key] = newVal;
            //            }
            //            catch (Exception ex)
            //            {
            //                Debug.WriteLine($"Lỗi cập nhật DanhMucCongTac: Lỗi tại {item.Key}: {ex.Message} \n {ex.InnerException}");
            //            }
            //        }


            //        if (dtChiTietCongTac.Columns.Contains(item.Key))
            //        {
            //            string newVal = wsKP.Rows[i][item.Value].Value.ToString();
            //            if (lsColNullAble.Contains(item.Key))
            //            {
            //                if (!Guid.TryParse(newVal.ToString(), out guid))
            //                {
            //                    rChiTiet[item.Key] = null;
            //                    continue;
            //                }
            //            }
            //            if (item.Key.Contains("Ngay"))
            //                newVal = DateTime.Parse(newVal).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            //            try
            //            {
            //                rChiTiet[item.Key] = newVal;
            //            }
            //            catch (Exception ex)
            //            {
            //                Debug.WriteLine($"Lỗi cập nhật công tác theo giai đoạn: Lỗi tại {item.Key}: {ex.Message} \n {ex.InnerException}");
            //            }
            //        }
            //    }

            //    //dtChiTietCongTac.Rows.Add(rChiTiet);

            //    //Thêm khối lượng công việc hàng ngày
            //    //DataProvider.InstanceTHDA.ExecuteNonQuery($"DELETE FROM {TDKH.TBL_KhoiLuongCongViecTheoNgay} WHERE \"CodeCongTacTheoGiaiDoan\" = '{codeCT}'");
            //    //DateTime dateBD, dateKT;
            //    //if (DateTime.TryParse(wsKP.Rows[i][dic[TDKH.COL_NgayBatDau]].Value.ToString(), out dateBD)
            //    //    && DateTime.TryParse(wsKP.Rows[i][dic[TDKH.COL_NgayKetThuc]].Value.ToString(), out dateKT))
            //    //{
            //    //    int soNgay = (dateKT - dateBD).Days + 1;
            //    //    for (int j = rangeKP.RightColumnIndex + 1; j <= rangeKP.RightColumnIndex + soNgay; j++)
            //    //    {
            //    //        double KL = 0;
            //    //        DataRow newRow = dtKhoiLuongCongViecTungNgay.NewRow();
            //    //        newRow["Code"] = Guid.NewGuid().ToString();
            //    //        newRow["CodeCongTacTheoGiaiDoan"] = codeCha;
            //    //        newRow["Ngay"] = dateBD.AddDays(j - rangeKP.RightColumnIndex - 1).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            //    //        double.TryParse(wsKP.Rows[i][j].Value.ToString(), out KL);
            //    //        newRow["KhoiLuong"] = KL;
            //    //        newRow["IsEdited"] = (wsKP.Rows[i][j].Font.Color.ToArgb() == TDKH.color_DaNhapKhoiLuongNgayThuCong.ToArgb()) ? true : false;
            //    //        dtKhoiLuongCongViecTungNgay.Rows.Add(newRow);
            //    //    }
            //    //}
            //}

            //////Xóa các công tác đã xóa trong excel
            ////for (int i = dtChiTietCongTac.Rows.Count -1; i>= 0; i--)
            ////{
            ////    DataRow row = dtChiTietCongTac.Rows[i];
            ////    if (!lsCodeCongTacTheoKy.Contains(row["Code"].ToString()))
            ////    {
            ////        DataProvider.InstanceTHDA.ExecuteNonQuery($"DELETE FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"Code\" = '{row["Code"]}'");
            ////        row.Delete();
            ////        row.AcceptChanges();
            ////    }    
            ////}

            ////if (cbo_DBKH_ChonDot.SelectedIndex == 0)
            ////{
            ////    for (int i = dtDanhMucCongTac.Rows.Count - 1; i >=0; i--)
            ////    {
            ////        DataRow row = dtDanhMucCongTac.Rows[i];
            ////        if (!lsCodeDanhMucCongTac.Contains(row["Code"].ToString()))
            ////        {
            ////            DataProvider.InstanceTHDA.ExecuteNonQuery($"DELETE FROM {TDKH.TBL_DanhMucCongTac} WHERE \"Code\" = '{row["Code"]}'");
            ////            row.Delete();
            ////            row.AcceptChanges();

            ////        }
            ////    }
            ////}

            //DataProvider.InstanceTHDA.UpdateDataTable(dtDanhMucCongTac, TDKH.TBL_DanhMucCongTac);
            //DataProvider.InstanceTHDA.UpdateDataTable(dtChiTietCongTac, TDKH.TBL_ChiTietCongTacTheoKy);
            //DataProvider.InstanceTHDA.UpdateDataTable(dtKhoiLuongCongViecTungNgay, TDKH.TBL_KhoiLuongCongViecTheoNgay);
        }

        private void btn_GV_KH_LayDauViecTuTienDo_Click(object sender, EventArgs e)
        {
            Form_LayDauViecTuCSDL form = new Form_LayDauViecTuCSDL(MyConstant.CONST_TYPE_LAYDAUVIEC_KeHoachTDsangGiaoViec, null);
            form.m_truyenData = new Form_LayDauViecTuCSDL.DE_TRUYENDATABANGCONGTAC(btn_NhanDataTuDialogForm);

            form.ShowDialog();
        }


        private void btn_NhanDataTuDialogForm(LayCongTac[] dt, int type, bool isCopyNhom = true)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
            if (type == MyConstant.CONST_TYPE_LAYDAUVIEC_KeHoachTDsangGiaoViec)
            {
                foreach (var row in dt)
                {
                    //DataTable dtDest = DataProvider.InstanceTHDA.ExecuteQuery("SELECT * FROM Tbl_ThongTinDuAn LIMIT 0");
                    ////string colFk = SharedControls.ctrl_DonViThucHienGiaoViec.SelectedDVTH.ColCodeFK;
                    ////string code = SharedControls.ctrl_DonViThucHienGiaoViec.SelectedDVTH.Code;
                    Dictionary<string, object> cols = new Dictionary<string, object>()
                    {
                        { "CodeCongViecCha", Guid.NewGuid().ToString() },
                        { "CodeCongTacTheoGiaiDoan",  row.Code},
                        { "MaDinhMuc", row.MaHieuCongTac },
                        { "CodeHangMuc", row.CodeHangMuc},
                        { "TenCongViec", row.TenCongTac },
                        { "DonGia", row.DonGia },
                        { "DonGiaThiCong", row.DonGiaThiCong },
                        { "LyTrinhCaoDo", row.LyTrinhCaoDo },
                        { "KhoiLuongKeHoach", row.KhoiLuongToanBo },
                        { "KhoiLuongHopDong", row.KhoiLuongHopDong },
                        { "NgayBatDau", row.NgayBatDau.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)},
                        { "NgayKetThuc", row.NgayKetThuc.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)},
                        { "TrangThai", row.TrangThai},
                        { "DonVi", row.DonVi},
                        { "SortId", row.SortId},
                        { "CodeNhaThau", row.CodeNhaThau },
                        { "CodeNhaThauPhu", row.CodeNhaThauPhu },
                        { "CodeToDoi", row.CodeToDoi}

                };

                    string dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCHA} ({string.Join(", ", cols.Keys)}) VALUES " +
                        $"({string.Join(", ", cols.Keys.Select(x => $"@{x}"))})";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: cols.Values.ToArray());

                }

                if (rg_GV_DauViec.GetAccessibleName() == "ThiCong")
                    fcn_GV_CapNhatHangMucCongViec();
            }
            else if (type == MyConstant.CONST_TYPE_LAYDAUVIEC_FromGiaoViecChung)
            {
                IWorkbook wb = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
                Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
                CellRange range = wb.Range[MyConstant.Range_KeHoach];
                Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

                var ind = SpreadsheetHelper.FindPrevSameTypeInd(range, ws.SelectedCell.TopRowIndex, dic[GiaoViec.COL_RowCha], typeRowHeading: dic[GiaoViec.COL_TypeRow], crTypeRow: MyConstant.TYPEROW_HangMuc);

                if (ind == -1)
                {
                    MessageShower.ShowWarning("Vui lòng chuột phải phía dưới 1 hạng mục để lấy công tác");
                    return;
                }

                string codeHM = ws.Rows[ind][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                DonViThucHien DVTH = ctrl_DonViThucHienGiaoViec.SelectedDVTH as DonViThucHien;
                if (DVTH == null)
                    return;
                foreach (var row in dt)
                {
                    //DataTable dtDest = DataProvider.InstanceTHDA.ExecuteQuery("SELECT * FROM Tbl_ThongTinDuAn LIMIT 0");
                    ////string colFk = SharedControls.ctrl_DonViThucHienGiaoViec.SelectedDVTH.ColCodeFK;
                    ////string code = SharedControls.ctrl_DonViThucHienGiaoViec.SelectedDVTH.Code;
                    Dictionary<string, object> cols = new Dictionary<string, object>()
                    {
                        { "CodeCongViecCha", Guid.NewGuid().ToString() },
                        //{ "CodeCongTacTheoGiaiDoan",  row.Code},
                        { "MaDinhMuc", row.MaHieuCongTac },
                        { "CodeHangMuc", codeHM},
                        { "TenCongViec", row.TenCongTac },
                        { "DonGia", row.DonGia },
                        { "DonGiaThiCong", row.DonGiaThiCong },
                        { "LyTrinhCaoDo", row.LyTrinhCaoDo },
                        { "KhoiLuongKeHoach", row.KhoiLuongToanBo },
                        { "KhoiLuongHopDong", row.KhoiLuongHopDong },
                        { "NgayBatDau", row.NgayBatDau.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)},
                        { "NgayKetThuc", row.NgayKetThuc.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)},
                        { "MoTa", row.MoTa},
                        { "DonGiaVatLieuDocVao", row.DonGiaVatLieuDocVao},
                        { "DonGiaNhanCongDocVao", row.DonGiaNhanCongDocVao},
                        { "DonGiaMayDocVao", row.DonGiaMayDocVao},
                        { "TrangThai", row.TrangThai},
                        { "DonVi", row.DonVi},
                        { "SortId", row.SortId},
                        //{ "CodeNhaThau", row.CodeNhaThau },
                        //{ "CodeNhaThauPhu", row.CodeNhaThauPhu },
                        //{ "CodeToDoi", row.CodeToDoi}
                        {DVTH.ColCodeFK, DVTH.Code }

                };

                    string dbString = $"INSERT INTO {GiaoViec.TBL_CONGVIECCHA} ({string.Join(", ", cols.Keys)}) VALUES " +
                        $"({string.Join(", ", cols.Keys.Select(x => $"@{x}"))})";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: cols.Values.ToArray());

                }

                if (rg_GV_DauViec.GetAccessibleName() == "ThiCong")
                    fcn_GV_CapNhatHangMucCongViec();
            }
            else if (type == MyConstant.CONST_TYPE_LAYDAUVIEC_DoBocChuan)
            {

                string lsCodeCongTacTheoKy = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x.Code).ToArray());

                string dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacCon} WHERE \"CodeCongTacCha\" IN ({lsCodeCongTacTheoKy})";
                DataTable dtCongTacCon = DataProvider.InstanceTHDA.ExecuteQuery(dbString);


                dbString = $"SELECT * FROM {TDKH.Tbl_HaoPhiVatTu} WHERE \"CodeCongTac\" IN ({lsCodeCongTacTheoKy})";
                DataTable dtHaoPhi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                List<Tbl_TDKH_ChiTietCongTacTheoGiaiDoanViewModel> dtMoi = new List<Tbl_TDKH_ChiTietCongTacTheoGiaiDoanViewModel>();// = dt.Clone();
                DataTable dtConMoi = dtCongTacCon.Clone();
                DataTable dtHaoPhiMoi = dtHaoPhi.Clone();
                List<string> lsCodeNhom = new List<string>();
                List<string> lsCodeDg = new List<string>();

                var nhoms = dt.Where(x => x.CodeNhom.HasValue()).Select(x => x.CodeNhom).Distinct();
                dbString = $"SELECT * FROM {TDKH.TBL_NhomCongTac} WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(nhoms)})";
                DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string CodeCha = "", CodeChaNew = "";
                DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn liên kết giữa nhóm Đơn vị giao thầu và nhóm Đơn vị nhận thầu không?????");
                bool LienKetNhom = rs == DialogResult.Yes ? true : false;
                foreach (var row in dt)
                {
                    if (!string.IsNullOrEmpty(row.CodeCha))
                        continue;
                    DataRow[] rowCTCons = dtCongTacCon.Select($"[CodeCongTacCha] = '{row.Code}'");
                    DataRow[] rowHaoPhis = dtHaoPhi.Select($"[CodeCongTac] = '{row.Code}'");

                    //row["CodeNhom"] = DBNull.Value;
                    if (row.CodeNhom.HasValue() && !lsCodeNhom.Contains(row.CodeNhom))
                    {
                        if (isCopyNhom)
                        {
                            string codeNhom = row.CodeNhom;
                            string newGuid = Guid.NewGuid().ToString();

                            var drNhom = dtNhom.AsEnumerable().Single(x => x["Code"].ToString() == codeNhom);
                            DataRow newRow = dtNhom.NewRow();
                            newRow.ItemArray = drNhom.ItemArray;
                            newRow["Code"] = newGuid;
                            dtNhom.Rows.Add(newRow);
                            if (LienKetNhom)
                                newRow["CodeNhomGiaoThau"] = codeNhom;
                            lsCodeNhom.Add(newGuid);
                            dt.AsEnumerable().Where(x => x.CodeNhom == codeNhom).ForEach(x => x.CodeNhom = newGuid);
                        }
                        else row.CodeNhom = null;
                    }


                    row.KhoiLuongToanBo = row.KhoiLuongCanLay;
                    row.KhoiLuongToanBo_Iscongthucmacdinh = null;
                    DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
                    if (dvth != null)
                        row.SetValueByPropName(dvth.ColCodeFK, dvth.Code);
                    CodeCha = row.Code;
                    CodeChaNew = Guid.NewGuid().ToString();
                    row.Code = CodeChaNew;
                    row.CodeNhaThau = null;
                    if (row.CodePhanTuyen != null)
                    {
                        if (row.CodePhanTuyen.Contains("KPT"))
                            row.CodePhanTuyen = null;
                    }
                    if (row.CodeCha == "")
                    {
                        LayCongTac[] CTChia = dt.Where(x => x.CodeCha == CodeCha).ToArray();
                        row.CodeCha = null;
                        if (CTChia.Any())
                        {
                            row.KhoiLuongToanBo = CTChia.Sum(x => x.KhoiLuongCanLay);
                            row.KhoiLuongHopDongChiTiet = CTChia.Sum(x => x.KhoiLuongHopDongChiTiet);
                            dtMoi.Add(row.MapToOtherModel<Tbl_TDKH_ChiTietCongTacTheoGiaiDoanViewModel>());
                            foreach (var item in CTChia)
                            {
                                if (item.CodePhanTuyen != null)
                                {
                                    if (item.CodePhanTuyen.Contains("KPT"))
                                        item.CodePhanTuyen = null;
                                }
                                item.KhoiLuongToanBo = item.KhoiLuongCanLay;
                                item.KhoiLuongToanBo_Iscongthucmacdinh = null;
                                DataRow[] rowHaoPhiChia = dtHaoPhi.Select($"[CodeCongTac] = '{item.Code}'");
                                item.Code = Guid.NewGuid().ToString();
                                if (dvth != null)
                                    item.SetValueByPropName(dvth.ColCodeFK, dvth.Code);
                                item.CodeNhaThau = null;
                                item.CodeCha = CodeChaNew;
                                if (rowHaoPhiChia.Any())
                                {
                                    foreach (DataRow drHaoPhi in rowHaoPhiChia)
                                    {
                                        drHaoPhi["Code"] = Guid.NewGuid().ToString();
                                        drHaoPhi["CodeCongTac"] = item.Code;
                                        dtHaoPhiMoi.Rows.Add(drHaoPhi.ItemArray);
                                    }
                                }
                                dtMoi.Add(item.MapToOtherModel<Tbl_TDKH_ChiTietCongTacTheoGiaiDoanViewModel>());
                            }
                        }
                        else
                            dtMoi.Add(row.MapToOtherModel<Tbl_TDKH_ChiTietCongTacTheoGiaiDoanViewModel>());
                    }
                    else
                        dtMoi.Add(row.MapToOtherModel<Tbl_TDKH_ChiTietCongTacTheoGiaiDoanViewModel>());

                    foreach (DataRow drCon in rowCTCons)
                    {
                        drCon["Code"] = Guid.NewGuid().ToString();
                        drCon["CodeCongTacCha"] = row.Code;
                        dtConMoi.Rows.Add(drCon.ItemArray);

                        if (drCon["CodeNhom"] != DBNull.Value && !lsCodeDg.Contains(drCon["CodeNhom"].ToString()))
                        {
                            string codeNhomDg = drCon["CodeNhom"].ToString();
                            string newGuid = Guid.NewGuid().ToString();

                            dbString = $"SELECT * FROM {TDKH.TBL_NhomDienGiai} WHERE Code = '{codeNhomDg}'";
                            DataTable dtNhomDg = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                            DataRow newRow = dtNhomDg.NewRow();
                            newRow.ItemArray = dtNhomDg.Rows[0].ItemArray;
                            newRow["Code"] = newGuid;
                            dtNhomDg.Rows.Add(newRow);
                            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNhomDg, TDKH.TBL_NhomDienGiai);

                            lsCodeDg.Add(newGuid);
                            dt.AsEnumerable().Where(x => x.CodeNhom == codeNhomDg).ForEach(x => x.CodeNhom = newGuid);
                        }

                    }

                    foreach (DataRow drHaoPhi in rowHaoPhis)
                    {
                        drHaoPhi["Code"] = Guid.NewGuid().ToString();
                        drHaoPhi["CodeCongTac"] = row.Code;
                        dtHaoPhiMoi.Rows.Add(drHaoPhi.ItemArray);
                    }
                }

                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNhom, TDKH.TBL_NhomCongTac);

                DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(dtMoi.fcn_ObjToDataTable(), TDKH.TBL_ChiTietCongTacTheoKy);
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtConMoi, TDKH.TBL_ChiTietCongTacCon);
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtHaoPhiMoi, TDKH.Tbl_HaoPhiVatTu);
                TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(dtMoi.AsEnumerable().Select(x => x.Code).ToArray());
                fcn_LoadCongTrinhHangMuc();
                fcn_LoadCongTacDoBoc();

                //fcn_UpdateCongTacDoBoc();
            }
            WaitFormHelper.CloseWaitForm();

        }

        /// <summary>
        /// Cập nhật công việc hàng ngày
        /// </summary>
        /// <param name="oldTable"></param>
        private void fcn_LoadBaoCaoCVHangNgay()
        {

            //tl_CVHN_BaoCao.ExpandAll();
            fcn_LoadBaoCaoGiaoViec1Day();

            fcn_CVHN_LoadTongHopBaoCaoHangNgay2spSheet();

        }
        private void fcn_LoadBaoCaoGiaoViec1Day()
        {
            DateTime dateSelected = dtp_KLHangNgay.Value.Date;
            var lsHangNgay = GiaoViecHelper.LoadCongTacHangNgay(TypeLoadKLHangNgay.Only1Day, dateSelected);

            tl_CVHN_BaoCao.DataSource = new BindingList<KLTTHangNgay>(lsHangNgay);


            string dbString = $"SELECT da.* " +
                $"FROM {MyConstant.TBL_THONGTINCONGTRINH} ct " +
                $"JOIN {MyConstant.TBL_THONGTINDUAN} da " +
                $"WHERE ct.CodeDuAn = da.Code " +
                $"ORDER BY da.CreatedOn DESC, " +
                $"ct.CreatedOn DESC";

            var datas = DataProvider.InstanceTHDA.ExecuteQueryModel<ThongTinDuAnExtensionViewModel>(dbString);
            slke_BaoCaoGiaoViec_Ctrinh.Properties.DataSource = datas;
            slke_BaoCaoGiaoViec_Ctrinh_EditValueChanged(null, null);
        }

        private void btn_XuatBaoCao_Click(object sender, EventArgs e)
        {
            CVHN_BaoCaoChung.ShowPrintPreview();
        }


        private void spsheet_GV_KH_ChiTietCacHMCongViec_RowsInserted(object sender, RowsChangedEventArgs e)
        {
            //fcn_KHGV_loadLaiCongTacChaCon();

        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_RowsRemoved(object sender, RowsChangedEventArgs e)
        {
            //fcn_KHGV_loadLaiCongTacChaCon();

        }

        private void cbo_MenuChonToDoi_SelectedIndexChanged(object sender, EventArgs e)
        {

        }





        private void fcn_LoadDicCongTrinhHangMuc(out Dictionary<string, string> dicCT, out Dictionary<string, string> dicHM)
        {
            string dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dicCT = dt.AsEnumerable().ToDictionary(x => x["Code"].ToString(), x => x["Ten"].ToString());

            dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dicHM = dt.AsEnumerable().ToDictionary(x => x["Code"].ToString(), x => x["Ten"].ToString());

        }





        private void fcn_GetDtCongTrinhHangMuc(out DataTable dtCongTrinh, out DataTable dtHangMuc)
        {
            int sort = 0;
            string dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}' ORDER BY \"SortId\" ASC";
            dtCongTrinh = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dtCongTrinh.AsEnumerable().ForEach(x => x["SortId"] = sort++);

            sort = 0;

            string lsCodeCT = MyFunction.fcn_Array2listQueryCondition(dtCongTrinh.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeCongTrinh\" IN ({lsCodeCT}) ORDER BY \"SortId\" ASC";
            dtHangMuc = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dtHangMuc.AsEnumerable().ForEach(x => x["SortId"] = sort++);

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtCongTrinh, MyConstant.TBL_THONGTINCONGTRINH);
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtHangMuc, MyConstant.TBL_THONGTINHANGMUC);

        }



        //private void fcn_LoadLaiCongThucDoBoc(Row row)
        //{
        //    IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
        //    Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];
        //    Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[TDKH.RANGE_DoBocChuan]);

        //    bool isRowCha = int.TryParse(row[dic[TDKH.COL_RowCha]].Value.ToString(), out int indRowCha);



        //    string code = row[dic[TDKH.COL_Code]].Value.ToString();
        //    string typeRow = row[dic[TDKH.COL_TypeRow]].Value.ToString();
        //    string tbl = "";
        //    switch (typeRow)
        //    {
        //        case MyConstant.TYPEROW_CVCON:
        //            tbl = TDKH.TBL_ChiTietCongTacCon;

        //            break;
        //        case MyConstant.TYPEROW_CVCha:
        //            tbl = TDKH.TBL_ChiTietCongTacTheoKy;
        //            break;
        //        case MyConstant.TYPEROW_NhomDienGiai:
        //            tbl = TDKH.TBL_NhomDienGiai;
        //            break;
        //        case MyConstant.TYPEROW_Nhom:
        //            tbl = TDKH.TBL_NhomCongTac;
        //            break;
        //        default:
        //            return;
        //    }

        //    string dbString = $"DELETE FROM \"{tbl}\" WHERE \"Code\" = '{code}'";
        //    int ret = DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

        //    if (ret <= 0)
        //        MessageShower.ShowInformation("Không tìm thấy thông tin tương ứng dòng dữ liệu đã xóa");

        //    fcn_LoadCongTacDoBoc();
        //}

        private void UpdateKinhPhiPhanBo()
        {
            DataRow drKPPB = TongHopHelper.GetKinhPhiPhanBo();
            if (drKPPB is null)
                return;
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            wb.BeginUpdate();
            wb.Range[TDKH.RANGE_KinhPhiPhanBoToanDuAn].SetValue(drKPPB[TDKH.RANGE_KinhPhiPhanBoToanDuAn]);

            nud_ToanDuAn.ValueChanged -= nud_ToanDuAn_ValueChanged;
            //nud_VatTu.ValueChanged -= nud_VatTu_ValueChanged;
            nud_VatLieu.ValueChanged -= nud_VatLieu_ValueChanged;
            nud_NhanCong.ValueChanged -= nud_NhanCong_ValueChanged;
            nud_MayThiCong.ValueChanged -= nud_MayThiCong_ValueChanged;
            //ce_PhanBoRiengVatTu.CheckedChanged -= ce_PhanBoRiengVatTu_CheckedChanged;

            nud_ToanDuAn.Value = (long)drKPPB[TDKH.RANGE_KinhPhiPhanBoToanDuAn];
            //nud_VatTu.Value = (long)drKPPB["KinhPhiPhanBoVatTu"];
            nud_VatLieu.Value = (long)drKPPB[TDKH.RANGE_KinhPhiPhanBoVatLieu];
            nud_NhanCong.Value = (long)drKPPB[TDKH.RANGE_KinhPhiPhanBoNhanCong];
            nud_MayThiCong.Value = (long)drKPPB[TDKH.RANGE_KinhPhiPhanBoMay];
            //ce_PhanBoRiengVatTu.Checked = (bool)drKPPB["IsPhanBoRiengVatTu"];


            nud_ToanDuAn.ValueChanged += nud_ToanDuAn_ValueChanged;
            //nud_VatTu.ValueChanged += nud_VatTu_ValueChanged;
            nud_VatLieu.ValueChanged += nud_VatLieu_ValueChanged;
            nud_NhanCong.ValueChanged += nud_NhanCong_ValueChanged;
            nud_MayThiCong.ValueChanged += nud_MayThiCong_ValueChanged;
            //ce_PhanBoRiengVatTu.CheckedChanged += ce_PhanBoRiengVatTu_CheckedChanged;

            nud_ToanDuAn_ValueChanged(null, null);
            //ce_PhanBoRiengVatTu_CheckedChanged(null, null);

            wb.EndUpdate();
        }


        //private void ce_PhanBoRiengVatTu_CheckedChanged(object sender, EventArgs e)
        //{
        //    IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
        //    wb.BeginUpdate();
        //    if (ce_PhanBoRiengVatTu.Checked)
        //    {
        //        lci_KinhPhiVatTu.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
        //        lci_KinhPhiVatLieu.Visibility = lci_KinhPhiNhanCong.Visibility = lci_KinhPhiMay.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;

        //        wb.Range[TDKH.RANGE_KinhPhiPhanBoVatLieu].SetValue(nud_VatLieu.Value);
        //        wb.Range[TDKH.RANGE_KinhPhiPhanBoNhanCong].SetValue(nud_NhanCong.Value);
        //        wb.Range[TDKH.RANGE_KinhPhiPhanBoMay].SetValue(nud_MayThiCong.Value);

        //        wb.Range[TDKH.RANGE_TongKinhPhiTheoTienDoVatTu_VatLieu].Formula = TDKH.RANGE_TongKinhPhiVatLieu;
        //        wb.Range[TDKH.RANGE_TongKinhPhiTheoTienDoVatTu_NhanCong].Formula = TDKH.RANGE_TongKinhPhiNhanCong;
        //        wb.Range[TDKH.RANGE_TongKinhPhiTheoTienDoVatTu_MayThiCong].Formula = TDKH.RANGE_TongKinhPhiMayThiCong;
        //    }
        //    else
        //    {
        //        lci_KinhPhiVatTu.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
        //        lci_KinhPhiVatLieu.Visibility = lci_KinhPhiNhanCong.Visibility = lci_KinhPhiMay.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
        //        wb.Range[TDKH.RANGE_KinhPhiPhanBoVatLieu].Value =
        //        wb.Range[TDKH.RANGE_KinhPhiPhanBoNhanCong].Value =
        //        wb.Range[TDKH.RANGE_KinhPhiPhanBoMay].Value = CellValue.TryCreateFromObject(nud_VatTu.Value);

        //        wb.Range[TDKH.RANGE_TongKinhPhiTheoTienDoVatTu_VatLieu].Formula =
        //        wb.Range[TDKH.RANGE_TongKinhPhiTheoTienDoVatTu_NhanCong].Formula =
        //        wb.Range[TDKH.RANGE_TongKinhPhiTheoTienDoVatTu_MayThiCong].Formula = $"{TDKH.RANGE_TongKinhPhiVatLieu} + {TDKH.RANGE_TongKinhPhiNhanCong} + {TDKH.RANGE_TongKinhPhiMayThiCong}";
        //    }

        //    string dkString = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();
        //    string dbString = $"UPDATE {TDKH.TBL_KinhPhiPhanBo} SET IsPhanBoRiengVatTu = {ce_PhanBoRiengVatTu.Checked} WHERE {dkString}";
        //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        //    wb.EndUpdate();
        //    DinhMucHelper.SaveAllVatTu();
        //}

        /// <summary>
        /// Tải công tác đo bóc từ CSDL
        /// </summary>
        private void fcn_LoadCongTacDoBoc()
        {
            TDKHHelper.LoadCongTacDoBoc();
            UpdateKinhPhiPhanBo();
        }



        private void bt_LuuVaoCoSoDuLieu_Click(object sender, EventArgs e)
        {
            fcn_UpdateCongTacDoBoc();
        }


        private void cbo_MTD_ChonDot_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void fcn_CVHN_LoadTongHopBaoCaoHangNgay2spSheet()
        {
            if (ce_UseRangeDate.Checked)
            {
                //string dateBD = dtp_CVHN_Start.Value.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                //string dateKT = dtp_CVHN_End.Value.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

                CVHN_BaoCaoChung.DataSource = GiaoViecHelper.LoadCongTacHangNgay(TypeLoadKLHangNgay.RangeDate, dtp_CVHN_Start.Value.Date, dtp_CVHN_End.Value.Date, isShowDateDetail: true);
            }
            else
                CVHN_BaoCaoChung.DataSource = GiaoViecHelper.LoadCongTacHangNgay(TypeLoadKLHangNgay.RangeDate, isShowDateDetail: true);

            CVHN_BaoCaoChung.ExpandToLevel((int)LevelCongViec.Nhom);
        }


        private void spsheet_TDKH_DoBocKLKeHoach_RowsRemoving(object sender, RowsChangingEventArgs e)
        {

        }

        #region Lộc merge 2 main
        private void cbo_MHD_ChonLoaiHopDong_SelectedIndexChanged(object sender, EventArgs e)
        {
            //--- MỞ FILE SỬA HỢP ĐỒNG ---//
            // Thoát khi không tìm được
            if (cbo_MHD_ChonLoaiHopDong.SelectedIndex < 0)
                return;
            // Tạo đường dẫn thư mục file từ ComBobox
            string filePath = $@"{BaseFrom.m_templatePath}\FileWord\{cbo_MHD_ChonLoaiHopDong.SelectedItem.ToString()}.doc"; // Tạo hợp đồng
            // Điều kiện mở thoát file
            if (File.Exists(filePath))
            {
                word_loaiHD.LoadDocument(filePath);
            }
            // Thông báo file không tồn tại
            else
            {
                MessageShower.ShowInformation("File không tồn tại");
            }
        }

        /// <summary>
        /// Phần hợp đồng
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// 
        private List<string> fcn_getUserBM(IWorkbook workbook, string tiento)
        {
            List<string> lsBM = new List<string>();
            foreach (DefinedName nm in workbook.DefinedNames)
            {
                if (nm.Name.StartsWith($"{tiento}__NguoiDung__"))
                {
                    lsBM.Add(nm.Name);
                }
            }
            return lsBM;
        }

        private void fcn_ChenBookmark()
        {
            //if (cbb_BBxemTruoc.SelectedIndex < 0)
            //    return;

            //if (dgv_TrinhTuThucHien.SelectedCells.Count <= 0)
            //    return;
            //string docPath = (cbb_BBnguoiDung.Text == "Biên bản mặc định") ?
            //    $@"{BaseFrom.m_tempPath}\{m_crTempDA}\Biểu mẫu\{cbb_ChonTrinhTuThucHien.Text}\{cbb_BBxemTruoc.Text}" :
            //    $@"{BaseFrom.m_tempPath}\{m_crTempDA}\Biểu mẫu\{cbb_ChonTrinhTuThucHien.Text}\Người dùng\{cbb_BBnguoiDung.Text}";
            /*            if (cbb_BBnguoiDung.Text == "Biên bản mặc định")
                        {
                            word_TheoGiaiDoan.Document.LoadDocument($@"{BaseFrom.m_tempPath}\{m_crTempDA}\Biểu mẫu\{cbb_ChonTrinhTuThucHien.Text}\{cbb_BBxemTruoc.Text}");
                            //word_BieuMauGoc.Document.LoadDocument($@"{BaseFrom.m_tempPath}\{m_crTempDA}\Biểu mẫu\{cbb_ChonTrinhTuThucHien.Text}\{cbb_BBxemTruoc.Text}");
                        }
                        else
                        {
                            word_TheoGiaiDoan.Document.LoadDocument($@"{BaseFrom.m_tempPath}\{m_crTempDA}\Biểu mẫu\{cbb_ChonTrinhTuThucHien.Text}\Người dùng\{cbb_BBnguoiDung.Text}");
                            //word_BieuMauGoc.Document.LoadDocument($@"{BaseFrom.m_tempPath}\{m_crTempDA}\Biểu mẫu\{cbb_ChonTrinhTuThucHien.Text}\Người dùng\{cbb_BBnguoiDung.Text}");
                        }    */
            string tempFile = $@"{BaseFrom.m_templatePath}\FileWord\{cbo_MHD_ChonLoaiHopDong.Text}.doc";

            //if (File.Exists(tempFile))
            //    File.Delete(tempFile);

            //File.Copy(docPath, tempFile);
            //File.SetAttributes(tempFile, FileAttributes.Hidden);
            word_loaiHD.LoadDocument(tempFile);
            MWORD.Document document = word_loaiHD.Document;

            MWORD.BookmarkCollection nameBookmarks = document.Bookmarks;
            List<string> lsBmName = new List<string>();
            foreach (MWORD.Bookmark bm in nameBookmarks)
            {
                //if (bm.Name.Contains("KyHieu"))
                lsBmName.Add(bm.Name);
            }

            foreach (string str in lsBmName)
            {
                string NameBM = (str.Contains("___")) ? str.Substring(0, str.IndexOf("___")) : str;
                if (str.StartsWith("TTCT__"))
                {
                    if (NameBM.StartsWith("TTCT__NguoiDung__"))
                    {
                        IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
                        Worksheet worksheet = workbook.Worksheets[0];
                        MWORD.Bookmark bm1 = document.Bookmarks[str];
                        try
                        {
                            CellRange range = workbook.Range[NameBM];
                            document.Replace(bm1.Range, range.Value.ToString());
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("Chèn bookmark fail TTCT: " + ex);
                            continue;
                        }
                        return;
                    }
                    //MWORD.Bookmark bm = document.Bookmarks[str];
                    //string queryStr = $"SELECT \"Cot\", \"ChiMuc\" FROM Tbl_Bookmark WHERE \"Bookmark\"='{NameBM.Replace("TTCT__", "")}'";
                    //DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                    //if (dt.Rows.Count > 0)
                    //{
                    //    string col = dt.Rows[0]["Cot"].ToString();
                    //    string chimuc = dt.Rows[0]["ChiMuc"].ToString();

                    //    if ((chimuc == "CoQuanQuyetDinhDauTu") || (chimuc == "ChuDauTu") || (chimuc == "DonViQuanLyDuAn"))
                    //        queryStr = $"SELECT * FROM {tblTTCT} WHERE \"ChiMuc\"='{chimuc}'";
                    //    else
                    //        queryStr = $"SELECT * FROM {tblTTCT} WHERE \"CongViecThucHien\"='{cbb_CongTrinhHienTai.Text}' AND \"ChiMuc\"='{chimuc}'";
                    //    dt = DataProvider.InstanceTHDAThongTinCT.ExecuteQuery(queryStr);
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        /*                            MWORD.CharacterProperties cp = document.BeginUpdateCharacters(bm.Range);
                    //                                    cp.FontName = "Comic Sans MS";
                    //                                    cp.FontSize = 18;
                    //                                    cp.ForeColor = Color.Blue;
                    //                                    cp.BackColor = Color.Snow;
                    //                                    document.EndUpdateCharacters(cp);
                    //        */
                    //        document.Replace(bm.Range, dt.Rows[0][col].ToString());
                    //    }
                    //}
                }
            }
            word_loaiHD.SaveDocument();

        }

        private void btn_THD_SuaThemBeuMau_Click(object sender, EventArgs e)
        {

        }

        private void radio_THD_HopDongAB_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton radio = sender as RadioButton;
            Dictionary<string, string> MyDic = new Dictionary<string, string>();
            MyDic.Add(radio_THD_HopDongAB.Text, "HĐ giám sát thi công xây dựng A-B.doc");
            MyDic.Add(radio_THD_HopDongBB.Text, "HĐ cung cấp vật tư thi công B-B.doc");
            //MyDic.Add(radio_THD_HopDongToDoi.Text, "ỐM");
            MyDic.Add(radio_THD_HopDongNhaCungCap.Text, "HĐ cung cấp vật tư thi công B-B.doc");
            //MyDic.Add(radio_THD_HopDongKhac.Text, "DE");
            foreach (KeyValuePair<string, string> item in MyDic)
            {
                if (radio.Text == item.Key)
                {
                    cbo_MHD_ChonLoaiHopDong.Text = item.Value;
                    string filePath = $@"{BaseFrom.m_templatePath}\FileWord\{item.Value}"; // Tạo hợp đồng                                                                                                                          // Điều kiện mở thoát file
                    if (File.Exists(filePath))
                    {
                        word_loaiHD.LoadDocument(filePath);
                    }
                    // Thông báo file không tồn tại
                    else
                    {
                        MessageShower.ShowInformation("File không tồn tại");
                    }
                }
            }
            if (radio.Checked == radio_THD_HopDongToDoi.Checked || radio.Checked == radio_THD_HopDongKhac.Checked)
            {
                cbo_MHD_ChonLoaiHopDong.Text = radio.Text;
            }
        }

        private void fcn_handleThemDuongDanTTCT(object sender, EventArgs e)
        {
            string BM = DevExpress.XtraEditors.XtraInputBox.Show("Nhập tên đường dẫn", "Tạo đường dẫn mới", "");
            if (BM == "")
                return;

            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets.ActiveWorksheet;

            CellRange range = spread_PhuLucHopDong_Full.SelectedCell;
            workbook.DefinedNames.Add($"TTCT__NguoiDung__{BM}", $"'{worksheet.Name}'!${worksheet.Columns[range.LeftColumnIndex].Heading}${range.TopRowIndex + 1}");
        }
        private void fcn_handleThemLoaiHD(object sender, EventArgs e)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Worksheet worksheet_congtrinh = workbook.Worksheets["Thông tin công trình_Hạng mục"];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
            CellRange ct_hm = worksheet_congtrinh.Range["A3:W5"];
            spread_PhuLucHopDong_Full.BeginUpdate();
            worksheet.Rows.Insert(rangeXD.BottomRowIndex, 4, RowFormatMode.FormatAsPrevious);
            worksheet.Range["A" + (rangeXD.BottomRowIndex + 1).ToString() + ":" + DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong] + (rangeXD.BottomRowIndex + 3).ToString()].CopyFrom(ct_hm, PasteSpecial.All);
            spread_PhuLucHopDong_Full.EndUpdate();
            //fcn_updatetenhopdong();
        }
        private void spread_PhuLucHopDong_Full_PopupMenuShowing(object sender, DevExpress.XtraSpreadsheet.PopupMenuShowingEventArgs e)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            //e.Menu.Items.Clear();
            //SpreadsheetMenuItem myItem = new SpreadsheetMenuItem("Thêm đường dẫn", new EventHandler(fcn_handleThemDuongDanTTCT));
            //SpreadsheetMenuItem myItem1 = new SpreadsheetMenuItem("Thêm loại hợp đồng", new EventHandler(fcn_handleThemLoaiHD));
            //e.Menu.Items.Add(myItem);
            //e.Menu.Items.Add(myItem1);
            if (worksheet.Rows[worksheet.SelectedCell.BottomRowIndex][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "CT" && worksheet.Rows[worksheet.SelectedCell.BottomRowIndex][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].Value.ToString() == "")
            {
                SpreadsheetMenuItem myItem2 = new SpreadsheetMenuItem("Thêm công tác", new EventHandler(fcn_handleThemcongtac));
                e.Menu.Items.Add(myItem2);
                //SpreadsheetMenuItem myItem3 = new SpreadsheetMenuItem("Thêm công tác người dùng", new EventHandler(fcn_handleThemcongtac_ND));
                //e.Menu.Items.Add(myItem3);
                SpreadsheetMenuItem myItem4 = new SpreadsheetMenuItem("Thêm vật liệu", new EventHandler(fcn_handleThemcongtac_VL));
                e.Menu.Items.Add(myItem4);
                SpreadsheetMenuItem myItem5 = new SpreadsheetMenuItem("Thêm nhân công", new EventHandler(fcn_handleThemcongtac_NC));
                e.Menu.Items.Add(myItem5);
                SpreadsheetMenuItem myItem6 = new SpreadsheetMenuItem("Thêm máy thi công", new EventHandler(fcn_handleThemcongtac_MTC));
                e.Menu.Items.Add(myItem6);
                SpreadsheetMenuItem myItem7 = new SpreadsheetMenuItem("Thêm vật liệu từ kế hoạch vật tư", new EventHandler(fcn_handleThemcongtac_VLKHVT));
                e.Menu.Items.Add(myItem7);
            }

        }
        //private void fcn_handleThemcongtac_ND(object sender, EventArgs e)
        //{

        //}
        //static string ColumCotDB = "";
        private void fcn_handleThemcongtac_VLKHVT(object sender, EventArgs e)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];

            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];

            Dictionary<string, string> DIC_HD = MyFunction.fcn_getDicOfColumn(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN]);
            int ps = -1;
            for (int i = worksheet.SelectedCell.BottomRowIndex; i > rangeXD.TopRowIndex; i--)
            {
                string kyhieu = worksheet.Rows[i][DIC_HD[MyConstant.COL_HD_Kyhieu]].Value.ToString();
                if (kyhieu == "HD")
                {
                    string tenhopdong = worksheet.Rows[i + 1][DIC_HD[MyConstant.COL_HD_Tencongviec]].Value.ToString();
                    Dictionary<string, string> DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, false, 0);
                    if (DVTH == null)
                    {
                        MessageShower.ShowError("Vui lòng chọn Tên hợp đồng!", "Lỗi hợp đồng..");
                        return;
                    }
                    if (DVTH.FirstOrDefault().Key != MyConstant.TBL_THONGTINNHACUNGCAP)
                    {
                        MessageShower.ShowError("Vui lòng chọn lại Thêm công tác!", "Lỗi loại hợp đồng..");
                        return;
                    }
                    Form_LayVatLieuHopDongKHVT HD = new Form_LayVatLieuHopDongKHVT();
                    HD.m_TruyenData = new Form_LayVatLieuHopDongKHVT.DE__TRUYENDATA(fcn_truyencongtac_VLKHVT);
                    HD.ShowDialog();

                    return;
                }
                else if (kyhieu == "PL")
                    ps++;
            }
        }
        private void fcn_handleThemcongtac_VL(object sender, EventArgs e)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];

            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];

            Dictionary<string, string> DIC_HD = MyFunction.fcn_getDicOfColumn(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN]);
            int ps = -1;
            for (int i = worksheet.SelectedCell.BottomRowIndex; i > rangeXD.TopRowIndex; i--)
            {
                string kyhieu = worksheet.Rows[i][DIC_HD[MyConstant.COL_HD_Kyhieu]].Value.ToString();
                if (kyhieu == "HD")
                {
                    string tenhopdong = worksheet.Rows[i + 1][DIC_HD[MyConstant.COL_HD_Tencongviec]].Value.ToString();
                    Dictionary<string, string> DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, false, 0);
                    if (DVTH == null)
                    {
                        MessageShower.ShowError("Vui lòng chọn Tên hợp đồng!", "Lỗi hợp đồng..");
                        return;
                    }
                    if (DVTH.FirstOrDefault().Key != MyConstant.TBL_THONGTINNHACUNGCAP)
                    {
                        MessageShower.ShowError("Vui lòng chọn lại Thêm công tác!", "Lỗi loại hợp đồng..");
                        return;
                    }
                    string dbString = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG}";
                    DataTable dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    dbString = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG_MECON} WHERE \"CodeCon\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                    DataTable dt_me = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    if (dt_me.Rows.Count == 0)
                    {
                        MessageShower.ShowError("Bạn chưa tạo hợp đồng chính nên chưa có bảng số liệu để thực hiện cho hợp đồng này. Vui lòng quay lại nhà thầu chính (bên giao thầu) để tạo ít nhất 1 hợp đồng trước khi tạo bảng phụ lục này!", "Lỗi loại hợp đồng..");
                        return;
                    }
                    string codenhathau = dt_HD.AsEnumerable().Where(x => x["Code"].ToString() == dt_me.Rows[0]["CodeMe"].ToString())
                        .Select(x => x["CodeNhaThau"].ToString()).ToList().FirstOrDefault().ToString();
                    Dictionary<string, string> DV = new Dictionary<string, string>();
                    DV.Add(MyConstant.TBL_THONGTINNHATHAU, codenhathau);
                    DV.Add(MyConstant.TBL_THONGTINNHACUNGCAP, cbo_MeNuTenHopDong.SelectedValue.ToString());
                    //.Add(MyConstant.TBL_THONGTINNHATHAU, codenhathau);
                    FormLayVatLieuHopDong HD = new FormLayVatLieuHopDong();
                    HD.Fcn_LoadData(ps, DV);
                    HD.LoaiVatLieu = "Vật liệu";
                    HD.m_TruyenData = new FormLayVatLieuHopDong.DE__TRUYENDATA(fcn_truyencongtac_VL);
                    HD.ShowDialog();

                    return;
                }
                else if (kyhieu == "PL")
                    ps++;
            }
        }
        private void fcn_handleThemcongtac_NC(object sender, EventArgs e)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];

            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];

            Dictionary<string, string> DIC_HD = MyFunction.fcn_getDicOfColumn(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN]);
            int ps = -1;
            for (int i = worksheet.SelectedCell.BottomRowIndex; i > rangeXD.TopRowIndex; i--)
            {
                string kyhieu = worksheet.Rows[i][DIC_HD[MyConstant.COL_HD_Kyhieu]].Value.ToString();
                if (kyhieu == "HD")
                {
                    string tenhopdong = worksheet.Rows[i + 1][DIC_HD[MyConstant.COL_HD_Tencongviec]].Value.ToString();
                    Dictionary<string, string> DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, false, 0);
                    if (DVTH == null)
                    {
                        MessageShower.ShowError("Vui lòng chọn Tên hợp đồng!", "Lỗi hợp đồng..");
                        return;
                    }
                    if (DVTH.FirstOrDefault().Key != MyConstant.TBL_THONGTINNHACUNGCAP)
                    {
                        MessageShower.ShowError("Vui lòng chọn lại Thêm công tác!", "Lỗi loại hợp đồng..");
                        return;
                    }
                    string dbString = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG}";
                    DataTable dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    dbString = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG_MECON} WHERE \"CodeCon\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                    DataTable dt_me = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    if (dt_me.Rows.Count == 0)
                    {
                        MessageShower.ShowError("Bạn chưa tạo hợp đồng chính nên chưa có bảng số liệu để thực hiện cho hợp đồng này. Vui lòng quay lại nhà thầu chính (bên giao thầu) để tạo ít nhất 1 hợp đồng trước khi tạo bảng phụ lục này!", "Lỗi loại hợp đồng..");
                        return;
                    }
                    string codenhathau = dt_HD.AsEnumerable().Where(x => x["Code"].ToString() == dt_me.Rows[0]["CodeMe"].ToString())
                        .Select(x => x["CodeNhaThau"].ToString()).ToList().FirstOrDefault().ToString();
                    Dictionary<string, string> DV = new Dictionary<string, string>();
                    DV.Add(MyConstant.TBL_THONGTINNHATHAU, codenhathau);
                    DV.Add(MyConstant.TBL_THONGTINNHACUNGCAP, cbo_MeNuTenHopDong.SelectedValue.ToString());
                    //.Add(MyConstant.TBL_THONGTINNHATHAU, codenhathau);
                    FormLayVatLieuHopDong HD = new FormLayVatLieuHopDong();
                    HD.Fcn_LoadData(ps, DV);
                    HD.LoaiVatLieu = "Nhân công";
                    HD.m_TruyenData = new FormLayVatLieuHopDong.DE__TRUYENDATA(fcn_truyencongtac_VL);
                    HD.ShowDialog();

                    return;
                }
                else if (kyhieu == "PL")
                    ps++;
            }
        }
        private void fcn_handleThemcongtac_MTC(object sender, EventArgs e)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];

            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];

            Dictionary<string, string> DIC_HD = MyFunction.fcn_getDicOfColumn(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN]);
            int ps = -1;
            for (int i = worksheet.SelectedCell.BottomRowIndex; i > rangeXD.TopRowIndex; i--)
            {
                string kyhieu = worksheet.Rows[i][DIC_HD[MyConstant.COL_HD_Kyhieu]].Value.ToString();
                if (kyhieu == "HD")
                {
                    string tenhopdong = worksheet.Rows[i + 1][DIC_HD[MyConstant.COL_HD_Tencongviec]].Value.ToString();
                    Dictionary<string, string> DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, false, 0);
                    if (DVTH == null)
                    {
                        MessageShower.ShowError("Vui lòng chọn Tên hợp đồng!", "Lỗi hợp đồng..");
                        return;
                    }
                    if (DVTH.FirstOrDefault().Key != MyConstant.TBL_THONGTINNHACUNGCAP)
                    {
                        MessageShower.ShowError("Vui lòng chọn lại Thêm công tác!", "Lỗi loại hợp đồng..");
                        return;
                    }
                    string dbString = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG}";
                    DataTable dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    dbString = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG_MECON} WHERE \"CodeCon\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                    DataTable dt_me = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    if (dt_me.Rows.Count == 0)
                    {
                        MessageShower.ShowError("Bạn chưa tạo hợp đồng chính nên chưa có bảng số liệu để thực hiện cho hợp đồng này. Vui lòng quay lại nhà thầu chính (bên giao thầu) để tạo ít nhất 1 hợp đồng trước khi tạo bảng phụ lục này!", "Lỗi loại hợp đồng..");
                        return;
                    }
                    string codenhathau = dt_HD.AsEnumerable().Where(x => x["Code"].ToString() == dt_me.Rows[0]["CodeMe"].ToString())
                        .Select(x => x["CodeNhaThau"].ToString()).ToList().FirstOrDefault().ToString();
                    Dictionary<string, string> DV = new Dictionary<string, string>();
                    DV.Add(MyConstant.TBL_THONGTINNHATHAU, codenhathau);
                    DV.Add(MyConstant.TBL_THONGTINNHACUNGCAP, cbo_MeNuTenHopDong.SelectedValue.ToString());
                    //.Add(MyConstant.TBL_THONGTINNHATHAU, codenhathau);
                    FormLayVatLieuHopDong HD = new FormLayVatLieuHopDong();
                    HD.Fcn_LoadData(ps, DV);
                    HD.LoaiVatLieu = "Máy thi công";
                    HD.m_TruyenData = new FormLayVatLieuHopDong.DE__TRUYENDATA(fcn_truyencongtac_VL);
                    HD.ShowDialog();

                    return;
                }
                else if (kyhieu == "PL")
                    ps++;
            }
        }
        private void fcn_UpdateVatLieu_ThuCong(DataTable dt)
        {
            tL_YeuCauVatTu.DeleteSelectedNodes();
            tL_NhapKho.RefreshDataSource();
            List<VatLieu> VL = tL_YeuCauVatTu.DataSource as List<VatLieu>;
            List<NhapVatLieu> NVL = tL_NhapKho.DataSource as List<NhapVatLieu>;
            foreach (DataRow item in dt.Rows)
            {
                string codedexuat = Guid.NewGuid().ToString();
                string dbString = $"INSERT INTO '{QLVT.TBL_QLVT_YEUCAUVT}' (\"TrangThai\",\"Code\",\"TenVatTu\",\"MaVatTu\",\"DonVi\",\"CodeGiaiDoan\",\"CodeHangMuc\") " +
                    $"VALUES ('{1}','{codedexuat}',@VatTu, @MaVatLieu, @DonVi,'{cbb_DBKH_ChonDot.SelectedValue}','{m_ctrlVatlieu.m_codeHM}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item["VatTu"], item["MaVatLieu"], item["DonVi"] });
                string codeNhapVT = Guid.NewGuid().ToString();
                dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVT} (\"TrangThai\",\"CodeDeXuat\",\"Code\",\"CodeGiaiDoan\",\"TenKhoNhap\") VALUES ('{1}','{codedexuat}','{codeNhapVT}','{cbb_DBKH_ChonDot.SelectedValue}','{m_ctrlVatlieu.m_codeHM}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                VL.Add(new VatLieu()
                {
                    ParentID = m_ctrlVatlieu.m_codeHM,
                    ID = codedexuat,
                    TrangThai = 1,
                    MaVatTu = item["MaVatLieu"].ToString(),
                    TenVatTu = item["VatTu"].ToString(),
                    DonVi = item["Donvi"].ToString(),
                    FileDinhKem = "Xem File"
                    //CodeHd = "",
                    //CodeKHVT = "",
                    //CodeTDKH = ""
                });
                NVL.Add(new NhapVatLieu()
                {
                    ParentID = m_ctrlVatlieu.m_codeHM,
                    TenKhoNhap = m_ctrlVatlieu.m_codeHM,
                    ID = codeNhapVT,
                    CodeDeXuat = codedexuat,
                    MaVatTu = item["MaVatLieu"].ToString(),
                    TenVatTu = item["VatTu"].ToString(),
                    DonVi = item["Donvi"].ToString(),
                    TrangThai = 1,
                    FileDinhKem = "Xem File"
                    //CodeHd = null,
                    //CodeKHVT = null,
                    //CodeTDKH = null
                });

            }
            VL.Add(new VatLieu()
            {
                ParentID = m_ctrlVatlieu.m_codeHM,
                ID = Guid.NewGuid().ToString(),
            });


            tL_YeuCauVatTu.RefreshDataSource();
            tL_YeuCauVatTu.Refresh();
            tL_YeuCauVatTu.EndUpdate();
            //tL_YeuCauVatTu.DataSource = VL;
            tL_YeuCauVatTu.FocusedNode = tL_YeuCauVatTu.MoveLastVisible();

            tL_NhapKho.RefreshDataSource();
            //tL_NhapKho.DataSource = NVL;
            tL_NhapKho.FocusedNode = tL_NhapKho.MoveLastVisible();
            //Thread.CurrentThread.Abort();
        }
        //private void fcn_UpdateVatLieu(DataTable dt)
        //{
        //    tL_YeuCauVatTu.DeleteSelectedNodes();
        //    List<VatLieu> VL = tL_YeuCauVatTu.DataSource as List<VatLieu>;
        //    List<NhapVatLieu> NVL = tL_NhapKho.DataSource as List<NhapVatLieu>;
        //    foreach (DataRow item in dt.Rows)
        //    {
        //        string codedexuat = Guid.NewGuid().ToString();
        //        string dbString = $"INSERT INTO '{QLVT.TBL_QLVT_YEUCAUVT}' (\"DonGiaHienTruong\",\"TrangThai\",\"Code\",\"TenVatTu\",\"MaVatTu\",\"DonVi\",\"CodeGiaiDoan\",\"CodeHangMuc\",\"CodeKHVT\",\"HopDongKl\")" +
        //            $" VALUES ('{item["DonGia"]}','{1}','{codedexuat}','{item["VatTu"]}','{item["MaVatLieu"]}','{item["Donvi"]}','{cbb_DBKH_ChonDot.SelectedValue}','{m_ctrlVatlieu.m_codeHM}','{item["Code"]}','{item["KhoiLuongHopDong"]}')";
        //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        //        string codeNhapVT = Guid.NewGuid().ToString();
        //        dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVT} (\"DonGia\",\"TrangThai\",\"CodeDeXuat\",\"Code\",\"CodeGiaiDoan\",\"TenKhoNhap\") VALUES ('{item["DonGia"]}','{1}','{codedexuat}','{codeNhapVT}','{cbb_DBKH_ChonDot.SelectedValue}','{m_ctrlVatlieu.m_codeHM}')";
        //        DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //        VL.Add(new VatLieu()
        //        {
        //            ParentID = m_ctrlVatlieu.m_codeHM,
        //            ID = codedexuat,
        //            TrangThai = 1,
        //            MaVatTu = item["MaVatLieu"].ToString(),
        //            TenVatTu = item["VatTu"].ToString(),
        //            DonVi = item["Donvi"].ToString(),
        //            HopDongKl =(long)Math.Round(double.Parse(item["KhoiLuongHopDong"].ToString())),
        //            DonGiaHienTruong = long.Parse(item["DonGia"].ToString())
        //        }); ;
        //        NVL.Add(new NhapVatLieu()
        //        {
        //            ParentID = m_ctrlVatlieu.m_codeHM,
        //            TenKhoNhap = m_ctrlVatlieu.m_codeHM,
        //            ID = codeNhapVT,
        //            CodeDeXuat = codedexuat,
        //            MaVatTu = item["MaVatLieu"].ToString(),
        //            TenVatTu = item["VatTu"].ToString(),
        //            DonVi = item["Donvi"].ToString(),
        //            TrangThai = 1,
        //            CodeHd = "",
        //            CodeTDKH = "",
        //            DonGia = int.Parse(item["DonGia"].ToString())
        //        });

        //    }
        //    VL.Add(new VatLieu()
        //    {
        //        ParentID = m_ctrlVatlieu.m_codeHM,
        //        ID = Guid.NewGuid().ToString(),
        //    });


        //    tL_YeuCauVatTu.RefreshDataSource();
        //    //tL_YeuCauVatTu.DataSource = VL;
        //    tL_YeuCauVatTu.FocusedNode = tL_YeuCauVatTu.MoveLastVisible();

        //    tL_NhapKho.RefreshDataSource();
        //    //tL_NhapKho.DataSource = NVL;
        //    tL_NhapKho.FocusedNode = tL_NhapKho.MoveLastVisible();
        //}
        private void fcn_handleThemcongtac(object sender, EventArgs e)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            IWorkbook workbook_thongtin = spsheet_Thongtinchinh.Document;
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
            Dictionary<string, string> DIC_HD = MyFunction.fcn_getDicOfColumn(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN]);
            int ps = -1;
            for (int i = worksheet.SelectedCell.BottomRowIndex; i > rangeXD.TopRowIndex; i--)
            {
                string kyhieu = worksheet.Rows[i][DIC_HD[MyConstant.COL_HD_Kyhieu]].Value.ToString();
                if (kyhieu == "HD")
                {
                    //string tenhopdong = worksheet.Rows[i + 1][DIC_HD[MyConstant.COL_HD_Tencongviec]].Value.ToString();
                    Dictionary<string, string> DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, false, 0);
                    if (DVTH == null)
                    {
                        MessageShower.ShowError("Vui lòng chọn Tên hợp đồng!", "Lỗi hợp đồng..");
                        return;
                    }
                    if (DVTH.Keys.Contains(MyConstant.TBL_THONGTINNHACUNGCAP))
                    {
                        MessageShower.ShowError("Vui lòng chọn lại Thêm công tác vật tư.", "Lỗi loại hợp đồng..");
                        return;
                    }
                    if (DVTH.FirstOrDefault().Key != MyConstant.TBL_THONGTINNHATHAU)
                    {
                        string queryStr = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi_Hopdongmecon} WHERE \"CodeCon\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                        DataTable dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                        if (dt_HD.Rows.Count == 0)
                        {
                            MessageShower.ShowError("Vui lòng Tạo Hợp đồng cha cho Hợp đồng hiện tại!!!!!!");
                            return;
                        }
                    }
                    Form_LayCongTacHopDong HD = new Form_LayCongTacHopDong();
                    HD.Fcn_LoadData(ps, DVTH);
                    HD.m_TruyenData = new Form_LayCongTacHopDong.DE__TRUYENDATA(fcn_truyencongtac);
                    HD.ShowDialog();
                    //if (worksheet.Rows[i][DIC_HD[MyConstant.COL_HD_TenPL]].Value.ToString() == "HỢP ĐỒNG THEO DỰ ÁN")
                    //{

                    //    //Frm_LayCongTac congtac = new Frm_LayCongTac(ps, DVTH, slke_ThongTinDuAn.EditValue.ToString(), true, cbb_DBKH_ChonDot.SelectedValue.ToString(), Name);
                    //    //congtac.m_TruyenData = new Frm_LayCongTac.DE__TRUYENDATA(fcn_truyencongtac);
                    //    //congtac.ShowDialog();

                    //}
                    //else
                    //{
                    //    Form_LayCongTacHopDong HD = new Form_LayCongTacHopDong();
                    //    HD.Fcn_LoadData(ps, DVTH, slke_ThongTinDuAn.EditValue.ToString(), false, cbb_DBKH_ChonDot.SelectedValue.ToString(), Name);
                    //    HD.m_TruyenData = new Form_LayCongTacHopDong.DE__TRUYENDATA(fcn_truyencongtac);
                    //    HD.ShowDialog();
                    //    //Frm_LayCongTac congtac = new Frm_LayCongTac(ps, DVTH, slke_ThongTinDuAn.EditValue.ToString(), false, cbb_DBKH_ChonDot.SelectedValue.ToString(), Name);
                    //    //congtac.m_TruyenData = new Frm_LayCongTac.DE__TRUYENDATA(fcn_truyencongtac);
                    //    //congtac.ShowDialog();
                    //}

                    break;
                }
                else if (kyhieu == "PL")
                    ps++;
            }
        }


        private void fcn_HideTab(string LoaiHD)
        {
            Dictionary<string, DevExpress.XtraTab.XtraTabPage> DIC_TABHD = new Dictionary<string, DevExpress.XtraTab.XtraTabPage>()
            {
                { "HỢP ĐỒNG CHÍNH A_B", xtraTab_ThanhToanAB},
                { "HỢP ĐỒNG THẦU PHỤ B_B",xtraTab_ThanhToanBB},
                { "HỢP ĐỒNG CUNG CẤP", xtraTab_ThanhToanNhaCC },
                { "HỢP ĐỒNG TỔ ĐỘI", xtraTab_ThanhToanToDoi },
                { "HỢP ĐỒNG KHÁC", xtraTab_ThanhToanAB },
                { "KHÔNG THUỘC HỢP ĐỒNG", xtraTab_ThanhToanAB },
                { "HỢP ĐỒNG THEO DỰ ÁN", xtraTab_TuThucHien},
            };
            if (LoaiHD == "")
            {
                foreach (var item in DIC_TABHD.Values)
                    item.PageVisible = false;
                return;
            }
            foreach (var item in DIC_TABHD.Values)
                item.PageVisible = false;
            DIC_TABHD[LoaiHD].PageVisible = true;
            xtraTabControl_HopDongThanhToan.SelectedTabPage = DIC_TABHD[LoaiHD];
        }
        private SpreadsheetControl Fcn_Spreadsheet()
        {
            string dbString = $"SELECT *  FROM {MyConstant.TBL_Tonghopdanhsachhopdong} " +
                $"INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} " +
                $"ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code = {MyConstant.TBL_Tonghopdanhsachhopdong}.CodeHopDong " +
                $"WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lsCodeHD = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            dbString = $"SELECT * FROM {MyConstant.TBL_ThongtinphulucHD} WHERE \"CodeHd\" IN ({lsCodeHD})";
            DataTable dt_PL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT * FROM {MyConstant.TBL_LoaiHD}";
            DataTable dt_LoaiHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            var codeloaiHD = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == dt.Rows[0]["Code"].ToString()).Select(x => x["CodeLoaiHd"].ToString()).ToList();
            var tenloaiHD = dt_LoaiHD.AsEnumerable().Where(x => x["Code"].ToString() == codeloaiHD[0].ToString()).Select(x => x["LoaiHopDong"].ToString()).ToList();
            Dictionary<string, DevExpress.XtraSpreadsheet.SpreadsheetControl> DIC_TAB = new Dictionary<string, DevExpress.XtraSpreadsheet.SpreadsheetControl>()
            {
                { "HỢP ĐỒNG CHÍNH A_B",spsheet_ThanhToanA_B },
                { "HỢP ĐỒNG THẦU PHỤ B_B",spsheet_ThanhToanB_B  },
                { "HỢP ĐỒNG CUNG CẤP",spsheet_ThanhToan_NhaCungCap },
                { "HỢP ĐỒNG TỔ ĐỘI", spsheet_ThanhToan_ToDoi },
                { "HỢP ĐỒNG THEO DỰ ÁN", spsheet_TuThucHien}
            };
            //Dictionary<DevExpress.XtraTab.XtraTabPage,SpreadsheetControl> DIC_TABHD = new Dictionary<DevExpress.XtraTab.XtraTabPage, SpreadsheetControl>()
            //{
            //    { xtraTab_ThanhToanAB,spsheet_ThanhToanA_B},
            //    {xtraTab_ThanhToanBB,spsheet_ThanhToanB_B},
            //    {xtraTab_ThanhToanNhaCC,spsheet_ThanhToan_NhaCungCap },
            //    {xtraTab_ThanhToanToDoi,spsheet_ThanhToan_ToDoi },
            //    {xtraTab_TuThucHien,spsheet_TuThucHien}
            //};
            //DevExpress.XtraSpreadsheet.SpreadsheetControl Name = new SpreadsheetControl();
            ////List<DevExpress.XtraSpreadsheet.SpreadsheetControl> lst = new List<SpreadsheetControl>()
            ////{
            ////    spsheet_ThanhToanA_B,
            ////    spsheet_ThanhToanB_B,
            ////    spsheet_ThanhToan_NhaCungCap,
            ////    spsheet_TuThucHien
            ////};
            //foreach(XtraTabPage item in DIC_TABHD.Keys)
            //{
            //    if (item.Visible)
            //    {
            //        Name = DIC_TABHD[item];
            //        break;
            //    }
            //}
            //return Name;
            return DIC_TAB[tenloaiHD.FirstOrDefault().ToString()];
        }
        private void fcn_truyencongtac(List<LayCongTacHopDong> lst, int ps, bool KH, bool IsDonGiaKeHoach)
        {
            WaitFormHelper.ShowWaitForm("Đang lưu dữ liệu đã chọn vào hợp đồng", "Vui Lòng chờ!");
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];

            string codepl = "", dbString = "";
            for (int j = worksheet.SelectedCell.BottomRowIndex + 1; j > rangeXD.TopRowIndex; j--)
            {
                Row crRow = worksheet.Rows[j];
                if (crRow[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "PL" && crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString() != "")
                {
                    codepl = crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString();

                    break;
                }
            }
            List<string> lstPhuLuc = new List<string>();
            List<string> lstDoBoc = new List<string>();
            List<string> lstHT = new List<string>();
            List<string> lstPS = new List<string>();
            List<string> lstTT = new List<string>();
            List<string> lstToan = new List<string>();
            foreach (var row in lst)
            {
                string CodePL = Guid.NewGuid().ToString();
                string codeDB = Guid.NewGuid().ToString();
                string code_Goc = Guid.NewGuid().ToString();
                string Col = row.MaHieu == "*" ? "CodeNhom" : "CodeCongTacTheoGiaiDoan";
                double DonGia = IsDonGiaKeHoach ? row.DonGiaKeHoach : row.DonGiaThiCong;
                double KL = KH ? row.KhoiLuongKeHoach : row.KhoiLuongHopDong;
                if (KH)
                    dbString = $"INSERT INTO '{MyConstant.TBL_ThongTinHopDong}' (\"SortId\",\"IsDonGiaKeHoach\",\"NgayBatDau\",\"NgayKetThuc\",\"Code\",\"CodePl\"," +
                        $"\"DonGia\",\"KhoiLuong\",{Col})" +
                        $" VALUES ('{row.STT}','{IsDonGiaKeHoach}','{row.NgayBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{row.NgayKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'" +
                        $",'{CodePL}','{codepl}','{DonGia}','{KL}','{row.ID}')";
                else
                    dbString = $"INSERT INTO '{MyConstant.TBL_ThongTinHopDong}' (\"SortId\",\"IsDonGiaKeHoach\",\"Code\",\"CodePl\",\"DonGia\",\"KhoiLuong\",{Col}) " +
                        $"VALUES ('{row.STT}','{IsDonGiaKeHoach}','{CodePL}','{codepl}','{DonGia}','{KL}','{row.ID}')";
                lstPhuLuc.Add(dbString);
                int loaiCT = ps == 0 ? 3 : 4;
                dbString = $"INSERT INTO '{MyConstant.TBL_HopDong_DoBoc}' (\"KhoiLuongToanBo\",\"TheoHopDong\",\"CodePL\",\"Code\",\"CodeDot\",\"LoaiCT\",\"KhoiLuongToanBo_Iscongthucmacdinh\",\"Code_Goc\")" +
                    $" VALUES ('{0}','{KL}','{CodePL}','{codeDB}','{cbo_AB_LanThanhToan.SelectedValue}','{loaiCT}','{true}','{code_Goc}')";
                lstDoBoc.Add(dbString);
                if (ps == 0)
                {
                    dbString = $"INSERT INTO '{MyConstant.TBL_hopdongAB_HT}' (\"CodeDB\",\"Code\",\"CodeDot\",\"Code_Goc\") VALUES ('{codeDB}','{Guid.NewGuid()}','{cbo_AB_LanThanhToan.SelectedValue}','{code_Goc}')";
                    lstHT.Add(dbString);
                }
                else
                {
                    dbString = $"INSERT INTO '{MyConstant.TBL_hopdongAB_PS}' (\"CodeDB\",\"Code\",\"CodeDot\",\"Code_Goc\") VALUES ('{codeDB}','{Guid.NewGuid()}','{cbo_AB_LanThanhToan.SelectedValue}','{code_Goc}')";
                    lstPS.Add(dbString);
                }
                dbString = $"INSERT INTO '{MyConstant.TBL_hopdongAB_TT}' (\"CodeDB\",\"Code\",\"CodeDot\") VALUES ('{codeDB}','{Guid.NewGuid()}','{cbo_AB_LanThanhToan.SelectedValue}')";
                lstTT.Add(dbString);
                dbString = $"INSERT INTO '{MyConstant.TBL_hopdongAB_TToan}' (\"Code\",\"CodeHopDong\",\"Code_Goc\",{Col}) VALUES ('{Guid.NewGuid()}'," +
                    $"'{cbo_MeNuTenHopDong.SelectedValue}','{code_Goc}','{row.ID}')";
                lstToan.Add(dbString);
            }
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstPhuLuc);
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstDoBoc);
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstHT);
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstPS);
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstTT);
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstToan);
            WaitFormHelper.CloseWaitForm();
            Fcn_UpDatePLHD();
            SpreadsheetControl Name = Fcn_Spreadsheet();
            fcn_DobocAB(Name);
            long ThanhTien = MyFunction.Fcn_UpdateGiaTriHopDong(cbo_MeNuTenHopDong.SelectedValue.ToString());
            dbString = $"UPDATE  '{MyConstant.TBL_TaoHopDongMoi}' SET \"GiaTriHopDong\"='{ThanhTien}' WHERE \"Code\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        }

        private void fcn_truyencongtac_VLKHVT(List<KeHoachVatTu> KHVT)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];

            string codepl = "";
            WaitFormHelper.ShowWaitForm("Đang thêm dữ liệu vào hệ thống", "Vui Lòng chờ!");
            for (int j = worksheet.SelectedCell.BottomRowIndex + 1; j > rangeXD.TopRowIndex; j--)
            {
                Row crRow = worksheet.Rows[j];
                if (crRow[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "PL" && crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString() != "")
                {
                    codepl = crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString();

                    break;
                }
                //if (crRow[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "PL" && crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString() == "")
                //{
                //    string codeloaiHD = worksheet.Rows[j - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString();
                //    if (worksheet.Rows[j - 1][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() != "HD")
                //    {
                //        for (int i = j; i > rangeXD.TopRowIndex; i--)
                //        {
                //            if (worksheet.Rows[i][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "HD")
                //            {
                //                codeloaiHD = worksheet.Rows[i][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString();
                //            }
                //        }
                //    }
                //    break;
                //}
            }
            string dbString = "";
            List<string> lstPhuLuc = new List<string>();
            List<string> lstTT = new List<string>();
            List<object> lst = new List<object>();
            foreach (KeHoachVatTu item in KHVT)
            {
                string CodePL = Guid.NewGuid().ToString();
                dbString = $"INSERT INTO '{MyConstant.TBL_ThongTinHopDong}' (\"CodeHM\",\"Code\",\"MaHieu\",\"TenCongViec\",\"CodePl\",\"DonGia\",\"KhoiLuong\",\"DonVi\")" +
                    $" VALUES ('{item.CodeHangMuc}','{CodePL}',@MaVatLieu,@VatTu,'{codepl}','{item.DonGia}','{item.KhoiLuong}',@DonVi)";
                lstPhuLuc.Add(dbString);
                lst.Add(item.MaVatLieu);
                lst.Add(item.VatTu);
                lst.Add(item.DonVi);
                //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item.MaVatLieu, item.VatTu, item.DonVi });

                dbString = $"INSERT INTO '{MyConstant.TBL_hopdongNCC_TT}' (\"CodePhuLuc\",\"Code\",\"Code_Goc\",\"CodeDot\") VALUES ('{CodePL}','{Guid.NewGuid()}','{Guid.NewGuid()}','{cbo_AB_LanThanhToan.SelectedValue}')";
                lstTT.Add(dbString);
            }
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstPhuLuc, parameter: lst.ToArray());
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstTT);
            WaitFormHelper.CloseWaitForm();
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
            Fcn_UpdatePhuLucHDNCC();
            Fcn_TTNCC();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_truyencongtac_VL(List<LayCongTacHopDong> HD, bool KH, bool IsDonGiaKeHoach)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];

            string codepl = "";
            WaitFormHelper.ShowWaitForm("Đang thêm dữ liệu vào hệ thống", "Vui Lòng chờ!");
            for (int j = worksheet.SelectedCell.BottomRowIndex + 1; j > rangeXD.TopRowIndex; j--)
            {
                Row crRow = worksheet.Rows[j];
                if (crRow[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "PL" && crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString() != "")
                {
                    codepl = crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString();

                    break;
                }
                if (crRow[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "PL" && crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString() == "")
                {
                    string codeloaiHD = worksheet.Rows[j - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString();
                    if (worksheet.Rows[j - 1][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() != "HD")
                    {
                        for (int i = j; i > rangeXD.TopRowIndex; i--)
                        {
                            if (worksheet.Rows[i][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "HD")
                            {
                                codeloaiHD = worksheet.Rows[i][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString();
                            }
                        }
                    }
                    break;
                }
            }
            string dbString = "";
            List<string> lstPhuLuc = new List<string>();
            List<string> lstChiTiet = new List<string>();
            List<string> lstTT = new List<string>();
            List<LayCongTacHopDong> TenVatLieu = HD.FindAll(x => x.CodeCT == null);
            List<LayCongTacHopDong> TenCT = HD.FindAll(x => x.CodeCT != null);
            foreach (LayCongTacHopDong item in TenVatLieu)
            {
                string CodePL = Guid.NewGuid().ToString();
                double DonGia = IsDonGiaKeHoach ? item.DonGiaKeHoach : item.DonGiaThiCong;
                List<LayCongTacHopDong> ChiTiet = TenCT.FindAll(x => x.ParentID == item.ID);
                if (KH)
                    dbString = $"INSERT INTO '{MyConstant.TBL_ThongTinHopDong}' (\"IsDonGiaKeHoach\",\"CodeKHVT\",\"NgayBatDau\",\"NgayKetThuc\",\"Code\",\"CodePl\",\"DonGia\",\"KhoiLuong\")" +
                        $" VALUES ('{IsDonGiaKeHoach}','{item.ID}','{item.NgayBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{item.NgayKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{CodePL}','{codepl}','{DonGia}','{item.KhoiLuongKeHoach}')";
                else
                    dbString = $"INSERT INTO '{MyConstant.TBL_ThongTinHopDong}' (\"IsDonGiaKeHoach\",\"CodeKHVT\",\"Code\",\"CodePl\",\"DonGia\",\"KhoiLuong\")" +
                        $" VALUES ('{IsDonGiaKeHoach}','{item.ID}','{CodePL}','{codepl}','{DonGia}','{item.KhoiLuongHopDong}')";
                lstPhuLuc.Add(dbString);
                foreach (LayCongTacHopDong row in ChiTiet)
                {
                    DonGia = IsDonGiaKeHoach ? row.DonGiaKeHoach : row.DonGiaThiCong;
                    if (!KH)
                        dbString = $"INSERT INTO '{MyConstant.TBL_ThongTinHopDongChiTietHD}' (\"DonGia\",\"KhoiLuong\",\"Code\",\"CodeCha\",\"CodeCongTacGiaiDoan\")" +
             $" VALUES ('{DonGia}','{row.KhoiLuongHopDong}','{Guid.NewGuid()}','{CodePL}','{row.CodeCT}')";
                    else
                        dbString = $"INSERT INTO '{MyConstant.TBL_ThongTinHopDongChiTietHD}' (\"DonGia\",\"KhoiLuong\",\"Code\",\"CodeCha\",\"CodeCongTacGiaiDoan\")" +
$" VALUES ('{DonGia}','{row.KhoiLuongKeHoach}','{Guid.NewGuid()}','{CodePL}','{row.CodeCT}')";
                    lstChiTiet.Add(dbString);
                }
                dbString = $"INSERT INTO '{MyConstant.TBL_hopdongNCC_TT}' (\"CodePhuLuc\",\"Code\",\"Code_Goc\",\"CodeDot\") VALUES ('{CodePL}','{Guid.NewGuid()}','{Guid.NewGuid()}','{cbo_AB_LanThanhToan.SelectedValue}')";
                lstTT.Add(dbString);
            }
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstPhuLuc);
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstChiTiet);
            DataProvider.InstanceTHDA.ExecuteNonQueryFromList(lstTT);
            WaitFormHelper.CloseWaitForm();
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
            Fcn_UpdatePhuLucHDNCC();
            Fcn_TTNCC();
            WaitFormHelper.CloseWaitForm();
        }
        DateTimePicker oDateTimePicker = new DateTimePicker();

        private void taodatepicker(int hang, int cot, DataGridView grib)
        {
            //Initialized a new DateTimePicker Control  
            oDateTimePicker = new DateTimePicker();

            //Adding DateTimePicker control into DataGridView   
            grib.Controls.Add(oDateTimePicker);

            // Setting the format (i.e. 2014-10-10)  
            oDateTimePicker.Format = DateTimePickerFormat.Short;
            // It returns the retangular area that represents the Display area for a cell  
            Rectangle oRectangle = grib.GetCellDisplayRectangle(cot, hang, true);

            //Setting area for DateTimePicker Control  
            oDateTimePicker.Size = new Size(oRectangle.Width, oRectangle.Height);

            // Setting mopenFileDialogation  
            oDateTimePicker.Location = new Point(oRectangle.X, oRectangle.Y);

            // An event attached to dateTimePicker Control which is fired when DateTimeControl is closed  
            oDateTimePicker.CloseUp += new EventHandler(oDateTimePicker_CloseUp);
        }
        private void oDateTimePicker_CloseUp(object sender, EventArgs e)
        {
            // Hiding the control after use   
            oDateTimePicker.Visible = false;
        }

        /// <summary>
        /// phần phụ lục hợp đồng
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void spread_PhuLucHopDong_Full_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Worksheet worksheet_congtrinh = workbook.Worksheets["Thông tin công trình_Hạng mục"];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
            string colHeading = worksheet.Columns[e.Cell.ColumnIndex].Heading;
            string colDB = worksheet.Rows[0][e.ColumnIndex].Value.TextValue;
            CellRange copy_pl = worksheet_congtrinh.Rows[3];
            int beginindex = 0;
            int endindex = 0;
            string queryStr = "", dbString = "";
            int checkso;
            CellRange ct_hm = worksheet.Range["D7:F8"];
            if (colHeading == DIC_HOPDONG[MyConstant.COL_HD_Dongia] || colHeading == DIC_HOPDONG[MyConstant.COL_HD_Khoiluong])
            {
                bool check = Int32.TryParse(e.Value.ToString(), out checkso);
                if (check == false)
                    e.Cell.Value = e.OldValue;
                DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn thay đổi giá trị cột này không, giá trị này sẽ được cập nhập cho các bảng thông tin liên quan");
                if (rs == DialogResult.No)
                    return;
                string CodePl = worksheet.Rows[e.RowIndex][DIC_HOPDONG["Code"]].Value.TextValue;
                dbString = $"UPDATE '{MyConstant.TBL_HopDong_PhuLuc}' SET '{colDB}'=NewValue WHERE \"Code\"='{CodePl}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
                if (colHeading == DIC_HOPDONG[MyConstant.COL_HD_Khoiluong])
                {
                    dbString = $"SELECT *  FROM {MyConstant.TBL_HopDong_DoBoc} WHERE \"CodePl\"='{CodePl}'";
                    DataTable dtDoBoc = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    foreach (DataRow row in dtDoBoc.Rows)
                    {
                        bool.TryParse(row["IsEdit"].ToString(), out bool Edit);
                        if (Edit)
                            dbString = $"UPDATE '{MyConstant.TBL_HopDong_DoBoc}' SET \"TheoHopDong\"='{e.Value}' WHERE \"Code\"='{row["Code"]}'";
                        else
                            dbString = $"UPDATE '{MyConstant.TBL_HopDong_DoBoc}' SET \"TheoHopDong\"='{e.Value}',\"KhoiLuongToanBo\"='{e.Value}' WHERE \"Code\"='{row["Code"]}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                    fcn_DobocAB(Fcn_Spreadsheet());
                    //Fcn_DobocAB(Fcn_Spreadsheet());
                }
                else
                {

                }
                return;
            }
            else if (colHeading == DIC_HOPDONG[MyConstant.COL_HD_Kyhieu])
            {
                int pl = 1;
                if (e.Value.ToString() == "PL" && e.OldValue.ToString() != "")
                {
                    worksheet.Rows.Insert(e.RowIndex, 2, RowFormatMode.FormatAsPrevious);
                    worksheet.Rows[e.RowIndex + 1][e.ColumnIndex].Value = "CT";
                    worksheet.Rows[e.RowIndex + 2][e.ColumnIndex].Value = "";
                    worksheet.Rows[e.RowIndex].CopyFrom(copy_pl, PasteSpecial.All);
                    //worksheet.Range[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu] + (e.RowIndex + 2).ToString() + ":" + DIC_HOPDONG[MyConstant.COL_HD_Tencongviec] + (e.RowIndex + 3).ToString()].CopyFrom(ct_hm, PasteSpecial.All);
                    //worksheet.Rows[e.RowIndex][e.ColumnIndex].Value = "PL";
                    //worksheet.Rows[e.RowIndex].FillColor = Color.Blue;
                    for (int i = e.RowIndex - 1; i > rangeXD.TopRowIndex; i--)
                    {
                        Row crRow = worksheet.Rows[i];
                        string kyhieu = crRow[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString();
                        if (kyhieu == "PL" && worksheet.Rows[i - 1][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "HD")
                        {
                            beginindex = i;
                            worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_Phatsinh]].Value = pl.ToString();
                            worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].Value = crRow[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].Value.ToString();
                            worksheet.Rows[beginindex][DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"SUM({DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]}{beginindex + 2}:{DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]}{e.RowIndex})";
                            worksheet.Rows[beginindex][DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]].Formula = $"SUM({DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]}{beginindex + 2}:{DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]}{e.RowIndex})";
                            break;
                        }
                        else if (kyhieu == "PL" && worksheet.Rows[i - 1][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() != "HD")
                            pl++;

                    }
                    //for (int i = e.RowIndex + 1; i < rangeXD.BottomRowIndex; i++)
                    //{
                    //    Row crRow = worksheet.Rows[i];
                    //    string kyhieu = crRow[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString();
                    //    if (kyhieu == "" || kyhieu == "PL")
                    //    {
                    //        endindex = i;
                    //        worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"SUM({DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]}{endindex}:{DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]}{e.RowIndex + 2})";
                    //        worksheet.Rows[beginindex][DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]].Formula = $"SUM({DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]}{beginindex + 2}:{DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]}{e.RowIndex})";
                    //        break;
                    //    }
                    //}
                }
                if (e.OldValue.ToString() == "")
                {
                    worksheet.Rows.Insert(e.RowIndex + 1, 3, RowFormatMode.FormatAsPrevious);
                    worksheet.Rows[e.RowIndex + 2][e.ColumnIndex].Value = "CT";
                    worksheet.Rows[e.RowIndex][e.ColumnIndex].Value = "";
                    worksheet.Rows[e.RowIndex + 1].CopyFrom(copy_pl, PasteSpecial.All);
                    for (int i = e.RowIndex - 1; i > rangeXD.TopRowIndex; i--)
                    {
                        Row crRow = worksheet.Rows[i];
                        string kyhieu = crRow[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString();
                        if (kyhieu == "PL" && worksheet.Rows[i - 1][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "HD")
                        {
                            beginindex = i;
                            string codepl = Guid.NewGuid().ToString();
                            string codeloaiHD = worksheet.Rows[i - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.ToString();
                            string codehd = crRow[DIC_HOPDONG[MyConstant.COL_HD_CodeHD_HD]].Value.TextValue;
                            string tenpl = $"Phụ lục {pl + 1}";
                            worksheet.Rows[e.RowIndex + 1][DIC_HOPDONG[MyConstant.COL_HD_Phuluc]].SetValueFromText(tenpl);
                            worksheet.Rows[e.RowIndex + 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl);
                            worksheet.Rows[e.RowIndex + 1][DIC_HOPDONG[MyConstant.COL_HD_Phatsinh]].Value = pl.ToString();
                            worksheet.Rows[e.RowIndex + 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].Value = crRow[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].Value.ToString();
                            worksheet.Rows[e.RowIndex + 1][DIC_HOPDONG[MyConstant.COL_HD_DVTH]].Value = crRow[DIC_HOPDONG[MyConstant.COL_HD_DVTH]].Value.ToString();
                            dbString = $"INSERT INTO '{MyConstant.TBL_ThongtinphulucHD}' (\"PhatSinh\",\"Code\",\"CodeLoaiHd\",\"CodeHd\",\"TenPl\") VALUES ('{pl}','{codepl}','{codeloaiHD}','{codehd}',@TenPhuLuc)";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { tenpl });
                            worksheet.Rows[e.RowIndex + 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl);
                            worksheet.Rows[e.RowIndex + 1][DIC_HOPDONG[MyConstant.COL_HD_CodeHD_HD]].SetValueFromText(codehd);
                            worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codeloaiHD);
                            //worksheet.Rows[beginindex][DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"SUM({DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]}{beginindex + 2}:{DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]}{e.RowIndex})";
                            //worksheet.Rows[beginindex][DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]].Formula = $"SUM({DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]}{beginindex + 2}:{DIC_HOPDONG[MyConstant.COL_HD_ThanhTienthicong]}{e.RowIndex})";
                            break;
                        }
                        else if (kyhieu == "PL" && worksheet.Rows[i - 1][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() != "HD")
                            pl++;
                    }
                    //worksheet.Range[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu] + (e.RowIndex + 2).ToString() + ":" + DIC_HOPDONG[MyConstant.COL_HD_Tencongviec] + (e.RowIndex + 3).ToString()].CopyFrom(ct_hm, PasteSpecial.All);
                    //worksheet.Rows[e.RowIndex].FillColor = Color.Blue;
                }
                if (e.Value.ToString() != "PL")
                    worksheet.Rows[e.RowIndex][e.ColumnIndex].Value = e.OldValue;
            }
            else if (colHeading == DIC_HOPDONG[MyConstant.COL_HD_TenPL] && worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "HD")
                worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value = MyConstant.DIC_LOAIHOPDONG[e.Value.ToString()];
            else if (colHeading == DIC_HOPDONG[MyConstant.COL_HD_TenPL] && worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "PL")
            {
                dbString = $"UPDATE  '{MyConstant.TBL_ThongtinphulucHD}' SET \"TenPl\"= @NewValue WHERE \"Code\"='{worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].Value.TextValue}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
            }
            else if (colHeading == DIC_HOPDONG[MyConstant.COL_HD_Tencongviec])
            {
                if (worksheet.Rows[e.RowIndex][DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].Value.ToString() == "PL")
                {
                    Dictionary<string, string> check = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, true, e.RowIndex);
                }
            }
        }
        private void Fcn_UpdateNCC()
        {
            string dbString = $"SELECT *  FROM {MyConstant.TBL_Tonghopdanhsachhopdong} INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} " +
    $"ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code = {MyConstant.TBL_Tonghopdanhsachhopdong}.CodeHopDong WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string lsCodeHD = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            dbString = $"SELECT * FROM {MyConstant.TBL_ThongtinphulucHD} WHERE \"CodeHd\" IN ({lsCodeHD})";
            DataTable dt_PL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lsCodePL = MyFunction.fcn_Array2listQueryCondition(dt_PL.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
            dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_PhuLuc} " +
                $"INNER JOIN {TDKH.TBL_KHVT_VatTu} " +
$"ON {TDKH.TBL_KHVT_VatTu}.Code={MyConstant.TBL_HopDong_PhuLuc}.CodeKHVT " +
                $"WHERE {MyConstant.TBL_HopDong_PhuLuc}.CodePl IN ({lsCodePL})";
            DataTable dt_CongtacHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string lsCodeChitiet = MyFunction.fcn_Array2listQueryCondition(dt_CongtacHD.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
            dbString = $"SELECT * FROM {MyConstant.TBL_ThongTinHopDongChiTietHD} " +
                       $"INNER JOIN {TDKH.TBL_ChiTietCongTacTheoKy} " +
                       $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.Code={MyConstant.TBL_ThongTinHopDongChiTietHD}.CodeCongTacGiaiDoan " +
                //$"INNER JOIN {TDKH.COL_DanhMucCongTac} " +
                //$"ON {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac={TDKH.COL_DanhMucCongTac}.Code " +
                $" WHERE {MyConstant.TBL_ThongTinHopDongChiTietHD}.CodeCha IN ({lsCodeChitiet})";
            DataTable dt_ChiTiet = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string lsCodeHP = MyFunction.fcn_Array2listQueryCondition(dt_ChiTiet.AsEnumerable().Select(x => x["CodeCongTacGiaiDoan"].ToString()).ToArray());
            dbString = $"SELECT * FROM {TDKH.Tbl_HaoPhiVatTu} WHERE \"CodeCongTac\" IN ({lsCodeHP}) AND \"LoaiVatTu\"='Vật liệu'";
            DataTable dtHPVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //string[] lstcode = MyFunction.fcn_Array2listQueryCondition(dtHPVT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
            //dbString = $"SELECT * FROM {TDKH.Tbl_HaoPhiVatTu_HangNgay} WHERE \"CodeHaoPhiVatTu\" IN ({lstcode})";
            //DataTable HPVTHN = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            DataTable HPVTHN = MyFunction.Fcn_CalKLHN(dtHPVT, dt_ChiTiet, true);
            foreach (DataRow row in dt_CongtacHD.Rows)
            {
                if (row["NgayBatDau"] != DBNull.Value)
                {
                    string ngaybatdau = DateTime.Parse(row["NgayBatDau"].ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                    string ngayketthuc = DateTime.Parse(row["NgayKetThuc"].ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                    DataRow[] drs_chitiet = dt_ChiTiet.AsEnumerable().Where(x => x["CodeCha"].ToString() == row["Code"].ToString()).ToArray();
                    double KLLuyKe = 0, KLHN = 0;
                    foreach (var item in drs_chitiet)
                    {
                        string codegiaidoan = item["CodeCongTacGiaiDoan"].ToString();
                        string lstCodeHN = dtHPVT.AsEnumerable().Where(x => x["CodeCongTac"].ToString() == codegiaidoan && x["MaVatLieu"].ToString() == row["MaVatLieu"].ToString()).ToArray().FirstOrDefault()["Code"].ToString();
                        DataRow[] drs_HPHN = HPVTHN.AsEnumerable().Where(x => x["CodeHaoPhiVatTu"].ToString() == lstCodeHN && DateTime.Parse(x["Ngay"].ToString()) >= DateTime.Parse(ngaybatdau) && DateTime.Parse(x["Ngay"].ToString()) <= DateTime.Parse(ngayketthuc)).ToArray();
                        KLHN = drs_HPHN.Sum(x => double.Parse(x["KhoiLuongKeHoach"].ToString()));
                        KLLuyKe += KLHN;
                        dbString = $"UPDATE '{MyConstant.TBL_ThongTinHopDongChiTietHD}' SET \"KhoiLuong\"='{Math.Round(KLHN, 4)}' WHERE \"Code\"='{item["Code"]}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                    dbString = $"UPDATE '{MyConstant.TBL_HopDong_PhuLuc}' SET \"KhoiLuong\"='{Math.Round(KLLuyKe, 4)}' WHERE \"Code\"='{row["Code"]}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }
        }
        private void Fcn_UpdatePhuLucHDNCC()
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
            if (cbo_MeNuTenHopDong.SelectedValue == null)
            {
                Fcn_UpdatePhuLucHDEmpty();
                WaitFormHelper.CloseWaitForm();
                return;
            }
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Worksheet worksheet_congtrinh = workbook.Worksheets["Thông tin công trình_Hạng mục"];
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);

            CellRange copy_pl = worksheet_congtrinh.Rows[3];
            CellRange copy_hd = worksheet_congtrinh.Rows[2];
            CellRange copy_ct = worksheet_congtrinh.Rows[4];
            string dbString = $"SELECT * FROM view_PhuLuHopDongVatTu" +
                $" WHERE CodeHDChinh='{cbo_MeNuTenHopDong.SelectedValue}' ORDER BY SortIdCtrinh ASC, SortIdHM ASC,SortIdCtac ASC ";
            DataTable dtCongTacTheoKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dtCongTacTheoKy.AddIndPhanTuyenNhom();
            if (rangeXD.RowCount != 6)
                worksheet.Rows.Remove(6, rangeXD.RowCount - 6);
            worksheet.Rows[6].CopyFrom(copy_ct, PasteSpecial.All);
            worksheet.Rows[5][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText("");
            string lsCodeHD = MyFunction.fcn_Array2listQueryCondition(dtCongTacTheoKy.AsEnumerable().Select(x => x["CodeHd"].ToString()).ToArray());
            dbString = $"SELECT * FROM {MyConstant.TBL_ThongtinphulucHD} WHERE \"CodeHd\" IN ({lsCodeHD})";
            DataTable dt_PL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dt_PL.Rows.Count == 0)
            {
                dbString = $"SELECT *  FROM {MyConstant.TBL_Tonghopdanhsachhopdong} INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code = {MyConstant.TBL_Tonghopdanhsachhopdong}.CodeHopDong WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                DataTable dtHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                lsCodeHD = MyFunction.fcn_Array2listQueryCondition(dtHD.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT * FROM {MyConstant.TBL_ThongtinphulucHD} WHERE \"CodeHd\" IN ({lsCodeHD})";
                dt_PL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            }
            dbString = $"SELECT * FROM {MyConstant.TBL_LoaiHD}";
            DataTable dt_LoaiHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT {MyConstant.Tbl_TAOMOIHOPDONG}.*,{MyConstant.TBL_Tonghopdanhsachhopdong}.Code as CodeHd  FROM  {MyConstant.Tbl_TAOMOIHOPDONG} INNER JOIN {MyConstant.TBL_Tonghopdanhsachhopdong} " +
                $"ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code = {MyConstant.TBL_Tonghopdanhsachhopdong}.CodeHopDong " +
                $" WHERE {MyConstant.Tbl_TAOMOIHOPDONG}.Code='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lsCodeChitiet = MyFunction.fcn_Array2listQueryCondition(dtCongTacTheoKy.AsEnumerable().Select(x => x["CodePLHD"].ToString()).ToArray());

            dbString = $"SELECT COALESCE(cttk.MaHieuCongTac, dmct.MaHieuCongTac) AS MaHieuCongTac," +
                 $"COALESCE(cttk.DonVi, dmct.DonVi) AS DonVi," +
                $"COALESCE(cttk.TenCongTac, dmct.TenCongTac) AS TenCongTac," +
                $"ctvl.*,cttk.* FROM {MyConstant.TBL_ThongTinHopDongChiTietHD} ctvl " +
           $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
           $"ON cttk.Code=ctvl.CodeCongTacGiaiDoan " +
           $"LEFT JOIN {TDKH.TBL_DanhMucCongTac} dmct " +
           $"ON cttk.CodeCongTac=dmct.Code " +
           $" WHERE ctvl.CodeCha IN ({lsCodeChitiet})";
            DataTable dt_ChiTiet = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dt_PL.Rows.Count != 0 && dtCongTacTheoKy.Rows.Count != 0)
                worksheet.Rows.Insert(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex, (dtCongTacTheoKy.Rows.Count * 2 + dt_ChiTiet.Rows.Count) * dt_PL.Rows.Count, RowFormatMode.FormatAsPrevious);
            int crRowInd = 6;
            bool check = true;
            Dictionary<string, string> DVTH = null;
            int stt = 1;
            bool IsDonGiaKeHoach = true;
            int sttcon = 1;
            spread_PhuLucHopDong_Full.BeginUpdate();
            foreach (DataRow item in dt.Rows)
            {
                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, true, crRowInd - 1);

                if (dtCongTacTheoKy.Rows.Count == 0)
                {
                    DataRow[] drs_PL = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["CodeHd"].ToString()).ToArray();
                    if (drs_PL.Count() == 0)
                        break;
                    var tenpl = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["CodeHd"].ToString()).Select(x => x["TenPl"].ToString()).ToList();
                    var codepl = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["CodeHd"].ToString()).Select(x => x["Code"].ToString()).ToList();
                    var codeloaiHD = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["CodeHd"].ToString()).Select(x => x["CodeLoaiHd"].ToString()).ToList();
                    var tenloaiHD = dt_LoaiHD.AsEnumerable().Where(x => x["Code"].ToString() == codeloaiHD[0].ToString()).Select(x => x["LoaiHopDong"].ToString()).ToList();
                    if (check)
                    {
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                        //DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, $"{item["TenHopDong"].ToString()}({item["SoHopDong"]})", true, crRowInd - 1, slke_ThongTinDuAn.EditValue.ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl[0]);
                        worksheet.Rows[crRowInd - 2][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl[0]);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeHD_HD]].SetValueFromText(item["Code"].ToString());
                        check = false;

                    }
                    else
                    {
                        Row crRowWs = worksheet.Rows[crRowInd++];
                        crRowWs.CopyFrom(copy_hd, PasteSpecial.All);
                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                        worksheet.Rows[crRowInd++].CopyFrom(copy_pl, PasteSpecial.All);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                        //DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, $"{item["TenHopDong"].ToString()}({item["SoHopDong"]})", true, crRowInd - 1, slke_ThongTinDuAn.EditValue.ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl[0]);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl[0]);

                    }
                }
                var CrowTenPL = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["CodePl"].ToString());
                foreach (var rowPL in CrowTenPL)
                {
                    var rowPLFirst = rowPL.FirstOrDefault();
                    if (double.Parse(rowPLFirst[MyConstant.COL_HD_Phatsinh].ToString()) != 0)
                    {
                        Row crRowWs = worksheet.Rows[crRowInd++];
                        crRowWs.CopyFrom(copy_pl, PasteSpecial.All);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(rowPLFirst["TenPl"].ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(rowPLFirst["CodePl"].ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Phatsinh]].SetValueFromText(rowPLFirst["PhatSinh"].ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Phuluc]].SetValueFromText($"{"Phụ lục "}{(int.Parse(rowPLFirst["PhatSinh"].ToString()) + 1)}");
                    }
                    else
                    {
                        var tenloaiHD = dt_LoaiHD.AsEnumerable().Where(x => x["Code"].ToString() == rowPLFirst["CodeLoaiHd"].ToString()).Select(x => x["LoaiHopDong"].ToString()).ToList();
                        if (check)
                        {
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(rowPLFirst["TenPl"].ToString());
                            worksheet.Rows[crRowInd - 2][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(rowPLFirst["CodePl"].ToString());
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeHD_HD]].SetValueFromText(item["Code"].ToString());
                            check = false;

                        }
                        else
                        {
                            Row crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs.CopyFrom(copy_hd, PasteSpecial.All);
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                            worksheet.Rows[crRowInd++].CopyFrom(copy_pl, PasteSpecial.All);
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(rowPLFirst["TenPl"].ToString());
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(rowPLFirst["CodePl"].ToString());

                        }
                        var grCongTrinh = rowPL.GroupBy(x => x["CodeCongTrinh"].ToString());
                        foreach (var Ctrinh in grCongTrinh)
                        {
                            string crCodeCT = Ctrinh.Key;
                            Row crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs.Font.Bold = true;
                            crRowWs.Font.Color = Color.DarkTurquoise;
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_CT]].SetValue(crCodeCT);
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(Ctrinh.FirstOrDefault()["TenCongTrinh"].ToString());
                            var grHangMuc = Ctrinh.GroupBy(x => x["CodeHangMuc"].ToString());
                            foreach (var HM in grHangMuc)
                            {
                                string crCodeHM = HM.Key;
                                crRowWs = worksheet.Rows[crRowInd++];
                                crRowWs.Font.Bold = true;
                                crRowWs.Font.Color = Color.DarkGreen;
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_HM]].SetValue(crCodeHM);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(HM.FirstOrDefault()["TenHangMuc"].ToString().ToUpper());
                                var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"]).OrderBy(x => x.Key);
                                foreach (var Tuyen in grPhanTuyen)
                                {
                                    var fstTuyen = Tuyen.First();
                                    string crCodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : fstTuyen["CodePhanTuyen"].ToString();
                                    if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                                    {
                                        crRowWs = worksheet.Rows[crRowInd++];
                                        crRowWs.Font.Bold = true;
                                        crRowWs.Font.Color = Color.Red;
                                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValue(crCodeTuyen);
                                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_PhanTuyen);
                                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(fstTuyen["TenTuyen"].ToString().ToUpper());
                                    }
                                    var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"])
                                          .OrderBy(x => x.Key);
                                    foreach (var NhomTuyen in grTuyenNhom)
                                    {
                                        var fstNhom = NhomTuyen.First();
                                        var grCongTacTuyen = NhomTuyen.GroupBy(x => x["CodePLHD"]);
                                        foreach (var CongTac in grCongTacTuyen)
                                        {

                                            var fstCongTac = CongTac.FirstOrDefault();
                                            crRowWs = worksheet.Rows[crRowInd++];
                                            string Mahieu = fstCongTac["MaHieuCongTac"].ToString();
                                            string TenCongTac = fstCongTac["TenCongTac"].ToString();
                                            WaitFormHelper.ShowWaitForm($"{stt}.{Mahieu}_{TenCongTac}");
                                            crRowWs.Font.Bold = false;
                                            crRowWs.Font.Color = Color.Black;
                                            crRowWs.Visible = true;
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValue(fstCongTac["CodePLHD"]);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_Congtac]].SetValue(fstCongTac["Code"]);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValueFromText(Mahieu);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(TenCongTac);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_DonVi]].SetValue(fstCongTac["DonVi"]);

                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValue(stt++);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(fstCongTac["KLPLHD"]);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(fstCongTac["DonGiaPLHD"]);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NBD]].SetValue(fstCongTac["NBD"]);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NKT]].SetValue(fstCongTac["NKT"]);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"{DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]}{crRowInd}*{DIC_HOPDONG[MyConstant.COL_HD_Dongia]}{crRowInd}";
                                            DataRow[] crow_Chitiet = dt_ChiTiet.AsEnumerable().Where(x => x["CodeCha"].ToString() == fstCongTac["CodePLHD"].ToString()).ToArray();
                                            foreach (var rowCT in crow_Chitiet)
                                            {
                                                crRowWs = worksheet.Rows[crRowInd++];
                                                //crRowWs.Font.Bold = true;
                                                crRowWs.Font.Color = Color.Red;
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(rowCT["MaHieuCongTac"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(rowCT["TenCongTac"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_DonVi]].SetValue(rowCT["DonVi"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(rowCT[MyConstant.COL_HD_Khoiluong]);
                                                crRowWs.Visible = false;
                                            }
                                        }
                                    }
                                    if (crCodeTuyen != null)
                                    {
                                        crRowWs = worksheet.Rows[crRowInd++];
                                        crRowWs.Font.Bold = true;
                                        crRowWs.Font.Color = Color.Red;
                                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue($"HOÀN THÀNH {fstTuyen["TenTuyen"]}".ToUpper());
                                    }

                                }

                                crRowWs = worksheet.Rows[crRowInd++];
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue("CT");
                                crRowWs = worksheet.Rows[crRowInd++];
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue("");

                            }

                        }

                    }

                }

            }
            spread_PhuLucHopDong_Full.EndUpdate();
            WaitFormHelper.CloseWaitForm();

        }
        private void fcn_updatephuluchopdongNCC()
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
            if (cbo_MeNuTenHopDong.SelectedValue == null)
            {
                Fcn_UpdatePhuLucHDEmpty();
                WaitFormHelper.CloseWaitForm();
                return;
            }
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Worksheet worksheet_congtrinh = workbook.Worksheets["Thông tin công trình_Hạng mục"];
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
            string queryStr = $"SELECT *  FROM {MyConstant.TBL_Tonghopdanhsachhopdong} INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} " +
                $"ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code = {MyConstant.TBL_Tonghopdanhsachhopdong}.CodeHopDong WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            CellRange copy_pl = worksheet_congtrinh.Rows[3];
            CellRange copy_hd = worksheet_congtrinh.Rows[2];
            CellRange copy_ct = worksheet_congtrinh.Rows[4];
            DataTable dtCongTacTheoKy, dtDanhMucCongTac, dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            queryStr = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG} WHERE \"Code\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt_TaoMoiHD = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            string lsCodeHD = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            string dbString = $"SELECT * FROM {MyConstant.TBL_ThongtinphulucHD} WHERE \"CodeHd\" IN ({lsCodeHD})";
            DataTable dt_PL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lsCodePL = MyFunction.fcn_Array2listQueryCondition(dt_PL.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            dbString = $"SELECT {MyConstant.TBL_HopDong_PhuLuc}.*,{TDKH.TBL_KHVT_VatTu}.DonVi as DonViTinh,{TDKH.TBL_KHVT_VatTu}.* FROM {MyConstant.TBL_HopDong_PhuLuc} " +
                $"LEFT JOIN {TDKH.TBL_KHVT_VatTu} " +
$"ON {TDKH.TBL_KHVT_VatTu}.Code={MyConstant.TBL_HopDong_PhuLuc}.CodeKHVT " +
                $"WHERE {MyConstant.TBL_HopDong_PhuLuc}.CodePl IN ({lsCodePL})";
            DataTable dt_CongtacHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string lsCodeChitiet = MyFunction.fcn_Array2listQueryCondition(dt_CongtacHD.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
            dbString = $"SELECT * FROM {MyConstant.TBL_ThongTinHopDongChiTietHD} " +
                       $"INNER JOIN {TDKH.TBL_ChiTietCongTacTheoKy} " +
                       $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.Code={MyConstant.TBL_ThongTinHopDongChiTietHD}.CodeCongTacGiaiDoan " +
                       $"INNER JOIN {TDKH.TBL_DanhMucCongTac} " +
                       $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac={TDKH.TBL_DanhMucCongTac}.Code " +
                $" WHERE {MyConstant.TBL_ThongTinHopDongChiTietHD}.CodeCha IN ({lsCodeChitiet})";
            DataTable dt_ChiTiet = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT * FROM {MyConstant.TBL_LoaiHD}";
            DataTable dt_LoaiHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (rangeXD.RowCount != 6)
                worksheet.Rows.Remove(6, rangeXD.RowCount - 6);
            worksheet.Rows[6].CopyFrom(copy_ct, PasteSpecial.All);
            worksheet.Rows[5][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText("");
            if (dt_PL.Rows.Count != 0)
                worksheet.Rows.Insert(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex - 1, (dtCT.Rows.Count + dtHM.Rows.Count + 10) * dt_PL.Rows.Count + dt_PL.Rows.Count * 2 + dt_ChiTiet.Rows.Count + dt_CongtacHD.Rows.Count, RowFormatMode.FormatAsPrevious);
            int crRowInd = 6;
            bool check = true;
            Dictionary<string, string> DVTH = null;
            spread_PhuLucHopDong_Full.BeginUpdate();
            foreach (DataRow item in dt.Rows)
            {
                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, true, crRowInd - 1);
                DataRow[] drs_PL = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["Code"].ToString()).ToArray();
                if (drs_PL.Count() == 0)
                    break;
                var tenpl = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["Code"].ToString()).Select(x => x["TenPl"].ToString()).ToList();
                var codepl = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["Code"].ToString()).Select(x => x["Code"].ToString()).ToList();
                var codeloaiHD = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["Code"].ToString()).Select(x => x["CodeLoaiHd"].ToString()).ToList();
                var tenloaiHD = dt_LoaiHD.AsEnumerable().Where(x => x["Code"].ToString() == codeloaiHD[0].ToString()).Select(x => x["LoaiHopDong"].ToString()).ToList();
                if (check)
                {
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                    DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, true, crRowInd - 1);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl[0]);
                    worksheet.Rows[crRowInd - 2][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl[0]);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeHD_HD]].SetValueFromText(item["Code"].ToString());
                    check = false;
                }
                else
                {
                    Row crRowWs = worksheet.Rows[crRowInd++];
                    crRowWs.CopyFrom(copy_hd, PasteSpecial.All);
                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                    worksheet.Rows[crRowInd++].CopyFrom(copy_pl, PasteSpecial.All);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                    DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, true, crRowInd - 1);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl[0]);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl[0]);
                }
                foreach (var rowpl in drs_PL)
                {
                    foreach (DataRow rowct in dtCT.Rows)
                    {
                        Row crRowWs = worksheet.Rows[crRowInd++];
                        string crCodeCT = rowct["Code"].ToString();
                        crRowWs.Font.Bold = true;
                        crRowWs.Font.Color = Color.DarkTurquoise;
                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_CT]].SetValue(crCodeCT);
                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(rowct["Ten"].ToString());
                        foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                        {
                            string crCodeHM = HM["Code"].ToString();
                            crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs.Font.Bold = true;
                            crRowWs.Font.Color = Color.DarkGreen;
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_HM]].SetValue(crCodeHM);
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(HM["Ten"].ToString().ToUpper());
                            DataRow[] dt_CTCon = dt_CongtacHD.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToArray();
                            DataRow[] dt_CTConkhvt = dt_CongtacHD.AsEnumerable().Where(x => x["CodeHM"].ToString() == crCodeHM).ToArray();
                            foreach (var rowctc in dt_CTCon)
                            {
                                crRowWs = worksheet.Rows[crRowInd++];
                                crRowWs.Font.Bold = true;
                                crRowWs.Font.Color = Color.Black;
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValue(rowctc["Code"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_Congtac]].SetValue(rowctc["CodeKHVT"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(rowctc["MaVatLieu"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(rowctc["VatTu"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_DonVi]].SetValue(rowctc["DonViTinh"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(rowctc[MyConstant.COL_HD_Khoiluong]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(rowctc[MyConstant.COL_HD_Dongia]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NBD]].SetValue(rowctc[MyConstant.COL_HD_NBD]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NKT]].SetValue(rowctc[MyConstant.COL_HD_NKT]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"{DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]}{crRowInd}*{DIC_HOPDONG[MyConstant.COL_HD_Dongia]}{crRowInd}";
                                DataRow[] crow_Chitiet = dt_ChiTiet.AsEnumerable().Where(x => x["CodeCha"].ToString() == rowctc["Code"].ToString()).ToArray();
                                foreach (var rowCT in crow_Chitiet)
                                {
                                    crRowWs = worksheet.Rows[crRowInd++];
                                    //crRowWs.Font.Bold = true;
                                    crRowWs.Font.Color = Color.Red;
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(rowCT["MaHieuCongTac"]);
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(rowCT["TenCongTac"]);
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_DonVi]].SetValue(rowCT["DonVi"]);
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(rowCT[MyConstant.COL_HD_Khoiluong]);
                                    crRowWs.Visible = false;
                                }
                            }
                            foreach (var rowctc in dt_CTConkhvt)
                            {
                                crRowWs = worksheet.Rows[crRowInd++];
                                crRowWs.Font.Bold = true;
                                crRowWs.Font.Color = Color.Black;
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValue(rowctc["Code"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(rowctc["MaHieu"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(rowctc["TenCongViec"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_DonVi]].SetValue(rowctc["DonViTinh"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(rowctc[MyConstant.COL_HD_Khoiluong]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(rowctc[MyConstant.COL_HD_Dongia]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"{DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]}{crRowInd}*{DIC_HOPDONG[MyConstant.COL_HD_Dongia]}{crRowInd}";
                            }
                            crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue("CT");
                            crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue("");
                        }
                    }

                }
            }
            spread_PhuLucHopDong_Full.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void Fcn_UpdatePhuLucHDEmpty()
        {
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Worksheet worksheet_congtrinh = workbook.Worksheets["Thông tin công trình_Hạng mục"];
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
            CellRange copy_pl = worksheet_congtrinh.Rows[3];
            CellRange copy_hd = worksheet_congtrinh.Rows[2];
            CellRange copy_ct = worksheet_congtrinh.Rows[4];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            if (rangeXD.RowCount != 6)
                worksheet.Rows.Remove(6, rangeXD.RowCount - 6);
            worksheet.Rows[6].CopyFrom(copy_ct, PasteSpecial.All);
            worksheet.Rows[5].CopyFrom(copy_pl, PasteSpecial.All);
            worksheet.Rows[4].CopyFrom(copy_hd, PasteSpecial.All);
            worksheet.Rows[5][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText("");
            worksheet.Rows[2][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText("");
        }
        private void Fcn_UpDatePLHD()
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
            FileHelper.fcn_spSheetStreamDocument(spread_PhuLucHopDong_Full, $@"{BaseFrom.m_templatePath}\FileExcel\4.aPhuLucHopDong_Full.xlsx");
            if (cbo_MeNuTenHopDong.SelectedValue == null)
            {
                Fcn_UpdatePhuLucHDEmpty();
                WaitFormHelper.CloseWaitForm();
                return;
            }
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Worksheet worksheet_congtrinh = workbook.Worksheets["Thông tin công trình_Hạng mục"];
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);

            CellRange copy_pl = worksheet_congtrinh.Rows[3];
            CellRange copy_hd = worksheet_congtrinh.Rows[2];
            CellRange copy_ct = worksheet_congtrinh.Rows[4];
            string dbString = $"SELECT * FROM view_PhuLucHopDong_NhomCongTac" +
                $" WHERE CodeHDChinh='{cbo_MeNuTenHopDong.SelectedValue}' ORDER BY SortIdCtrinh ASC, SortIdHM ASC,SortIdCtac ASC ";
            DataTable dtCongTacTheoKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dtCongTacTheoKy.AddIndPhanTuyenNhom();
            //if (rangeXD.RowCount != 6)
            //    worksheet.Rows.Remove(6, rangeXD.RowCount - 6);
            worksheet.Rows[6].CopyFrom(copy_ct, PasteSpecial.All);
            worksheet.Rows[5][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText("");
            string lsCodeHD = MyFunction.fcn_Array2listQueryCondition(dtCongTacTheoKy.AsEnumerable().Select(x => x["CodeHd"].ToString()).ToArray());
            dbString = $"SELECT * FROM {MyConstant.TBL_ThongtinphulucHD} WHERE \"CodeHd\" IN ({lsCodeHD})";
            DataTable dt_PL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dt_PL.Rows.Count == 0)
            {
                dbString = $"SELECT *  FROM {MyConstant.TBL_Tonghopdanhsachhopdong} INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code = {MyConstant.TBL_Tonghopdanhsachhopdong}.CodeHopDong WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                DataTable dtHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                lsCodeHD = MyFunction.fcn_Array2listQueryCondition(dtHD.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT * FROM {MyConstant.TBL_ThongtinphulucHD} WHERE \"CodeHd\" IN ({lsCodeHD})";
                dt_PL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            }
            dbString = $"SELECT * FROM {MyConstant.TBL_LoaiHD}";
            DataTable dt_LoaiHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT {MyConstant.Tbl_TAOMOIHOPDONG}.*,{MyConstant.TBL_Tonghopdanhsachhopdong}.Code as CodeHd  FROM  {MyConstant.Tbl_TAOMOIHOPDONG} INNER JOIN {MyConstant.TBL_Tonghopdanhsachhopdong} " +
                $"ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code = {MyConstant.TBL_Tonghopdanhsachhopdong}.CodeHopDong " +
                $" WHERE {MyConstant.Tbl_TAOMOIHOPDONG}.Code='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //if (dt_PL.Rows.Count != 0 && dtCongTacTheoKy.Rows.Count != 0)
            //    worksheet.Rows.Insert(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex, (dtCongTacTheoKy.Rows.Count * 2) * dt_PL.Rows.Count + 4, RowFormatMode.FormatAsPrevious);
            int crRowInd = 6;
            bool check = true;
            Dictionary<string, string> DVTH = null;
            int stt = 1;
            bool IsDonGiaKeHoach = true;
            int sttcon = 1;
            spread_PhuLucHopDong_Full.BeginUpdate();
            foreach (DataRow item in dt.Rows)
            {
                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, true, crRowInd - 1);
                //worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                if (dtCongTacTheoKy.Rows.Count == 0)
                {
                    DataRow[] drs_PL = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["CodeHd"].ToString()).ToArray();
                    if (drs_PL.Count() == 0)
                        break;
                    var tenpl = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["CodeHd"].ToString()).Select(x => x["TenPl"].ToString()).ToList();
                    var codepl = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["CodeHd"].ToString()).Select(x => x["Code"].ToString()).ToList();
                    var codeloaiHD = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["CodeHd"].ToString()).Select(x => x["CodeLoaiHd"].ToString()).ToList();
                    var tenloaiHD = dt_LoaiHD.AsEnumerable().Where(x => x["Code"].ToString() == codeloaiHD[0].ToString()).Select(x => x["LoaiHopDong"].ToString()).ToList();
                    if (check)
                    {
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                        //DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, $"{item["TenHopDong"].ToString()}({item["SoHopDong"]})", true, crRowInd - 1, slke_ThongTinDuAn.EditValue.ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl[0]);
                        worksheet.Rows[crRowInd - 2][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl[0]);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeHD_HD]].SetValueFromText(item["Code"].ToString());
                        check = false;

                    }
                    else
                    {
                        Row crRowWs = worksheet.Rows[crRowInd++];
                        worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                        crRowWs.CopyFrom(copy_hd, PasteSpecial.All);
                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                        worksheet.Rows[crRowInd++].CopyFrom(copy_pl, PasteSpecial.All);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                        //DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, $"{item["TenHopDong"].ToString()}({item["SoHopDong"]})", true, crRowInd - 1, slke_ThongTinDuAn.EditValue.ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl[0]);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl[0]);

                    }
                }
                var CrowTenPL = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["CodePl"].ToString());
                foreach (var rowPL in CrowTenPL)
                {
                    var rowPLFirst = rowPL.FirstOrDefault();
                    if (rowPLFirst[MyConstant.COL_HD_Phatsinh] == DBNull.Value)
                    {
                        spread_PhuLucHopDong_Full.EndUpdate();
                        WaitFormHelper.CloseWaitForm();
                        return;
                    }
                    else
                    {
                        if (double.Parse(rowPLFirst[MyConstant.COL_HD_Phatsinh].ToString()) != 0)
                        {
                            Row crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs.CopyFrom(copy_pl, PasteSpecial.All);
                            worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(rowPLFirst["TenPl"].ToString());
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(rowPLFirst["CodePl"].ToString());
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Phatsinh]].SetValueFromText(rowPLFirst["PhatSinh"].ToString());
                            worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Phuluc]].SetValueFromText($"{"Phụ lục "}{(int.Parse(rowPLFirst["PhatSinh"].ToString()) + 1)}");
                        }
                        else
                        {
                            var tenloaiHD = dt_LoaiHD.AsEnumerable().Where(x => x["Code"].ToString() == rowPLFirst["CodeLoaiHd"].ToString()).Select(x => x["LoaiHopDong"].ToString()).ToList();
                            if (check)
                            {
                                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(rowPLFirst["TenPl"].ToString());
                                worksheet.Rows[crRowInd - 2][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(rowPLFirst["CodePl"].ToString());
                                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeHD_HD]].SetValueFromText(item["Code"].ToString());
                                check = false;

                            }
                            else
                            {
                                Row crRowWs = worksheet.Rows[crRowInd++];
                                crRowWs.CopyFrom(copy_hd, PasteSpecial.All);
                                worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                                worksheet.Rows[crRowInd++].CopyFrom(copy_pl, PasteSpecial.All);
                                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(rowPLFirst["TenPl"].ToString());
                                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(rowPLFirst["CodePl"].ToString());

                            }
                            var grCongTrinh = rowPL.GroupBy(x => x["CodeCongTrinh"].ToString());
                            foreach (var Ctrinh in grCongTrinh)
                            {
                                string crCodeCT = Ctrinh.Key;
                                Row crRowWs = worksheet.Rows[crRowInd++];
                                worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                                crRowWs.Font.Bold = true;
                                crRowWs.Font.Color = Color.DarkTurquoise;
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_CT]].SetValue(crCodeCT);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(Ctrinh.FirstOrDefault()["TenCongTrinh"].ToString());
                                var grHangMuc = Ctrinh.GroupBy(x => x["CodeHangMuc"].ToString());
                                foreach (var HM in grHangMuc)
                                {
                                    string crCodeHM = HM.Key;
                                    crRowWs = worksheet.Rows[crRowInd++];
                                    worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                                    crRowWs.Font.Bold = true;
                                    crRowWs.Font.Color = Color.DarkGreen;
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_HM]].SetValue(crCodeHM);
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(HM.FirstOrDefault()["TenHangMuc"].ToString().ToUpper());
                                    var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"]).OrderBy(x => x.Key);
                                    foreach (var Tuyen in grPhanTuyen)
                                    {
                                        var fstTuyen = Tuyen.First();
                                        string crCodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : fstTuyen["CodePhanTuyen"].ToString();
                                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                                        {
                                            crRowWs = worksheet.Rows[crRowInd++];
                                            crRowWs.Font.Bold = true;
                                            crRowWs.Font.Color = Color.Red;
                                            worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValue(crCodeTuyen);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_PhanTuyen);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(fstTuyen["TenTuyen"].ToString().ToUpper());
                                        }
                                        var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"])
                                              .OrderBy(x => x.Key);
                                        foreach (var NhomTuyen in grTuyenNhom)
                                        {
                                            var fstNhom = NhomTuyen.First();

                                            string crCodeNhom = (fstNhom["CodeNhom"] == DBNull.Value) ? null : fstNhom["CodeNhom"].ToString();
                                            if (fstNhom["CodeNhom"] != DBNull.Value)
                                            {
                                                sttcon = 1;
                                                IsDonGiaKeHoach = bool.Parse(fstNhom["IsDonGiaKeHoach"].ToString());
                                                crRowWs = worksheet.Rows[crRowInd++];
                                                worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                                                crRowWs.Font.Bold = false;
                                                crRowWs.Font.Color = MyConstant.color_Row_NhomCongTac;
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValue(stt++);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValue(fstNhom["CodePLHD"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_NHOM);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(fstNhom["TenNhom"].ToString().ToUpper());
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_DonVi]].SetValue(fstNhom["DonViNhom"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(fstNhom["KLPLHD"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(fstNhom["DonGiaPLHD"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NBD]].SetValue(fstNhom["NBD"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NKT]].SetValue(fstNhom["NKT"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"{DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]}{crRowInd}*{DIC_HOPDONG[MyConstant.COL_HD_Dongia]}{crRowInd}";
                                            }
                                            var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"]);
                                            foreach (var CongTac in grCongTacTuyen)
                                            {

                                                var fstCongTac = CongTac.FirstOrDefault();
                                                crRowWs = worksheet.Rows[crRowInd++];
                                                worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                                                string Mahieu = fstCongTac["MaHieuCongTac"].ToString();
                                                string TenCongTac = fstCongTac["TenCongTac"].ToString();
                                                WaitFormHelper.ShowWaitForm($"{stt}.{Mahieu}_{TenCongTac}");
                                                crRowWs.Font.Bold = false;
                                                crRowWs.Font.Color = crCodeNhom is null ? Color.Black : MyConstant.color_Row_NhomCongTac;
                                                crRowWs.Visible = crCodeNhom is null ? true : false;
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValue(fstCongTac["CodePLHD"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_Congtac]].SetValue(fstCongTac["Code"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValueFromText(Mahieu);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(TenCongTac);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_DonVi]].SetValue(fstCongTac["DonVi"]);
                                                if (crCodeNhom is null)
                                                {
                                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValue(stt++);
                                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(fstCongTac["KLPLHD"]);
                                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(fstCongTac["DonGiaPLHD"]);
                                                }
                                                else
                                                {
                                                    //if (fstCongTac["NBD"] != DBNull.Value)
                                                    //{

                                                    //}
                                                    //else
                                                    //{

                                                    //}
                                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValue($"{stt - 1}.{sttcon++}");
                                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(fstCongTac["KhoiLuongHopDongChiTiet"]);
                                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(IsDonGiaKeHoach ? fstCongTac["DonGia"] : fstCongTac["DonGiaThiCong"]);
                                                    //if (IsDonGiaKeHoach)
                                                    //{

                                                    //    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(fstCongTac["DonGia"]);
                                                    //}
                                                    //else
                                                    //{
                                                    //    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(fstCongTac["DonGiaThiCong"]);
                                                    //}
                                                }
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NBD]].SetValue(fstCongTac["NBD"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NKT]].SetValue(fstCongTac["NKT"]);
                                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"{DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]}{crRowInd}*{DIC_HOPDONG[MyConstant.COL_HD_Dongia]}{crRowInd}";

                                            }
                                        }
                                        if (crCodeTuyen != null)
                                        {
                                            crRowWs = worksheet.Rows[crRowInd++];
                                            worksheet.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                                            crRowWs.Font.Bold = true;
                                            crRowWs.Font.Color = Color.Red;
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue($"HOÀN THÀNH {fstTuyen["TenTuyen"]}".ToUpper());
                                        }

                                    }

                                    crRowWs = worksheet.Rows[crRowInd++];
                                    worksheet.Rows.Insert(crRowInd, 2, RowFormatMode.FormatAsNext);
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue("CT");
                                    crRowWs = worksheet.Rows[crRowInd++];
                                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue("");

                                }

                            }

                        }
                    }

                }

            }
            spread_PhuLucHopDong_Full.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_updatephuluchopdong()
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
            //tabHopDong_ThanhToan_AB_BB.TabPages
            if (cbo_MeNuTenHopDong.SelectedValue == null)
            {
                Fcn_UpdatePhuLucHDEmpty();
                WaitFormHelper.CloseWaitForm();
                return;
            }
            //cbo_MeNuTenHopDong.DataSource = dt.AsEnumerable().ToDictionary(x => x["Code"], x => x["TenHopDong"]).ToList();
            //if (cbo_MeNuTenHopDong.SelectedValue == null)
            //    return;
            IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
            Worksheet worksheet = workbook.Worksheets["Chi tiết phụ lục hợp đồng"];
            Worksheet worksheet_congtrinh = workbook.Worksheets["Thông tin công trình_Hạng mục"];
            CellRange rangeXD = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN];
            string queryStr = $"SELECT *  FROM {MyConstant.TBL_Tonghopdanhsachhopdong} INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code = {MyConstant.TBL_Tonghopdanhsachhopdong}.CodeHopDong WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            Dictionary<string, string> DIC_HOPDONG = MyFunction.fcn_getDicOfColumn(workbook.Range[MyConstant.TBL_QUYETDICWS]);
            //queryStr = $"SELECT  \"Ten\" FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            //DataTable dt_congtrinh = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);

            //CellRange copy = worksheet_congtrinh.Range["A3:W7"];
            CellRange copy_pl = worksheet_congtrinh.Rows[3];
            CellRange copy_hd = worksheet_congtrinh.Rows[2];
            CellRange copy_ct = worksheet_congtrinh.Rows[4];

            //queryStr = $"SELECT  \"Ten\" FROM {MyConstant.TBL_hopdongchinhAB} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            //DataTable dt_congtac = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            DataTable dtCongTacTheoKy, dtDanhMucCongTac, dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            //TDKHHelper.fcn_TDKH_LoadDanhMucCongTac_CTacTheoKy(out dtDanhMucCongTac, out dtCongTacTheoKy, dtCT, dtHM);
            queryStr = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG} WHERE \"Code\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt_TaoMoiHD = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            string condition = "";
            foreach (var item in MyConstant.DIC_NhaThau_ToDoi_NTP)
            {
                if (dt_TaoMoiHD.Rows[0][item.Value].ToString() == dt_TaoMoiHD.Rows[0]["CodeDonViThucHien"].ToString())
                {
                    condition = $"\"{item.Value}\"='{dt_TaoMoiHD.Rows[0][item.Value]}'";
                    break;
                }
            }
            //condition= $" \"CodeNhaThau\" IS NULL AND \"CodeToDoi\" IS NULL AND \"CodeNhaThauPhu\" IS NULL";

            string dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeGiaiDoan\" = '{cbb_DBKH_ChonDot.SelectedValue}' AND {condition} ORDER BY \"SortId\" ASC";
            if (condition == "")
                dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeGiaiDoan\" = '{cbb_DBKH_ChonDot.SelectedValue}' ORDER BY \"SortId\" ASC";
            dtCongTacTheoKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string strCodeCT = MyFunction.fcn_Array2listQueryCondition(dtCongTacTheoKy.AsEnumerable().Select(x => x["CodeCongTac"].ToString()).ToArray());

            dbString = $"SELECT * FROM {TDKH.TBL_DanhMucCongTac} WHERE \"Code\" IN ({strCodeCT})";
            dtDanhMucCongTac = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lsCodeHD = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            dbString = $"SELECT * FROM {MyConstant.TBL_ThongtinphulucHD} WHERE \"CodeHd\" IN ({lsCodeHD})";
            DataTable dt_PL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //if (dt_PL.Rows.Count == 0)
            //    return;
            string lsCodePL = MyFunction.fcn_Array2listQueryCondition(dt_PL.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_PhuLuc} WHERE \"CodePl\" IN ({lsCodePL})";
            DataTable dt_CongtacHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT * FROM {MyConstant.TBL_LoaiHD}";
            DataTable dt_LoaiHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (rangeXD.RowCount != 6)
                worksheet.Rows.Remove(6, rangeXD.RowCount - 6);
            worksheet.Rows[6].CopyFrom(copy_ct, PasteSpecial.All);
            worksheet.Rows[5][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText("");
            if (dt_PL.Rows.Count != 0)
                worksheet.Rows.Insert(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex - 1, (dtCT.Rows.Count * 2 + dtHM.Rows.Count * 3) * dt_PL.Rows.Count + dt_PL.Rows.Count * 2 + dt_CongtacHD.Rows.Count, RowFormatMode.FormatAsPrevious);
            int crRowInd = 6;
            bool check = true;
            Dictionary<string, string> DVTH = null;
            int stt = 1;
            spread_PhuLucHopDong_Full.BeginUpdate();
            //           spread_PhuLucHopDong_Full.Document.History.IsEnabled = false;
            foreach (DataRow item in dt.Rows)
            {
                worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, true, crRowInd - 1);
                DataRow[] drs_PL = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["Code"].ToString()).ToArray();
                if (drs_PL.Count() == 0)
                    break;
                var tenpl = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["Code"].ToString()).Select(x => x["TenPl"].ToString()).ToList();
                var codepl = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["Code"].ToString()).Select(x => x["Code"].ToString()).ToList();
                var codeloaiHD = dt_PL.AsEnumerable().Where(x => x["CodeHd"].ToString() == item["Code"].ToString()).Select(x => x["CodeLoaiHd"].ToString()).ToList();
                var tenloaiHD = dt_LoaiHD.AsEnumerable().Where(x => x["Code"].ToString() == codeloaiHD[0].ToString()).Select(x => x["LoaiHopDong"].ToString()).ToList();
                if (check)
                {
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                    //DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, $"{item["TenHopDong"].ToString()}({item["SoHopDong"]})", true, crRowInd - 1, slke_ThongTinDuAn.EditValue.ToString());
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl[0]);
                    worksheet.Rows[crRowInd - 2][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl[0]);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeHD_HD]].SetValueFromText(item["Code"].ToString());
                    check = false;

                }
                else
                {
                    Row crRowWs = worksheet.Rows[crRowInd++];
                    crRowWs.CopyFrom(copy_hd, PasteSpecial.All);
                    crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenloaiHD[0]);
                    worksheet.Rows[crRowInd++].CopyFrom(copy_pl, PasteSpecial.All);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                    //DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, $"{item["TenHopDong"].ToString()}({item["SoHopDong"]})", true, crRowInd - 1, slke_ThongTinDuAn.EditValue.ToString());
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(tenpl[0]);
                    worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(codepl[0]);

                }
                foreach (var rowpl in drs_PL)
                {
                    DataRow[] drs_CT_1 = dt_CongtacHD.AsEnumerable().Where(x => x["CodePl"].ToString() == rowpl["Code"].ToString()).ToArray();
                    if (Double.Parse(rowpl[MyConstant.COL_HD_Phatsinh].ToString()) != 0)
                    {
                        Row crRowWs = worksheet.Rows[crRowInd++];
                        crRowWs.CopyFrom(copy_pl, PasteSpecial.All);
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValueFromText($"{item["TenHopDong"]}({item["SoHopDong"]})");
                        //DVTH = MyFunction.fcn_getdonvithuchien(spread_PhuLucHopDong_Full, $"{item["TenHopDong"]}({item["SoHopDong"]})", true, crRowInd - 1, slke_ThongTinDuAn.EditValue.ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValueFromText(rowpl["TenPl"].ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValueFromText(rowpl["Code"].ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Phatsinh]].SetValueFromText(rowpl["PhatSinh"].ToString());
                        worksheet.Rows[crRowInd - 1][DIC_HOPDONG[MyConstant.COL_HD_Phuluc]].SetValueFromText($"{"Phụ lục "}{(Int32.Parse(rowpl["PhatSinh"].ToString()) + 1)}");
                    }
                    foreach (DataRow rowct in dtCT.Rows)
                    {
                        Row crRowWs = worksheet.Rows[crRowInd++];
                        string crCodeCT = rowct["Code"].ToString();
                        crRowWs.Font.Bold = true;
                        crRowWs.Font.Color = Color.DarkTurquoise;
                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_CT]].SetValue(crCodeCT);
                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                        crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(rowct["Ten"].ToString());
                        foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                        {
                            string crCodeHM = HM["Code"].ToString();
                            crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs.Font.Bold = true;
                            crRowWs.Font.Color = Color.DarkGreen;
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_HM]].SetValue(crCodeHM);
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(HM["Ten"].ToString().ToUpper());
                            var lsDanhMucCongTac = dtDanhMucCongTac.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToDictionary(x => x["Code"].ToString(), y => y["TenCongTac"].ToString());
                            DataRow[] drs_CTTheoKy = dtCongTacTheoKy.AsEnumerable().Where(x => lsDanhMucCongTac.Keys.Contains(x["CodeCongTac"].ToString())).ToArray();
                            Dictionary<string, string> strCodeCTTheoKy = drs_CTTheoKy.AsEnumerable().ToDictionary(x => x["Code"].ToString(), y => y["CodeCongTac"].ToString());
                            DataRow[] dt_CTCon = drs_CT_1.AsEnumerable().Where(x => strCodeCTTheoKy.Keys.Contains(x["CodeCongTacTheoGiaiDoan"].ToString())).ToArray();
                            foreach (var rowctc in dt_CTCon)
                            {
                                var mahieucongtac = dtDanhMucCongTac.AsEnumerable()
                                                    .Where(x => x["Code"].ToString() == strCodeCTTheoKy[rowctc["CodeCongTacTheoGiaiDoan"].ToString()].ToString()).Select(x => x["MaHieuCongTac"].ToString()).ToList();
                                var donvi = dtDanhMucCongTac.AsEnumerable()
                                                   .Where(x => x["Code"].ToString() == strCodeCTTheoKy[rowctc["CodeCongTacTheoGiaiDoan"].ToString()].ToString()).Select(x => x["DonVi"].ToString()).ToList();
                                crRowWs = worksheet.Rows[crRowInd++];
                                string Mahieu = mahieucongtac[0].ToString();
                                string TenCongTac = lsDanhMucCongTac[strCodeCTTheoKy[rowctc["CodeCongTacTheoGiaiDoan"].ToString()].ToString()];
                                WaitFormHelper.ShowWaitForm($"{stt}.{Mahieu}_{TenCongTac}");
                                crRowWs.Font.Color = Color.Black;
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_TenPL]].SetValue(stt++);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_CodeCT]].SetValue(rowctc["Code"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Code_Congtac]].SetValue(rowctc["CodeCongTacTheoGiaiDoan"]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValueFromText(Mahieu);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Tencongviec]].SetValue(TenCongTac);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_DonVi]].SetValue(donvi[0]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]].SetValue(rowctc[MyConstant.COL_HD_Khoiluong]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Dongia]].SetValue(rowctc[MyConstant.COL_HD_Dongia]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NBD]].SetValue(rowctc[MyConstant.COL_HD_NBD]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_NKT]].SetValue(rowctc[MyConstant.COL_HD_NKT]);
                                crRowWs[DIC_HOPDONG[MyConstant.COL_HD_ThanhTien]].Formula = $"{DIC_HOPDONG[MyConstant.COL_HD_Khoiluong]}{crRowInd}*{DIC_HOPDONG[MyConstant.COL_HD_Dongia]}{crRowInd}";
                            }
                            crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue("CT");
                            crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs[DIC_HOPDONG[MyConstant.COL_HD_Kyhieu]].SetValue("");
                        }
                    }

                }
            }
            spread_PhuLucHopDong_Full.EndUpdate();
            //           spread_PhuLucHopDong_Full.Document.History.IsEnabled = true;
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_UpdateCbbChitietlichtring()
        {
            Dictionary<string, string> cbbdic = new Dictionary<string, string>();
            cbbdic.Clear();
            cbbdic.Add($@"{BaseFrom.m_templatePath}\FileExcel\TB Chi tiết lịch trình thiết bị cá nhân trong tháng.xls", "[Mẫu] TB Chi tiết lịch trình thiết bị cá nhân trong tháng");
            Directory.CreateDirectory($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\QLMAY");
            foreach (string file in Directory.GetFiles($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\QLMAY"))
            {
                cbbdic.Add(file, Path.GetFileName($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\QLMAY\{ file}"));
            }

            cbo_CTLTTB_LaoiBaoCao.DataSource = cbbdic.ToList();
        }
        private void fcn_loadatadexuatphuongtien(bool method_update1, bool method_update2, DataTable dt)
        {
            List<string> tenphuongtien = new List<string>();
            if (method_update1)
            {
                string queryStr = $"SELECT * FROM {MyConstant.QLMayTB_Dexuatphuongtien}";
                dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            }
            if (method_update2)
            {
                string queryStr = $"SELECT * FROM {MyConstant.QLMayTB_Dexuatphuongtien}";
                dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                dt.Rows.Clear();
                dt.AcceptChanges();
            }
            DataTable dt2 = dt.Copy();
            dt2.Columns.RemoveAt(dt2.Columns["Code"].Ordinal);
            dt2.Columns.RemoveAt(dt2.Columns["TrangThai"].Ordinal);
            dt2.AcceptChanges();
            dgv_QLMTB_DeXuatPhuongTienCongTac.DataSource = dt2;
            int i = 0;
            foreach (DataGridViewRow row in this.dgv_QLMTB_DeXuatPhuongTienCongTac.Rows)
            {
                string ngay = row.Cells["NgayVe"].Value.ToString();
                if (dt.Rows.Count > i)
                {
                    tenphuongtien.Add(dt.Rows[i]["TenThietBi_BienSo"].ToString());
                    row.Cells["QLM_TB_DXPT_STT"].Value = row.Index + 1;
                    row.Cells["QLM_TB_DXPT_Code"].Value = dt.Rows[i]["Code"];
                    row.Cells["QLM_TB_DXPT_TrangThai"].Value = dt.Rows[i]["TrangThai"];
                    i++;
                }
                if (ngay != "")
                {
                    DateTime date1 = DateTime.Parse(ngay);
                    DateTime date2 = DateTime.Now.Date;
                    if (date1.Date < date2.Date)
                    {
                        string dbString = $"UPDATE  {MyConstant.QLMayTB_Dexuatphuongtien} SET \"TrangThai\"='{"Hoàn thành công tác"}' WHERE \"Code\"='{dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[row.Index].Cells["QLM_TB_DXPT_Code"].Value.ToString()}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        string dbString1 = $"UPDATE  {MyConstant.QLMayTB_Danhsachphuongtien} SET \"TrangThai\"='{"Hoàn thành công tác"}' WHERE \"Code\"='{dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[row.Index].Cells["QLM_TB_DXPT_Code"].Value.ToString()}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString1);
                    }
                }
            }
            //cbo_DXPT_TenPhuongTien.DataSource = tenphuongtien;
            List<object> list = new List<object>();
            foreach (string o in tenphuongtien)
            {
                if (!list.Contains(o))
                {
                    list.Add(o);
                }
            }
            //cbo_DXPT_TenPhuongTien.Items.Clear();
            cbo_DXPT_TenPhuongTien.DataSource = list;
        }

        private void fcn_update(List<string> code)
        {
            string queryStr = $"SELECT * FROM {MyConstant.QLMayTB_Nhattrinhthicong} WHERE ";
            string condition = "";
            foreach (string el in code)
            {
                condition += $" OR \"Code\"='{el}'";
            }
            queryStr += condition.Remove(0, 3);
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            fcn_loadatanhaptrinhthicong(false, false, dt);
        }
        private void fcn_loadatasuachua(bool method_update1, bool method_update2, DataTable dt)
        {
            if (method_update1)
            {
                string queryStr = $"SELECT * FROM {MyConstant.QLMayTB_SuachuaBaoduong}";
                dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            }
            if (method_update2)
            {
                string queryStr = $"SELECT * FROM {MyConstant.QLMayTB_SuachuaBaoduong}";
                dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                dt.Rows.Clear();
                dt.AcceptChanges();
            }
            DataTable dt2 = dt.Copy();
            dt2.Columns.RemoveAt(dt2.Columns["Code"].Ordinal);
            dt2.Columns.RemoveAt(dt2.Columns["TrangThai"].Ordinal);
            dt2.AcceptChanges();
            dgv_QLMTB_SuaChuaBaoDuong.DataSource = dt2;
            int i = 0;
            foreach (DataGridViewRow row in this.dgv_QLMTB_SuaChuaBaoDuong.Rows)
            {
                if (dt.Rows.Count > i)
                {
                    row.Cells["QLMTB_SCBD_STT"].Value = row.Index + 1;
                    row.Cells["QLMTB_SCBD_Code"].Value = dt.Rows[i]["Code"];
                    row.Cells["QLMTB_SCBD_TrangThai"].Value = dt.Rows[i]["TrangThai"];
                    i++;
                }
            }
        }
        private void fcn_loadatanhaptrinhthicong(bool method_update1, bool method_update2, DataTable dt)
        {
            if (method_update1)
            {
                string queryStr = $"SELECT * FROM {MyConstant.QLMayTB_Nhattrinhthicong}";
                dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            }
            if (method_update2)
            {
                string queryStr = $"SELECT * FROM {MyConstant.QLMayTB_Nhattrinhthicong}";
                dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
                dt.Rows.Clear();
                dt.AcceptChanges();
            }
            DataTable dt2 = dt.Copy();
            dt2.Columns.RemoveAt(dt2.Columns["Code"].Ordinal);
            dt2.Columns.RemoveAt(dt2.Columns["TenCongTrinh"].Ordinal);
            dt2.AcceptChanges();
            //dgv_QLMTB_NhatTrinhThiCong.DataSource = dt2;
            //int i = 0;
            //foreach (DataGridViewRow row in this.dgv_QLMTB_NhatTrinhThiCong.Rows)
            //{
            //    if (dt.Rows.Count > i)
            //    {
            //        //(row.DataBoundItem as DataRowView).Row["MayTB_DSPT_STT"] = 1;
            //        row.Cells["NTMTC_STT"].Value = row.Index + 1;
            //        row.Cells["NTMTC_Code"].Value = dt.Rows[i]["Code"];
            //        row.Cells["NTMTC_Tencongtrinh"].Value = dt.Rows[i]["TenCongTrinh"];
            //        i++;
            //    }
            //}
        }
        //private void fcn_upadatephuluchopdong(bool method)
        //{
        //    IWorkbook workbook = spread_PhuLucHopDong_Full.Document;
        //    Worksheet worksheet = workbook.Worksheets["Phụ lục hợp đồng"];
        //    if (Directory.Exists($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\{slke_ThongTinDuAn.Text}\{slke_ThongTinDuAn.EditValue.ToString()}"))
        //    {
        //        //File.Copy($@"{m_templatePath}\FileExcel\4.aPhuLucHopDong_Full.xls", $@"{m_tempPath}\{m_crTempDATH}\{slke_ThongTinDuAn.Text}\{slke_ThongTinDuAn.EditValue.ToString()}\4.aPhuLucHopDong_Full.xls");
        //        if (method)
        //            spread_PhuLucHopDong_Full.SaveDocument($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\{slke_ThongTinDuAn.Text}\{slke_ThongTinDuAn.EditValue.ToString()}\4.aPhuLucHopDong_Full.xls");
        //        else
        //        {
        //            spread_PhuLucHopDong_Full.LoadDocument($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\{slke_ThongTinDuAn.Text}\{slke_ThongTinDuAn.EditValue.ToString()}\4.aPhuLucHopDong_Full.xls");
        //        }
        //        //spsheet_QLMTB_Chitietlichtrinh.SaveDocument($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\QLMAY\{BM}.xlsx");
        //        //fcn_UpdateCbbChitietlichtring();
        //    }
        //    else
        //    {
        //        Directory.CreateDirectory($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\{slke_ThongTinDuAn.Text}\{slke_ThongTinDuAn.EditValue.ToString()}");
        //        File.Copy($@"{BaseFrom.m_templatePath}\FileExcel\4.aPhuLucHopDong_Full.xls", $@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\{slke_ThongTinDuAn.Text}\{slke_ThongTinDuAn.EditValue.ToString()}\4.aPhuLucHopDong_Full.xls");
        //        if (method)
        //            spread_PhuLucHopDong_Full.SaveDocument($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\{slke_ThongTinDuAn.Text}\{slke_ThongTinDuAn.EditValue.ToString()}\4.aPhuLucHopDong_Full.xls");
        //        else
        //        {
        //            spread_PhuLucHopDong_Full.LoadDocument($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\{slke_ThongTinDuAn.Text}\{slke_ThongTinDuAn.EditValue.ToString()}\4.aPhuLucHopDong_Full.xls");
        //        }
        //    }
        //}

        private void btn_chonthietbi_Click(object sender, EventArgs e)
        {
            FormLuachonThietBi luachon = new FormLuachonThietBi();
            luachon.m_TruyenData = new FormLuachonThietBi.DE__TRUYENDATA(fcn_update);
            luachon.ShowDialog();
        }

        private void fcn_Tinhtoanluyke(int luykedau, int luykenhot, int luykexang, bool method)
        {

        }

        private void btn_NTTC_ThucHienNhapSoLieu_Click(object sender, EventArgs e)
        {

        }

        private void nUD_giosang_ValueChanged(object sender, EventArgs e)
        {
        }

        private void nUD_giochieu_ValueChanged(object sender, EventArgs e)
        {
        }

        private void nUD_giotoi_ValueChanged(object sender, EventArgs e)
        {
        }

        private void txt_Vitricongtrinh_TextChanged(object sender, EventArgs e)
        {

        }

        private void btn_NTTC_NhapThemNhienLieu_Click(object sender, EventArgs e)
        {
            Form_NhatTrinh_NhapThemNhienLieu NhapNhienLieu = new Form_NhatTrinh_NhapThemNhienLieu();
            NhapNhienLieu.m_TruyenDataLK = new Form_NhatTrinh_NhapThemNhienLieu.DE__TRUYENDATALK(fcn_updateluyke);
            NhapNhienLieu.ShowDialog();
        }
        private void fcn_updateluyke(int luykedau, int luykenhot, int luykexang)
        {
            fcn_Tinhtoanluyke(luykedau, luykenhot, luykexang, false);
        }

        private void btn_NTTC_XuatBaoCao_Click(object sender, EventArgs e)
        {

        }

        private void btn_DXPT_XuatDeXuatPhuongTien_Click(object sender, EventArgs e)
        {
            CurrencyManager currencyManager = (CurrencyManager)BindingContext[dgv_QLMTB_DeXuatPhuongTienCongTac.DataSource];
            currencyManager.SuspendBinding();
            foreach (DataGridViewRow row in dgv_QLMTB_DeXuatPhuongTienCongTac.Rows)
            {
                if (MyFunction.fcn_RemoveAccents(row.Cells["TenThietBi_BienSo"].Value.ToString().ToLower()).Contains(MyFunction.fcn_RemoveAccents(cbo_DXPT_TenPhuongTien.Text.ToLower())))
                {
                    row.Visible = true;
                    string dbString = $"UPDATE  {MyConstant.QLMayTB_Dexuatphuongtien} SET \"TrangThai\"='{"Đang đi công tác"}',\"NguoiDeXuat\"='{txt_DXPT_NguoiDeXuat.Text}',\"SoNguoiDi\"='{txt_DXPT_SoNguoiDi.Text}',\"NguoiSuDung\"='{txt_DXPT_NguoiSuDung.Text}',\"ChucVuNguoiSuDung\"='{cbo_DXPT_ChucVuNguoiSuDung.Text}',\"NoiDungCongTac\"='{txt_DXPT_NoiDungCongTac.Text}',\"NoiDi\"='{txt_DXPT_NoiDi.Text}',\"NoiDen\"='{txt_DXPT_NoiDen.Text}',\"NgayDi\"='{datet_DXPT_NgayDi.Text}',\"NgayVe\"='{datet_DXPT_NgayVe.Text}' WHERE \"Code\"='{dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[row.Index].Cells["QLM_TB_DXPT_Code"].Value.ToString()}'";
                    DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    string dbString1 = $"UPDATE  {MyConstant.QLMayTB_Danhsachphuongtien} SET \"TrangThai\"='{"Đang đi công tác"}' WHERE \"Code\"='{dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[row.Index].Cells["QLM_TB_DXPT_Code"].Value.ToString()}'";
                    DataProvider.InstanceTHDA.ExecuteQuery(dbString1);
                    string dbString2 = $"UPDATE  {MyConstant.QLMayTB_SuachuaBaoduong} SET \"TrangThai\"='{"Đang đi công tác"}' WHERE \"Code\"='{dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[row.Index].Cells["QLM_TB_DXPT_Code"].Value.ToString()}'";
                    DataProvider.InstanceTHDA.ExecuteQuery(dbString2);
                }
            }
            currencyManager.ResumeBinding();
            fcn_loadatadexuatphuongtien(true, false, null);
        }

        private void btn_CTLTTB_XuatBaoCaoCaNhan_Click(object sender, EventArgs e)
        {
            IWorkbook workbook = spsheet_QLMTB_Chitietlichtrinh.Document;
            Worksheet worksheet = workbook.Worksheets[0];
            Dictionary<string, string> DIC_LichTringThietBi = MyFunction.fcn_getDicOfColumn(workbook.Range["Tbl_RangeLichTringThietBi"]);
            Form_QLMay_LuaChonCongViec luachon = new Form_QLMay_LuaChonCongViec(DIC_LichTringThietBi);
            luachon.m_TruyenData = new Form_QLMay_LuaChonCongViec.DE__TRUYENDATALuachon(fcn_updatevaosheetthietbi);
            luachon.ShowDialog();
        }
        private void fcn_updatevaosheetthietbi(DataTable dt, Dictionary<string, string> dicc)
        {
            IWorkbook workbook = spsheet_QLMTB_Chitietlichtrinh.Document;
            Worksheet worksheet = workbook.Worksheets[0];
            CellRange rangeXD = worksheet.Range["Tbl_RangeSelect"];
            //worksheet.Clear(worksheet[rangeXD.]);
            if (dt.Rows.Count >= rangeXD.RowCount)
            {
                worksheet.Rows.Insert(rangeXD.BottomRowIndex, dt.Rows.Count - rangeXD.RowCount + 1, RowFormatMode.FormatAsPrevious);
                //worksheet.Import(dt, false, rangeXD.TopRowIndex, 0);
                //spreadsheetControl1.BeginUpdate();
                ////worksheet.Rows[rangeXD.BottomRowIndex + dt.Rows.Count - rangeXD.RowCount+1]["C"].Formula = $"SUM(C{rangeXD.TopRowIndex + 1}:C{rangeXD.BottomRowIndex + 1})";
                //spreadsheetControl1.EndUpdate();
            }
            //else
            //{
            //    spreadsheetControl1.BeginUpdate();
            //    worksheet.Import(dt, false, rangeXD.TopRowIndex, 0);
            //    spreadsheetControl1.EndUpdate();
            //}
            foreach (DataRow r in dt.Rows)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow rowCon = dt.Rows[i];
                    foreach (var item in dicc)
                    {
                        if (dt.Columns.Contains(item.Key))
                        {
                            worksheet.Rows[rangeXD.TopRowIndex + i][item.Value].SetValueFromText(rowCon[item.Key].ToString(), true);
                        }
                    }
                }

            }
            worksheet.Rows[9]["A"].Value = "-        Tổng giờ/Tổng Km thực hiện:" + worksheet.Rows[rangeXD.BottomRowIndex + dt.Rows.Count - rangeXD.RowCount + 2][dicc["TongKm"]].Value.ToString();
            worksheet.Rows[10]["A"].Value = "-        Tổng ngày làm:" + dt.Rows.Count.ToString();
            worksheet.Rows[11]["A"].Value = "-        Tổng nhiên liệu được cấp:" + worksheet.Rows[rangeXD.BottomRowIndex + dt.Rows.Count - rangeXD.RowCount + 2][dicc["NhienLieu"]].Value.ToString();
            worksheet.Rows[12]["A"].Value = "-        Tổng nhớt được cấp:" + worksheet.Rows[rangeXD.BottomRowIndex + dt.Rows.Count - rangeXD.RowCount + 2][dicc["Mo"]].Value.ToString();
            worksheet.Rows[13]["A"].Value = "-        Tổng mỡ được cấp:" + worksheet.Rows[rangeXD.BottomRowIndex + dt.Rows.Count - rangeXD.RowCount + 2][dicc["Nhot"]].Value.ToString();
        }
        private void btn_themmau_Click(object sender, EventArgs e)
        {
            string BM = DevExpress.XtraEditors.XtraInputBox.Show("Nhập tên đường dẫn", "Tạo đường dẫn mới", "");
            if (BM == "")
                return;
            if (Directory.Exists($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\QLMAY"))
            {
                spsheet_QLMTB_Chitietlichtrinh.SaveDocument($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\QLMAY\{BM}.xlsx");
                fcn_UpdateCbbChitietlichtring();
            }
            else
            {
                Directory.CreateDirectory($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\QLMAY");
                spsheet_QLMTB_Chitietlichtrinh.SaveDocument($@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\QLMAY\{BM}.xlsx");
                fcn_UpdateCbbChitietlichtring();
            }
        }

        private void btn_CTLTTB_XuatBaoCaoTongHop_Click(object sender, EventArgs e)
        {
            spsheet_QLMTB_Chitietlichtrinh.SaveDocumentAs();
        }

        private void dgv_QLMTB_SuaChuaBaoDuong_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex < 0 || e.ColumnIndex == 1)
                return;
            string noidung = dgv_QLMTB_SuaChuaBaoDuong.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString();
            //dgv_QLMTB_SuaChuaBaoDuong.Rows[e.RowIndex].Cells[e.ColumnIndex].Style.BackColor = Color.Red;
            string tencot = dgv_QLMTB_SuaChuaBaoDuong.Columns[e.ColumnIndex].HeaderText;
            string dbString = $"UPDATE  {MyConstant.QLMayTB_SuachuaBaoduong} SET '{tencot}'='{noidung}' WHERE \"Code\"='{dgv_QLMTB_SuaChuaBaoDuong.Rows[e.RowIndex].Cells[0].Value.ToString()}'";
            DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (tencot == "TrangThai")
            {
                string dbString1 = $"UPDATE  Tbl_Danhsachphuongtien SET '{tencot}'='{noidung}' WHERE \"Code\"='{dgv_QLMTB_SuaChuaBaoDuong.Rows[e.RowIndex].Cells[0].Value.ToString()}'";
                DataProvider.InstanceTHDA.ExecuteQuery(dbString1);
                string dbString2 = $"UPDATE  {MyConstant.QLMayTB_Dexuatphuongtien} SET '{tencot}'='{noidung}' WHERE \"Code\"='{dgv_QLMTB_SuaChuaBaoDuong.Rows[e.RowIndex].Cells[0].Value.ToString()}'";
                DataProvider.InstanceTHDA.ExecuteQuery(dbString2);
            }
        }

        private void btn_QLMTB_SCBD_TimKiem_Click(object sender, EventArgs e)
        {
            CurrencyManager currencyManager = (CurrencyManager)BindingContext[dgv_QLMTB_SuaChuaBaoDuong.DataSource];
            currencyManager.SuspendBinding();
            foreach (DataGridViewRow row in dgv_QLMTB_SuaChuaBaoDuong.Rows)
            {
                if (row.Index < dgv_QLMTB_SuaChuaBaoDuong.Rows.Count)
                {

                    if (MyFunction.fcn_RemoveAccents(row.Cells["BienSo"].Value.ToString().ToLower()).Contains(MyFunction.fcn_RemoveAccents(cbo_QLMTB_SCBD_SoXe.Text.ToLower()))
                        && MyFunction.fcn_RemoveAccents(row.Cells["TenThietBi_BienSo"].Value.ToString().ToLower()).Contains(MyFunction.fcn_RemoveAccents(cbo_QLMTB_SCBD_TenThietBi.Text.ToLower()))
                        //&& MyFunction.fcn_RemoveAccents(row.Cells["MayTB_DSPT_Tencongtrinh"].Value.ToString().ToLower()).Contains(MyFunction.fcn_RemoveAccents(txt_DSPT_ViTriCongTrinh.Text.ToLower()))
                        && MyFunction.fcn_RemoveAccents(row.Cells["TaiXe"].Value.ToString().ToLower()).Contains(MyFunction.fcn_RemoveAccents(cbo_QLMTB_SCBD_TenTaiXe.Text.ToLower())))
                        //&& MyFunction.fcn_RemoveAccents(row.Cells["ChuPhuongTien"].Value.ToString().ToLower()).Contains(MyFunction.fcn_RemoveAccents(txt_DSPT_ChuPhuongTien.Text.ToLower())))
                        row.Visible = true;
                    else
                        row.Visible = false;
                }
            }
            currencyManager.ResumeBinding();
        }

        private void btn_DLMTK_TimKiem_Click(object sender, EventArgs e)
        {
            IWorkbook workbook = spsheet_QLMTB_DuLieuThamKhao.Document;
            Worksheet worksheet = workbook.Worksheets[0];
            CellRange rangeXD = worksheet.Range["Tbl_Rangthietbi"];
            //worksheet.AutoFilter.Columns[0].ApplyFilterCriteria(new CellValue[] { txt_DLMTK_MaMay.Text });
            worksheet.AutoFilter.Columns[1].ApplyFilterCriteria(new CellValue[] { txt_DLMTK_TenMayThietBi.Text });
        }

        private void dgv_QLMTB_DeXuatPhuongTienCongTac_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex < 0 || e.ColumnIndex == 1)
                return;
            string noidung = dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString();
            //dgv_QLMTB_SuaChuaBaoDuong.Rows[e.RowIndex].Cells[e.ColumnIndex].Style.BackColor = Color.Red;
            string tencot = dgv_QLMTB_DeXuatPhuongTienCongTac.Columns[e.ColumnIndex].HeaderText;
            string dbString = $"UPDATE  {MyConstant.QLMayTB_Dexuatphuongtien} SET '{tencot}'='{noidung}' WHERE \"Code\"='{dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[e.RowIndex].Cells[0].Value.ToString()}'";
            DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (tencot == "TrangThai")
            {
                string dbString1 = $"UPDATE  Tbl_Danhsachphuongtien SET \"TrangThai\"='{"Đang đi công tác"}' WHERE \"Code\"='{dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[e.RowIndex].Cells[0].Value.ToString()}'";
                DataProvider.InstanceTHDA.ExecuteQuery(dbString1);
                string dbString2 = $"UPDATE  {MyConstant.QLMayTB_SuachuaBaoduong} SET \"TrangThai\"='{"Đang đi công tác"}' WHERE \"Code\"='{dgv_QLMTB_DeXuatPhuongTienCongTac.Rows[e.RowIndex].Cells[0].Value.ToString()}'";
                DataProvider.InstanceTHDA.ExecuteQuery(dbString2);
            }
        }
        private void fcn_updateDeXuatVatLieu()
        {
            string dbString = $"SELECT * FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'";
            DataTable dt_yeucau = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            List<VatLieuHoanThanh> VLHT = new List<VatLieuHoanThanh>();
            int percent = 0, stt = 1;
            foreach (DataRow item in dt_yeucau.Rows)
            {
                if (item["TrangThai"].ToString() == "1" || item["IsDone"].ToString() == "True" || item["HopDongKl"] == DBNull.Value || item["LuyKeYeuCau"] == DBNull.Value)
                    continue;
                percent = (int)Math.Round(100 * ((double.Parse(item["HopDongKl"].ToString()) - double.Parse(item["LuyKeYeuCau"].ToString())) / double.Parse(item["HopDongKl"].ToString())));
                if (percent > 10)
                    continue;
                VLHT.Add(new VatLieuHoanThanh()
                {
                    STT = stt++,
                    HopDongKl = double.Parse(item["HopDongKl"].ToString()),
                    LuyKeYeuCau = double.Parse(item["LuyKeYeuCau"].ToString()),
                    MaVatTu = item["MaVatTu"].ToString(),
                    TenVatTu = item["TenVatTu"].ToString(),
                    DonVi = item["DonVi"].ToString(),
                    CodeTDKH = item["CodeTDKH"].ToString(),
                    CodeHd = item["CodeHd"].ToString(),
                    CodeKHVT = item["CodeKHVT"].ToString(),
                });
            }
            grvDeXuat_SHT.FormatConditions.Clear();
            grvDeXuat_SHT.FormatRules[0].Column = grvDeXuat_SHT.Columns["ConLai"];

            gcDeXuat_SHT.DataSource = VLHT;
            gcDeXuat_SHT.RefreshDataSource();
            gcDeXuat_SHT.Refresh();
        }
        /// <summary>
        /// update nhập kho theo tháng
        /// </summary>
        private void fcn_UpdateChuyenKho()
        {
            List<ChuyenVatTu> VL = (tL_ChuyenKho.DataSource as List<ChuyenVatTu>).Where(x => x.CodeDeXuat != null).ToList();
            string CodeDX = MyFunction.fcn_Array2listQueryCondition(VL.Where(x => x.CodeDeXuat != null).Select(x => x.CodeDeXuat).ToArray());
            DateTime date = DateTime.Now;
            var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
            var lastDayOfMonth = new DateTime(date.Year, date.Month, DateTime.DaysInMonth(date.Year, date.Month));
            string dbString = $"SELECT {QLVT.TBL_QLVT_YEUCAUVT}.TenVatTu,{QLVT.TBL_QLVT_YEUCAUVT}.DonVi,{QLVT.TBL_QLVT_YEUCAUVT}.MaVatTu,{QLVT.TBL_QLVT_CHUYENKHOVTKLHN}.KhoiLuong " +
                $" FROM {QLVT.TBL_QLVT_YEUCAUVT} " +
                $"INNER JOIN {QLVT.TBL_QLVT_CHUYENKHOVT} " +
                $"ON {QLVT.TBL_QLVT_CHUYENKHOVT}.CodeDeXuat = {QLVT.TBL_QLVT_YEUCAUVT}.Code " +
                $"INNER JOIN {QLVT.TBL_QLVT_CHUYENKHOVTKLHN} " +
                $"ON {QLVT.TBL_QLVT_CHUYENKHOVTKLHN}.CodeCha = {QLVT.TBL_QLVT_CHUYENKHOVT}.Code " +
                $" WHERE {QLVT.TBL_QLVT_YEUCAUVT}.Code IN ({CodeDX}) AND '{firstDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' <={QLVT.TBL_QLVT_CHUYENKHOVTKLHN}.Ngay<='{lastDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
            DataTable dt_CVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string[] MaVatLieu = VL.Select(x => x.MaVatTu).ToArray();
            int stt = 1;
            List<VatLieuHoanThanh> VLHT = new List<VatLieuHoanThanh>();
            foreach (ChuyenVatTu item in VL)
            {
                double KL = 0;
                DataRow[] crRow = dt_CVT.AsEnumerable().Where(x => x["MaVatTu"].ToString() == item.MaVatTu).ToArray();
                foreach (var row in crRow)
                    KL += double.Parse(row["KhoiLuong"].ToString());
                if (KL == 0)
                    continue;
                VLHT.Add(new VatLieuHoanThanh
                {
                    STT = stt++,
                    MaVatTu = item.MaVatTu,
                    TenVatTu = item.TenVatTu,
                    DonVi = item.DonVi,
                    KhoiLuong = KL
                });
            }
            gc_VatLieuChuyenTrongThang.DataSource = VLHT;
            gc_VatLieuChuyenKhoGanNhat.DataSource = VLHT;
        }
        private void Fcn_UpdateVatLieuVC()
        {
            DateTime date = DateTime.Now;
            var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
            var lastDayOfMonth = new DateTime(date.Year, date.Month, DateTime.DaysInMonth(date.Year, date.Month));
            string dbString = $"SELECT * FROM {QLVT.TBL_QLVT_NKVC} WHERE '{firstDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' <=\"Ngay\"<='{lastDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' ";
            DataTable dt_CVTHN = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lstCode = MyFunction.fcn_Array2listQueryCondition(dt_CVTHN.AsEnumerable().Select(x => x["CodeCha"].ToString()).Distinct().ToArray());
            dbString = $"SELECT * FROM {QLVT.TBL_QLVT_QLVC} " +
                $"INNER JOIN {QLVT.TBL_QLVT_YEUCAUVT} " +
                $"ON {QLVT.TBL_QLVT_YEUCAUVT}.Code={QLVT.TBL_QLVT_QLVC}.CodeDeXuat " +
                $" WHERE {QLVT.TBL_QLVT_QLVC}.Code IN ({lstCode})";
            DataTable dt_CVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            List<VatLieuHoanThanh> VL = new List<VatLieuHoanThanh>();
            int stt = 1;
            foreach (DataRow row in dt_CVT.Rows)
            {
                VL.Add(new VatLieuHoanThanh
                {
                    STT = stt++,
                    TenVatTu = row["TenVatTu"].ToString(),
                    MaVatTu = row["MaVatTu"].ToString(),
                    DonVi = row["DonVi"].ToString(),
                });
            }
            gc_VatLieuVanChuyen.DataSource = VL;
        }
        private void Fcn_UpdateTenKho()
        {
            DateTime date = DateTime.Now;
            var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
            var lastDayOfMonth = new DateTime(date.Year, date.Month, DateTime.DaysInMonth(date.Year, date.Month));
            string dbString = $"SELECT * FROM {QLVT.TBL_QLVT_CHUYENKHOVTKLHN} WHERE '{firstDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' <=\"Ngay\"<='{lastDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' ";
            DataTable dt_CVTHN = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lstCode = MyFunction.fcn_Array2listQueryCondition(dt_CVTHN.AsEnumerable().Select(x => x["CodeCha"].ToString()).Distinct().ToArray());
            string[] TenKho = dt_CVTHN.AsEnumerable().Select(x => x["TenKhoChuyenDen"].ToString()).Distinct().ToArray();
            dbString = $"SELECT * FROM {QLVT.TBL_QLVT_CHUYENKHOVT} WHERE \"Code\" IN ({lstCode})";
            DataTable dt_CVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            int stt = 1;
            List<VatLieuHoanThanh> TenKhoDen = new List<VatLieuHoanThanh>();
            List<VatLieuHoanThanh> TenKhoDi = new List<VatLieuHoanThanh>();
            foreach (string item in TenKho)
            {
                TenKhoDen.Add(new VatLieuHoanThanh
                {
                    STT = stt++,
                    KhoDen = item
                });
            }
            stt = 1;
            foreach (DataRow row in dt_CVT.Rows)
            {
                TenKhoDi.Add(new VatLieuHoanThanh
                {
                    STT = stt++,
                    KhoDi = row["TenKhoChuyenDi"].ToString()
                });
            }
            gc_TenKhoDen.DataSource = TenKhoDen;
            gc_TenKhoDi.DataSource = TenKhoDi;
        }
        private void fcn_UpdateNhapKho()
        {
            List<NhapVatLieu> VL = (tL_NhapKho.DataSource as List<NhapVatLieu>).Where(x => x.CodeDeXuat != null).ToList();
            string CodeDX = MyFunction.fcn_Array2listQueryCondition(VL.Where(x => x.CodeDeXuat != null).Select(x => x.CodeDeXuat).ToArray());
            DateTime date = DateTime.Now;
            var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
            var lastDayOfMonth = new DateTime(date.Year, date.Month, DateTime.DaysInMonth(date.Year, date.Month));
            string dbString = $"SELECT {QLVT.TBL_QLVT_YEUCAUVT}.TenVatTu,{QLVT.TBL_QLVT_YEUCAUVT}.DonVi,{QLVT.TBL_QLVT_YEUCAUVT}.MaVatTu,{QLVT.TBL_QLVT_NHAPVTKLHN}.KhoiLuong " +
                $" FROM {QLVT.TBL_QLVT_YEUCAUVT} " +
                $"INNER JOIN {QLVT.TBL_QLVT_NHAPVT} " +
                $"ON {QLVT.TBL_QLVT_NHAPVT}.CodeDeXuat = {QLVT.TBL_QLVT_YEUCAUVT}.Code " +
                $"INNER JOIN {QLVT.TBL_QLVT_NHAPVTKLHN} " +
                $"ON {QLVT.TBL_QLVT_NHAPVTKLHN}.CodeCha = {QLVT.TBL_QLVT_NHAPVT}.Code " +
                $" WHERE {QLVT.TBL_QLVT_YEUCAUVT}.Code IN ({CodeDX}) AND '{firstDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' <={QLVT.TBL_QLVT_NHAPVTKLHN}.Ngay<='{lastDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
            DataTable dt_NVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string[] MaVatLieu = VL.Select(x => x.MaVatTu).ToArray();
            int stt = 1;

            List<VatLieuHoanThanh> VLHT = new List<VatLieuHoanThanh>();
            foreach (NhapVatLieu item in VL)
            {
                //DataRow dtrow = Dt.NewRow();
                //dtrow["STT"] = stt++;
                //dtrow["VatTu"] = item.TenVatTu;
                //dtrow["DonVi"] = item.DonVi;
                //dtrow["MaVatTu"] = item.MaVatTu;
                DataRow[] crRow = dt_NVT.AsEnumerable().Where(x => x["MaVatTu"].ToString() == item.MaVatTu).ToArray();
                //foreach (var row in crRow)
                //    KL += double.Parse(row["KhoiLuong"].ToString());
                double KL = crRow.AsEnumerable().Sum(x => double.Parse(x["KhoiLuong"].ToString()));
                if (KL == 0)
                    continue;
                VLHT.Add(new VatLieuHoanThanh
                {
                    STT = stt++,
                    MaVatTu = item.MaVatTu,
                    TenVatTu = item.TenVatTu,
                    DonVi = item.DonVi,
                    KhoiLuong = KL
                });
            }
            gc_VatLieuNhapTrongThang.DataSource = VLHT;
        }
        private void fcn_UpdateXuatKhoTheoThang()
        {
            List<XuatVatLieu> VL = (tL_XuatKho.DataSource as List<XuatVatLieu>).Where(x => x.CodeDeXuat != null).ToList();
            string CodeDX = MyFunction.fcn_Array2listQueryCondition(VL.Where(x => x.CodeDeXuat != null).Select(x => x.CodeDeXuat).ToArray());
            DateTime date = DateTime.Now;
            var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
            var lastDayOfMonth = new DateTime(date.Year, date.Month, DateTime.DaysInMonth(date.Year, date.Month));
            string dbString = $"SELECT {QLVT.TBL_QLVT_YEUCAUVT}.TenVatTu,{QLVT.TBL_QLVT_YEUCAUVT}.DonVi,{QLVT.TBL_QLVT_YEUCAUVT}.MaVatTu,{QLVT.TBL_QLVT_XUATVTKLHN}.KhoiLuong " +
                $" FROM {QLVT.TBL_QLVT_YEUCAUVT} " +
                $"INNER JOIN {QLVT.TBL_QLVT_XUATVT} " +
                $"ON {QLVT.TBL_QLVT_XUATVT}.CodeDeXuat = {QLVT.TBL_QLVT_YEUCAUVT}.Code " +
                $"INNER JOIN {QLVT.TBL_QLVT_XUATVTKLHN} " +
                $"ON {QLVT.TBL_QLVT_XUATVTKLHN}.CodeCha = {QLVT.TBL_QLVT_XUATVT}.Code " +
                $" WHERE {QLVT.TBL_QLVT_YEUCAUVT}.Code IN ({CodeDX}) AND '{firstDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' <={QLVT.TBL_QLVT_XUATVTKLHN}.Ngay<='{lastDayOfMonth.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
            DataTable dt_XVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string[] MaVatLieu = VL.Select(x => x.MaVatTu).ToArray();
            int stt = 1;
            List<VatLieuHoanThanh> Source = new List<VatLieuHoanThanh>();
            foreach (XuatVatLieu item in VL)
            {

                double KL = 0;
                DataRow[] crRow = dt_XVT.AsEnumerable().Where(x => x["MaVatTu"].ToString() == item.MaVatTu).ToArray();
                foreach (var row in crRow)
                    KL += double.Parse(row["KhoiLuong"].ToString());
                Source.Add(new VatLieuHoanThanh
                {
                    STT = stt++,
                    MaVatTu = item.MaVatTu,
                    TenVatTu = item.TenVatTu,
                    DonVi = item.DonVi,
                    KhoiLuong = KL
                });
                //dtrow["KhoiLuong"] = KL;
                //Dt.Rows.Add(dtrow);
            }
            gc_VatLieuXuatNhieuTrongThang.DataSource = Source;
        }
        private void fcn_UpdateXuatKho()
        {
            tL_XuatKho.RefreshDataSource();
            List<XuatVatLieu> VL = tL_XuatKho.DataSource as List<XuatVatLieu>;
            int percent = 0, stt = 1, stt_cycx = 1;
            List<VatLieuHoanThanh> VLXK = new List<VatLieuHoanThanh>();
            List<VatLieuHoanThanh> VLCX = new List<VatLieuHoanThanh>();
            DataTable Dt = new DataTable();

            foreach (XuatVatLieu item in VL)
            {
                if (item.TrangThai == 0)
                    continue;
                if (item.TrangThai == 1)
                {
                    VLCX.Add(new VatLieuHoanThanh
                    {
                        STT = stt_cycx++,
                        MaVatTu = item.MaVatTu,
                        TenVatTu = item.TenVatTu,
                        DonVi = item.DonVi
                    });

                }
                else
                {
                    DataRow dtrow = Dt.NewRow();
                    percent = (int)Math.Round(100 * ((double)(item.LuyKeNhapTheoDot - item.LuyKeXuatTheoDot) / item.LuyKeNhapTheoDot));
                    if (percent > 10)
                        continue;
                    VLXK.Add(new VatLieuHoanThanh
                    {
                        STT = stt++,
                        MaVatTu = item.MaVatTu,
                        TenVatTu = item.TenVatTu,
                        DonVi = item.DonVi,
                        HopDongKl = item.LuyKeNhapTheoDot,
                        LuyKeYeuCau = item.LuyKeXuatTheoDot
                    });

                }
            }
            gc_VatLieuXuatGanHet.DataSource = VLXK;
            gc_VatLieuXuatGanHet_Add.DataSource = VLXK;
            gc_VatLieuChoXuat.DataSource = VLCX;
        }

        /// <summary>
        /// Load dữ liệu vào bảng quản lý vận chuyển xuât nhập kho
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="HD"></param>
        /// <param name="m_codecheck"></param>
        /// <param name="n_codecheck"></param>
        private void fcn_loadYeuCauVT_Thucong_TDKH(bool Type, bool HD, bool LoadData, string m_codecheck, string n_codecheck)
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu đề xuất vật liệu", "Vui Lòng chờ!");
            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            //tL_YeuCauVatTu.Columns["CodeHd"].Visible = false;
            string dbString = "";
            if (Type)
                dbString = $"SELECT * FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}' AND {m_codecheck} IS NULL AND \"CodeHd\"IS NULL AND {n_codecheck} IS NULL ";//AND \"IsDone\"='{0}'
            else
                dbString = $"SELECT * FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}' AND {m_codecheck} IS NOT NULL AND \"CodeHd\" IS NULL ";//AND \"IsDone\"='{0}'

            if (HD)
            {
                dbString = $"SELECT * FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}' AND \"CodeHd\" IS NOT NULL ";//AND \"IsDone\"='{0}'
                //tL_YeuCauVatTu.Columns["CodeHd"].Visible = true;
            }
            DataTable dt_yeucau = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //string lsCodeCT = MyFunction.fcn_Array2listQueryCondition(dt_yeucau.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
            //dbString = $"SELECT * FROM {QLVT.TBL_QLVT_NHAPVT} WHERE \"CodeDeXuat\" IN ({lsCodeCT})";
            //DataTable dt_NhapVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //dbString = $"SELECT * FROM {QLVT.TBL_QLVT_XUATVT} WHERE \"CodeDeXuat\" IN ({lsCodeCT})";
            //DataTable dt_XuatVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //string lsCodeCVT = MyFunction.fcn_Array2listQueryCondition(dt_NhapVT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
            //dbString = $"SELECT * FROM {QLVT.TBL_QLVT_CHUYENKHOVT} WHERE \"CodeNhapVT\" IN ({lsCodeCVT})";
            //DataTable dt_CVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //dbString = $"SELECT * FROM {QLVT.TBL_QLVT_QLVC} WHERE \"CodeNhapVT\" IN ({lsCodeCVT})";
            //DataTable dt_QLVC = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            List<VatLieu> VatLieu = new List<VatLieu>();
            List<VatLieu> VatLieuAdd = new List<VatLieu>();

            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();
                VatLieu.Add(new VatLieu()
                {
                    ParentID = "0",
                    ID = crCodeCT,
                    MaVatTu = MyConstant.CONST_TYPE_CONGTRINH,
                    TenVatTu = CT["Ten"].ToString(),
                });


                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();
                    VatLieu.Add(new VatLieu()
                    {
                        ParentID = crCodeCT,
                        ID = crCodeHM,
                        MaVatTu = MyConstant.CONST_TYPE_HANGMUC,
                        TenVatTu = HM["Ten"].ToString(),
                    });
                    DataRow[] dt_vl = dt_yeucau.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM && x["IsDone"].ToString() == "False").ToArray();
                    if (dt_vl.Count() != 0)
                    {
                        DataTable dt_VatLieu = dt_vl.CopyToDataTable();
                        dt_VatLieu.Columns["Code"].ColumnName = "ID";
                        VatLieuAdd = DuAnHelper.ConvertToList<VatLieu>(dt_VatLieu);
                        foreach (VatLieu rowitem in VatLieuAdd)
                        {
                            rowitem.ParentID = crCodeHM;
                            double KLLuyKe = Fcn_CalKLVatTu(rowitem.ID, QLVT.TBL_QLVT_YEUCAUVTKLHN);
                            rowitem.LuyKeYeuCau = KLLuyKe;
                            if (rowitem.YeuCauDotNay != 0)
                            {
                                rowitem.LuyKeYeuCau = KLLuyKe + rowitem.YeuCauDotNay;
                            }
                        }
                        VatLieu.AddRange(VatLieuAdd);
                    }
                    //foreach (var item in dt_vl)
                    //{
                    //    if (item["IsDone"].ToString() == "True")
                    //        continue;
                    //    VatLieu.Add(new VatLieu()
                    //    {
                    //        ParentID = crCodeHM,
                    //        CodeHd=item["CodeHd"].ToString(),
                    //        ID = item["Code"].ToString(),
                    //        TrangThai = item["TrangThai"].ToString() != "1" ? 2 : 1,
                    //        TenNhaCungCap= item["TenNhaCungCap"].ToString(),
                    //        MaVatTu = item["MaVatTu"].ToString(),
                    //        TenVatTu = item["TenVatTu"].ToString(),
                    //        DonVi = item["DonVi"].ToString(),
                    //        YeuCauDotNay= item["YeuCauDotNay"] == DBNull.Value ? 0 : Math.Round(double.Parse(item["YeuCauDotNay"].ToString()), 3),
                    //        HopDongKl = item["HopDongKl"]==DBNull.Value ? 0 : Math.Round(double.Parse(item["HopDongKl"].ToString()),3),
                    //        LuyKeYeuCau = item["LuyKeYeuCau"]==DBNull.Value ? 0 : Math.Round(double.Parse(item["LuyKeYeuCau"].ToString()), 3),
                    //        LuyKeXuatKho = item["LuyKeXuatKho"]== DBNull.Value ? 0 : Math.Round(double.Parse(item["LuyKeXuatKho"].ToString()), 3),
                    //        Chon = false,                          
                    //        DonGiaHienTruong = item["DonGiaHienTruong"]== DBNull.Value ? 0 : Math.Round(double.Parse(item["DonGiaHienTruong"].ToString()), 3)
                    //    });
                    //}
                    if (Type)
                        VatLieu.Add(new VatLieu()
                        {
                            ParentID = crCodeHM,
                            ID = Guid.NewGuid().ToString(),
                        });

                }
            }
            List<InforCT_HM> Infor = MyFunction.InforHMCT(slke_ThongTinDuAn.Properties.DataSource, true);
            //dbString = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi} WHERE \"CodeNcc\"=\"CodeDonViThucHien\" AND \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            //DataTable dt_hd = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //List<Infor_HopDong> LstHD = DuAnHelper.ConvertToList<Infor_HopDong>(dt_hd);
            //dbString = $"SELECT \"Code\",\"Ten\" FROM {MyConstant.TBL_THONGTINNHACUNGCAP} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            //DataTable dt_ncc = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //riLUE_NhaCungCap.DataSource= DuAnHelper.ConvertToList<Infor>(dt_ncc);
            //rILUE_TenHopDong.DataSource = LstHD;

            //rILUE_TenKhoChuyenKho.DataSource = Infor;
            //rILUE_TenKhoChuyenKho.DropDownRows = Infor.Count;
            tL_YeuCauVatTu.DataSource = VatLieu;
            tL_YeuCauVatTu.RefreshDataSource();
            tL_YeuCauVatTu.Refresh();
            tL_YeuCauVatTu.OptionsBehavior.Editable = true;

            tL_YeuCauVatTu.FormatConditions.Clear();
            tL_YeuCauVatTu.FormatRules[0].Column = tL_YeuCauVatTu.Columns["ConLai"];
            tL_YeuCauVatTu.ExpandAll();
            UpDateTenKho();
            if (!LoadData)
            {
                WaitFormHelper.CloseWaitForm();
                return;
            }
            Fcn_LoadDataNhapKho(dtCT, dtHM);
            Fcn_LoadDataXuatKho(dtCT, dtHM, Infor);
            Fcn_LoadDataTongHop(dtCT, dtHM, Infor);
            WaitFormHelper.CloseWaitForm();
        }
        private void UpDateTenKho()
        {
            List<InforCT_HM> Infor = MyFunction.InforHMCT(slke_ThongTinDuAn.Properties.DataSource, true);
            string dbString = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi} WHERE \"CodeNcc\"=\"CodeDonViThucHien\" AND \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_hd = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            List<Infor_HopDong> LstHD = DuAnHelper.ConvertToList<Infor_HopDong>(dt_hd);
            dbString = $"SELECT \"Code\",\"Ten\" FROM {MyConstant.TBL_THONGTINNHACUNGCAP} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_ncc = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            riLUE_NhaCungCap.DataSource = DuAnHelper.ConvertToList<Infor>(dt_ncc);
            rILUE_TenHopDong.DataSource = LstHD;

            rILUE_TenKhoChuyenKho.DataSource = Infor;
            rILUE_TenKhoChuyenKho.DropDownRows = Infor.Count;
            //NhapKho
            //dbString = $"SELECT \"Code\",\"Ten\" FROM {MyConstant.TBL_THONGTINNHACUNGCAP} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            //DataTable dt_ncc = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            rILUE_TenNhaCungCap.DataSource = DuAnHelper.ConvertToList<Infor>(dt_ncc);
            rILETenKho.DataSource = Infor;
            rILETenKho.DropDownRows = Infor.Count;
            rILUE_NhapKho.DataSource = Infor;
            rILUE_NhapKho.DropDownRows = Infor.Count;
            rILUE_TenKhoTH.DataSource = Infor;
            rILUE_TenKhoTH.DropDownRows = Infor.Count;
            rILUE_KhoDen.DataSource = Infor;
            rILUE_KhoDen.DropDownRows = Infor.Count;
            rILUE_KhoDi.DataSource = Infor;
            rILUE_KhoDi.DropDownRows = Infor.Count;
            List<InForToChuc_CaNhan> DVTH = DuAnHelper.GetCaNhanToChuc(false, false, true);
            rILUE_DVTH.DataSource = DVTH;
            rILUE_NhapKhoDVTH.DataSource = DVTH;
        }
        private void Fcn_LoadAllQLVC()
        {
            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            string dbString = $"SELECT * FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}' ";
            DataTable dt_yeucau = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            List<VatLieu> VatLieu = new List<VatLieu>();
            List<VatLieu> VatLieuAdd = new List<VatLieu>();
            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();
                VatLieu.Add(new VatLieu()
                {
                    ParentID = "0",
                    ID = crCodeCT,
                    MaVatTu = MyConstant.CONST_TYPE_CONGTRINH,
                    TenVatTu = CT["Ten"].ToString(),
                });
                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();
                    VatLieu.Add(new VatLieu()
                    {
                        ParentID = crCodeCT,
                        ID = crCodeHM,
                        MaVatTu = MyConstant.CONST_TYPE_HANGMUC,
                        TenVatTu = HM["Ten"].ToString(),
                    });
                    DataRow[] dt_vl = dt_yeucau.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM && x["IsDone"].ToString() == "False").ToArray();
                    if (dt_vl.Count() != 0)
                    {
                        DataTable dt_VatLieu = dt_vl.CopyToDataTable();
                        dt_VatLieu.Columns["Code"].ColumnName = "ID";
                        VatLieuAdd = DuAnHelper.ConvertToList<VatLieu>(dt_VatLieu);
                        foreach (VatLieu itemrow in VatLieuAdd)
                        {
                            itemrow.ParentID = crCodeHM;
                            double KLLuyKe = Fcn_CalKLVatTu(itemrow.ID, QLVT.TBL_QLVT_YEUCAUVTKLHN);
                            itemrow.LuyKeYeuCau = KLLuyKe;
                            if (itemrow.YeuCauDotNay != 0)
                                itemrow.LuyKeYeuCau = KLLuyKe + itemrow.YeuCauDotNay;
                        }
                        VatLieu.AddRange(VatLieuAdd);
                    }

                    VatLieu.Add(new VatLieu()
                    {
                        ParentID = crCodeHM,
                        ID = Guid.NewGuid().ToString(),
                    });
                }
            }

            tL_YeuCauVatTu.DataSource = VatLieu;
            tL_YeuCauVatTu.RefreshDataSource();
            tL_YeuCauVatTu.Refresh();
            tL_YeuCauVatTu.OptionsBehavior.Editable = true;

            tL_YeuCauVatTu.FormatConditions.Clear();
            tL_YeuCauVatTu.FormatRules[0].Column = tL_YeuCauVatTu.Columns["ConLai"];
            tL_YeuCauVatTu.ExpandAll();

        }
        private void Fcn_LoadDataTongHop(DataTable dtCT, DataTable dtHM, List<InforCT_HM> Infor, DateTime? NBD = null, DateTime? NKT = null)
        {
            string dbString = $"SELECT YCVT.*,NVT.Code as CodeNVT,XVT.Code as CodeXVT,QLVC.Code as CodeQLVC," +
                $"CK.Code as CodeCK,CK.TenKhoChuyenDen,CK.TenKhoChuyenDi,XVT.KhoiLuongXuatThucTe,XVT.TonKhoThucTe,XVT.DonGiaKiemSoat FROM {QLVT.TBL_QLVT_YEUCAUVT} YCVT " +
        $"LEFT JOIN {QLVT.TBL_QLVT_NHAPVT} NVT " +
        $"ON NVT.CodeDeXuat=YCVT.Code " +
        $"LEFT JOIN {QLVT.TBL_QLVT_XUATVT} XVT " +
        $"ON XVT.CodeDeXuat=YCVT.Code " +
        $"LEFT JOIN {QLVT.TBL_QLVT_CHUYENKHOVT} CK " +
        $"ON CK.CodeNhapVT=NVT.Code " +
        $"LEFT JOIN {QLVT.TBL_QLVT_QLVC} QLVC " +
        $"ON QLVC.CodeNhapVT=NVT.Code " +
        $" WHERE YCVT.CodeGiaiDoan='{cbb_DBKH_ChonDot.SelectedValue}'";
            DataTable dt_TH = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            List<TongHop> T_hop = new List<TongHop>();
            double DonGia = 0, LuyKeYeuCau = 0, LuyKeVanChuyenTheoDot = 0, LuyKeNhapTheoDot = 0, LuyKeXuatTheoDot = 0, TonKhoChuyenDi = 0;
            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();

                T_hop.Add(new TongHop()
                {
                    ParentID = "0",
                    ID = crCodeCT,
                    MaVatTu = MyConstant.CONST_TYPE_CONGTRINH,
                    TenVatTu = CT["Ten"].ToString(),
                    //TenKhoNhap = ""
                });
                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();
                    T_hop.Add(new TongHop()
                    {
                        ParentID = crCodeCT,
                        ID = crCodeHM,
                        MaVatTu = MyConstant.CONST_TYPE_HANGMUC,
                        TenVatTu = HM["Ten"].ToString(),
                        //TenKhoNhap = ""
                    });

                    DataRow[] dt_vl = dt_TH.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToArray();
                    foreach (var item in dt_vl)
                    {
                        DonGia = item["DonGiaHienTruong"].ToString() == "" ? 0 : Math.Round(double.Parse(item["DonGiaHienTruong"].ToString()), 2);

                        LuyKeYeuCau = Fcn_CalKLVatTu(item["Code"].ToString(), QLVT.TBL_QLVT_YEUCAUVTKLHN, NBD, NKT);
                        //LuyKeVanChuyenTheoDot = item["LuyKeVanChuyenTheoDot"].ToString() == "" ? 0 : Math.Round(double.Parse(item["LuyKeVanChuyenTheoDot"].ToString()), 3);
                        LuyKeVanChuyenTheoDot = Fcn_CalKLVatTu(item["CodeQLVC"].ToString(), QLVT.TBL_QLVT_NKVC, NBD, NKT); ;
                        //TonKhoChuyenDi = item["TonKhoChuyenDi"].ToString() == "" ? 0 : Math.Round(double.Parse(item["TonKhoChuyenDi"].ToString()), 2);
                        //LuyKeXuatTheoDot = item["LuyKeXuatTheoDot"].ToString() == "" ? 0 : Math.Round(double.Parse(item["LuyKeXuatTheoDot"].ToString()), 2);
                        LuyKeXuatTheoDot = Fcn_CalKLVatTu(item["CodeXVT"].ToString(), QLVT.TBL_QLVT_NHAPVTKLHN, NBD, NKT);
                        //LuyKeNhapTheoDot = item["LuyKeNhapTheoDot"].ToString() == "" ? 0 : Math.Round(double.Parse(item["LuyKeNhapTheoDot"].ToString()), 2);
                        LuyKeNhapTheoDot = Fcn_CalKLVatTu(item["CodeNVT"].ToString(), QLVT.TBL_QLVT_NHAPVTKLHN, NBD, NKT);
                        double KLLuyKeChuyeKho = Fcn_CalKLVatTu(item["CodeCK"].ToString(), QLVT.TBL_QLVT_CHUYENKHOVTKLHN, NBD, NKT);
                        TonKhoChuyenDi = LuyKeNhapTheoDot - KLLuyKeChuyeKho - LuyKeXuatTheoDot;
                        T_hop.Add(new TongHop()
                        {
                            ParentID = crCodeHM,
                            ID = Guid.NewGuid().ToString(),
                            MaVatTu = item["MaVatTu"].ToString(),
                            TenVatTu = item["TenVatTu"].ToString(),
                            DonVi = item["DonVi"].ToString(),
                            TenKhoChuyenDen = item["TenKhoChuyenDen"].ToString(),
                            TenKhoChuyenDi = item["TenKhoChuyenDi"].ToString(),
                            HopDongKl = item["HopDongKl"].ToString() == "" ? 0 : Math.Round(double.Parse(item["HopDongKl"].ToString()), 3),
                            LuyKeYeuCau = LuyKeYeuCau,
                            LuyKeVanChuyenTheoDot = LuyKeVanChuyenTheoDot,
                            TonKhoChuyenDi = TonKhoChuyenDi,
                            //TonKhoChuyenDen = item["TonKhoChuyenDen"].ToString() == "" ? 0 : Math.Round(double.Parse(item["TonKhoChuyenDen"].ToString()), 3),
                            LuyKeXuatTheoDot = LuyKeXuatTheoDot,
                            LuyKeNhapTheoDot = LuyKeNhapTheoDot,
                            KhoiLuongXuatThucTe = item["KhoiLuongXuatThucTe"].ToString() == "" ? 0 : Math.Round(double.Parse(item["KhoiLuongXuatThucTe"].ToString()), 3),
                            TonKhoThucTe = item["TonKhoThucTe"].ToString() == "" ? 0 : Math.Round(double.Parse(item["TonKhoThucTe"].ToString()), 3),
                            Chon = false,
                            CodeDeXuat = item["Code"].ToString(),
                            CodeHd = item["CodeHd"].ToString(),
                            CodeKHVT = item["CodeKHVT"].ToString(),
                            CodeTDKH = item["CodeTDKH"].ToString(),
                            //DonGiaYC = item["DonGiaHienTruong"].ToString() == "" ? 0 : Math.Round(double.Parse(item["DonGiaHienTruong"].ToString()), 3),
                            //DonGiaNK = item["DonGia"].ToString() == "" ? 0 : Math.Round(double.Parse(item["DonGia"].ToString()), 3),
                            //DonGiaXK = item["DonGia"].ToString() == "" ? 0 : Math.Round(double.Parse(item["DonGia"].ToString()), 3),
                            //DonGiaVC = item["DonGia"].ToString() == "" ? 0 : Math.Round(double.Parse(item["DonGia"].ToString()), 3),
                            DonGiaKiemSoat = item["DonGiaKiemSoat"].ToString() == "" ? 0 : Math.Round(double.Parse(item["DonGiaKiemSoat"].ToString()), 3),
                            ThanhTienYC = Math.Round(LuyKeYeuCau * DonGia),
                            ThanhTienVC = Math.Round(DonGia * LuyKeVanChuyenTheoDot),
                            ThanhTienXK = Math.Round(DonGia * LuyKeXuatTheoDot),
                            ThanhTienNK = Math.Round(DonGia * LuyKeNhapTheoDot),
                            ThanhTienCK = DonGia * (DonGia * TonKhoChuyenDi),
                            DonGiaYC = item["DonGiaHienTruong"].ToString() == "" ? 0 : Math.Round(double.Parse(item["DonGiaHienTruong"].ToString()), 3)
                        });
                    }
                }
            }
            //rILUE_TenKhoTH.DataSource = Infor;
            //rILUE_TenKhoTH.DropDownRows = Infor.Count;
            tL_QLVC_TongHop.Refresh();
            tL_QLVC_TongHop.DataSource = T_hop;
            tL_QLVC_TongHop.ExpandAll();
            //tL_NhapKho.OptionsBehavior.Editable = true;
        }
        private void Fcn_LoadDataNhapKho_Tong()
        {
            List<NhapVatLieu> NVL = new List<NhapVatLieu>();
            List<NhapVatLieu> NVL_HT = tL_NhapKho.DataSource as List<NhapVatLieu>;
            tL_NhapKho.Columns["Nguon"].Visible = false;
            tL_NhapKho.Columns["TrangThai"].Visible = false;
            tL_NhapKho.Columns["ThucNhap"].Visible = false;
            var List_VL = NVL_HT.Where(x => x.CodeDeXuat != null).Select(x => new { x.MaVatTu, x.TenVatTu, x.DonVi, x.DonGia, x.TenKhoNhap }).Distinct().OrderByDescending(x => x.TenVatTu).ToList();
            foreach (var item in List_VL)
            {
                double KLDX = 0, KLDD = 0, LKTN = 0;
                List<NhapVatLieu> SearchNK = NVL_HT.FindAll(x => x.MaVatTu == item.MaVatTu && x.TenVatTu == item.TenVatTu && x.DonVi == item.DonVi && x.DonGia == item.DonGia);
                foreach (NhapVatLieu row in SearchNK)
                {
                    KLDX += row.DeXuatVatTu;
                    KLDD += row.DaDuyetDeXuat;
                    LKTN += row.LuyKeNhapTheoDot;
                }
                NVL.Add(new NhapVatLieu()
                {
                    MaVatTu = item.MaVatTu,
                    TenVatTu = item.TenVatTu,
                    DonVi = item.DonVi,
                    DonGia = item.DonGia,
                    TenKhoNhap = item.TenKhoNhap,
                    DeXuatVatTu = KLDX,
                    DaDuyetDeXuat = KLDD,
                    LuyKeNhapTheoDot = LKTN,
                });
            }

        }
        private void Fcn_LoadDataNhapKho(DataTable dtCT, DataTable dtHM)
        {
            string dbString = $"SELECT * FROM {QLVT.TBL_QLVT_NHAPVT} " +
                 $"LEFT JOIN {QLVT.TBL_QLVT_YEUCAUVT} " +
                 $"ON {QLVT.TBL_QLVT_NHAPVT}.CodeDeXuat={QLVT.TBL_QLVT_YEUCAUVT}.Code " +
                $" WHERE {QLVT.TBL_QLVT_NHAPVT}.CodeGiaiDoan='{SharedControls.cbb_DBKH_ChonDot.SelectedValue}'";
            DataTable dt_NhapVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lsCodeCVT = MyFunction.fcn_Array2listQueryCondition(dt_NhapVT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
            dbString = $"SELECT * FROM {QLVT.TBL_QLVT_QLVC} WHERE \"CodeNhapVT\" IN ({lsCodeCVT})";
            DataTable dt_QLVC = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            List<NhapVatLieu> NVL = new List<NhapVatLieu>();
            List<NhapVatLieu> NVLADD = new List<NhapVatLieu>();
            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();

                NVL.Add(new NhapVatLieu()
                {
                    ParentID = "0",
                    ID = crCodeCT,
                    MaVatTu = MyConstant.CONST_TYPE_CONGTRINH,
                    TenVatTu = CT["Ten"].ToString(),
                    TenKhoNhap = "",

                });
                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();
                    NVL.Add(new NhapVatLieu()
                    {
                        ParentID = crCodeCT,
                        ID = crCodeHM,
                        MaVatTu = MyConstant.CONST_TYPE_HANGMUC,
                        TenVatTu = HM["Ten"].ToString(),
                        TenKhoNhap = ""
                    });
                    DataRow[] dt_nvt = dt_NhapVT.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToArray();
                    if (dt_nvt.Count() != 0)
                    {
                        DataTable dt_nvl = dt_nvt.CopyToDataTable();
                        dt_nvl.Columns["Code"].ColumnName = "ID";
                        NVLADD = DuAnHelper.ConvertToList<NhapVatLieu>(dt_nvl);
                        foreach (NhapVatLieu rowitem in NVLADD)
                        {
                            DataRow RowVC = dt_QLVC.AsEnumerable().Where(x => x["CodeNhapVT"].ToString() == rowitem.ID).FirstOrDefault();
                            double KLVC = RowVC is null ? 0 : Fcn_CalKLVatTu(RowVC["Code"].ToString(), QLVT.TBL_QLVT_NKVC);
                            rowitem.ParentID = crCodeHM;
                            double KLLuyKe = Fcn_CalKLVatTu(rowitem.ID, QLVT.TBL_QLVT_NHAPVTKLHN);
                            double DaDuyetDeXuat = Fcn_CalKLVatTu(rowitem.CodeDeXuat, QLVT.TBL_QLVT_YEUCAUVTKLHN);
                            rowitem.DaDuyetDeXuat = DaDuyetDeXuat;
                            if (rowitem.ThucNhap != 0)
                            {
                                rowitem.LuyKeNhapTheoDot = KLVC + KLLuyKe + rowitem.ThucNhap;
                            }
                        }
                        NVL.AddRange(NVLADD);
                    }
                }
            }
            tL_NhapKho.DataSource = NVL;
            tL_NhapKho.RefreshDataSource();
            tL_NhapKho.Refresh();
            tL_NhapKho.ExpandAll();
        }
        private void Fcn_LoadDataXuatKho(DataTable dtCT, DataTable dtHM, List<InforCT_HM> Infor)
        {
            string dbString = $"SELECT * FROM {QLVT.TBL_QLVT_XUATVT} " +
                 $"LEFT JOIN {QLVT.TBL_QLVT_YEUCAUVT} " +
                 $"ON {QLVT.TBL_QLVT_XUATVT}.CodeDeXuat={QLVT.TBL_QLVT_YEUCAUVT}.Code " +
                 $"LEFT JOIN {QLVT.TBL_QLVT_NHAPVT} " +
                 $"ON {QLVT.TBL_QLVT_XUATVT}.CodeNhapVT={QLVT.TBL_QLVT_NHAPVT}.Code " +
                $" WHERE {QLVT.TBL_QLVT_XUATVT}.CodeGiaiDoan='{cbb_DBKH_ChonDot.SelectedValue}'";
            DataTable dt_XuatVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lsCodeCVT = MyFunction.fcn_Array2listQueryCondition(dt_XuatVT.AsEnumerable().Select(x => x["CodeNhapVT"].ToString()).ToArray());
            dbString = $"SELECT * FROM {QLVT.TBL_QLVT_CHUYENKHOVT} WHERE \"CodeNhapVT\" IN ({lsCodeCVT})";
            DataTable dt_CVT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT * FROM {QLVT.TBL_QLVT_QLVC} WHERE \"CodeNhapVT\" IN ({lsCodeCVT})";
            DataTable dt_QLVC = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            List<XuatVatLieu> XVL = new List<XuatVatLieu>();
            List<ChuyenVatTu> CVL = new List<ChuyenVatTu>();
            List<QLVC> QLVC = new List<QLVC>();
            double KLVC = 0;
            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();

                XVL.Add(new XuatVatLieu()
                {
                    ParentID = "0",
                    ID = crCodeCT,
                    MaVatTu = MyConstant.CONST_TYPE_CONGTRINH,
                    TenVatTu = CT["Ten"].ToString(),
                    TenKhoNhap = ""
                });

                CVL.Add(new ChuyenVatTu()
                {
                    ParentID = "0",
                    ID = crCodeCT,
                    MaVatTu = MyConstant.CONST_TYPE_CONGTRINH,
                    TenVatTu = CT["Ten"].ToString(),
                    TenKhoChuyenDi = "",
                    TenKhoChuyenDen = "",
                });
                QLVC.Add(new QLVC()
                {
                    ParentID = "0",
                    ID = crCodeCT,
                    MaVatTu = MyConstant.CONST_TYPE_CONGTRINH,
                    TenVatTu = CT["Ten"].ToString(),
                });
                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();
                    XVL.Add(new XuatVatLieu()
                    {
                        ParentID = crCodeCT,
                        ID = crCodeHM,
                        MaVatTu = MyConstant.CONST_TYPE_HANGMUC,
                        TenVatTu = HM["Ten"].ToString(),
                        TenKhoNhap = ""
                    });
                    CVL.Add(new ChuyenVatTu()
                    {
                        ParentID = crCodeCT,
                        ID = crCodeHM,
                        MaVatTu = MyConstant.CONST_TYPE_HANGMUC,
                        TenVatTu = HM["Ten"].ToString(),
                        TenKhoChuyenDi = "",
                        TenKhoChuyenDen = ""
                    });
                    QLVC.Add(new QLVC()
                    {
                        ParentID = crCodeCT,
                        ID = crCodeHM,
                        MaVatTu = MyConstant.CONST_TYPE_HANGMUC,
                        TenVatTu = HM["Ten"].ToString(),
                    });
                    DataRow[] dt_xvt = dt_XuatVT.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToArray();
                    foreach (var row in dt_xvt)
                    {
                        double KLLuyKeNhap = Fcn_CalKLVatTu(row["CodeNhapVT"].ToString(), QLVT.TBL_QLVT_NHAPVTKLHN);
                        double KLLuyKeXuat = Fcn_CalKLVatTu(row["Code"].ToString(), QLVT.TBL_QLVT_XUATVTKLHN);
                        double KLLuyKeDeXuat = Fcn_CalKLVatTu(row["CodeDeXuat"].ToString(), QLVT.TBL_QLVT_YEUCAUVTKLHN);
                        KLVC = 0;
                        XVL.Add(new XuatVatLieu()
                        {
                            ParentID = crCodeHM,
                            CodeDeXuat = row["CodeDeXuat"].ToString(),
                            CodeNhapVT = row["CodeNhapVT"].ToString(),
                            ID = row["Code"].ToString(),
                            DonGia = row["DonGia"].ToString() == "" ? 0 : int.Parse(row["DonGia"].ToString()),
                            CodeHd = row["CodeHd"].ToString(),
                            CodeKHVT = row["CodeKHVT"].ToString(),
                            CodeTDKH = row["CodeTDKH"].ToString(),
                            MaVatTu = row["MaVatTu"].ToString(),
                            TenVatTu = row["TenVatTu"].ToString(),
                            IsXuat = (bool)row["IsXuat"],
                            DonVi = row["DonVi"].ToString(),
                            TenKhoNhap = row["TenKhoNhap"].ToString(),
                            DaDuyetDeXuat = Math.Round(KLLuyKeDeXuat, 4),
                            LuyKeNhapTheoDot = Math.Round(KLLuyKeNhap, 4),
                            LuyKeXuatTheoDot = Math.Round(KLLuyKeXuat, 4),
                            ThucXuat = row["ThucXuat"].ToString() == "" ? 0 : Math.Round(double.Parse(row["ThucXuat"].ToString()), 3),
                            TonKhoThucTe = row["TonKhoThucTe"].ToString() == "" ? 0 : Math.Round(double.Parse(row["TonKhoThucTe"].ToString()), 3),
                            KhoiLuongXuatThucTe = row["KhoiLuongXuatThucTe"].ToString() == "" ? 0 : Math.Round(double.Parse(row["KhoiLuongXuatThucTe"].ToString()), 3),
                            DonGiaKiemSoat = row["DonGiaKiemSoat"].ToString() == "" ? 0 : Math.Round(double.Parse(row["DonGiaKiemSoat"].ToString()), 2),
                            TrangThai = (row["TrangThai"].ToString() == "1") ? 1 : 2,
                            ACapB = row["ACapB"] != DBNull.Value ? bool.Parse(row["ACapB"].ToString()) : false,
                            FileDinhKem = "Xem File"
                        });
                        DataRow[] _cvt = dt_CVT.AsEnumerable().Where(x => x["CodeNhapVT"].ToString() == row["CodeNhapVT"].ToString()).ToArray();
                        DataRow[] _qlvc = dt_QLVC.AsEnumerable().Where(x => x["CodeNhapVT"].ToString() == row["CodeNhapVT"].ToString()).ToArray();
                        foreach (var rowqlvt in _qlvc)
                        {
                            KLVC = Fcn_CalKLVatTu(rowqlvt["Code"].ToString(), QLVT.TBL_QLVT_NKVC);
                            QLVC.Add(new QLVC
                            {
                                ID = rowqlvt["Code"].ToString(),
                                ParentID = crCodeHM,
                                NhatKy = "Xem Nhật Ký",
                                CodeDeXuat = row["CodeDeXuat"].ToString(),
                                CodeNhapVT = row["CodeNhapVT"].ToString(),
                                MaVatTu = row["MaVatTu"].ToString(),
                                TenVatTu = row["TenVatTu"].ToString(),
                                DonVi = row["DonVi"].ToString(),
                                CodeHd = row["CodeHd"].ToString(),
                                CodeKHVT = row["CodeKHVT"].ToString(),
                                CodeTDKH = row["CodeTDKH"].ToString(),
                                LuyKeVanChuyenTheoDot = KLVC,
                                DaDuyetDeXuat = KLLuyKeDeXuat,
                                KhoiLuongDaNhap = KLLuyKeNhap,
                                FileDinhKem = "Xem File"
                            });
                        }
                        foreach (var rowcvt in _cvt)
                        {
                            double KLLuyKeChuyeKho = Fcn_CalKLVatTu(rowcvt["Code"].ToString(), QLVT.TBL_QLVT_CHUYENKHOVTKLHN);
                            CVL.Add(new ChuyenVatTu
                            {
                                ID = rowcvt["Code"].ToString(),
                                TenKhoChuyenDen = rowcvt["TenKhoChuyenDen"].ToString(),
                                TenKhoChuyenDi = rowcvt["TenKhoChuyenDi"].ToString(),
                                ParentID = crCodeHM,
                                HoanThanh = false,
                                CodeNhapVT = row["CodeNhapVT"].ToString(),
                                CodeDeXuat = row["CodeDeXuat"].ToString(),
                                MaVatTu = row["MaVatTu"].ToString(),
                                TenVatTu = row["TenVatTu"].ToString(),
                                DonVi = row["DonVi"].ToString(),
                                CodeHd = row["CodeHd"].ToString(),
                                CodeKHVT = row["CodeKHVT"].ToString(),
                                CodeTDKH = row["CodeTDKH"].ToString(),
                                LuyKeThucNhapKhoDen = KLLuyKeChuyeKho,
                                TonKhoChuyenDi = KLLuyKeNhap - KLLuyKeChuyeKho - KLLuyKeXuat,
                            });
                        }

                    }
                }
            }

            tL_XuatKho.Refresh();
            tL_XuatKho.DataSource = XVL;
            tL_XuatKho.OptionsBehavior.Editable = true;

            tL_ChuyenKho.DataSource = CVL;
            tL_ChuyenKho.RefreshDataSource();
            tL_ChuyenKho.Refresh();
            tL_ChuyenKho.ExpandAll();

            tL_QLVC.DataSource = QLVC;
            tL_QLVC.OptionsBehavior.Editable = true;
            tL_QLVC.RefreshDataSource();
            tL_QLVC.Refresh();
            tL_QLVC.ExpandAll();
        }
        private async void btn_NhapKho_Click(object sender, EventArgs e)
        {
            string dbString = "";
            XtraInputBoxArgs args = new XtraInputBoxArgs();
            args.Caption = "Cài đặt ngày Nhập kho";
            args.Prompt = "Ngày Nhập kho";
            args.DefaultButtonIndex = 0;
            args.Showing += Args_Showing_Begin;
            // initialize a DateEdit editor with custom settings
            DateEdit editor = new DateEdit();
            editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
            editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
            args.Editor = editor;
            // a default DateEdit value
            args.DefaultResponse = DateTime.Now.Date;
            // display an Input Box with the custom editor
            var ngay = "";
            try
            {
                ngay = XtraInputBox.Show(args).ToString();
            }
            catch (Exception ex)
            {
                return;
            }
            XtraFormLuaChonDuyet SelectDuyet = new XtraFormLuaChonDuyet();
            SelectDuyet.ShowDialog();
            if (SelectDuyet.CancelSelect)
                return;
            bool isQuyTrinh = SelectDuyet.DuyetTheoQuyTrinh;
            WaitFormHelper.ShowWaitForm("Quá trình gửi duyệt đang được tiến hành,Vui lòng chờ!");
            tL_NhapKho.RefreshDataSource();
            tL_QLVC.RefreshDataSource();
            tL_XuatKho.RefreshDataSource();
            tL_ChuyenKho.RefreshDataSource();
            List<QLVC> QLVC = tL_QLVC.DataSource as List<QLVC>;
            List<VatLieu> YeuCau = tL_YeuCauVatTu.DataSource as List<VatLieu>;
            List<XuatVatLieu> xuatVatLieu = tL_XuatKho.DataSource as List<XuatVatLieu>;
            List<ChuyenVatTu> ChuyenVL = tL_ChuyenKho.DataSource as List<ChuyenVatTu>;
            List<NhapVatLieu> NVT = tL_NhapKho.DataSource as List<NhapVatLieu>;
            if (!NVT.Any())
            {
                WaitFormHelper.CloseWaitForm();
                return;
            }
            List<NhapVatLieu> NVTSelect = NVT.Where(x => x.Chon == true && x.MaVatTu != "HM" && x.MaVatTu != "CTR" && x.ThucNhap != 0).ToList();
            if (!NVTSelect.Any())
            {
                MessageShower.ShowWarning("Không có vật liệu nào được chọn để gửi duyệt!!! Vui lòng chọn vật liệu để gửi duyệt");
                WaitFormHelper.CloseWaitForm();

                return;
            }
            List<string> LstCode = new List<string>();

            int countOK = 0;
            int countBad = 0;
            int count = 1;
            var date = DateTime.Parse(ngay);
            List<string> Noti = new List<string>();
            bool IsGiayDuyet = SelectDuyet._CheckPhieuDuyet;
            foreach (NhapVatLieu item in NVTSelect)
            {
                item.Chon = false;
                if (IsGiayDuyet)
                    LstCode.Add(item.ID);
                if (isQuyTrinh)
                {
                    var newDXVTHN = new Tbl_QLVT_NhapVattu_KhoiLuongHangNgayViewModel()
                    {
                        Code = Guid.NewGuid().ToString(),
                        CodeCha = item.ID,
                        Ngay = date,
                        KhoiLuong = item.ThucNhap,
                        DonGia = item.DonGia,
                        TrangThai = (int)VatTuStateEnum.DangXetDuyet,
                        ACapB = item.ACapB
                    };

                    var result = await CusHttpClient.InstanceCustomer.MPostAsJsonAsync<Tbl_QLVT_NhapVattu_KhoiLuongHangNgayViewModel>(RouteAPI.ApprovalNhapVatTu_SendApprovalRequest, newDXVTHN);
                    if (result.MESSAGE_TYPECODE)
                    {
                        countOK++;

                    }
                    else
                    {
                        countBad++;
                        Noti.Add($"{item.MaVatTu}: {item.TenVatTu}: {result.MESSAGE_CONTENT}");
                    }
                    if (result.Dto != null)
                    {
                        var cvCha = (new List<Tbl_QLVT_NhapVattu_KhoiLuongHangNgayViewModel>() { result.Dto }).fcn_ObjToDataTable();
                        DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(cvCha, Server.Tbl_QLVT_NhapVattu_KhoiLuongHangNgay, isCompareTime: false);
                    }

                }
                else
                {
                    string code = Guid.NewGuid().ToString();
                    string codeCVT = Guid.NewGuid().ToString();
                    string codeCK = Guid.NewGuid().ToString();
                    dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVTKLHN} (\"TrangThai\",\"ACapB\",\"Code\",\"CodeCha\",\"Ngay\",\"KhoiLuong\",\"DonGia\",\"DaThanhToan\") " +
                        $"VALUES ('{2}','{item.ACapB}','{Guid.NewGuid()}','{item.ID}','{date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{item.ThucNhap}','{item.DonGia}','{item.DaThanhToan}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    double KLLuyKe = Fcn_CalKLVatTu(item.ID, QLVT.TBL_QLVT_NHAPVTKLHN);
                    if (item.TrangThai == 2 || item.TrangThai == 4)
                    {
                        if (item.IsXuat)
                        {
                            dbString = $"INSERT INTO {QLVT.TBL_QLVT_XUATVT} (\"ACapB\",\"DonGiaKiemSoat\",\"LuyKeXuatTheoDot\",\"ThucXuat\",\"DonGia\",\"TenKhoNhap\",\"Code\",\"CodeDeXuat\",\"CodeGiaiDoan\",\"CodeNhapVT\",\"LuyKeNhapTheoDot\",\"TrangThai\",\"DaDuyetDeXuat\")" +
                                $" VALUES ('{item.ACapB}','{item.DonGia}','{KLLuyKe}','{0}','{item.DonGia}',@TenKhoNhap,'{code}','{item.CodeDeXuat}','{cbb_DBKH_ChonDot.SelectedValue.ToString()}','{item.ID}','{item.LuyKeNhapTheoDot}','{2}','{item.DaDuyetDeXuat}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item.TenKhoNhap });
                            dbString = $"INSERT INTO {QLVT.TBL_QLVT_XUATVTKLHN} (\"FullNameSend\",\"TrangThai\",\"ACapB\",\"Code\",\"CodeCha\",\"Ngay\",\"KhoiLuong\",\"DonGia\") " +
                                $"VALUES ('{BaseFrom.BanQuyenKeyInfo.UserId}','{2}','{item.ACapB}','{Guid.NewGuid()}','{code}','{DateTime.Parse(ngay).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{item.ThucNhap}','{item.DonGia}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET \"LuyKeXuatKho\"='{KLLuyKe}' WHERE \"Code\"='{item.CodeDeXuat}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            VatLieu VL = YeuCau.FindAll(x => x.ID == item.CodeDeXuat).FirstOrDefault();
                            dbString = $"UPDATE  {QLVT.TBL_QLVT_NHAPVT} SET  \"ACapB\"='{item.ACapB}',\"IsXuat\"='{true}' WHERE \"Code\"='{item.ID}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            if (VL != null)
                                VL.LuyKeXuatKho = KLLuyKe;
                            xuatVatLieu.Add(new XuatVatLieu
                            {
                                ID = code,
                                TrangThai = 2,
                                TenKhoNhap = item.TenKhoNhap,
                                ParentID = item.ParentID,
                                CodeDeXuat = item.CodeDeXuat,
                                CodeNhapVT = item.ID,
                                TenVatTu = item.TenVatTu,
                                MaVatTu = item.MaVatTu,
                                DonVi = item.DonVi,
                                DaDuyetDeXuat = item.DaDuyetDeXuat,
                                LuyKeNhapTheoDot = item.LuyKeNhapTheoDot,
                                CodeHd = item.CodeHd,
                                CodeKHVT = item.CodeKHVT,
                                CodeTDKH = item.CodeTDKH,
                                DonGia = item.DonGia,
                                LuyKeXuatTheoDot = item.ThucNhap,
                                DonGiaKiemSoat = item.DonGia,
                                IsXuat = true,
                                ACapB = item.ACapB,
                                FileDinhKem = "Xem File"
                            });

                            goto NexCode;

                        }
                        dbString = $"INSERT INTO {QLVT.TBL_QLVT_XUATVT} (\"ACapB\",\"DonGiaKiemSoat\",\"DonGia\",\"TenKhoNhap\",\"Code\",\"CodeDeXuat\",\"CodeGiaiDoan\",\"CodeNhapVT\",\"LuyKeNhapTheoDot\",\"TrangThai\",\"DaDuyetDeXuat\") " +
                            $"VALUES ('{item.ACapB}','{item.DonGia}','{item.DonGia}',@TenKhoNhap,'{code}','{item.CodeDeXuat}','{cbb_DBKH_ChonDot.SelectedValue.ToString()}','{item.ID}','{item.LuyKeNhapTheoDot}','{1}','{item.DaDuyetDeXuat}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item.TenKhoNhap });
                        xuatVatLieu.Add(new XuatVatLieu
                        {
                            ID = code,
                            TrangThai = 1,
                            TenKhoNhap = item.TenKhoNhap,
                            ParentID = item.ParentID,
                            CodeDeXuat = item.CodeDeXuat,
                            CodeNhapVT = item.ID,
                            TenVatTu = item.TenVatTu,
                            MaVatTu = item.MaVatTu,
                            DonVi = item.DonVi,
                            DaDuyetDeXuat = item.DaDuyetDeXuat,
                            LuyKeNhapTheoDot = item.LuyKeNhapTheoDot,
                            CodeHd = item.CodeHd,
                            CodeKHVT = item.CodeKHVT,
                            CodeTDKH = item.CodeTDKH,
                            DonGia = item.DonGia,
                            DonGiaKiemSoat = item.DonGia,
                            ACapB = item.ACapB,
                            FileDinhKem = "Xem File"
                        });
                        NexCode:
                        item.TrangThai = 3;
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_NHAPVT} SET \"TrangThai\"='{3}',\"ThucNhap\"='{0}',\"LuyKeNhapTheoDot\"=='{item.LuyKeNhapTheoDot}' WHERE \"Code\"='{item.ID}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                        dbString = $"INSERT INTO {QLVT.TBL_QLVT_QLVC} (\"CodeDeXuat\",\"DonGia\",\"Code\",\"CodeGiaiDoan\",\"CodeNhapVT\",\"HoanThoanh_Ok\",\"DaDuyetDeXuat\",\"LuyKeNhapKho\") VALUES ('{item.CodeDeXuat}','{0}','{codeCVT}','{cbb_DBKH_ChonDot.SelectedValue}','{item.ID}','{false}','{item.DaDuyetDeXuat}','{item.LuyKeNhapTheoDot}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        dbString = $"INSERT INTO {QLVT.TBL_QLVT_CHUYENKHOVT} (\"TonKhoChuyenDi\",\"CodeDeXuat\",\"DonGia\",\"Code\",\"CodeGiaiDoan\",\"CodeNhapVT\",\"TenKhoChuyenDi\")" +
                            $" VALUES ('{item.LuyKeNhapTheoDot}','{item.CodeDeXuat}','{item.DonGia}','{codeCK}','{cbb_DBKH_ChonDot.SelectedValue}','{item.ID}', @TenKhoNhap)";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item.TenKhoNhap });
                        QLVC.Add(new QLVC
                        {
                            ID = codeCVT,
                            ParentID = item.ParentID,
                            CodeDeXuat = item.CodeDeXuat,
                            CodeNhapVT = item.ID,
                            DonGia = 0,
                            TenVatTu = item.TenVatTu,
                            MaVatTu = item.MaVatTu,
                            DonVi = item.DonVi,
                            CodeHd = item.CodeHd,
                            CodeKHVT = item.CodeKHVT,
                            CodeTDKH = item.CodeTDKH,
                            DaDuyetDeXuat = item.DaDuyetDeXuat,
                            KhoiLuongDaNhap = item.LuyKeNhapTheoDot,
                            NhatKy = "Xem Nhật Ký",
                        });
                        ChuyenVL.Add(new ChuyenVatTu
                        {
                            ID = codeCK,
                            TenKhoChuyenDi = item.TenKhoNhap,
                            ParentID = item.ParentID,
                            CodeNhapVT = item.ID,
                            TenVatTu = item.TenVatTu,
                            MaVatTu = item.MaVatTu,
                            DonVi = item.DonVi,
                            HoanThanh = false,
                            CodeHd = item.CodeHd,
                            CodeKHVT = item.CodeKHVT,
                            CodeTDKH = item.CodeTDKH,
                            TonKhoChuyenDi = item.LuyKeNhapTheoDot
                        });

                    }
                    else
                    {
                        XuatVatLieu XVL = xuatVatLieu.FindAll(x => x.CodeNhapVT == item.ID).FirstOrDefault();
                        if (!item.IsXuat)
                        {
                            XVL.LuyKeNhapTheoDot = item.LuyKeNhapTheoDot;
                            XVL.DonGia = item.DonGia;
                            dbString = $"UPDATE  {QLVT.TBL_QLVT_XUATVT} SET  \"ACapB\"='{item.ACapB}',\"LuyKeNhapTheoDot\"='{item.LuyKeNhapTheoDot}',\"DonGia\"='{item.DonGia}' WHERE \"CodeNhapVT\"='{item.ID}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }
                        else
                        {
                            XVL.LuyKeNhapTheoDot = item.LuyKeNhapTheoDot;
                            XVL.LuyKeXuatTheoDot = item.LuyKeNhapTheoDot;
                            XVL.DonGia = item.DonGia;
                            dbString = $"INSERT INTO {QLVT.TBL_QLVT_XUATVTKLHN} (\"FullNameSend\",\"TrangThai\",\"ACapB\",\"Code\",\"CodeCha\",\"Ngay\",\"KhoiLuong\",\"DonGia\")" +
                                $" VALUES ('{BaseFrom.BanQuyenKeyInfo.UserId}','{2}','{item.ACapB}','{Guid.NewGuid()}','{XVL.ID}','{DateTime.Parse(ngay).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{item.ThucNhap}','{item.DonGia}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            dbString = $"UPDATE  {QLVT.TBL_QLVT_XUATVT} SET \"ACapB\"='{item.ACapB}',\"TrangThai\"='{2}',\"ThucXuat\"='{0}',\"LuyKeXuatTheoDot\"='{item.LuyKeNhapTheoDot}' WHERE \"Code\"='{XVL.ID}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET \"LuyKeXuatKho\"='{item.LuyKeNhapTheoDot}' WHERE \"Code\"='{item.CodeDeXuat}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            VatLieu VL = YeuCau.FindAll(x => x.ID == item.CodeDeXuat).FirstOrDefault();
                            if (VL != null)
                                VL.LuyKeXuatKho = item.LuyKeNhapTheoDot;
                        }

                        QLVC qLVC = QLVC.FindAll(x => x.CodeNhapVT == item.ID).FirstOrDefault();
                        qLVC.KhoiLuongDaNhap = item.LuyKeNhapTheoDot;
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_QLVC} SET  \"LuyKeNhapKho\"='{item.LuyKeNhapTheoDot}',\"DonGia\"='{item.DonGia}' WHERE \"CodeNhapVT\"='{item.ID}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_NHAPVT} SET  \"ACapB\"='{item.ACapB}',\"ThucNhap\"='{0}',\"LuyKeNhapTheoDot\"='{item.LuyKeNhapTheoDot}' WHERE \"Code\"='{item.ID}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                    item.DaThanhToan = false;
                    item.ThucNhap = 0;
                }
            }
            if (!isQuyTrinh)
            {
                TreeListNode[] node = tL_NhapKho.FindNodes(x => double.Parse(x["LuyKeNhapTheoDot"].ToString()) >= double.Parse(x["DaDuyetDeXuat"].ToString())).Where(x => x["CodeDeXuat"] != null && double.Parse(x["TrangThai"].ToString()) > 1).ToArray();
                foreach (TreeListNode item in node)
                {
                    TreeListNode NodeYC = tL_YeuCauVatTu.FindNodeByFieldValue("ID", item["CodeDeXuat"].ToString());
                    if (NodeYC == null)
                        continue;
                    dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET  \"IsDone\"='{true}' WHERE \"Code\"='{NodeYC["ID"]}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    tL_YeuCauVatTu.DeleteNode(NodeYC);
                }
                tL_NhapKho.RefreshDataSource();
                fcn_UpdateNhapKho();
                fcn_UpdateXuatKho();
                MessageShower.ShowInformation("Gửi duyệt thành công!!!!!!!!!!");
            }
            else
            {
                DialogResult drs = DialogResult.None;
                if (countOK == NVTSelect.Count)
                    MessageShower.ShowInformation("Gửi duyệt thành công", "");
                else if (countOK == 0)
                    drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Gửi duyệt không thành công", "", yesString: "Xem chi tiết lỗi", Nostring: "Không xem chi tiết");
                else
                {
                    string mess = $@"Gửi duyệt thành công 1 phần: {countOK} thành công, {countBad} thất bại";
                    drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Gửi duyệt không thành công một phần", "", yesString: "Xem chi tiết lỗi", Nostring: "Không xem chi tiết");
                }

                if (drs == DialogResult.Yes)
                {
                    XtraFormThongBaoMutilError FrmThongBao = new XtraFormThongBaoMutilError();
                    FrmThongBao.Description = string.Join("\r\n\t", Noti.ToArray());
                    FrmThongBao.ShowDialog();
                }
            }

            WaitFormHelper.CloseWaitForm();
            if (SelectDuyet._CheckPhieuDuyet)
            {
                string PathSave = "";
                XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
                if (Xtra.ShowDialog() == DialogResult.OK)
                {
                    PathSave = Xtra.SelectedPath;
                }
                else
                    return;
                WaitFormHelper.ShowWaitForm("Đang xuất phiếu duyệt");
                string m_Path = Path.Combine(BaseFrom.m_path, "Template", "FileExcel", "19.2PhieuNhapKhoVatTu.xlsx");
                SpreadsheetControl Spread = new SpreadsheetControl();
                Spread.LoadDocument(m_Path);
                Worksheet ws = Spread.Document.Worksheets[0];
                dbString = $"SELECT HM.Ten as TenHM,CTR.Ten as TenCTR,NCC.Ten as TenNhaCungCap,DVTH.Ten as TenDonViSuDung,NK.*,DX.TenVatTu,DX.DonVi " +
                    $"FROM {QLVT.TBL_QLVT_NHAPVT} NK " +
                    $"LEFT JOIN {QLVT.TBL_QLVT_YEUCAUVT} DX ON DX.Code=NK.CodeDeXuat " +
                    $"LEFT JOIN {MyConstant.TBL_THONGTINNHACUNGCAP} NCC ON NCC.Code=DX.TenNhaCungCap" +
                    $" LEFT JOIN view_DonViThucHien DVTH ON DVTH.Code=DX.DonViThucHien" +
                    $" LEFT JOIN {MyConstant.TBL_THONGTINHANGMUC} HM ON HM.Code=DX.CodeHangMuc" +
                    $" LEFT JOIN {MyConstant.TBL_THONGTINCONGTRINH} CTR ON CTR.Code=HM.CodeCongTrinh" +
                    $" WHERE NK.Code IN ({MyFunction.fcn_Array2listQueryCondition(LstCode.ToArray())}) ";
                DataTable dt_DX = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINDUAN} WHERE \"Code\"='{SharedControls.slke_ThongTinDuAn.EditValue}'";
                List<Tbl_ThongTinDuAnViewModel> lst = DataProvider.InstanceTHDA.ExecuteQueryModel<Tbl_ThongTinDuAnViewModel>(dbString);
                Spread.BeginUpdate();
                ws.Rows[3]["I"].SetValueFromText($"Dự án: {lst.SingleOrDefault().TenDuAn}");
                ws.Rows[4]["I"].SetValueFromText($"Địa điểm: {lst.SingleOrDefault().DiaChi}");
                ws.Rows[5]["I"].SetValueFromText($"Người gửi: {BaseFrom.BanQuyenKeyInfo.FullName}");
                ws.Rows[3]["M"].SetValueFromText($"Ngày {date.Day} tháng {date.Month} năm {date.Year}");
                int i = 8, STT = 1;
                var grctr = dt_DX.AsEnumerable().GroupBy(x => x["TenCTR"].ToString());
                foreach (var CTR in grctr)
                {
                    Row Crow = ws.Rows[i++];
                    ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                    Crow.Font.Color = MyConstant.color_Row_CongTrinh;
                    Crow.Font.Bold = true;
                    Crow["I"].SetValueFromText(CTR.Key);
                    var grHM = CTR.GroupBy(x => x["TenHM"].ToString());
                    foreach (var HM in grHM)
                    {
                        Crow = ws.Rows[i++];
                        ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                        Crow.Font.Color = MyConstant.color_Row_HangMuc;
                        Crow.Font.Bold = true;
                        Crow["I"].SetValueFromText(HM.Key);
                        var grVL = CTR.GroupBy(x => x["Code"].ToString());
                        foreach (var item in grVL)
                        {
                            var row = item.FirstOrDefault();
                            dbString = $"SELECT CASE WHEN YCHN.TrangThai=1 THEN 'Đang xét duyệt' ELSE 'Đã duyệt' END AS TrangThai,YCHN.* " +
                                $"FROM {QLVT.TBL_QLVT_NHAPVTKLHN} YCHN WHERE YCHN.CodeCha='{row["Code"]}' AND YCHN.Ngay='{date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
                            DataTable dthn = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                            if (dthn.Rows.Count == 0)
                                continue;
                            double KLLuyKe = Fcn_CalKLVatTu(row["CodeDeXuat"].ToString(), QLVT.TBL_QLVT_YEUCAUVTKLHN);
                            Crow = ws.Rows[i++];
                            ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                            Crow["H"].SetValue(STT++);
                            Crow["Q"].SetValueFromText(row["TenNhaCungCap"].ToString());
                            Crow["T"].SetValueFromText(row["TenDonViSuDung"].ToString());
                            Crow["I"].SetValueFromText(row["TenVatTu"].ToString());
                            Crow["J"].SetValueFromText(row["DonVi"].ToString());
                            Crow["L"].SetValue(KLLuyKe);
                            Crow["K"].SetValue(dthn.AsEnumerable().FirstOrDefault()["KhoiLuong"]);
                            Crow["U"].SetValue(dthn.AsEnumerable().FirstOrDefault()["TrangThai"]);
                            Crow["M"].SetValue(dthn.AsEnumerable().FirstOrDefault()["DonGia"]);
                            Crow["P"].Formula = $"={Crow["K"].GetReferenceA1()}*{Crow["M"].GetReferenceA1()}";
                        }
                    }
                }
                CellRange NguoiDx = ws.Range["NguoiDeXuat"];
                ws.Rows[NguoiDx.BottomRowIndex][NguoiDx.RightColumnIndex].SetValueFromText($"{BaseFrom.BanQuyenKeyInfo.FullName}");
                Spread.EndUpdate();
                Spread.Document.History.IsEnabled = true;
                string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
                Spread.SaveDocument(Path.Combine(PathSave, $"Phiếu Nhập Vật tư_{time}.xlsx"), DocumentFormat.Xlsx);
                WaitFormHelper.CloseWaitForm();
                MessageShower.ShowInformation("Xuất File thành công!");
                DialogResult dialogResult = XtraMessageBox.Show($"[Phiếu Nhập Vật tư_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dialogResult == DialogResult.Yes)
                {
                    Process.Start(Path.Combine(PathSave, $"Phiếu Nhập Vật tư_{time}.xlsx"));
                }
                WaitFormHelper.CloseWaitForm();

            }
        }
        private async void btn_xuatkho_Click(object sender, EventArgs e)
        {
            XtraInputBoxArgs args = new XtraInputBoxArgs();
            args.Caption = "Cài đặt ngày Xuất kho";
            args.Prompt = "Ngày Xuất kho";
            args.DefaultButtonIndex = 0;
            args.Showing += Args_Showing_Begin;
            // initialize a DateEdit editor with custom settings
            DateEdit editor = new DateEdit();
            editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
            editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
            args.Editor = editor;
            // a default DateEdit value
            args.DefaultResponse = DateTime.Now.Date;
            // display an Input Box with the custom editor
            var ngay = "";
            try
            {
                ngay = XtraInputBox.Show(args).ToString();
            }
            catch (Exception ex)
            {
                return;
            }
            XtraFormLuaChonDuyet SelectDuyet = new XtraFormLuaChonDuyet();
            SelectDuyet.ShowDialog();
            if (SelectDuyet.CancelSelect)
                return;
            string dbString = "";
            List<ChuyenVatTu> CVT = tL_ChuyenKho.DataSource as List<ChuyenVatTu>;
            List<VatLieu> YeuCau = tL_YeuCauVatTu.DataSource as List<VatLieu>;
            tL_ChuyenKho.RefreshDataSource();
            tL_YeuCauVatTu.RefreshDataSource();
            tL_XuatKho.RefreshDataSource();

            List<XuatVatLieu> XVT = tL_XuatKho.DataSource as List<XuatVatLieu>;
            if (!XVT.Any())
                return;
            List<XuatVatLieu> XVTSelect = XVT.Where(x => x.Chon == true && x.MaVatTu != "HM" && x.MaVatTu != "CTR" && x.ThucXuat != 0).ToList();
            if (!XVTSelect.Any())
            {
                MessageShower.ShowWarning("Không có vật liệu nào được chọn để gửi duyệt!!! Vui lòng chọn vật liệu để gửi duyệt");
                return;
            }
            bool isQuyTrinh = SelectDuyet.DuyetTheoQuyTrinh;
            WaitFormHelper.ShowWaitForm("Quá trình gửi duyệt đang được tiến hành,Vui lòng chờ!");

            int countOK = 0;
            int countBad = 0;
            int count = 1;
            var date = DateTime.Parse(ngay);
            List<string> Noti = new List<string>();
            List<string> LstCode = new List<string>();
            bool IsGiayDuyet = SelectDuyet._CheckPhieuDuyet;
            foreach (XuatVatLieu item in XVTSelect)
            {
                item.Chon = false;
                if (IsGiayDuyet)
                    LstCode.Add(item.ID);
                if (isQuyTrinh)
                {
                    var newDXVTHN = new Tbl_QLVT_XuatVatTu_KhoiLuongHangNgayViewModel()
                    {
                        Code = Guid.NewGuid().ToString(),
                        CodeCha = item.ID,
                        Ngay = date,
                        KhoiLuong = item.ThucXuat,
                        DonGia = item.DonGia,
                        TrangThai = (int)VatTuStateEnum.DangXetDuyet,
                        ACapB = item.ACapB
                    };

                    var result = await CusHttpClient.InstanceCustomer.MPostAsJsonAsync<Tbl_QLVT_XuatVatTu_KhoiLuongHangNgayViewModel>(RouteAPI.ApprovalXuatVatTu_SendApprovalRequest, newDXVTHN);
                    if (result.MESSAGE_TYPECODE)
                    {
                        countOK++;

                    }
                    else
                    {
                        countBad++;
                        Noti.Add($"{item.MaVatTu}: {item.TenVatTu}: {result.MESSAGE_CONTENT}");
                    }
                    if (result.Dto != null)
                    {
                        var cvCha = (new List<Tbl_QLVT_XuatVatTu_KhoiLuongHangNgayViewModel>() { result.Dto }).fcn_ObjToDataTable();
                        DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(cvCha, Server.Tbl_QLVT_XuatVatTu_KhoiLuongHangNgay, isCompareTime: false);
                    }

                }
                else
                {
                    dbString = $"INSERT INTO {QLVT.TBL_QLVT_XUATVTKLHN} (\"TrangThai\",\"ACapB\",\"Code\",\"CodeCha\",\"Ngay\",\"KhoiLuong\",\"DonGia\")" +
               $" VALUES ('{2}','{item.ACapB}','{Guid.NewGuid()}','{item.ID}','{DateTime.Parse(ngay).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{item.ThucXuat}','{item.DonGia}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    double KLLuyKe = Fcn_CalKLVatTu(item.ID, QLVT.TBL_QLVT_XUATVTKLHN);
                    ChuyenVatTu m_CVT = CVT.FindAll(x => x.CodeNhapVT == item.CodeNhapVT).FirstOrDefault();
                    item.TrangThai = 2;
                    if (item.LuyKeNhapTheoDot > item.LuyKeXuatTheoDot)
                    {
                        double KLLuyKeNhap = Fcn_CalKLVatTu(item.CodeNhapVT, QLVT.TBL_QLVT_NHAPVTKLHN);
                        m_CVT.TonKhoChuyenDi = KLLuyKeNhap - KLLuyKe;
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_CHUYENKHOVT} SET \"TonKhoChuyenDi\"='{m_CVT.TonKhoChuyenDi}' WHERE \"CodeNhapVT\"='{item.CodeNhapVT}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                    else
                    {
                        m_CVT.TonKhoChuyenDi = 0;
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_CHUYENKHOVT} SET \"TonKhoChuyenDi\"='{m_CVT.TonKhoChuyenDi}' WHERE \"CodeNhapVT\"='{item.CodeNhapVT}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                    VatLieu VL = YeuCau.FindAll(x => x.ID == item.CodeDeXuat).FirstOrDefault();
                    if (VL != null)
                        VL.LuyKeXuatKho = KLLuyKe;
                    dbString = $"UPDATE  {QLVT.TBL_QLVT_XUATVT} SET \"ACapB\"='{item.ACapB}',\"TrangThai\"='{2}',\"ThucXuat\"='{0}',\"LuyKeXuatTheoDot\"='{KLLuyKe}' WHERE \"Code\"='{item.ID}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET \"LuyKeXuatKho\"='{KLLuyKe}' WHERE \"Code\"='{item.CodeDeXuat}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    item.ThucXuat = 0;
                }
            }
            if (!isQuyTrinh)
            {
                tL_XuatKho.RefreshDataSource();
                fcn_UpdateXuatKho();
                fcn_UpdateXuatKhoTheoThang();
                MessageShower.ShowInformation("Gửi duyệt thành công!!!!!!!!!!");
            }
            else
            {
                DialogResult drs = DialogResult.None;
                if (countOK == XVTSelect.Count)
                    MessageShower.ShowInformation("Gửi duyệt thành công", "");
                else if (countOK == 0)
                    drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Gửi duyệt không thành công", "", yesString: "Xem chi tiết lỗi", Nostring: "Không xem chi tiết");
                else
                {
                    string mess = $@"Gửi duyệt thành công 1 phần: {countOK} thành công, {countBad} thất bại";
                    drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Gửi duyệt không thành công một phần", "", yesString: "Xem chi tiết lỗi", Nostring: "Không xem chi tiết");
                }
                if (drs == DialogResult.Yes)
                {
                    XtraFormThongBaoMutilError FrmThongBao = new XtraFormThongBaoMutilError();
                    FrmThongBao.Description = string.Join("\r\n\t", Noti.ToArray());
                    FrmThongBao.ShowDialog();
                }
            }
            if (SelectDuyet._CheckPhieuDuyet)
            {
                string PathSave = "";
                XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
                if (Xtra.ShowDialog() == DialogResult.OK)
                {
                    PathSave = Xtra.SelectedPath;
                }
                else
                    return;
                WaitFormHelper.ShowWaitForm("Đang xuất phiếu duyệt");
                string m_Path = Path.Combine(BaseFrom.m_path, "Template", "FileExcel", "19.3PhieuXuatKhoVatTu.xlsx");
                SpreadsheetControl Spread = new SpreadsheetControl();
                Spread.LoadDocument(m_Path);
                Worksheet ws = Spread.Document.Worksheets[0];
                dbString = $"SELECT HM.Ten as TenHM,CTR.Ten as TenCTR,NCC.Ten as TenNhaCungCap,DVTH.Ten as TenDonViSuDung,XK.*,DX.TenVatTu,DX.DonVi " +
                    $"FROM {QLVT.TBL_QLVT_XUATVT} XK " +
                    $"LEFT JOIN {QLVT.TBL_QLVT_YEUCAUVT} DX ON DX.Code=XK.CodeDeXuat " +
                    $"LEFT JOIN {MyConstant.TBL_THONGTINNHACUNGCAP} NCC ON NCC.Code=DX.TenNhaCungCap" +
                    $" LEFT JOIN view_DonViThucHien DVTH ON DVTH.Code=DX.DonViThucHien" +
                    $" LEFT JOIN {MyConstant.TBL_THONGTINHANGMUC} HM ON HM.Code=DX.CodeHangMuc" +
                    $" LEFT JOIN {MyConstant.TBL_THONGTINCONGTRINH} CTR ON CTR.Code=HM.CodeCongTrinh" +
                    $" WHERE XK.Code IN ({MyFunction.fcn_Array2listQueryCondition(LstCode.ToArray())}) ";
                DataTable dt_DX = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINDUAN} WHERE \"Code\"='{SharedControls.slke_ThongTinDuAn.EditValue}'";
                List<Tbl_ThongTinDuAnViewModel> lst = DataProvider.InstanceTHDA.ExecuteQueryModel<Tbl_ThongTinDuAnViewModel>(dbString);
                Spread.BeginUpdate();
                ws.Rows[2]["E"].SetValueFromText($"Dự án: {lst.SingleOrDefault().TenDuAn}");
                ws.Rows[3]["E"].SetValueFromText($"Địa điểm: {lst.SingleOrDefault().DiaChi}");
                ws.Rows[4]["E"].SetValueFromText($"Người gửi: {BaseFrom.BanQuyenKeyInfo.FullName}");
                ws.Rows[2]["H"].SetValueFromText($"Ngày {date.Day} tháng {date.Month} năm {date.Year}");
                int i = 7, STT = 1;
                var grctr = dt_DX.AsEnumerable().GroupBy(x => x["TenCTR"].ToString());
                foreach (var CTR in grctr)
                {
                    Row Crow = ws.Rows[i++];
                    ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                    Crow.Font.Color = MyConstant.color_Row_CongTrinh;
                    Crow.Font.Bold = true;
                    Crow["E"].SetValueFromText(CTR.Key);
                    var grHM = CTR.GroupBy(x => x["TenHM"].ToString());
                    foreach (var HM in grHM)
                    {
                        Crow = ws.Rows[i++];
                        ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                        Crow.Font.Color = MyConstant.color_Row_HangMuc;
                        Crow.Font.Bold = true;
                        Crow["E"].SetValueFromText(HM.Key);
                        var grVL = CTR.GroupBy(x => x["Code"].ToString());
                        foreach (var item in grVL)
                        {
                            var row = item.FirstOrDefault();
                            dbString = $"SELECT CASE WHEN YCHN.TrangThai=1 THEN 'Đang xét duyệt' ELSE 'Đã duyệt' END AS TrangThai,YCHN.* " +
                                $"FROM {QLVT.TBL_QLVT_XUATVTKLHN} YCHN WHERE YCHN.CodeCha='{row["Code"]}' AND YCHN.Ngay='{date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
                            DataTable dthn = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                            if (dthn.Rows.Count == 0)
                                continue;
                            double KLLuyKe = Fcn_CalKLVatTu(row["CodeDeXuat"].ToString(), QLVT.TBL_QLVT_YEUCAUVTKLHN);
                            Crow = ws.Rows[i++];
                            ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                            Crow["D"].SetValue(STT++);
                            Crow["S"].SetValueFromText(row["TenNhaCungCap"].ToString());
                            Crow["T"].SetValueFromText(row["TenDonViSuDung"].ToString());
                            Crow["E"].SetValueFromText(row["TenVatTu"].ToString());
                            Crow["F"].SetValueFromText(row["DonVi"].ToString());
                            Crow["H"].SetValue(KLLuyKe);
                            Crow["G"].SetValue(dthn.AsEnumerable().FirstOrDefault()["KhoiLuong"]);
                            Crow["U"].SetValue(dthn.AsEnumerable().FirstOrDefault()["TrangThai"]);
                            Crow["K"].SetValue(dthn.AsEnumerable().FirstOrDefault()["DonGia"]);
                            Crow["L"].Formula = $"={Crow["K"].GetReferenceA1()}*{Crow["G"].GetReferenceA1()}";
                        }
                    }
                }
                CellRange NguoiDx = ws.Range["NguoiDeXuat"];
                ws.Rows[NguoiDx.BottomRowIndex][NguoiDx.RightColumnIndex].SetValueFromText($"{BaseFrom.BanQuyenKeyInfo.FullName}");
                Spread.EndUpdate();
                Spread.Document.History.IsEnabled = true;
                string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
                Spread.SaveDocument(Path.Combine(PathSave, $"Phiếu Xuất Vật tư_{time}.xlsx"), DocumentFormat.Xlsx);
                WaitFormHelper.CloseWaitForm();
                MessageShower.ShowInformation("Xuất File thành công!");
                DialogResult dialogResult = XtraMessageBox.Show($"[Phiếu Xuất Vật tư_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dialogResult == DialogResult.Yes)
                {
                    Process.Start(Path.Combine(PathSave, $"Phiếu Xuất Vật tư_{time}.xlsx"));
                }
                WaitFormHelper.CloseWaitForm();

            }
            WaitFormHelper.CloseWaitForm();
        }
        private static int fcn_GetRowVT(string codeHM, Worksheet NameSheet, string tbl)
        {
            var Search = MyFunction.SearchRangeCell(NameSheet, codeHM).FirstOrDefault();
            if (Search == null)
                return 0;
            int rowstart = Search.RowIndex;
            Dictionary<string, string> NAME = MyFunction.fcn_getDicOfColumn(NameSheet.Range[tbl]);
            for (int i = rowstart + 1; i < NameSheet.Range[tbl].BottomRowIndex; i++)
            {
                if (NameSheet.Rows[i][NAME["Code"]].Value.IsEmpty)
                    return i;
            }
            return rowstart + 1;
        }
        private static int fcn_GetRowPS(Worksheet NameSheet, string Code, string Col)
        {
            int rowstart = 0;
            CellRange Dot1 = NameSheet.Range["Dot_1"];
            Dictionary<string, string> NAME = MyFunction.fcn_getDicOfColumn(Dot1);
            for (int i = Dot1.TopRowIndex; i < Dot1.BottomRowIndex; i++)
            {
                Row Crow = NameSheet.Rows[i];
                string MaHieu = Crow[NAME[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == "")
                    return 0;
                else if (MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == "Dot")
                    continue;
                string CodeGoc = Crow[NAME[Col]].Value.ToString();
                if (Code == CodeGoc)
                    return i;
            }
            return rowstart;
        }

        private async void btn_GuiYeuCauVT_Click(object sender, EventArgs e)
        {
            var ngay = "";
            try
            {
                XtraInputBoxArgs args = new XtraInputBoxArgs();
                args.Caption = "Cài đặt ngày yêu cầu vật tư";
                args.Prompt = "Ngày Yêu Cầu";
                args.DefaultButtonIndex = 0;
                args.Showing += Args_Showing_Begin;
                DateEdit editor = new DateEdit();
                editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
                editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
                args.Editor = editor;
                args.DefaultResponse = DateTime.Now.Date;
                ngay = XtraInputBox.Show(args).ToString();
            }
            catch
            {
                return;
            }
            XtraFormLuaChonDuyet SelectDuyet = new XtraFormLuaChonDuyet();
            SelectDuyet.ShowDialog();
            if (SelectDuyet.CancelSelect)
                return;
            bool isQuyTrinh = SelectDuyet.DuyetTheoQuyTrinh;
            string dbString = "";
            tL_NhapKho.RefreshDataSource();
            List<NhapVatLieu> NVL = tL_NhapKho.DataSource as List<NhapVatLieu>;
            List<VatLieu> VLAll = tL_YeuCauVatTu.DataSource as List<VatLieu>;
            List<VatLieu> VL = VLAll.Where(x => x.Chon && x.MaVatTu != "HM" && x.MaVatTu != "CTR" && x.MaVatTu != "" && x.YeuCauDotNay != 0).ToList();

            if (!VL.Any())
            {
                MessageShower.ShowWarning("Không có đề xuất thảo yêu cầu gửi duyệt;");
                return;
            }
            WaitFormHelper.ShowWaitForm("Quá trình gửi duyệt đang được tiến hành,Vui lòng chờ!");

            int countOK = 0;
            int countBad = 0;
            int count = 1;
            var date = DateTime.Parse(ngay);
            List<string> Noti = new List<string>();
            List<string> LstCode = new List<string>();
            bool IsGiayDuyet = SelectDuyet._CheckPhieuDuyet;
            foreach (VatLieu item in VL)
            {
                WaitFormHelper.ShowWaitForm($"Quá trình gửi duyệt đang được tiến hành,Vui lòng chờ: {count++}/{VL.Count}");

                if (!item.Chon || item.MaVatTu == MyConstant.CONST_TYPE_HANGMUC || item.MaVatTu == MyConstant.CONST_TYPE_CONGTRINH || item.MaVatTu == "" || item.YeuCauDotNay == 0)
                {
                    item.Chon = false;
                    continue;
                }
                item.Chon = false;
                if (IsGiayDuyet)
                    LstCode.Add(item.ID);

                if (isQuyTrinh)
                {
                    var newDXVTHN = new Tbl_QLVT_YeuCauVatTu_KhoiLuongHangNgayViewModel()
                    {
                        Code = Guid.NewGuid().ToString(),
                        CodeCha = item.ID,
                        Ngay = date,
                        KhoiLuong = item.YeuCauDotNay,
                        DonGia = item.DonGiaHienTruong,
                        TrangThai = (int)VatTuStateEnum.DangXetDuyet,
                        ACapB = item.ACapB
                    };

                    var result = await CusHttpClient.InstanceCustomer.MPostAsJsonAsync<Tbl_QLVT_YeuCauVatTu_KhoiLuongHangNgayViewModel>(RouteAPI.ApprovalYeuCauVatTu_SendApprovalRequest, newDXVTHN);
                    if (result.MESSAGE_TYPECODE)
                    {
                        countOK++;

                    }
                    else
                    {
                        countBad++;
                        Noti.Add($"{item.MaVatTu}: {item.TenVatTu}: {result.MESSAGE_CONTENT}");
                    }
                    if (result.Dto != null)
                    {
                        var cvCha = (new List<Tbl_QLVT_YeuCauVatTu_KhoiLuongHangNgayViewModel>() { result.Dto }).fcn_ObjToDataTable();
                        DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(cvCha, Server.Tbl_QLVT_YeuCauVatTu_KhoiLuongHangNgay, isCompareTime: false);
                    }

                }
                else
                {
                    dbString = $"INSERT INTO {QLVT.TBL_QLVT_YEUCAUVTKLHN} (\"TrangThai\",\"ACapB\",\"Code\",\"CodeCha\",\"Ngay\",\"KhoiLuong\",\"DonGia\") " +
                        $"VALUES ('{2}','{item.ACapB}','{Guid.NewGuid()}','{item.ID}','{date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{item.YeuCauDotNay}','{item.DonGiaHienTruong}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                    item.YeuCauDotNay = 0;
                    double KLLuyKe = Fcn_CalKLVatTu(item.ID, QLVT.TBL_QLVT_YEUCAUVTKLHN);
                    NhapVatLieu node = NVL.FindAll(x => x.CodeDeXuat == item.ID).FirstOrDefault();

                    if (item.TrangThai == 1)
                    {
                        node.DeXuatVatTu = item.HopDongKl;
                        //node.DeXuatVatTu = KLLuyKe;
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_NHAPVT} SET \"ACapB\"='{item.ACapB}',\"TrangThai\"='{2}',\"DeXuatVatTu\"='{item.HopDongKl}' WHERE \"CodeDeXuat\"='{item.ID}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        item.TrangThai = 2;
                        node.TrangThai = 2;
                        node.TenNhaCungCap = item.TenNhaCungCap;
                        node.DonViThucHien = item.DonViThucHien;
                        node.ACapB = item.ACapB;
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET \"ACapB\"='{item.ACapB}',\"TrangThai\"='{2}',\"YeuCauDotNay\"='{0}' WHERE \"Code\"='{item.ID}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                    dbString = $"UPDATE  {QLVT.TBL_QLVT_NHAPVT} SET \"ACapB\"='{item.ACapB}', " +
                        $"\"DonGia\"='{item.DonGiaHienTruong}' WHERE \"CodeDeXuat\"='{item.ID}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    node.DaDuyetDeXuat = KLLuyKe;
                    node.DonGia = item.DonGiaHienTruong;
                }
            }
            tL_YeuCauVatTu.RefreshDataSource();
            if (!isQuyTrinh)
            {
                fcn_updateDeXuatVatLieu();
                MessageShower.ShowInformation("Gửi duyệt thành công!!!!!!!!!!");
            }
            else
            {
                DialogResult drs = DialogResult.None;
                if (countOK == VL.Count)
                    MessageShower.ShowInformation("Gửi duyệt thành công", "");
                else if (countOK == 0)
                    drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Gửi duyệt không thành công", "", yesString: "Xem chi tiết lỗi", Nostring: "Không xem chi tiết");
                else
                {
                    string mess = $@"Gửi duyệt thành công 1 phần: {countOK} thành công, {countBad} thất bại";
                    drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Gửi duyệt không thành công một phần", "", yesString: "Xem chi tiết lỗi", Nostring: "Không xem chi tiết");
                }
                if (drs == DialogResult.Yes)
                {
                    XtraFormThongBaoMutilError FrmThongBao = new XtraFormThongBaoMutilError();
                    FrmThongBao.Description = string.Join("\r\n\t", Noti.ToArray());
                    FrmThongBao.ShowDialog();
                }
            }
            WaitFormHelper.CloseWaitForm();
            if (SelectDuyet._CheckPhieuDuyet)
            {
                string PathSave = "";
                XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
                if (Xtra.ShowDialog() == DialogResult.OK)
                {
                    PathSave = Xtra.SelectedPath;
                }
                else
                    return;
                WaitFormHelper.ShowWaitForm("Đang xuất phiếu duyệt");
                string m_Path = Path.Combine(BaseFrom.m_path, "Template", "FileExcel", "19.1PhieuDeXuatVatTu.xlsx");
                SpreadsheetControl Spread = new SpreadsheetControl();
                Spread.LoadDocument(m_Path);
                Worksheet ws = Spread.Document.Worksheets[0];
                dbString = $"SELECT HM.Ten as TenHM,CTR.Ten as TenCTR,NCC.Ten as TenNhaCungCap,DVTH.Ten as TenDonViSuDung,DX.* FROM {QLVT.TBL_QLVT_YEUCAUVT} DX " +
                    $"LEFT JOIN {MyConstant.TBL_THONGTINNHACUNGCAP} NCC ON NCC.Code=DX.TenNhaCungCap" +
                    $" LEFT JOIN view_DonViThucHien DVTH ON DVTH.Code=DX.DonViThucHien" +
                    $" LEFT JOIN {MyConstant.TBL_THONGTINHANGMUC} HM ON HM.Code=DX.CodeHangMuc" +
                    $" LEFT JOIN {MyConstant.TBL_THONGTINCONGTRINH} CTR ON CTR.Code=HM.CodeCongTrinh" +
                    $" WHERE DX.Code IN ({MyFunction.fcn_Array2listQueryCondition(LstCode.ToArray())}) ";
                DataTable dt_DX = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINDUAN} WHERE \"Code\"='{SharedControls.slke_ThongTinDuAn.EditValue}'";
                List<Tbl_ThongTinDuAnViewModel> lst = DataProvider.InstanceTHDA.ExecuteQueryModel<Tbl_ThongTinDuAnViewModel>(dbString);
                Spread.BeginUpdate();
                ws.Rows[2]["E"].SetValueFromText($"Dự án: {lst.SingleOrDefault().TenDuAn}");
                ws.Rows[3]["E"].SetValueFromText($"Địa điểm: {lst.SingleOrDefault().DiaChi}");
                ws.Rows[4]["E"].SetValueFromText($"Người gửi: {BaseFrom.BanQuyenKeyInfo.FullName}");
                ws.Rows[2]["Q"].SetValueFromText($"Ngày {date.Day} tháng {date.Month} năm {date.Year}");
                int i = 7, STT = 1;
                var grctr = dt_DX.AsEnumerable().GroupBy(x => x["TenCTR"].ToString());
                foreach (var CTR in grctr)
                {
                    Row Crow = ws.Rows[i++];
                    ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                    Crow.Font.Color = MyConstant.color_Row_CongTrinh;
                    Crow.Font.Bold = true;
                    Crow["I"].SetValueFromText(CTR.Key);
                    var grHM = CTR.GroupBy(x => x["TenHM"].ToString());
                    foreach (var HM in grHM)
                    {
                        Crow = ws.Rows[i++];
                        ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                        Crow.Font.Color = MyConstant.color_Row_HangMuc;
                        Crow.Font.Bold = true;
                        Crow["I"].SetValueFromText(HM.Key);
                        var grVL = CTR.GroupBy(x => x["Code"].ToString());
                        foreach (var item in grVL)
                        {
                            var row = item.FirstOrDefault();
                            dbString = $"SELECT CASE WHEN YCHN.TrangThai=1 THEN 'Đang xét duyệt' ELSE 'Đã duyệt' END AS TrangThai,YCHN.* " +
                                $"FROM {QLVT.TBL_QLVT_YEUCAUVTKLHN} YCHN WHERE YCHN.CodeCha='{row["Code"]}' AND YCHN.Ngay='{date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
                            DataTable dthn = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                            if (dthn.Rows.Count == 0)
                                continue;
                            Crow = ws.Rows[i++];
                            ws.Rows.Insert(i, 1, RowFormatMode.FormatAsNext);
                            Crow["D"].SetValue(STT++);
                            Crow["E"].SetValueFromText(row["TenNhaCungCap"].ToString());
                            Crow["F"].SetValueFromText(row["TenDonViSuDung"].ToString());
                            Crow["I"].SetValueFromText(row["TenVatTu"].ToString());
                            Crow["J"].SetValueFromText(row["DonVi"].ToString());
                            Crow["K"].SetValue(dthn.AsEnumerable().FirstOrDefault()["KhoiLuong"]);
                            Crow["H"].SetValue(dthn.AsEnumerable().FirstOrDefault()["TrangThai"]);
                            Crow["M"].SetValue(dthn.AsEnumerable().FirstOrDefault()["DonGia"]);
                            Crow["Q"].Formula = $"={Crow["K"].GetReferenceA1()}*{Crow["M"].GetReferenceA1()}";

                        }

                    }
                }
                CellRange NguoiDx = ws.Range["NguoiDeXuat"];
                ws.Rows[NguoiDx.BottomRowIndex][NguoiDx.RightColumnIndex].SetValueFromText($"{BaseFrom.BanQuyenKeyInfo.FullName}");
                Spread.EndUpdate();
                Spread.Document.History.IsEnabled = true;
                string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
                Spread.SaveDocument(Path.Combine(PathSave, $"Phiếu đề xuất Vật tư_{time}.xlsx"), DocumentFormat.Xlsx);
                WaitFormHelper.CloseWaitForm();
                MessageShower.ShowInformation("Xuất File thành công!");
                DialogResult dialogResult = XtraMessageBox.Show($"[Phiếu đề xuất Vật tư_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dialogResult == DialogResult.Yes)
                {
                    Process.Start(Path.Combine(PathSave, $"Phiếu đề xuất Vật tư_{time}.xlsx"));
                }
                WaitFormHelper.CloseWaitForm();

            }
        }
        private double Fcn_CalKLVatTu(string Code, string Tbl, DateTime? NBD = null, DateTime? NKT = null)
        {
            double KL = 0;
            string dbString = "";
            string Condition = NBD is null ? string.Empty : $" AND \"Ngay\">='{NBD.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' AND \"Ngay\"<='{NKT.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
            if (Tbl == QLVT.TBL_QLVT_NHAPVTKLHN)
            {
                dbString = $"SELECT * FROM {QLVT.TBL_QLVT_NKVC} WHERE \"CodeCha\" = '{Code}' {Condition}";
                DataTable dtNc = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                if (dtNc.Rows.Count != 0)
                    KL += dtNc.AsEnumerable().Sum(x => double.Parse(x["ThucTeVanChuyen"].ToString()));

            }
            dbString = Tbl == QLVT.TBL_QLVT_NKVC ? $"SELECT {Tbl}.ThucTeVanChuyen AS KhoiLuong FROM {Tbl} WHERE \"CodeCha\" = '{Code}' {Condition}"
                : $"SELECT {Tbl}.KhoiLuong FROM {Tbl} WHERE \"CodeCha\" = '{Code}' AND \"TrangThai\"=2 {Condition}";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dt.Rows.Count == 0)
                return KL;
            KL += dt.AsEnumerable().Sum(x => double.Parse(x["KhoiLuong"].ToString()));
            return KL;
        }


        //private void cbb_DauViecLon_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    string dbString = "";
        //    if (cbb_DauViecLon.SelectedIndex < 0)
        //    {
        //        cbb_DauViecNho.DataSource = null;
        //        cbb_DauViecNho.SelectedIndex = -1;
        //        return;
        //    }
        //    else if ((string)cbb_DauViecLon.SelectedValue == "Add")
        //    {
        //        string DV = XtraInputBox.Show("Nhập tên tiêu đề mới", "Nhập tên tiêu đề", "");
        //        if (DV != null)
        //        {
        //            string Code = Guid.NewGuid().ToString();
        //            dbString = $"INSERT INTO {GiaoViec.TBL_DAUVIECLON} (\"Code\",\"DauViec\", \"CodeDuAn\", LoaiMau) " +
        //                $"VALUES ('{Code}', '{DV}', '{slke_ThongTinDuAn.EditValue}', 'NguoiDung')";
        //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        //        }
        //        cbb_DauViecLon.SelectedIndexChanged -= cbb_DauViecLon_SelectedIndexChanged;
        //        fcn_CapNhatDauViec();
        //        cbb_DauViecLon.SelectedIndex = -1;
        //        cbb_DauViecLon.SelectedIndexChanged += cbb_DauViecLon_SelectedIndexChanged;

        //        cbb_DauViecLon.SelectedIndex = cbb_DauViecLon.Items.Count - 2;
        //        return;
        //    }

        //    dbString = $"SELECT \"Code\", \"DauViec\" FROM {GiaoViec.TBL_DAUVIECNho} WHERE \"CodeDauViecLon\" = '{cbb_DauViecLon.SelectedValue}'";
        //    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //    cbb_DauViecNho.ValueMember = "Key";
        //    cbb_DauViecNho.DisplayMember = "Value";

        //    var dic = dt.AsEnumerable().ToDictionary(x => x["Code"].ToString(), y => y["DauViec"].ToString()).ToList();
        //    dic.Add(new KeyValuePair<string, string>("Add", "***THÊM MỚI***"));

        //    cbb_DauViecNho.SelectedValueChanged -= cbb_DauViecNho_SelectedIndexChanged;
        //    cbb_DauViecNho.DataSource = dic;
        //    cbb_DauViecNho.SelectedIndex = -1;
        //    cbb_DauViecNho.SelectedValueChanged += cbb_DauViecNho_SelectedIndexChanged;

        //    cbb_DauViecNho.SelectedIndex = cbb_DauViecNho.Items.Count - 2;
        //}

        private void rg_GV_DauViec_SelectedIndexChanged(object sender, EventArgs e)
        {
            fcn_GV_CapNhatHangMucCongViec();
        }

        //private void cbb_DauViecNho_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    if (cbb_DauViecNho.SelectedIndex < 0)
        //    {
        //        spsheet_GV_KH_ChiTietCacHMCongViec.Enabled = false;
        //        return;
        //    }
        //    else if ((string)cbb_DauViecLon.SelectedValue == "Add")
        //    {
        //        string DV = XtraInputBox.Show("Nhập tên tiêu đề mới", "Nhập tên tiêu đề", "");
        //        if (DV != null)
        //        {
        //            string Code = Guid.NewGuid().ToString();
        //            string dbString = $"INSERT INTO {GiaoViec.TBL_DAUVIECNho} (\"Code\",\"DauViec\", \"CodeDauViecLon\") " +
        //                $"VALUES ('{Code}', '{DV}', '{cbb_DauViecLon.SelectedValue}')";
        //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        //        }
        //        cbb_DauViecLon_SelectedIndexChanged(null, null);
        //        //cbb_DauViecLon.SelectedIndexChanged -= cbb_DauViecLon_SelectedIndexChanged;
        //        //fcn_CapNhatDauViec();
        //        //cbb_DauViecLon.SelectedIndex = -1;
        //        //cbb_DauViecLon.SelectedIndexChanged += cbb_DauViecLon_SelectedIndexChanged;

        //        //cbb_DauViecLon.SelectedIndex = cbb_DauViecLon.Items.Count - 2;
        //        return;
        //    }
        //    fcn_LoadGiaoViecDuAn();

        //}

        private void spsheet_TD_KH_LapKeHoach_Leave(object sender, EventArgs e)
        {
            fcn_TDKH_LuuKeHoachVaoCSDL();
        }

        private void cb_TDKH_HienDienGiai_CheckedChanged(object sender, EventArgs e)
        {
            TDKHHelper.CheckAnHienDienGiai();
        }

        private void cb_TDKH_HienCongTac_CheckedChanged(object sender, EventArgs e)
        {
            TDKHHelper.CheckAnHienCongTacVatTu(spsheet_TD_KH_LapKeHoach.ActiveWorksheet, SharedControls.cb_TDKH_HienCongTac.Checked);
        }

        private void spsheet_TDKH_DoBocKLKeHoach_KeyUp(object sender, KeyEventArgs e)
        {
            SpreadsheetControl spsheet = sender as SpreadsheetControl;
            Worksheet ws = spsheet.Document.Worksheets.ActiveWorksheet;

            if (e.KeyCode == Keys.Insert)
            {
                //Worksheet ws = spsheet_TDKH_DoBocKLKeHoach.Document.Worksheets[TDKH.SheetName_DoBocChuan];
                int ind = ws.SelectedCell.TopRowIndex;
                ws.Rows.Insert(ind, ws.SelectedCell.RowCount);
            }
            else if (e.KeyCode == Keys.F8)
            {
                int ind = ws.SelectedCell.TopRowIndex;
                ws.Rows.Remove(ind, ws.SelectedCell.RowCount);
            }
            else return;

            //fcn_TDKH_reloadFomulaCongTacDoBoc();
        }



        //private void spsheet_BangDeXuatThuChi_Click(object sender, EventArgs e)
        //{
        //    Worksheet ws = spsheet_BangDeXuatThuChi.Document.Worksheets[0];
        //    CellRange rangeXD = ws.Range[MyConstant.TBL_QUYETTHONGTIN];
        //    if (ws.SelectedCell.TopRowIndex <= 1 || ws.SelectedCell.TopRowIndex > rangeXD.BottomRowIndex)
        //        return;
        //    Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETDICWS]);
        //    if (ws.Columns[ws.SelectedCell.RightColumnIndex].Heading == Name[ThuChiTamUng.COL_THUCHI_NGUOIDUYET] || ws.Columns[ws.SelectedCell.RightColumnIndex].Heading == Name[ThuChiTamUng.COL_THUCHI_NGUOIYEUCAU])
        //    {
        //        string code = ws.Rows[ws.SelectedCell.TopRowIndex][0].Value.ToString();
        //        Frm_NguoiNhan_YeuCau nguoinhanyeucau = new Frm_NguoiNhan_YeuCau(code, ws.Columns[ws.SelectedCell.RightColumnIndex].Heading, ws.SelectedCell.TopRowIndex, spsheet_BangDeXuatThuChi, "Tbl_ThuChiTamUngDeXuat");
        //        nguoinhanyeucau.m_TruyenDataperson = new Frm_NguoiNhan_YeuCau.DE__TRUYENDATAPERSON(fcn_NhanDataperson_dtgv);
        //        nguoinhanyeucau.ShowDialog();
        //    }
        //    if (ws.Columns[ws.SelectedCell.RightColumnIndex].Heading == Name[ThuChiTamUng.COL_THUCHI_TENHOPDONG] || ws.Columns[ws.SelectedCell.RightColumnIndex].Heading == Name[ThuChiTamUng.COL_THUCHI_NOIDUNGUNG])
        //    {
        //        DevExpress.XtraEditors.XtraMessageBoxArgs args = new DevExpress.XtraEditors.XtraMessageBoxArgs();
        //        args.Caption = "LOẠI HỢP ĐỒNG";
        //        args.Buttons = new DialogResult[] { DialogResult.OK, DialogResult.Cancel, DialogResult.Yes, DialogResult.No };
        //        args.Showing += Args_Showing;
        //        DevExpress.XtraEditors.MessageShower.ShowInformation(args);
        //    }
        //}
        //private void Args_Showing(object sender, DevExpress.XtraEditors.XtraMessageShowingArgs e)
        //{
        //    foreach (var control in e.Form.Controls)
        //    {
        //        DevExpress.XtraEditors.SimpleButton button = control as DevExpress.XtraEditors.SimpleButton;
        //        if (button != null)
        //        {
        //            button.ImageOptions.SvgImageSize = new Size(16, 16);
        //            switch (button.DialogResult.ToString())
        //            {
        //                case ("OK"):
        //                    button.ImageOptions.SvgImage = svgImageCollection1[0];
        //                    button.Text = "HỢP ĐỒNG CUNG CẤP";
        //                    //button.ForeColor = Color.Red;
        //                    //button.Font = new Font(button.Font, FontStyle.Bold);
        //                    button.Width = 200;
        //                    button.Click += (ss, ee) =>
        //                    {
        //                        Form_LuaChonSoHopDong luachon = new Form_LuaChonSoHopDong("HỢP ĐỒNG CUNG CẤP");
        //                        luachon.m_TruyenData = new Form_LuaChonSoHopDong.DE__TRUYENDATA(fcn_NhanDataTamUng);
        //                        luachon.ShowDialog();
        //                    };
        //                    break;
        //                case ("Yes"):
        //                    button.ImageOptions.SvgImage = svgImageCollection1[1];
        //                    button.Text = "HỢP ĐỒNG VẬT TƯ";
        //                    button.Width = 200;
        //                    button.Click += (ss, ee) => { e.Form.Close(); };
        //                    break;
        //                case ("Cancel"):
        //                    button.ImageOptions.SvgImage = svgImageCollection1[2];
        //                    button.Text = "HỢP ĐỒNG KHÁC";
        //                    button.Width = 200;
        //                    button.Click += (ss, ee) =>
        //                    {
        //                        Form_LuaChonSoHopDong luachon = new Form_LuaChonSoHopDong("HỢP ĐỒNG KHÁC");
        //                        luachon.m_TruyenData = new Form_LuaChonSoHopDong.DE__TRUYENDATA(fcn_NhanDataTamUng);
        //                        luachon.ShowDialog();
        //                    };
        //                    break;
        //                case ("No"):
        //                    button.ImageOptions.SvgImage = svgImageCollection1[2];
        //                    button.Text = "Đóng";
        //                    button.Width = 200;
        //                    button.Click += (ss, ee) => { e.Form.Close(); };
        //                    break;

        //            }
        //        }
        //    }
        //}
        //private void fcn_NhanDataTamUng(string name, string tenhopdong, int thanhtien, int giatrihopdong)
        //{
        //    Worksheet ws = spsheet_BangDeXuatThuChi.Document.Worksheets[0];
        //    string code = Guid.NewGuid().ToString();
        //    Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETDICWS]);
        //    ws.Rows.Insert(ws.SelectedCell.BottomRowIndex + 1, 1, RowFormatMode.FormatAsPrevious);
        //    ws.Rows[ws.SelectedCell.TopRowIndex][Name[ThuChiTamUng.COL_THUCHI_TENHOPDONG]].SetValueFromText(tenhopdong, true);
        //    ws.Rows[ws.SelectedCell.TopRowIndex][Name[ThuChiTamUng.COL_THUCHI_NOIDUNGUNG]].SetValueFromText(name, true);
        //    ws.Rows[ws.SelectedCell.TopRowIndex][Name[ThuChiTamUng.COL_THUCHI_SOTIENSUDUNG]].SetValueFromText(thanhtien.ToString(), true);
        //    ws.Rows[ws.SelectedCell.TopRowIndex][Name[ThuChiTamUng.COL_THUCHI_GIATRIHOPDONG]].SetValueFromText(giatrihopdong.ToString(), true);
        //}
        private void spsheet_BangDeXuatThuChi_Leave(object sender, EventArgs e)
        {
            //fcn_BangDexuatTamung();
        }
        //private void fcn_BangDexuatTamung()
        //{
        //    IWorkbook workbook = spsheet_BangDeXuatThuChi.Document;
        //    Worksheet worksheet = workbook.Worksheets[0];
        //    Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[MyConstant.TBL_QUYETDICWS]);
        //    Name.Remove("FileDinhKem");
        //    Name.Remove("Stt");
        //    string queryStr = $"SELECT *  FROM {MyConstant.Tbl_ThuchiTamUng_Dexuat}";
        //    DataTable DT_Bangtamungdexuat = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
        //    CellRange rangetamung = worksheet.Range[MyConstant.TBL_QUYETDICWS];

        //    DT_Bangtamungdexuat.Columns.Add("Đã thêm", typeof(bool));
        //    DT_Bangtamungdexuat.AsEnumerable().ForEach(x => x["Đã thêm"] = false);
        //    int sortID = 0;
        //    DataRow rowdt;
        //    int j = 0;
        //    for (int i = rangetamung.TopRowIndex; i < rangetamung.BottomRowIndex - 1; i++)
        //    {
        //        Row crRow = worksheet.Rows[i];
        //        string code = crRow[Name[ThuChiTamUng.COL_THUCHI_CODE]].Value.ToString();
        //        if (code == "")
        //        {
        //            crRow[Name[ThuChiTamUng.COL_THUCHI_CODE]].Value = Guid.NewGuid().ToString();
        //            crRow[Name[MyConstant.COL_HD_CodeDuAn]].Value = slke_ThongTinDuAn.EditValue.ToString();
        //            rowdt = DT_Bangtamungdexuat.NewRow();
        //            rowdt["SortId"] = sortID;
        //            rowdt["Đã thêm"] = true;
        //            foreach (var str in Name)
        //            {
        //                rowdt[str.Key] = crRow[str.Value].Value.ToString();
        //            }
        //            DT_Bangtamungdexuat.Rows.Add(rowdt);
        //            sortID++;
        //        }
        //        if (code != "" && code != "Code")
        //        {
        //            DT_Bangtamungdexuat.Rows[j]["SortId"] = sortID;
        //            DT_Bangtamungdexuat.Rows[j]["Đã thêm"] = true;
        //            foreach (var str in Name)
        //            {
        //                DT_Bangtamungdexuat.Rows[j][str.Key] = crRow[str.Value].Value.ToString();
        //            }
        //            sortID++;
        //            j++;
        //        }
        //    }
        //    DT_Bangtamungdexuat.Select("[Đã thêm] = false").ForEach(x => x.Delete());
        //    DataProvider.InstanceTHDA.UpdateDataTable(DT_Bangtamungdexuat, MyConstant.Tbl_ThuchiTamUng_Dexuat);
        //}


        private void spsheet_Thongtinchinh_HyperlinkClick(object sender, HyperlinkClickEventArgs e)
        {
            Worksheet ws = spsheet_Thongtinchinh.Document.Worksheets["Thông tin Dự án - Công trình"];
            //CellRange range = e.TargetRange;
            CellRange range = ws.SelectedCell;
            IWorkbook workbook_thongtin = spsheet_Thongtinchinh.Document;
            Worksheet ws_thongtin = workbook_thongtin.Worksheets["Khối lượng phân khai"];
            if (range == null || range.Worksheet != ws)
                return;
            string colName = ws.Columns[range.LeftColumnIndex].Heading;
            string codeCV = ws.Rows[range.TopRowIndex]["A"].Value.ToString();
            DataTable dtCongTacTheoKy, dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            TDKHHelper.fcn_TDKH_CTacTheoKy(out dtCongTacTheoKy, dtCT, dtHM);
            foreach (string str in MyConstant.RANGES_MUCTHUOCDUAN)
            {
                if (spsheet_Thongtinchinh.Document.Range[str].Contains(range))
                {
                    if (str == MyConstant.TBL_THONGTINNHACUNGCAP || str == MyConstant.TBL_THONGTINNHATHAU || str == MyConstant.TBL_THONGTINNHATHAUPHU || str == MyConstant.TBL_THONGTINTODOITHICONG)
                    {
                        if (ws.Rows[ws.SelectedCell.BottomRowIndex][MyConstant.COL_CODEHM].Value.ToString() == "")
                        {
                            Form_TaoMoiHopDong NewHD = new Form_TaoMoiHopDong();
                            NewHD.Fcn_LoadDaTa(ws.Rows[ws.SelectedCell.BottomRowIndex][MyConstant.COL_TEN].Value.ToString(), str, ws.Rows[ws.SelectedCell.BottomRowIndex][MyConstant.COL_CODE].Value.ToString());
                            NewHD.ShowDialog();
                        }
                        else
                        {
                            Form_TaoMoiHopDong NewHD = new Form_TaoMoiHopDong();
                            NewHD.Fcn_LoadDaTa(ws.Rows[ws.SelectedCell.BottomRowIndex][MyConstant.COL_TEN].Value.ToString(), str, ws.Rows[ws.SelectedCell.BottomRowIndex][MyConstant.COL_CODE].Value.ToString());
                            NewHD.ShowDialog();

                        }
                        _CheckTrangThai = false;
                        UpDateTenKho();

                    }
                }
            }

        }

        private void spread_PhuLucHopDong_Full_Leave(object sender, EventArgs e)
        {
            //fcn_updatetonghopdanhsachHD();
        }

        private void fcn_handle_dgv_HaoPhi_NhanThongTinVatTu(DataRow[] dataRows)
        {
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT * FROM {TDKH.Tbl_HaoPhiVatTu}").Clone();

            var ws = spsheet_TD_KH_LapKeHoach.Document.Worksheets[TDKH.SheetName_KeHoachKinhPhi];

            int topInd = ws.SelectedCell.TopRowIndex;
            Row crRow = ws.Rows[topInd];

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            string codeCT = ws.Rows[topInd][dic[TDKH.COL_Code]].Value.ToString();


            string maCongTac = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
            string tenCongTac = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
            double KLKH = double.Parse(crRow[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.ToString());
            //string KLKH
            foreach (DataRow dr in dataRows)
            {
                DataRow newRow = dt.NewRow();
                dt.Rows.Add(newRow);
                newRow["Code"] = Guid.NewGuid().ToString();
                newRow["CodeCongTac"] = codeCT;
                newRow["MaVatLieu"] = dr["MaVatLieu"];
                newRow["VatTu"] = dr["VatTu"];
                newRow["LoaiVatTu"] = dr["LoaiVatTu"];
                newRow["HeSo"] = newRow["HeSoNguoiDung"] = 1;
                newRow["DinhMuc"] = newRow["DinhMucNguoiDung"] = 1;
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.Tbl_HaoPhiVatTu);
            ctrl_HaoPhiVatTuTDKH.pushData(TypeKLHN.CongTac, codeCT, string.Format(FormatString.DispTenCongTac, maCongTac, tenCongTac));

        }


        //private void fcn_TDKH_CopyDinhMuc(string codeCu, string codeMoi, string tbl)
        //{
        //    string dbString = $"SELECT * FROM {tbl} WHERE \"CodeCongTac\" = '{codeCu}'";
        //    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString).Copy();
        //    foreach (DataRow dr in dt.Rows)
        //    {
        //        dr["CodeCongTac"] = codeMoi;
        //    }
        //}

        private void dgv_TDKH_KH_HaoPhi_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            //DataGridViewRow dgvr = dgv_TDKH_KH_HaoPhi.Rows[e.RowIndex];
            //string Code = dgvr.Cells["Code"].Value.ToString();
            //string colName = dgv_TDKH_KH_HaoPhi.Columns[e.ColumnIndex].Name;
            //string[] arrayColChinhSua = { "MaVatLieu", "VatTu", "DonVi", "DinhMucNguoiDung", "HeSoNguoiDung", "PhanTichKeHoach" };
            //Guid guid;

            //if (!Guid.TryParse(Code, out guid) || !arrayColChinhSua.Contains(colName))
            //{
            //    e.Cancel = true;
            //    return;
            //}
        }

        /// <summary>
        /// DataGridview Hao phí cũ
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgv_TDKH_KH_HaoPhi_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //string codeCha = dgv_TDKH_KH_HaoPhi.Rows[e.RowIndex].Cells["Code"].Value.ToString();
            //string colName = dgv_TDKH_KH_HaoPhi.Columns[e.ColumnIndex].Name;

            //string dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu} SET \"{colName}\" = '{dgv_TDKH_KH_HaoPhi.Rows[e.RowIndex].Cells[colName].Value}' " +
            //    $"WHERE \"Code\" = '{codeCha}'";

            //if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) == 0)
            //{
            //    MessageShower.ShowInformation("Lỗi cập nhật vật tư");
            //}
        }
        private void spsheet_Thongtinchinh_ActiveSheetChanged(object sender, ActiveSheetChangedEventArgs e)
        {
            if (e.NewActiveSheetName == "Khối lượng phân khai")
            {
                if (SharedControls._PhanKhai)
                    return;
                WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                fcn_updatenhathau_todoi("Khối lượng phân khai");
                Fcn_LoadPhanKhaiNew();
                SharedControls._PhanKhai = true;
                //Fcn_LoadCongTacPhanKhai("Khối lượng phân khai");
                WaitFormHelper.CloseWaitForm();
            }
            else if (e.NewActiveSheetName == "Vật liệu")
            {
                WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                fcn_updatenhathau_todoi_ncc("Vật liệu");
                WaitFormHelper.CloseWaitForm();
            }
            else if (e.NewActiveSheetName == "Nhân công")
            {
                WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                fcn_updatenhathau_todoi_ncc("Nhân công");
                WaitFormHelper.CloseWaitForm();
            }
            else if (e.NewActiveSheetName == "Máy thi công")
            {
                WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                fcn_updatenhathau_todoi_ncc("Máy thi công");
                WaitFormHelper.CloseWaitForm();
            }
        }

        private void cbo_MenuNhaThauThiCong_EnabledChanged(object sender, EventArgs e)
        {
        }

        private void cbo_MenuChonToDoi_EnabledChanged(object sender, EventArgs e)
        {

        }
        private void mutichiaKhoiLuongTheoLanThiCong(object sender, EventArgs e)
        {
            Fcn_ChiaMutiCongTac(sender, false);
        }
        private void mutichiaKhoiLuongTheoLanThiCongMulti(object sender, EventArgs e)
        {
            Fcn_ChiaMutiCongTacMulti(sender, false);
        }

        private void Fcn_ChiaMutiCongTacMulti(object sender, bool type)
        {
            DXEditMenuItem item = sender as DXEditMenuItem;
            if (!int.TryParse(item.EditValue.ToString(), out int so))
            {
                MessageShower.ShowError("Vui lòng nhập đúng định dạng số 1,2,3,4........");
                return;
            }
            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn chia công tác không?? NẾU CHIA THÌ TOÀN BỘ DIỄN DÃI SẼ BỊ XÓA!!!!");
            if (rs == DialogResult.No)
                return;
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            CellRange range = wb.Range[TDKH.RANGE_DoBocChuan];
            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);
            string dbString = "";
            WaitFormHelper.ShowWaitForm("Đang chia Công Tác!!!!");
            List<string> lstHp = new List<string>();
            for (int i = range.TopRowIndex; i <= range.BottomRowIndex; i++)
            {
                Row Crow = ws.Rows[i];
                bool Chon = Crow[dicDoBoc["Chon"]].Value.BooleanValue;
                if (Chon)
                {
                    string TypeRow = Crow[dicDoBoc[TDKH.COL_TypeRow]].Value.TextValue;
                    if (TypeRow == MyConstant.TYPEROW_CVCha)
                    {
                        string Code = Crow[dicDoBoc[TDKH.COL_Code]].Value.TextValue;
                        DataProvider.InstanceTHDA.ExecuteNonQuery($"UPDATE {Server.Tbl_TDKH_HaoPhiVatTu} SET PhanTichKeHoach = 0 WHERE CodeCongTac = '{Code}'");
                        dbString = $"SELECT con.*\r\n" +
$"FROM {TDKH.Tbl_HaoPhiVatTu} con\r\n" +
$"WHERE \"CodeCongTac\"='{Code}' ORDER BY \"Row\" ASC";
                        DataTable haoPhi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                        dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"Code\" = '{Code}' ";
                        DataTable CT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        string lstCode = MyFunction.fcn_Array2listQueryCondition(CT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                        dbString = $"SELECT con.*\r\n" +
                          $"FROM {TDKH.TBL_ChiTietCongTacCon} con\r\n" +
                          $"WHERE \"CodeCongTacCha\" IN ({lstCode}) ORDER BY \"Row\" ASC";
                        DataTable ctCons = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        dbString = $"SELECT con.* \r\n" +
                          $"FROM {TDKH.TBL_NhomDienGiai} con\r\n" +
                          $"WHERE \"CodeCongTacTheoGiaiDoan\" IN ({lstCode}) ORDER BY \"Row\" ASC";
                        DataTable ctNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        DuAnHelper.DeleteDataRows(TDKH.TBL_ChiTietCongTacCon, ctCons.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                        DuAnHelper.DeleteDataRows(TDKH.TBL_NhomDienGiai, ctNhom.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                        double KhoiLuong = double.Parse(CT.Rows[0]["KhoiLuongToanBo"].ToString());
                        double KhoiLuongHopDongChiTiet = double.Parse(CT.Rows[0]["KhoiLuongHopDongChiTiet"].ToString());
                        double KhoiLuongChia = Math.Round(KhoiLuong / so, 2);
                        double KhoiLuongHDChia = Math.Round(KhoiLuongHopDongChiTiet / so, 2);
                        string CodeCha = CT.Rows[0]["Code"].ToString();
                        DataTable CTTheoKy = CT.Clone();
                        DataTable NewHP = haoPhi.Clone();
                        for (int j = 1; j <= so; j++)
                        {
                            DataRow row = CT.Rows[0];
                            string CodeCT = Guid.NewGuid().ToString();
                            row["Code"] = CodeCT;
                            row["CodeCha"] = CodeCha;
                            row["SortId"] = j;
                            row["KhoiLuongToanBo"] = KhoiLuongChia;
                            row["KhoiLuongHopDongChiTiet"] = KhoiLuongHDChia;
                            row["CodeNhom"] = null;
                            row["CodeGop"] = null;
                            row["KhoiLuongToanBo_Iscongthucmacdinh"] = false;
                            CTTheoKy.Rows.Add(row.ItemArray);
                            foreach (DataRow CrowHP in haoPhi.Rows)
                            {
                                string NewCode = Guid.NewGuid().ToString();
                                lstHp.Add(NewCode);
                                DataRow rowhp = CrowHP;
                                rowhp["Code"] = NewCode;
                                rowhp["CodeVatTu"] = null;
                                rowhp["PhanTichKeHoach"] = true;
                                rowhp["CodeCongTac"] = CodeCT;
                                NewHP.Rows.Add(rowhp.ItemArray);
                            }
                        }
                        CTTheoKy.AcceptChanges();
                        NewHP.AcceptChanges();
                        DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(CTTheoKy, TDKH.TBL_ChiTietCongTacTheoKy);
                        DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(NewHP, TDKH.Tbl_HaoPhiVatTu);
                    }
                }
            }
            WaitFormHelper.CloseWaitForm();
            TDKHHelper.CapNhatAllVatTuHaoPhi(lstHp);
            TDKHHelper.LoadCongTacDoBoc();
        }
        private void Fcn_ChiaMutiCongTac(object sender, bool type)
        {
            DXEditMenuItem item = sender as DXEditMenuItem;
            if (!int.TryParse(item.EditValue.ToString(), out int so))
            {
                MessageShower.ShowError("Vui lòng nhập đúng định dạng số 1,2,3,4........");
                return;
            }
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            Cell cell = ws.SelectedCell[0];
            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);
            string Code = ws.Rows[cell.TopRowIndex][dicDoBoc[MyConstant.CODE]].Value.TextValue;
            if (string.IsNullOrEmpty(Code))
                return;
            //this.ContextMenuStrip.Hide();
            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn chia công tác không?? NẾU CHIA THÌ TOÀN BỘ DIỄN DÃI SẼ BỊ XÓA!!!!");
            if (rs == DialogResult.No)
                return;
            string TypeRow = ws.Rows[cell.TopRowIndex][dicDoBoc[MyConstant.TYPEROW]].Value.TextValue;
            string dbString = "";
            if (TypeRow == MyConstant.TYPEROW_CVCha || TypeRow == MyConstant.TYPEROW_Nhom || TypeRow == MyConstant.TYPEROW_PhanTuyen || TypeRow == MyConstant.TYPEROW_HangMuc)
            {
                WaitFormHelper.ShowWaitForm("Đang chia Công Tác!!!!");
                string colFk = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH.ColCodeFK;
                string code = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH.Code;
                string ColCode = TypeRow == MyConstant.TYPEROW_HangMuc ? "CodeHangMuc" : "CodePhanTuyen";

                string Condion = TypeRow == MyConstant.TYPEROW_CVCha ? $"WHERE \"Code\" = '{Code}'" :
                   (TypeRow == MyConstant.TYPEROW_Nhom ? $"WHERE \"CodeNhom\" = '{Code}' AND {colFk}='{code}'"
                   : (TypeRow == MyConstant.TYPEROW_HangMuc ? $"LEFT JOIN {TDKH.TBL_DanhMucCongTac} dmct ON dmct.Code={TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac WHERE dmct.CodeHangMuc = '{Code}' AND {TDKH.TBL_ChiTietCongTacTheoKy}.{colFk}='{code}'"
                   : $"LEFT JOIN {TDKH.TBL_DanhMucCongTac} dmct ON dmct.Code={TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac WHERE dmct.CodePhanTuyen = '{Code}' AND {TDKH.TBL_ChiTietCongTacTheoKy}.{colFk}='{code}'"));

                dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} {Condion} ";
                DataTable CT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string lstCode = MyFunction.fcn_Array2listQueryCondition(CT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT con.*\r\n" +
                  $"FROM {TDKH.TBL_ChiTietCongTacCon} con\r\n" +
                  $"WHERE \"CodeCongTacCha\" IN ({lstCode}) ORDER BY \"Row\" ASC";
                DataTable ctCons = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                dbString = $"SELECT con.* \r\n" +
                  $"FROM {TDKH.TBL_NhomDienGiai} con\r\n" +
                  $"WHERE \"CodeCongTacTheoGiaiDoan\" IN ({lstCode}) ORDER BY \"Row\" ASC";
                DataTable ctNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                DuAnHelper.DeleteDataRows(TDKH.TBL_ChiTietCongTacCon, ctCons.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                DuAnHelper.DeleteDataRows(TDKH.TBL_NhomDienGiai, ctNhom.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                List<string> lstHp = new List<string>();
                foreach (DataRow crow in CT.Rows)
                {
                    DataProvider.InstanceTHDA.ExecuteNonQuery($"UPDATE {Server.Tbl_TDKH_HaoPhiVatTu} SET PhanTichKeHoach = 0 WHERE CodeCongTac = '{crow["Code"]}'");
                    dbString = $"SELECT con.*\r\n" +
$"FROM {TDKH.Tbl_HaoPhiVatTu} con\r\n" +
$"WHERE \"CodeCongTac\"='{crow["Code"]}' ORDER BY \"Row\" ASC";
                    DataTable haoPhi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    double KhoiLuong = double.Parse(crow["KhoiLuongToanBo"].ToString());
                    double KhoiLuongHopDongChiTiet = double.Parse(crow["KhoiLuongHopDongChiTiet"].ToString());
                    double KhoiLuongChia = Math.Round(KhoiLuong / so, 2);
                    double KhoiLuongHDChia = Math.Round(KhoiLuongHopDongChiTiet / so, 2);
                    string CodeCha = crow["Code"].ToString();
                    DataTable NewHP = haoPhi.Clone();
                    DataTable CTTheoKy = CT.Clone();
                    for (int i = 1; i <= so; i++)
                    {
                        DataRow row = crow;
                        string CodeCT = Guid.NewGuid().ToString();
                        row["Code"] = CodeCT;
                        row["CodeCha"] = CodeCha;
                        row["SortId"] = i;
                        row["KhoiLuongToanBo"] = KhoiLuongChia;
                        row["KhoiLuongHopDongChiTiet"] = KhoiLuongHDChia;
                        row["CodeNhom"] = null;
                        row["CodeGop"] = null;
                        row["KhoiLuongToanBo_Iscongthucmacdinh"] = false;
                        CTTheoKy.Rows.Add(row.ItemArray);
                        foreach (DataRow CrowHP in haoPhi.Rows)
                        {
                            string NewCode = Guid.NewGuid().ToString();
                            lstHp.Add(NewCode);
                            DataRow rowhp = CrowHP;
                            rowhp["Code"] = NewCode;
                            rowhp["CodeVatTu"] = null;
                            rowhp["PhanTichKeHoach"] = true;
                            rowhp["CodeCongTac"] = CodeCT;
                            NewHP.Rows.Add(rowhp.ItemArray);
                        }
                    }
                    CTTheoKy.AcceptChanges();
                    NewHP.AcceptChanges();
                    DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(CTTheoKy, TDKH.TBL_ChiTietCongTacTheoKy);
                    DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(NewHP, TDKH.Tbl_HaoPhiVatTu);
                }
                WaitFormHelper.CloseWaitForm();
                TDKHHelper.CapNhatAllVatTuHaoPhi(lstHp);
                TDKHHelper.LoadCongTacDoBoc();
            }
        }
        private void spsheet_TD_KH_LapKeHoach_PopupMenuShowing(object sender, DevExpress.XtraSpreadsheet.PopupMenuShowingEventArgs e)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            //Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            Cell cell = ws.SelectedCell[0];

#if DEBUG
#else
            e.Menu.Items.Clear();
#endif

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            //e.Menu.Items.Clear();
            SpreadsheetMenuCheckItem CTacInNhom = new SpreadsheetMenuCheckItem("HIỆN CÔNG TÁC TRONG NHÓM", MSETTING.Default.CongTacInNhomVisible);
            CTacInNhom.Appearance.ForeColor = Color.Blue;
            CTacInNhom.Visible = true;
            CTacInNhom.Appearance.Font = new Font(CTacInNhom.Appearance.Font, FontStyle.Bold);
            CTacInNhom.CheckedChanged += (s, arr) =>
            {
                MSETTING.Default.CongTacInNhomVisible = !MSETTING.Default.CongTacInNhomVisible;
                MSETTING.Default.Save();

                LoadSheetTDKH();
                return;
            };
            if (ws.Name == TDKH.SheetName_DoBocChuan)
            {
                SpreadsheetMenuItem MuiTC = new SpreadsheetMenuItem("Quản lý danh sách mũi thi công", fcn_Handle_Popup_TDKH_MuiThiCong);
                MuiTC.Appearance.ForeColor = Color.Blue;
                MuiTC.Appearance.Font = new Font(MuiTC.Appearance.Font, FontStyle.Bold);
                e.Menu.Items.Add(MuiTC);

                SpreadsheetMenuItem MuiTCAuto = new SpreadsheetMenuItem("Thêm mũi thi công TỰ ĐỘNG vào công tác BỊ CHIA", fcn_Handle_Popup_TDKH_MuiThiCongAuto);
                MuiTCAuto.Appearance.ForeColor = Color.Red;
                MuiTCAuto.Appearance.Font = new Font(MuiTCAuto.Appearance.Font, FontStyle.Bold);
                e.Menu.Items.Add(MuiTCAuto);

                SpreadsheetMenuItem MuiTCCT = new SpreadsheetMenuItem("Thêm mũi thi công vào công tác được chọn", fcn_Handle_Popup_TDKH_MuiThiCongVaoCT);
                MuiTCCT.Appearance.ForeColor = Color.Red;
                MuiTCCT.Appearance.Font = new Font(MuiTCCT.Appearance.Font, FontStyle.Bold);
                e.Menu.Items.Add(MuiTCCT);


                if (!ctrl_DonViThucHienDuAnTDKH.IsGiaoThau)
                {
                    SpreadsheetMenuItem itemLayCongTac = new SpreadsheetMenuItem("Thêm công tác", fcn_Handle_Popup_TDKH_DBC_LayCongTacTuDanhMucTong);
                    e.Menu.Items.Add(itemLayCongTac);
                }
                else
                {
                    SpreadsheetMenuItem itemLayCongTacPhu = new SpreadsheetMenuItem("Tạo liên kết công tác thầu chính với công tác thủ công thầu phụ", fcn_Handle_Popup_TDKH_DBC_TaoLienKet);
                    e.Menu.Items.Add(itemLayCongTacPhu);
                }
                string col = ws.Rows[0][cell.ColumnIndex].Value.ToString();
                bool isCongThucMacDinh = false;
                bool.TryParse(ws.Rows[cell.RowIndex][dic[TDKH.COL_KhoiLuongToanBo_Iscongthucmacdinh]].Value.ToString(), out isCongThucMacDinh);
                var typeRow = ws.Rows[cell.RowIndex][dic[TDKH.COL_TypeRow]].Value.ToString();
                if (!isCongThucMacDinh && typeRow == MyConstant.TYPEROW_CVCha)
                {
                    SpreadsheetMenuItem itemCTMacDinh = new SpreadsheetMenuItem("Dùng công thức mặc định", fcn_Handle_Popup_TDKH_DungCongthucMacDinh);
                    e.Menu.Items.Add(itemCTMacDinh);
                }
                DXSubMenuItem submenu;
                RepositoryItemTextEdit textEdit;
                if (typeRow == MyConstant.TYPEROW_CVCha || typeRow == MyConstant.TYPEROW_Nhom || typeRow == MyConstant.TYPEROW_HangMuc || typeRow == MyConstant.TYPEROW_PhanTuyen)
                {
                    submenu = new DXSubMenuItem("Chia công tác hoặc công tác trong Nhóm, Phân đoạn hoặc Hạng mục có khối lượng theo lần thi công");
                    e.Menu.Items.Add(submenu);
                    textEdit = new RepositoryItemTextEdit();
                    textEdit.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
                    textEdit.Mask.EditMask = "N0";
                    textEdit.EditValueChangedDelay = 0;
                    textEdit.EditValueChangedFiringMode = DevExpress.XtraEditors.Controls.EditValueChangedFiringMode.Buffered;
                    submenu.Items.Add(new DXEditMenuItem("", textEdit,
                    new EventHandler(mutichiaKhoiLuongTheoLanThiCong), null, null, 100, 0));
                }
                submenu = new DXSubMenuItem("Chia công tác được chọn có khối lượng theo lần thi công");
                e.Menu.Items.Add(submenu);
                textEdit = new RepositoryItemTextEdit();
                textEdit.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
                textEdit.Mask.EditMask = "N0";
                textEdit.EditValueChangedDelay = 0;
                textEdit.EditValueChangedFiringMode = DevExpress.XtraEditors.Controls.EditValueChangedFiringMode.Buffered;
                submenu.Items.Add(new DXEditMenuItem("", textEdit,
                new EventHandler(mutichiaKhoiLuongTheoLanThiCongMulti), null, null, 100, 0));





                SpreadsheetMenuItem GetKLTheoCongTac = new SpreadsheetMenuItem("Quy đổi đơn vị", fcn_Handle_Popup_TDKH_QuyDoiDonVi);
                GetKLTheoCongTac.Appearance.ForeColor = Color.Blue;
                e.Menu.Items.Add(GetKLTheoCongTac);

                //Nhóm công tác cha
                SpreadsheetMenuItem NhomCongTacCha = new SpreadsheetMenuItem("Gộp công tác cha", fcn_Handle_Popup_TDKH_DoBocChuan_GopCongTac);
                e.Menu.Items.Add(NhomCongTacCha);

                SpreadsheetMenuItem NhomPhanDoan = new SpreadsheetMenuItem("NHÓM CÔNG TÁC VÀO PHÂN ĐOẠN MỚI", fcn_Handle_Popup_TDKH_DoBocChuan_GopPhanDoan);
                e.Menu.Items.Add(NhomPhanDoan);

                SpreadsheetMenuItem NhomDienGiai = new SpreadsheetMenuItem("Nhóm các diễn giải", fcn_Handle_Popup_TDKH_GopDienGiai);
                e.Menu.Items.Add(NhomDienGiai);


                SpreadsheetMenuItem ChiaPhatSinh = new SpreadsheetMenuItem("Chia khối lượng phát sinh", fcn_Handle_Popup_TDKH_DoBocChuan_ChiaPhatSinh);
                e.Menu.Items.Add(ChiaPhatSinh);

                SpreadsheetMenuItem ResetCustomOrder = new SpreadsheetMenuItem("Đặt lại thứ tự công tác thủ công", fcn_Handle_Popup_TDKH_ResetCustomOrder);
                e.Menu.Items.Add(ResetCustomOrder);

                if (SharedControls.ctrl_DonViThucHienDuAnTDKH.SelectedDVTH?.IsGiaoThau == true)
                {
                    SpreadsheetMenuItem ChiTietTenGop = new SpreadsheetMenuItem("Chi tiết tên gộp", fcn_ChiTietTenGop);
                    e.Menu.Items.Add(ChiTietTenGop);
                }

            }
            else if (ws.Name == TDKH.SheetName_KeHoachKinhPhi)
            {
                Row crRow = ws.Rows[cell.RowIndex];
                CellRange range = wb.Range[TDKH.RANGE_KeHoach];
                if (!range.Contains(cell))
                    return;

                string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();


                var crDVTH = SharedControls.ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;


                SpreadsheetMenuCheckItem MuiTC = new SpreadsheetMenuCheckItem("CHẾ ĐỘ NHẬP KHÔNG TÍNH TOÁN LẠI", BaseFrom.CheDoNhapKhongTinhToan);
                MuiTC.Appearance.ForeColor = Color.Blue;
                MuiTC.Visible = true;
                MuiTC.Appearance.Font = new Font(MuiTC.Appearance.Font, FontStyle.Bold);
                MuiTC.CheckedChanged += fcn_Handle_Popup_TDKH_NhapKhongTinhToan;
                e.Menu.Items.Add(MuiTC);


                SpreadsheetMenuItem XoaCongTac = new SpreadsheetMenuItem("Xóa công tác được chọn", Fcn_XoaCongTac);
                e.Menu.Items.Add(XoaCongTac);

                e.Menu.Items.Add(CTacInNhom);

                SpreadsheetMenuItem recalc = new SpreadsheetMenuItem("TÍNH TOÁN LẠI CÁC SỐ LIỆU VỪA NHẬP!", fcn_Handle_Recalc);
                e.Menu.Items.Add(recalc);


                SpreadsheetMenuItem itemChangeState = new SpreadsheetMenuItem("Cập nhật trạng thái toàn bộ công tác theo khối lượng đã thi công!", fcn_Handle_Popup_TDKH_CapNhatTrangThaiThiCong);
                e.Menu.Items.Add(itemChangeState);
                SpreadsheetMenuItem itemChangeStateNhom = new SpreadsheetMenuItem("Cập nhật trạng thái toàn bộ NHÓM theo khối lượng đã thi công!", fcn_Handle_Popup_TDKH_CapNhatTrangThaiThiCongNhom);
                e.Menu.Items.Add(itemChangeStateNhom);

                SpreadsheetMenuItem itemLayKL = new SpreadsheetMenuItem("Lấy toàn bộ khối lượng kế hoạch sang khối lượng Hợp đồng chi tiết!", sb_CapNhapKLHDChiTiet_Click);
                e.Menu.Items.Add(itemLayKL);

                SpreadsheetMenuItem AnHien = new SpreadsheetMenuItem("Ẩn/Hiện Kinh phí phân bổ", fcn_Handle_Popup_TDKH_AnHienKinhPhiPhanBo);
                e.Menu.Items.Add(AnHien);

                var submenuCheckChildNonRecursive = new DXSubMenuItem("Chọn/Bỏ chọn các mục con trực tiếp");
                SpreadsheetMenuItem Check1 = new SpreadsheetMenuItem("Chọn",
                    (s, a) => { CheckCongTacCon(ws.SelectedCell.First().RowIndex, false, true); });
                SpreadsheetMenuItem UnCheck1 = new SpreadsheetMenuItem("Bỏ chọn",
                    (s, a) => { CheckCongTacCon(ws.SelectedCell.First().RowIndex, false, false); });
                submenuCheckChildNonRecursive.Items.Add(Check1);
                submenuCheckChildNonRecursive.Items.Add(UnCheck1);
                e.Menu.Items.Add(submenuCheckChildNonRecursive);

                var submenuCheckChildRecursive = new DXSubMenuItem("Chọn/Bỏ chọn tất cả các mục con");
                SpreadsheetMenuItem Check2 = new SpreadsheetMenuItem("Chọn",
                    (s, a) => { CheckCongTacCon(ws.SelectedCell.First().RowIndex, true, true); });
                SpreadsheetMenuItem UnCheck2 = new SpreadsheetMenuItem("Bỏ chọn",
                    (s, a) => { CheckCongTacCon(ws.SelectedCell.First().RowIndex, true, false); });
                submenuCheckChildRecursive.Items.Add(Check2);
                submenuCheckChildRecursive.Items.Add(UnCheck2);
                e.Menu.Items.Add(submenuCheckChildRecursive);


                var submenuCheckCongTacBoiDen = new DXSubMenuItem("Chọn/Bỏ chọn các công tác đã bôi đen");
                SpreadsheetMenuItem CheckCtBoiDen = new SpreadsheetMenuItem("Chọn", (s, a) => { ChecCongTacDaChon(true); });
                SpreadsheetMenuItem UnCheckCtBoiDen = new SpreadsheetMenuItem("Bỏ Chọn", (s, a) => { ChecCongTacDaChon(false); });
                submenuCheckCongTacBoiDen.Items.Add(CheckCtBoiDen);
                submenuCheckCongTacBoiDen.Items.Add(UnCheckCtBoiDen);
                e.Menu.Items.Add(submenuCheckCongTacBoiDen);

                var submenuCopyThiCong = new DXSubMenuItem("Lấy ngày thi công sang ngày kế hoạch CÔNG TÁC hoặc NHÓM được chọn");
                SpreadsheetMenuItem NTCNhom = new SpreadsheetMenuItem("Nhóm", (s, a) => { Fcn_CopyThiCongSangKH(MyConstant.TYPEROW_Nhom); });
                SpreadsheetMenuItem NTCCtac = new SpreadsheetMenuItem("Công tác", (s, a) => { Fcn_CopyThiCongSangKH(MyConstant.TYPEROW_CVCha); });
                submenuCopyThiCong.Items.Add(NTCNhom);
                submenuCopyThiCong.Items.Add(NTCCtac);
                e.Menu.Items.Add(submenuCopyThiCong);

                var DonGiaNhanThau = new DXSubMenuItem("Lấy đơn giá nhận thầu đẩy sang đơn giá giao thầu cho CÔNG TÁC hoặc NHÓM được chọn");
                SpreadsheetMenuItem NTNhom = new SpreadsheetMenuItem("Nhóm", (s, a) => { Fcn_CopyDonGiaNhanThauSangGiaoThau(MyConstant.TYPEROW_Nhom, false); });
                SpreadsheetMenuItem NTCtac = new SpreadsheetMenuItem("Công tác", (s, a) => { Fcn_CopyDonGiaNhanThauSangGiaoThau(MyConstant.TYPEROW_CVCha, false); });
                DonGiaNhanThau.Items.Add(NTNhom);
                DonGiaNhanThau.Items.Add(NTCtac);
                e.Menu.Items.Add(DonGiaNhanThau);
                var DonGiaGiaoThau = new DXSubMenuItem("Lấy đơn giá giao thầu đẩy sang đơn giá nhận thầu cho CÔNG TÁC hoặc NHÓM được chọn");
                SpreadsheetMenuItem GTNhom = new SpreadsheetMenuItem("Nhóm", (s, a) => { Fcn_CopyDonGiaNhanThauSangGiaoThau(MyConstant.TYPEROW_Nhom, true); });
                SpreadsheetMenuItem GTCtac = new SpreadsheetMenuItem("Công tác", (s, a) => { Fcn_CopyDonGiaNhanThauSangGiaoThau(MyConstant.TYPEROW_CVCha, true); });
                DonGiaGiaoThau.Items.Add(GTNhom);
                DonGiaGiaoThau.Items.Add(GTCtac);
                e.Menu.Items.Add(DonGiaGiaoThau);

                var subMenuAddDays = new DXSubMenuItem("Dời ngày bắt đầu/kết thúc các công tác đã chọn");

                foreach (TypeUpdateDateEnum en in Enum.GetValues(typeof(TypeUpdateDateEnum)))
                {
                    var desc = en.GetEnumDescription();
                    var subm = new DXSubMenuItem(desc);


                    var textEdit1 = new RepositoryItemTextEdit();
                    textEdit1.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
                    textEdit1.Mask.EditMask = "N0";
                    textEdit1.EditValueChangedDelay = 0;
                    textEdit1.EditValueChangedFiringMode = DevExpress.XtraEditors.Controls.EditValueChangedFiringMode.Buffered;
                    var newsub = new DXEditMenuItem("", textEdit1,
                    new EventHandler(fcn_UpdateDate), null, null, 100, 0);
                    newsub.Appearance.Name = ((int)en).ToString();
                    subm.Items.Add(newsub);

                    subMenuAddDays.Items.Add(subm);


                }
                e.Menu.Items.Add(subMenuAddDays);


                if (typeRow == MyConstant.TYPEROW_CVCha)
                {
                    SpreadsheetMenuItem itemLuuCongTacNguoiDung = new SpreadsheetMenuItem("Lưu thành công tác người dùng", fcn_Handle_Popup_TDKH_LuuDinhMucNguoiDung);
                    e.Menu.Items.Add(itemLuuCongTacNguoiDung);

                    SpreadsheetMenuItem ChiaPhatSinh = new SpreadsheetMenuItem("Thay đổi đơn giá thi công", fcn_Handle_Popup_TDKH_ThayDoiDonGiaThiCong);
                    e.Menu.Items.Add(ChiaPhatSinh);

                    //SpreadsheetMenuItem CapNhatNgayTC = new SpreadsheetMenuItem("Lấy ngày thi công từ kế hoạch", fcn_Handle_Popup_TDKH_LayNgayThiCongTuKeHoach);
                    //e.Menu.Items.Add(CapNhatNgayTC);



                    SpreadsheetMenuItem ThemVatTu = new SpreadsheetMenuItem("Thêm VẬT TƯ cho các công tác đã chọn", fcn_Handle_Popup_TDKH_ThemVatTuNhieuCongTac);
                    e.Menu.Items.Add(ThemVatTu);


                    SpreadsheetMenuItem TachVatTu = new SpreadsheetMenuItem("TÁCH NHÂN CÔNG riêng thành nhóm người dùng", fcn_Handle_Popup_TDKH_TachNhanCong);
                    e.Menu.Items.Add(TachVatTu);

                    #region Get đơn giá
                    SpreadsheetMenuItem GetHaoPhi = new SpreadsheetMenuItem("Lấy đơn giá từ hao phí", fcn_Handle_Popup_TDKH_LayDonGiaToanBo);
                    e.Menu.Items.Add(GetHaoPhi);

                    SpreadsheetMenuItem GetDG = new SpreadsheetMenuItem("Lấy đơn giá theo tỷ lệ", fcn_Handle_Popup_TDKH_LayDonGiaTheoTyLe);
                    GetDG.Appearance.ForeColor = Color.Blue;
                    e.Menu.Items.Add(GetDG);


                    SpreadsheetMenuItem ResetHP = new SpreadsheetMenuItem("Lấy hao phí mặc định", fcn_Handle_Popup_TDKH_LayHaoPhiMacDinh);
                    ResetHP.Appearance.ForeColor = Color.Blue;
                    e.Menu.Items.Add(ResetHP);
                    #endregion
                }
                else if (typeRow == MyConstant.TYPEROW_Nhom/* && !crDVTH.IsGiaoThau*/)
                {
                    var SubMenuNhom = new DXSubMenuItem("THAO TÁC NHÓM");
                    SubMenuNhom.Appearance.ForeColor = Color.Blue;
                    e.Menu.Items.Add(SubMenuNhom);

                    SpreadsheetMenuItem STTND = new SpreadsheetMenuItem("Lấy STT người dùng và STT đọc vào từ Nhóm GIAO THẦU cho NHÓM NHẬN THẦU!", Fcn_LaySTTNguoiDung);
                    SubMenuNhom.Items.Add(STTND);
                    SpreadsheetMenuItem TongDonGia = new SpreadsheetMenuItem("Nội suy đơn giá từ công tác!", fcn_Handle_Popup_TDKH_LayDonGiaNhom);
                    SubMenuNhom.Items.Add(TongDonGia);
                    SpreadsheetMenuItem TongDonGiaThiCong = new SpreadsheetMenuItem("Nội suy đơn giá thi công từ công tác!", fcn_Handle_Popup_TDKH_LayDonGiaTCNhom);
                    SubMenuNhom.Items.Add(TongDonGiaThiCong);

                    SpreadsheetMenuItem TongKL = new SpreadsheetMenuItem("Lấy tổng Khối lượng từ công tác!", fcn_Handle_Popup_TDKH_TongKhoiLuongNhom);
                    SubMenuNhom.Items.Add(TongKL);


                    SpreadsheetMenuItem TinhNgay = new SpreadsheetMenuItem("Tính lại ngày nhóm công tác", FormMainHelper.fcn_Handle_Popup_TDKH_LayNgayNhom);
                    SubMenuNhom.Items.Add(TinhNgay);


                    SpreadsheetMenuItem TinhKL = new SpreadsheetMenuItem("Tính lại KHỐI LƯỢNG công tác con của NHÓM công tác", fcn_Handle_Popup_TDKH_TinhKLCTNhom);
                    SubMenuNhom.Items.Add(TinhKL);

                    SpreadsheetMenuItem TinhNgayCT = new SpreadsheetMenuItem("Cập nhật ngày NHÓM cho Công tác", FormMainHelper.fcn_Handle_Popup_TDKH_LayNgayCongTacTheoNhom);
                    SubMenuNhom.Items.Add(TinhNgayCT);

                    SpreadsheetMenuItem XoaDuLieu = new SpreadsheetMenuItem("Xóa dữ liệu nhóm", fcn_Handle_Popup_TDKH_XoaDuLieuNhom);
                    SubMenuNhom.Items.Add(XoaDuLieu);
                }

                if (!crDVTH.IsGiaoThau)
                {
                    SpreadsheetMenuItem CapNhatKhoiLuongThiCong = new SpreadsheetMenuItem("CẬP NHẬT TOÀN BỘ KHỐI LƯỢNG THI CÔNG", fcn_Handle_Popup_TDKH_LayKhoiLuongThiCong);
                    CapNhatKhoiLuongThiCong.Appearance.ForeColor = Color.Red;
                    e.Menu.Items.Add(CapNhatKhoiLuongThiCong);

                    //SpreadsheetMenuItem LayNgayKeHoach = new SpreadsheetMenuItem("Lấy ngày kế hoạch từ Đơn Vị Giao Thầu", fcn_Handle_Popup_TDKH_LayNgayKeHoachTuGiaoThau);
                    //e.Menu.Items.Add(LayNgayKeHoach);

                    var SubLayNgayKH = new DXSubMenuItem("Lấy Ngày kế hoạch từ đơn vị Giao Thầu");
                    SpreadsheetMenuItem NBD = new SpreadsheetMenuItem("Ngày bắt đầu", (s, a) => { fcn_Handle_Popup_TDKH_LayNgayKeHoachTuGiaoThau(NBD: true); });
                    SpreadsheetMenuItem NKT = new SpreadsheetMenuItem("Ngày kết thúc", (s, a) => { fcn_Handle_Popup_TDKH_LayNgayKeHoachTuGiaoThau(NKT: true); });
                    SpreadsheetMenuItem All = new SpreadsheetMenuItem("Ngày bắt đầu và kết thúc", (s, a) => { fcn_Handle_Popup_TDKH_LayNgayKeHoachTuGiaoThau(NBD: true, NKT: true); });
                    SubLayNgayKH.Items.Add(NBD);
                    SubLayNgayKH.Items.Add(NKT);
                    SubLayNgayKH.Items.Add(All);
                    e.Menu.Items.Add(SubLayNgayKH);

                    SpreadsheetMenuItem LayKLKeHoachAll = new SpreadsheetMenuItem("Lấy Toàn bộ kế hoạch (Ngày, khối lượng tổng, KL hàng ngày) từ Đơn Vị Giao Thầu", fcn_Handle_Popup_TDKH_LayKLKHALL);
                    SpreadsheetMenuItem LayKLKeHoachAllNhom = new SpreadsheetMenuItem("Lấy Toàn bộ kế hoạch (Ngày, khối lượng tổng, KL hàng ngày) của Nhóm công tác CÓ LIÊN KẾT NHÓM từ Đơn Vị Giao Thầu", fcn_Handle_Popup_TDKH_LayKLKHALLNhom);
                    e.Menu.Items.Add(LayKLKeHoachAll);
                    e.Menu.Items.Add(LayKLKeHoachAllNhom);
                    SpreadsheetMenuItem LayKLKeHoachAllNhanThau = new SpreadsheetMenuItem("Lấy Toàn bộ kế hoạch (Ngày, khối lượng tổng, KL hàng ngày) công tác được chọn cho công tác tương ứng bên Giao thầu", fcn_Handle_Popup_TDKH_LayKLKHALLNhanThau);
                    e.Menu.Items.Add(LayKLKeHoachAllNhanThau);
                    SpreadsheetMenuItem LayKLKeHoachAllNhanThauNhom = new SpreadsheetMenuItem("Lấy Toàn bộ kế hoạch (Ngày, khối lượng tổng, KL hàng ngày) NHÓM được chọn CÓ LIÊN KẾT NHÓM cho NHÓM tương ứng bên Giao thầu", fcn_Handle_Popup_TDKH_LayKLKHALLNhanThauNhom);
                    e.Menu.Items.Add(LayKLKeHoachAllNhanThauNhom);

                    SpreadsheetMenuItem LienKetNhom = new SpreadsheetMenuItem("Liên kết nhóm được chọn với nhóm ở Đơn vị giao thầu", fcn_Handle_Popup_TDKH_LienKetNhom);
                    e.Menu.Items.Add(LienKetNhom);

                    var submenuLayDonGiaNhom = new DXSubMenuItem("Lấy ĐƠN GIÁ KẾ HOẠCH NHÓM ở Đơn vị Giao Thầu đẩy cho Đơn giá thi công hoặc kế hoạch cho Nhóm được chọn");
                    SpreadsheetMenuItem DGKH = new SpreadsheetMenuItem("Đơn giá kế hoạch", (s, a) => { Fcn_CopyDonGia("DonGia", "DonGia"); });
                    SpreadsheetMenuItem DGTC = new SpreadsheetMenuItem("Đơn giá thi công", (s, a) => { Fcn_CopyDonGia("DonGia", "DonGiaThiCong"); });
                    submenuLayDonGiaNhom.Items.Add(DGKH);
                    submenuLayDonGiaNhom.Items.Add(DGTC);
                    e.Menu.Items.Add(submenuLayDonGiaNhom);

                    var submenuLayDonGiaNhomTC = new DXSubMenuItem("Lấy ĐƠN GIÁ THI CÔNG NHÓM ở Đơn vị Giao Thầu đẩy cho Đơn giá thi công hoặc kế hoạch cho Nhóm được chọn");
                    SpreadsheetMenuItem DGTC_KH = new SpreadsheetMenuItem("Đơn giá kế hoạch", (s, a) => { Fcn_CopyDonGia("DonGiaThiCong", "DonGia"); });
                    SpreadsheetMenuItem DGTC_TC = new SpreadsheetMenuItem("Đơn giá thi công", (s, a) => { Fcn_CopyDonGia("DonGiaThiCong", "DonGiaThiCong"); });
                    submenuLayDonGiaNhomTC.Items.Add(DGTC_KH);
                    submenuLayDonGiaNhomTC.Items.Add(DGTC_TC);
                    e.Menu.Items.Add(submenuLayDonGiaNhomTC);
                }
                else
                {
                    SpreadsheetMenuItem LayNgayKeHoach = new SpreadsheetMenuItem("Lấy ngày kế hoạch lớn nhất và nhỏ nhất từ đơn vị Nhận thầu", fcn_Handle_Popup_TDKH_LayNgayKeHoachTuNhanThauMinMax);
                    e.Menu.Items.Add(LayNgayKeHoach);

                    SpreadsheetMenuItem LayNgayKeHoachNhanThau = new SpreadsheetMenuItem("Lấy ngày kế hoạch từ Đơn Vị nhận thầu cho công tác được chọn", fcn_Handle_Popup_TDKH_LayNgayKeHoachTuNhanThau);
                    e.Menu.Items.Add(LayNgayKeHoachNhanThau);

                    SpreadsheetMenuItem LienKetNhomAll = new SpreadsheetMenuItem("Liên kết tất cả nhóm ở Giao thầu với bên Nhận thầu", fcn_Handle_Popup_TDKH_LienKetNhomAll);
                    LienKetNhomAll.Appearance.ForeColor = Color.Red;
                    e.Menu.Items.Add(LienKetNhomAll);

                }

                SpreadsheetMenuItem TinhHnVatLieu = new SpreadsheetMenuItem("Tính lại vật tư theo công tác", fcn_Handle_Popup_TDKH_TinhHangNgayVatTu);
                e.Menu.Items.Add(TinhHnVatLieu);
                if (ce_LocTheoNgay.Checked)
                {
                    SpreadsheetMenuItem LayKLDocVao = new SpreadsheetMenuItem("Lấy khối lượng đọc vào cho công tác được chọn", fcn_Handle_Popup_TDKH_LayKLDocVao);
                    e.Menu.Items.Add(LayKLDocVao);

                    SpreadsheetMenuItem Lay0KLDocVao = new SpreadsheetMenuItem("Nhập 0 cho Khối lượng đầu vào (Các công tác chưa nhập)", fcn_Handle_Popup_TDKH_Lay0KLDocVao);
                    e.Menu.Items.Add(Lay0KLDocVao);
                }


            }


            else if (TDKH.sheetsName.Contains(ws.Name) && Array.IndexOf(TDKH.sheetsName, ws.Name) >= 2)
            {
                Row crRow = ws.Rows[cell.RowIndex];
                string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                SpreadsheetMenuItem PTVT = new SpreadsheetMenuItem("Quản lý Danh sách phân tích vật tư", fcn_Handle_Popup_TDKH_PTVT);
                PTVT.Appearance.ForeColor = Color.Red;
                e.Menu.Items.Add(PTVT);

                if (typeRow == MyConstant.TYPEROW_CVCha)
                {
                    SpreadsheetMenuItem GetDG = new SpreadsheetMenuItem("Lấy đơn giá theo tỷ lệ", fcn_Handle_Popup_TDKH_LayDonGiaTheoTyLe);
                    GetDG.Appearance.ForeColor = Color.Blue;
                    e.Menu.Items.Add(GetDG);
                }
            }
            SpreadsheetMenuItem AnSTT = new SpreadsheetMenuItem("Ẩn cột STT đọc vào và STT người dùng!", fcn_Handle_Popup_TDKH_AnSTT);
            e.Menu.Items.Add(AnSTT);
            SpreadsheetMenuItem HienSTT = new SpreadsheetMenuItem("Hiện cột STT đọc vào và STT người dùng!", fcn_Handle_Popup_TDKH_HienSTT);
            e.Menu.Items.Add(HienSTT);

        }

        private void fcn_UpdateDate(object sender, EventArgs a)
        {
            DXEditMenuItem item = sender as DXEditMenuItem;
            if (!int.TryParse(item.EditValue.ToString(), out int so) || so == 0)
            {
                MessageShower.ShowError("Vui lòng nhập đúng định dạng số 1,2,3,4........và khác 0");
                return;
            }
            var type = (TypeUpdateDateEnum)int.Parse(item.Appearance.Name);
            DialogResult rs = MessageShower.ShowYesNoQuestion($"Bạn có muốn dời {so} Ngày cho \"{type.GetEnumDescription()}\" các công tác đã chọn không??");
            if (rs == DialogResult.No)
                return;

            //WaitFormHelper.ShowWaitForm("Đang cập nhật ngày");
            IncreaseDateKeHoach(type, so);
            //WaitFormHelper.CloseWaitForm();

        }


        private void fcn_ChiTietTenGop(object sender, EventArgs eventArgs)
        {
            XtraForm_TenGopNhomCongTac form = new XtraForm_TenGopNhomCongTac();
            form.ShowDialog();
        }

        private void fcn_Handle_Popup_TDKH_QuyDoiDonVi(object sender, EventArgs eventArgs)
        {
            XtraForm_QuyDoiDonVi form = new XtraForm_QuyDoiDonVi();
            if (form.ShowDialog() == DialogResult.OK)
            {
                TDKHHelper.LoadCongTacDoBoc();
                return;
            }


        }
        private void fcn_Handle_Popup_TDKH_LayDonGiaTheoTyLe(object sender, EventArgs eventArgs)
        {
            XtraForm_GetDonGiaThiCong form = new XtraForm_GetDonGiaThiCong();
            form.ShowDialog();
        }
        private void fcn_Handle_Popup_TDKH_PTVT(object sender, EventArgs eventArgs)
        {
            string name = spsheet_TD_KH_LapKeHoach.ActiveWorksheet.Name;
            DoBocVatTu Type = (DoBocVatTu)Array.IndexOf(TDKH.sheetsName, name);
            XtraForm_LuaChonPhanTichVatTu PTVT = new XtraForm_LuaChonPhanTichVatTu(Type);
            //PTVT.Fcn_LoadData(Type, "AND hp.PhanTichKeHoach=1");
            PTVT.ShowDialog();
            TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, name));
        }

        private void fcn_Handle_Popup_TDKH_LayHaoPhiMacDinh(object sender, EventArgs eventArgs)
        {
            XtraForm_LayHaoPhiMacDinh form = new XtraForm_LayHaoPhiMacDinh();
            form.ShowDialog();
        }

        private void fcn_Handle_Popup_TDKH_LayDonGiaToanBo(object sender, EventArgs eventArgs)
        {
            XtraForm_GetDonGiaByHaoPhi form = new XtraForm_GetDonGiaByHaoPhi();
            form.ShowDialog();
        }

        public void ChecCongTacDaChon(bool isCheck)
        {
            var spsheet = SharedControls.spsheet_TD_KH_LapKeHoach;
            var wb = spsheet.Document;
            var ws = spsheet.ActiveWorksheet;

            if (ws.Name != TDKH.SheetName_KeHoachKinhPhi)
                return;
            var dicCode = new Dictionary<string, int>();
            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            var colCheck = ws.Columns[TDKH.COL_Chon];
            var rangeSelected = ws.GetSelectedRanges().First();
            var rangeData = ws.Range[TDKH.RANGE_KeHoach];

            wb.BeginUpdate();
            for (int i = rangeSelected.TopRowIndex; i <= rangeSelected.BottomRowIndex; i++)
            {
                if (i > rangeData.TopRowIndex && i < rangeData.BottomRowIndex)
                    ws.Rows[i][TDKH.COL_Chon].SetValue(isCheck);
            }
            wb.EndUpdate();
        }
        public void Fcn_UpdateGiaTriNghiemThu(string ColName = null)
        {
            SpreadsheetControl NameSheet = Fcn_Spreadsheet();
            NameSheet.BeginUpdate();
            IWorkbook workbook = NameSheet.Document;
            Worksheet worksheet = workbook.Worksheets[MyConstant.CONST_SheetName_TTNghiemThu];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, double> dickl = new Dictionary<string, double>();
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            for (int i = Dot1.TopRowIndex; i <= Dot1.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == "HTDot")
                    break;
                string Code = Crow[Name["Code"]].Value.ToString();
                if (string.IsNullOrEmpty(Code))
                    continue;
                double KL = ColName is null ? 0 : Crow[Name[ColName]].Value.NumericValue;
                Crow[Name["KyNayHopDongNghiemThu"]].SetValue(KL);
                dickl.Add(Code, KL);
            }
            string dbString = $"SELECT * FROM {MyConstant.TBL_hopdongAB_HT} HT " +
               $" WHERE HT.Code IN ({MyFunction.fcn_Array2listQueryCondition(dickl.Select(x => x.Key).ToArray())})";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            foreach (DataRow row in dt.Rows)
            {
                row["KyNayHopDongNghiemThu"] = dickl[row["Code"].ToString()];
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, MyConstant.TBL_hopdongAB_HT);
            MessageShower.ShowInformation("Đã cập nhập THÀNH CÔNG");
            NameSheet.EndUpdate();
        }
        public void Fcn_CopyDonGia(string InputLoaiDonDia, string DesLoaiDonGia)
        {
            var spsheet = SharedControls.spsheet_TD_KH_LapKeHoach;
            var wb = spsheet.Document;
            var ws = spsheet.ActiveWorksheet;

            if (ws.Name != TDKH.SheetName_KeHoachKinhPhi)
                return;
            List<string> lstCodeNhom = new List<string>();
            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            var rangeSelected = ws.GetUsedRange();
            var rangeData = ws.Range[TDKH.RANGE_KeHoach];

            wb.BeginUpdate();
            for (int i = rangeSelected.TopRowIndex; i <= rangeSelected.BottomRowIndex; i++)
            {
                if (i > rangeData.TopRowIndex && i < rangeData.BottomRowIndex)
                {
                    Row Crow = ws.Rows[i];
                    bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                    if (Chon)
                    {
                        string Type = Crow[dic[MyConstant.TYPEROW]].Value.ToString();
                        if (Type == MyConstant.TYPEROW_Nhom)
                        {
                            lstCodeNhom.Add(Crow[dic[TDKH.COL_Code]].Value.ToString());
                        }
                    }
                    Crow[dic["Chon"]].SetValue(false);
                }
            }
            wb.EndUpdate();
            if (lstCodeNhom.Any())
            {
                string dbString = $"SELECT NHOM.*,NHOM1.{InputLoaiDonDia} AS DonGiaDauVao FROM {TDKH.TBL_NhomCongTac} NHOM LEFT JOIN {TDKH.TBL_NhomCongTac} NHOM1 ON NHOM1.Code=Nhom.CodeNhomGiaoThau" +
                    $" WHERE NHOM.Code IN ({MyFunction.fcn_Array2listQueryCondition(lstCodeNhom.ToArray())})";
                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                foreach (DataRow item in dt.Rows)
                {
                    if (item["DonGiaDauVao"] == DBNull.Value)
                        continue;
                    item[DesLoaiDonGia] = item["DonGiaDauVao"];
                }
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_NhomCongTac);
            }
            LoadSheetTDKH();
            MessageShower.ShowInformation("Đã cập nhập ĐƠN GIÁ THÀNH CÔNG");
        }
        public void Fcn_CopyThiCongSangKH(string TypeRow)
        {
            var spsheet = SharedControls.spsheet_TD_KH_LapKeHoach;
            var wb = spsheet.Document;
            var ws = spsheet.ActiveWorksheet;

            if (ws.Name != TDKH.SheetName_KeHoachKinhPhi)
                return;
            var dicCode = new Dictionary<string, KeyValuePair<DateTime, DateTime>>();
            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            var rangeSelected = ws.GetUsedRange();
            var rangeData = ws.Range[TDKH.RANGE_KeHoach];

            wb.BeginUpdate();
            for (int i = rangeSelected.TopRowIndex; i <= rangeSelected.BottomRowIndex; i++)
            {
                if (i > rangeData.TopRowIndex && i < rangeData.BottomRowIndex)
                {
                    Row Crow = ws.Rows[i];
                    bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                    if (Chon)
                    {
                        string Type = Crow[dic[MyConstant.TYPEROW]].Value.ToString();
                        if (Type == TypeRow)
                        {
                            string NBD = Crow[dic[TDKH.COL_NgayBatDauThiCong]].Value.ToString();
                            string NKT = Crow[dic[TDKH.COL_NgayKetThucThiCong]].Value.ToString();
                            if (!string.IsNullOrEmpty(NBD) && !string.IsNullOrEmpty(NKT))
                            {
                                dicCode.Add(Crow[dic[TDKH.COL_Code]].Value.ToString(),
                                    new KeyValuePair<DateTime, DateTime>(Crow[dic[TDKH.COL_NgayBatDauThiCong]].Value.DateTimeValue, Crow[dic[TDKH.COL_NgayKetThucThiCong]].Value.DateTimeValue));
                            }
                        }
                    }
                    Crow[dic["Chon"]].SetValue(false);
                }
            }
            wb.EndUpdate();
            if (dicCode.Any())
            {
                string Tbl = TypeRow == MyConstant.TYPEROW_Nhom ? TDKH.TBL_NhomCongTac : TDKH.TBL_ChiTietCongTacTheoKy;
                string dbString = $"SELECT * FROM {Tbl} WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(dicCode.Select(x => x.Key).ToArray())})";
                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                foreach (DataRow item in dt.Rows)
                {
                    KeyValuePair<DateTime, DateTime> Date = dicCode[item["Code"].ToString()];
                    item["NgayBatDau"] = Date.Key.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                    item["NgayKetThuc"] = Date.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                }
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, Tbl);
            }
            LoadSheetTDKH();
            MessageShower.ShowInformation("Đã cập nhập ngày thi công sang kế hoạch");
        }
        private void Fcn_XoaCongTac(object sender, EventArgs eventArgs)
        {
            var spsheet = SharedControls.spsheet_TD_KH_LapKeHoach;
            var wb = spsheet.Document;
            var ws = spsheet.ActiveWorksheet;

            if (ws.Name != TDKH.SheetName_KeHoachKinhPhi)
                return;
            WaitFormHelper.ShowWaitForm("Đang XÓA CÔNG TÁC!!!!");
            var dicCode = new Dictionary<string, long>();
            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            var rangeSelected = ws.GetUsedRange();
            var rangeData = ws.Range[TDKH.RANGE_KeHoach];
            List<string> lstcode = new List<string>();
            wb.BeginUpdate();
            for (int i = rangeSelected.TopRowIndex; i <= rangeSelected.BottomRowIndex; i++)
            {
                if (i > rangeData.TopRowIndex && i < rangeData.BottomRowIndex)
                {
                    Row Crow = ws.Rows[i];
                    bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                    if (Chon)
                    {
                        string Type = Crow[dic[MyConstant.TYPEROW]].Value.ToString();
                        if (Type == MyConstant.TYPEROW_CVCha)
                        {
                            lstcode.Add(Crow[dic["Code"]].Value.ToString());
                        }
                    }
                    Crow[dic["Chon"]].SetValue(false);
                }
            }
            wb.EndUpdate();
            if (!lstcode.Any())
            {
                return;
                WaitFormHelper.CloseWaitForm();
            }
            DuAnHelper.DeleteDataRows(TDKH.TBL_ChiTietCongTacTheoKy, lstcode);
            WaitFormHelper.CloseWaitForm();
            LoadSheetTDKH();
            MessageShower.ShowInformation("Xóa Công tác THÀNH CÔNG!!!!");
        }
        public void Fcn_CopyDonGiaNhanThauSangGiaoThau(string TypeRow, bool GiaoThau)
        {
            var spsheet = SharedControls.spsheet_TD_KH_LapKeHoach;
            var wb = spsheet.Document;
            var ws = spsheet.ActiveWorksheet;

            if (ws.Name != TDKH.SheetName_KeHoachKinhPhi)
                return;
            var dicCode = new Dictionary<string, long>();
            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            var rangeSelected = ws.GetUsedRange();
            var rangeData = ws.Range[TDKH.RANGE_KeHoach];

            wb.BeginUpdate();
            for (int i = rangeSelected.TopRowIndex; i <= rangeSelected.BottomRowIndex; i++)
            {
                if (i > rangeData.TopRowIndex && i < rangeData.BottomRowIndex)
                {
                    Row Crow = ws.Rows[i];
                    bool Chon = Crow[dic["Chon"]].Value.BooleanValue;
                    if (Chon)
                    {
                        string Type = Crow[dic[MyConstant.TYPEROW]].Value.ToString();
                        if (Type == TypeRow)
                        {
                            long DonGia = GiaoThau ? (long)Crow[dic[TDKH.COL_DonGia]].Value.NumericValue : (long)Crow[dic[TDKH.COL_DonGiaThiCong]].Value.NumericValue;
                            dicCode.Add(Crow[dic[TDKH.COL_Code]].Value.ToString(), DonGia);
                        }
                    }
                    Crow[dic["Chon"]].SetValue(false);
                }
            }
            wb.EndUpdate();
            if (dicCode.Any())
            {
                string Tbl = TypeRow == MyConstant.TYPEROW_Nhom ? TDKH.TBL_NhomCongTac : TDKH.TBL_ChiTietCongTacTheoKy;
                string dbString = $"SELECT * FROM {Tbl} WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(dicCode.Select(x => x.Key).ToArray())})";
                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string NameDG = GiaoThau ? "DonGiaThiCong" : "DonGia";
                foreach (DataRow item in dt.Rows)
                {
                    item[NameDG] = dicCode[item["Code"].ToString()];
                }
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, Tbl);
            }
            LoadSheetTDKH();
            MessageShower.ShowInformation("Đã cập nhập ĐƠN GIÁ THÀNH CÔNG!!!!");
        }

        public void CheckCongTacCon(int rowind, bool isRecursive, bool isCheck)
        {
            var spsheet = SharedControls.spsheet_TD_KH_LapKeHoach;
            var wb = spsheet.Document;
            var ws = spsheet.ActiveWorksheet;

            if (ws.Name != TDKH.SheetName_KeHoachKinhPhi)
                return;

            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            var colCheck = ws.Columns[TDKH.COL_Chon];

            var rangeData = ws.Range[TDKH.RANGE_KeHoach];

            wb.BeginUpdate();
            var crRow = ws.Rows[rowind];
            var cells = ws.Columns[dic[TDKH.COL_RowCha]].Search((crRow.Index + 1).ToString(), MyConstant.MySearchOptions);

            foreach (var cell in cells)
            {
                ws.Rows[cell.RowIndex][TDKH.COL_Chon].SetValue(isCheck);
                if (isRecursive)
                {
                    CheckCongTacCon(cell.RowIndex, isRecursive, isCheck);
                }
            }

            wb.EndUpdate();
        }


        public void IncreaseDateKeHoach(TypeUpdateDateEnum type, int soNgay)
        {
            var spsheet = SharedControls.spsheet_TD_KH_LapKeHoach;
            var wb = spsheet.Document;
            var ws = spsheet.ActiveWorksheet;

            if (ws.Name != TDKH.SheetName_KeHoachKinhPhi)
                return;
            var dicCode = new Dictionary<string, int>();
            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            wb.BeginUpdate();
            var range = ws.Range[TDKH.RANGE_KeHoach];
            //var colCheck = ws.Columns[TDKH.COL_Chon];
            //var search = colCheck.Search("TRUE", MyConstant.MySearchOptions);
            List<string> list = new List<string>();
            for (int i = range.TopRowIndex; i <= range.BottomRowIndex; i++)
            {
                var crRow = ws.Rows[i];
                string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
                string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                string vaCheck = crRow[TDKH.COL_Chon].Value.ToString();
                if (typeRow != MyConstant.TYPEROW_CVCha || vaCheck != true.ToString())
                {
                    continue;
                }
                List<string> updates = new List<string>();
                if (type != TypeUpdateDateEnum.Start)
                {
                    var endDate = crRow[dic[TDKH.COL_NgayKetThuc]].Value.DateTimeValue.AddDays(soNgay);
                    crRow[dic[TDKH.COL_NgayKetThuc]].SetValue(endDate);
                    updates.Add($"NgayKetThuc = '{endDate.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'");
                }

                if (type != TypeUpdateDateEnum.End)
                {
                    var start = crRow[dic[TDKH.COL_NgayBatDau]].Value.DateTimeValue.AddDays(soNgay);
                    crRow[dic[TDKH.COL_NgayBatDau]].SetValue(start);

                    updates.Add($"NgayBatDau = '{start.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'");
                }

                string dbString = $"UPDATE {Server.Tbl_TDKH_ChiTietCongTacTheoGiaiDoan} " +
                    $"SET {string.Join(", ", updates)} WHERE Code = '{code}'";
                list.Add(dbString);
            }
            wb.EndUpdate();
            if (list.Count == 0)
            {
                MessageShower.ShowWarning("Không có công tác nào được chọn");
                return;
            }
            try
            {
                DataProvider.InstanceTHDA.ExecuteNonQuery(string.Join(";\r\n", list));
                MessageShower.ShowInformation("Đã cập nhật");
            }
            catch (Exception ex)
            {
                MessageShower.ShowWarning("Lỗi cập nhật công tác");
                wb.History.Undo();
            }

        }
        private void fcn_Handle_Popup_TDKH_ThayDoiDonGiaHaoPhiVatTu(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            //Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);
            Cell cell = ws.SelectedCell[0];
            Row CrRow = ws.Rows[cell.RowIndex];

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            string codeFK = CrRow[dic[TDKH.COL_KHVT_Search]].Value.ToString();
            string codeCongTac = CrRow[dic[TDKH.COL_Code]].Value.ToString();


            Form_ThayDoiDonGiaThiCong form = new Form_ThayDoiDonGiaThiCong(codeFK, TypeKLHN.HaoPhiVatTu);
            if (form.ShowDialog() == DialogResult.OK)
            {
                //DinhMucHelper.CapNhatVatTuTheoHaoPhiVaoVatTu(codeCongTac, codeFK);
            }
        }
        private void fcn_Handle_Popup_TDKH_MuiThiCongVaoCT(object sender, EventArgs eventArgs)
        {
            mtc.Show();
            //var spsheetLoc = spsheet_TD_KH_LapKeHoach.Location;
            //Rectangle rec = spsheet_TD_KH_LapKeHoach.GetCellBounds(cell.TopRowIndex, cell.LeftColumnIndex);
            mtc.Location = new Point(this.Width / 2 - mtc.Width / 2, this.Height / 2 - mtc.Height / 2);
            mtc.BringToFront();
            mtc.Fcn_LoadData(null, null, true);
        }
        private void fcn_Handle_Popup_TDKH_MuiThiCongAuto(object sender, EventArgs eventArgs)
        {
            string dbString = $"SELECT * FROM {TDKH.Tbl_TDKH_MuiThiCong} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'";
            List<ChonMuiThiCong> MTC = DataProvider.InstanceTHDA.ExecuteQueryModel<ChonMuiThiCong>(dbString);
            if (!MTC.Any())
            {
                MessageShower.ShowError("Vui lòng Chuột Phải tạo danh sách MŨI THI CÔNG trước khi tạo tự động!!!!!!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang đẩy dữ liệu Mũi thi công tự động!!!!");
            dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeGiaiDoan\" = '{cbb_DBKH_ChonDot.SelectedValue}' AND CodeCha NOT NULL ";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            List<string> lstCode = new List<string>();
            foreach (DataRow row in dt.Rows)
            {
                int SortId = int.Parse(row["SortId"].ToString());
                ChonMuiThiCong Select = MTC.Where(x => x.SortId == SortId).FirstOrDefault();
                if (Select is null)
                    continue;
                lstCode.Add(row["Code"].ToString());
                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET CodeMuiThiCong = '{Select.Code}' WHERE Code = '{row["Code"]}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(lstCode);
            WaitFormHelper.CloseWaitForm();
            TDKHHelper.LoadCongTacDoBoc();
        }
        private void fcn_Handle_Popup_TDKH_MuiThiCong(object sender, EventArgs eventArgs)
        {
            XtraForm3 frm = new XtraForm3(UcType.TDKH_MUITHICONG, "Quản lý danh sách MŨI THI CÔNG");
            frm.ShowDialog();
        }

        private void fcn_Handle_Popup_TDKH_NhapKhongTinhToan(object sender, EventArgs eventArgs)
        {

            BaseFrom.CheDoNhapKhongTinhToan = !BaseFrom.CheDoNhapKhongTinhToan;
        }
        private void fcn_Handle_Popup_TDKH_ThayDoiDonGiaThiCong(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            Cell cell = ws.SelectedCell[0];
            Row CrRow = ws.Rows[cell.TopRowIndex];
            string code = CrRow[dic[TDKH.COL_Code]].Value.ToString();


            Form_ThayDoiDonGiaThiCong form = new Form_ThayDoiDonGiaThiCong(code, TypeKLHN.CongTac);
            if (form.ShowDialog() == DialogResult.OK)
            {
                MessageShower.ShowWarning("Đã cập nhật!");
            }
        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_ThayDoiDonGiaThiCong(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_GV_KH_ChiTietCacHMCongViec.Document;
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet; ;

            Cell cell = ws.SelectedCell[0];
            Row CrRow = ws.Rows[cell.TopRowIndex];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);
            string typeRow = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_TypeRow]].Value.ToString();
            string code = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_CodeCT]].Value.ToString();
            string codeGD = ws.Rows[cell.RowIndex][dic[GiaoViec.COL_CodeCTTheoGiaiDoan]].Value.ToString();

            Form_ThayDoiDonGiaThiCong form;
            if (typeRow == MyConstant.TYPEROW_CVCON)
            {
                form = new Form_ThayDoiDonGiaThiCong(code, TypeKLHN.GiaoViecCon);
            }
            else if (typeRow == MyConstant.TYPEROW_CVCha)
            {
                if (codeGD.HasValue())
                    form = new Form_ThayDoiDonGiaThiCong(codeGD, TypeKLHN.CongTac);
                else
                    form = new Form_ThayDoiDonGiaThiCong(code, TypeKLHN.GiaoViecCha);


            }
            else return;
            form.ShowDialog();
            //if (form.ShowDialog() == DialogResult.OK)
            //{
            //    MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(CrRow);
            //}
        }

        private void fcn_Handle_Popup_TDKH_LayKhoiLuongThiCong(object sender, EventArgs eventArgs)
        {
            DateTime NgayBatDau = SharedControls.de_Loc_TuNgay.DateTime.Date;
            DateTime NgayKetThuc = SharedControls.de_Loc_DenNgay.DateTime.Date;

            if (NgayBatDau == default || NgayKetThuc == default || NgayBatDau > NgayKetThuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn ngày hợp lệ");
                return;
            }
            var now = DateTime.Now.Date;


            if (NgayKetThuc > now)
                NgayKetThuc = now;

            if (NgayBatDau > NgayKetThuc)
            {
                MessageShower.ShowWarning("Vui lòng chọn ngày hiện tại hoặc quá khứ. Không thể nhập thi công cho ngày trong tương lại!");
                return;
            }

            var dr = MessageShower.ShowYesNoCancelQuestionWithCustomText(
                "CẢNH BÁO THAO TÁC\r\n" +
                "Thao tác này sẽ copy toàn bộ KHỐI LƯỢNG KẾ HOẠCH Sang KHỐI LƯỢNG THI CÔNG và không thể hoàn tác!",
                "Lựa chọn",
                "Toàn bộ công tác và nhóm", "Công tác và nhóm đã chọn", isDangerous: true);

            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];

            CellRange rangeData = ws.Range[TDKH.RANGE_KeHoach];
            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(rangeData);
            Dictionary<string, int> listId = new Dictionary<string, int>();
            Dictionary<string, int> listIdNhom = new Dictionary<string, int>();

            switch (dr)
            {
                case DialogResult.Yes:
                    for (int i = rangeData.TopRowIndex; i < rangeData.BottomRowIndex; i++)
                    {
                        Row crRow = ws.Rows[i];
                        string id = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();
                        string typeRow = crRow[dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();
                        if (Guid.TryParse(id, out Guid guid))
                        {
                            if (typeRow == MyConstant.TYPEROW_CVCha)
                                listId.Add(id, i);
                            else if (typeRow == MyConstant.TYPEROW_Nhom)
                                listIdNhom.Add(id, i);
                        }
                    }
                    break;
                case DialogResult.No:
                    for (int i = rangeData.TopRowIndex; i < rangeData.BottomRowIndex; i++)
                    {
                        Row crRow = ws.Rows[i];

                        if (crRow[TDKH.COL_Chon].Value.ToString() != true.ToString())
                            continue;
                        string id = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();

                        string typeRow = crRow[dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();
                        if (Guid.TryParse(id, out Guid guid))
                        {
                            if (typeRow == MyConstant.TYPEROW_CVCha)
                                listId.Add(id, i);
                            else if (typeRow == MyConstant.TYPEROW_Nhom)
                                listIdNhom.Add(id, i);
                        }
                    }
                    break;
                default:
                    return;
            }

            if (!listId.Any() && !listIdNhom.Any())
            {
                MessageShower.ShowWarning("Không có công tác, nhóm để cập nhật");
                return;
            }

            dr = MessageShower.ShowYesNoCancelQuestionWithCustomText(
                    "CẢNH BÁO THAO TÁC\r\n" +
                    "Thao tác này sẽ copy toàn bộ KHỐI LƯỢNG KẾ HOẠCH Sang KHỐI LƯỢNG THI CÔNG và không thể hoàn tác!\r\n" +
                    $"{listId.Count()} công tác và {listIdNhom.Count()} nhóm sẽ được cập nhật khối lượng",
                    "Lựa chọn",
                    "Cập nhật tất cả các ngày", "Chỉ các ngày chưa nhập khối lượng thi công", isDangerous: true);

            if (dr == DialogResult.Cancel)
                return;



            string note = (dr == DialogResult.Yes) ? "Khối lượng các ngày đã nhập sẽ bị ghi đè" : "Chỉ lấy khối lượng cho các ngày chưa nhập";

            if (MessageShower.ShowOkCancelInformation(
                "CẢNH BÁO THAO TÁC\r\n" +
                "Thao tác này sẽ copy toàn bộ KHỐI LƯỢNG KẾ HOẠCH Sang KHỐI LƯỢNG THI CÔNG và không thể hoàn tác!\r\n" +
                $"{listId.Count()} công tác và và {listIdNhom.Count()} nhóm sẽ được cập nhật khối lượng.\r\n" +
                note, "CẢNH BÁO") != DialogResult.OK)
                return;

            WaitFormHelper.ShowWaitForm("Đang cập nhật!");

            bool CapNhatAll = dr == DialogResult.Yes;
            foreach (var item in listId)
            {
                var code = item.Key;
                var dt = MyFunction.Fcn_CalKLKHNew(TypeKLHN.CongTac, new List<string> { code }, NgayBatDau, NgayKetThuc, ignoreKLNhanThau: true);

                string dbStringNhom = $"SELECT * FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} " +
                    $"WHERE CodeCongTacTheoGiaiDoan = '{code}' AND Ngay >= '{NgayBatDau.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' AND Ngay <= '{NgayKetThuc.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
                DataTable dthnNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbStringNhom);

                foreach (var hn in dt)
                {
                    var date = hn.Ngay;
                    string dateStr = date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                    var drow = dthnNhom.AsEnumerable().SingleOrDefault(x => x["Ngay"].ToString() == dateStr);
                    if (drow is null)
                    {
                        drow = dthnNhom.NewRow();
                        dthnNhom.Rows.Add(drow);

                        drow["CodeCongTacTheoGiaiDoan"] = code;
                        drow["Code"] = Guid.NewGuid();
                        drow["Ngay"] = dateStr;
                        if (hn.KhoiLuongKeHoach is null)
                            drow["KhoiLuongThiCong"] = DBNull.Value;
                        else
                            drow["KhoiLuongThiCong"] = hn.KhoiLuongKeHoach;
                    }
                    else if (CapNhatAll)
                    {
                        if (hn.KhoiLuongKeHoach is null)
                            drow["KhoiLuongThiCong"] = DBNull.Value;
                        else
                            drow["KhoiLuongThiCong"] = hn.KhoiLuongKeHoach;

                    }
                }
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dthnNhom, Server.Tbl_TDKH_KhoiLuongCongViecTungNgay);
            }
            foreach (var item in listIdNhom)
            {
                var code = item.Key;
                var dt = MyFunction.Fcn_CalKLKHNew(TypeKLHN.Nhom, new List<string> { code }, NgayBatDau, NgayKetThuc, ignoreKLNhanThau: true);

                string dbStringNhom = $"SELECT * FROM {Server.Tbl_TDKH_KhoiLuongCongViecTungNgay} " +
                    $"WHERE CodeNhom = '{code}' AND Ngay >= '{NgayBatDau.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' AND Ngay <= '{NgayKetThuc.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
                DataTable dthnNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbStringNhom);

                foreach (var hn in dt)
                {
                    var date = hn.Ngay;
                    string dateStr = date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                    var drow = dthnNhom.AsEnumerable().SingleOrDefault(x => x["Ngay"].ToString() == dateStr);
                    if (drow is null)
                    {
                        drow = dthnNhom.NewRow();
                        dthnNhom.Rows.Add(drow);

                        drow["CodeNhom"] = code;
                        drow["Code"] = Guid.NewGuid();
                        drow["Ngay"] = dateStr;
                        if (hn.KhoiLuongKeHoach is null)
                            drow["KhoiLuongThiCong"] = DBNull.Value;
                        else
                            drow["KhoiLuongThiCong"] = hn.KhoiLuongKeHoach;
                    }
                    else if (CapNhatAll)
                    {
                        if (hn.KhoiLuongKeHoach is null)
                            drow["KhoiLuongThiCong"] = DBNull.Value;
                        else
                            drow["KhoiLuongThiCong"] = hn.KhoiLuongKeHoach;

                    }
                }
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dthnNhom, Server.Tbl_TDKH_KhoiLuongCongViecTungNgay);
            }
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Đã cập nhật khối lượng thi công");
            LoadSheetTDKH();
        }

        private void fcn_Handle_Popup_TDKH_LayNgayThiCongTuKeHoach(object sender, EventArgs eventArgs)
        {
            var dr = MessageShower.ShowYesOKNoCancelQuestionWithCustomText("Hãy lựa chọn!", "Lựa chọn", "Lấy cho các công tác chưa nhập ngày", "Lấy cho toàn bộ công tác", "Lấy cho các công tác đã chọn");
            if (dr == DialogResult.Cancel)
                return;
            WaitFormHelper.ShowWaitForm("Đang cập nhật");

            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            CellRange range = ws.Range[TDKH.RANGE_KeHoach];

            Cell cell = ws.SelectedCell[0];

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            int? indHM = TDKHHelper.FindIndHangMuc(range, dic);

            if (indHM is null)
            {
                MessageShower.ShowWarning("Không tìm thấy hạng mục công tác!");
                WaitFormHelper.CloseWaitForm();

                return;
            }

            wb.BeginUpdate();
            for (int i = indHM.Value + 1; i <= range.BottomRowIndex; i++)
            {
                Row CrRow = ws.Rows[i];
                string typeRow = CrRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                string code = CrRow[dic[TDKH.COL_Code]].Value.ToString();
                bool isNBD = DateTime.TryParse(CrRow[dic[TDKH.COL_NgayBatDauThiCong]].Value.ToString(), out DateTime DateBD);
                bool isNKT = DateTime.TryParse(CrRow[dic[TDKH.COL_NgayKetThucThiCong]].Value.ToString(), out DateTime DateKT);
                bool isChecked = bool.TryParse(CrRow[0].Value.ToString(), out bool cchecked);


                if (typeRow == MyConstant.TYPEROW_HangMuc || typeRow == MyConstant.TYPEROW_CongTrinh)
                {
                    break;
                }

                if (typeRow == MyConstant.TYPEROW_CVCha)
                {
                    if (dr == DialogResult.OK || (dr == DialogResult.Yes && (!isNBD || !isNKT))
                        || (dr == DialogResult.No && isChecked))
                    {
                        string dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET NgayBatDauThiCong = NgayBatDau, NgayKetThucThiCong = NgayKetThuc WHERE Code = '{code}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                        dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE Code = '{code}'";

                        DataRow drCT = DataProvider.InstanceTHDA.ExecuteQuery(dbString).Rows[0];

                        string NBDString = drCT[TDKH.COL_NgayBatDau].ToString();
                        string NKTString = drCT[TDKH.COL_NgayKetThuc].ToString();

                        CrRow[dic[TDKH.COL_NgayBatDauThiCong]].SetValueFromText(NBDString);
                        CrRow[dic[TDKH.COL_NgayKetThucThiCong]].SetValueFromText(NKTString);

                        dbString = $"DELETE FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE \"CodeCongTacTheoGiaiDoan\" = '{code}' AND " +
                                    $"(\"Ngay\" < '{NBDString}' OR \"Ngay\" > '{NKTString}')";

                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        //MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(CrRow);
                    }
                }
            }
            //DinhMucHelper.fcn_TDKH_CapNhatRangeNgayCongTac(wb.DefinedNames.GetDefinedName(TDKH.RANGE_KLHangNgay_Ngay), out Dictionary<string, int> dicDate);
            WaitFormHelper.CloseWaitForm();
            wb.EndUpdate();
            ws.SelectedCell = ws.Cells["A1"];
            //if (!codes.Any())
            //{
            //    MessageShower.ShowInformation("Không có công tác nào được cập nhật!");
            //    return;
            //}

            //string dbString = $"SELECT * {TDKH.TBL_ChiTietCongTacTheoKy} WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(codes.ToArray())})";
            //int num =DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //MessageShower.ShowInformation($"Đã cập nhật {num} công tác!");


        }

        private void fcn_Handle_Popup_TDKH_TinhHangNgayVatTu(object sender, EventArgs e)
        {
            TDKHHelper.GetCodeCongTrinhHangMuc(out string codeHM, out string codeCT);

            DoBocChuanHelper.ReCalcKlhnVatTuByDonViThucHien(SharedControls.ctrl_DonViThucHienDuAnTDKH.SelectedDVTH, codeCT, codeHM);
            //var crDVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;

            //string dbString = $"SELECT Code " +
            //    $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk\r\n" +
            //    $"WHERE cttk.{crDVTH.ColCodeFK} = '{crDVTH.Code}'";
            //DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            //var codes = dt.AsEnumerable().Select(x => x["Code"].ToString());
            //DoBocChuanHelper.ReCalcKlhnHaoPhiByCtac(codes);
            MessageShower.ShowInformation("Đã tính xong");


        }

        private void fcn_Handle_Popup_TDKH_XoaDuLieuNhom(object sender, EventArgs e)
        {
            var dr = MessageShower.ShowYesNoQuestion("Bạn có muốn xóa dữ liệu nhóm đã chọn không?");
            if (dr != DialogResult.Yes)
                return;

            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            CellRange range = ws.Range[TDKH.RANGE_KeHoach];


            List<string> codesNhom = new List<string>();
            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            for (int i = range.TopRowIndex; i <= range.BottomRowIndex; i++)
            {
                var crRow = ws.Rows[i];
                var typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                var ischecked = crRow[TDKH.COL_Chon].Value.ToString() == true.ToString();

                if (!crRow.Visible || typeRow != MyConstant.TYPEROW_Nhom || !ischecked)
                    continue;

                var code = crRow[dic[TDKH.COL_Code]].Value.ToString();

                codesNhom.Add(code);
            }

            if (!codesNhom.Any())
            {
                MessageShower.ShowError("Không có nhóm công tác nào được chọn");
                WaitFormHelper.CloseWaitForm();
                return;
            }

            string dbString = $"UPDATE {TDKH.TBL_NhomCongTac}\r\n" +
                $"SET KhoiLuongKeHoach = NULL, DonGia = NULL, DonGiaThiCong = NULL, NgayBatDau = NULL, NgayKetThuc = NULL\r\n" +
                $"WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(codesNhom)})";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            dbString = $"DELETE FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE CodeNhom IN ({MyFunction.fcn_Array2listQueryCondition(codesNhom)})";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            dbString = $"DELETE FROM {TDKH.Tbl_DonGiaThiCongHangNgay} WHERE CodeNhom IN ({MyFunction.fcn_Array2listQueryCondition(codesNhom)})";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);


            LoadSheetTDKH();
        }
        private void Fcn_LaySTTNguoiDung(object sender, EventArgs e)
        {
            string dbString = $"SELECT nct.Code,nct.CodeHangMuc FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
                $"LEFT JOIN {TDKH.TBL_NhomCongTac} nct ON nct.Code=cttk.CodeNhom" +
                $" WHERE cttk.CodeNhaThau IS NOT NULL AND cttk.CodeGiaiDoan='{cbb_DBKH_ChonDot.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string[] lstCodeNhom = dt.AsEnumerable().Select(x => x["Code"].ToString()).Distinct().ToArray();
            string[] lstCodeHM = dt.AsEnumerable().Select(x => x["CodeHangMuc"].ToString()).Distinct().ToArray();
            if (!lstCodeNhom.Any())
                return;
            WaitFormHelper.ShowWaitForm("Đang cập nhật STT NGƯỜI DÙNG VÀ ĐỌC VÀO");
            dbString = $"SELECT nct.*,nctGiaoThau.GhiChuBoSungJson AS GhiChuBoSungJsonNhom  FROM {TDKH.TBL_NhomCongTac} nct" +
                $" LEFT JOIN {TDKH.TBL_NhomCongTac} nctGiaoThau ON nctGiaoThau.Code=nct.CodeNhomGiaoThau  " +
                $" WHERE nct.CodeNhomGiaoThau IS NOT NULL AND nct.CodeHangMuc IN ({MyFunction.fcn_Array2listQueryCondition(lstCodeHM)}) " +
                $"AND nct.Code NOT IN ({MyFunction.fcn_Array2listQueryCondition(lstCodeNhom)})";
            DataTable dtnhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            foreach (DataRow row in dtnhom.Rows)
            {
                //var GhiChuBoSungJson = JsonConvert.DeserializeObject<TDKH_GhiChuBoSungJson>(row["GhiChuBoSungJsonNhom"].ToString());
                //GhiChuBoSungJson.CodeDanhMucCongTac = row["Code"].ToString();
                //var encryptedStr = JsonConvert.SerializeObject(GhiChuBoSungJson);
                row["GhiChuBoSungJson"] = row["GhiChuBoSungJsonNhom"];
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtnhom, TDKH.TBL_NhomCongTac);
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Đã cập nhật STT thành công");
            LoadSheetTDKH();
        }
        private void fcn_Handle_Popup_TDKH_LayDonGiaNhom(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            CellRange range = ws.Range[TDKH.RANGE_KeHoach];

            Cell cell = ws.SelectedCell[0];

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            Row crRow = ws.Rows[cell.RowIndex];
            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
            DoBocChuanHelper.ReCalcCongTacHaoPhiInNhom(code, isForceDonGia: true, isCalKL: false);
            string dbString = $"SELECT * FROM {TDKH.TBL_NhomCongTac} WHERE Code = '{code}'";
            DataRow dr = DataProvider.InstanceTHDA.ExecuteQuery(dbString).Rows[0];

            crRow[dic[TDKH.COL_DonGia]].SetValue(dr["DonGia"]);
            crRow[dic[TDKH.COL_DonGiaThiCong]].SetValue(dr["DonGiaThiCong"]);
            //crRow[dic[TDKH.COL_KhoiLuongDaThiCong]].SetValue(dr["KhoiLuongDaThiCong"]);
        }
        private void fcn_Handle_Popup_TDKH_LayDonGiaTCNhom(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            CellRange range = ws.Range[TDKH.RANGE_KeHoach];

            Cell cell = ws.SelectedCell[0];

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            Row crRow = ws.Rows[cell.RowIndex];
            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
            DoBocChuanHelper.ReCalDonGiaThiCongNhom(code, isForceDonGia: true);
            string dbString = $"SELECT * FROM {TDKH.TBL_NhomCongTac} WHERE Code = '{code}'";
            DataRow dr = DataProvider.InstanceTHDA.ExecuteQuery(dbString).Rows[0];

            //crRow[dic[TDKH.COL_DonGia]].SetValue(dr["DonGia"]);
            crRow[dic[TDKH.COL_DonGiaThiCong]].SetValue(dr["DonGiaThiCong"]);
            //crRow[dic[TDKH.COL_KhoiLuongDaThiCong]].SetValue(dr["KhoiLuongDaThiCong"]);
        }




        private void fcn_Handle_Popup_TDKH_TinhKLCTNhom(object sender, EventArgs e)
        {
            var dr = MessageShower.ShowYesNoCancelQuestionWithCustomText(
                "CẢNH BÁO THAO TÁC\r\n" +
                "Thao tác này sẽ TÍNH LẠI khối lượng kế hoạch của công tác con thuộc nhóm công tác và không thể hoàn tác!",
                "Lựa chọn",
                "Toàn bộ nhóm", "nhóm đã chọn", isDangerous: true);
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];

            CellRange rangeData = ws.Range[TDKH.RANGE_KeHoach];
            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(rangeData);
            List<string> listIdNhom = new List<string>();
            WaitFormHelper.ShowWaitForm("Đang cập nhật!");
            switch (dr)
            {
                case DialogResult.Yes:
                    for (int i = rangeData.TopRowIndex; i < rangeData.BottomRowIndex; i++)
                    {
                        Row crRow = ws.Rows[i];
                        string id = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();
                        string typeRow = crRow[dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();
                        if (Guid.TryParse(id, out Guid guid) && typeRow == MyConstant.TYPEROW_Nhom)
                        {
                            DoBocChuanHelper.ReCalcCongTacHaoPhiInNhom(id);
                        }
                    }
                    break;
                case DialogResult.No:
                    for (int i = rangeData.TopRowIndex; i < rangeData.BottomRowIndex; i++)
                    {
                        Row crRow = ws.Rows[i];

                        if (crRow[TDKH.COL_Chon].Value.ToString() != true.ToString())
                            continue;
                        string id = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();

                        string typeRow = crRow[dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();
                        if (Guid.TryParse(id, out Guid guid) && typeRow == MyConstant.TYPEROW_Nhom)
                        {
                            DoBocChuanHelper.ReCalcCongTacHaoPhiInNhom(id);
                        }
                    }
                    break;
                default:
                    return;
            }
            WaitFormHelper.CloseWaitForm();
            TDKHHelper.LoadCongKinhPhiTienDo();
            MessageShower.ShowInformation("Đã cập nhập khối lượng công tác thuộc nhóm");
        }

        private void fcn_Handle_Popup_TDKH_TongKhoiLuongNhom(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            CellRange range = ws.Range[TDKH.RANGE_KeHoach];

            Cell cell = ws.SelectedCell[0];

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            Row crRow = ws.Rows[cell.RowIndex];
            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();



            DoBocChuanHelper.ReCalcCongTacHaoPhiInNhom(code, isForceDonGia: true, isCalKL: true, ReSumKL: true);
            string dbString = $"SELECT * FROM {TDKH.TBL_NhomCongTac} WHERE Code = '{code}'";
            DataRow dr = DataProvider.InstanceTHDA.ExecuteQuery(dbString).Rows[0];

            crRow[dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(dr["KhoiLuongKeHoach"]);
            crRow[dic[TDKH.COL_DonGia]].SetValue(dr["DonGia"]);
            crRow[dic[TDKH.COL_DonGiaThiCong]].SetValue(dr["DonGiaThiCong"]);
            crRow[dic[TDKH.COL_KhoiLuongDaThiCong]].SetValue(dr["KhoiLuongDaThiCong"]);
        }

        private void fcn_Handle_Popup_TDKH_TachNhanCong(object sender, EventArgs eventArgs)
        {


            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            CellRange range = ws.Range[TDKH.RANGE_KeHoach];

            Cell cell = ws.SelectedCell[0];

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            int? indHM = TDKHHelper.FindIndHangMuc(range, dic);

            if (indHM is null)
            {
                MessageShower.ShowWarning("Không tìm thấy hạng mục công tác!");
                WaitFormHelper.CloseWaitForm();
                return;
            }


            WaitFormHelper.ShowWaitForm("Đang cập nhật");
            List<string> selectedCts = new List<string>();
            string codeHM = ws.Rows[indHM.Value][dic[TDKH.COL_Code]].Value.ToString();

            for (int i = indHM.Value + 1; i <= range.BottomRowIndex; i++)
            {
                Row CrRow = ws.Rows[i];
                string typeRow = CrRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                string code = CrRow[dic[TDKH.COL_Code]].Value.ToString();
                bool.TryParse(CrRow[0].Value.ToString(), out bool cchecked);


                if (typeRow == MyConstant.TYPEROW_HangMuc || typeRow == MyConstant.TYPEROW_CongTrinh)
                {
                    break;
                }


                if (typeRow == MyConstant.TYPEROW_CVCha && cchecked)
                {
                    selectedCts.Add(code);
                }
            }

            WaitFormHelper.CloseWaitForm();
            if (selectedCts.Any())
            {
                XtraForm_TachNhanCong newForm = new XtraForm_TachNhanCong(selectedCts, codeHM);
                if (newForm.ShowDialog() == DialogResult.OK)
                {
                    MessageShower.ShowInformation("Đã thêm vật tư");
                }

            }
            else
                MessageShower.ShowWarning("Không có công tác nào được chọn");



        }

        private void fcn_Handle_Popup_TDKH_ThemVatTuNhieuCongTac(object sender, EventArgs eventArgs)
        {


            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            CellRange range = ws.Range[TDKH.RANGE_KeHoach];

            Cell cell = ws.SelectedCell[0];

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            int? indHM = TDKHHelper.FindIndHangMuc(range, dic);

            if (indHM is null)
            {
                MessageShower.ShowWarning("Không tìm thấy hạng mục công tác!");
                WaitFormHelper.CloseWaitForm();
                return;
            }


            WaitFormHelper.ShowWaitForm("Đang cập nhật");
            List<string> selectedCts = new List<string>();
            for (int i = indHM.Value + 1; i <= range.BottomRowIndex; i++)
            {
                Row CrRow = ws.Rows[i];
                string typeRow = CrRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                string code = CrRow[dic[TDKH.COL_Code]].Value.ToString();
                bool.TryParse(CrRow[0].Value.ToString(), out bool cchecked);


                if (typeRow == MyConstant.TYPEROW_HangMuc || typeRow == MyConstant.TYPEROW_CongTrinh)
                {
                    break;
                }

                if (typeRow == MyConstant.TYPEROW_CVCha && cchecked)
                {
                    selectedCts.Add(code);
                }
            }

            WaitFormHelper.CloseWaitForm();
            if (selectedCts.Any())
            {
                Form_ChonCongTacDinhMuc newForm = new Form_ChonCongTacDinhMuc("CodeCongTac", selectedCts, suffix: $" (Mới)");
                if (newForm.ShowDialog() == DialogResult.OK)
                {
                    MessageShower.ShowInformation("Đã thêm vật tư");
                }
            }
            else
                MessageShower.ShowWarning("Không có công tác nào được chọn");



        }

        private void fcn_Handle_Popup_TDKH_CapNhatTrangThaiThiCong(object sender, EventArgs eventArgs)
        {
            DuAnHelper.UpdateStateTDKHByKhoiLuongThiCong();
        }
        private void fcn_Handle_Popup_TDKH_CapNhatTrangThaiThiCongNhom(object sender, EventArgs eventArgs)
        {
            DuAnHelper.UpdateStateTDKHNhomByKhoiLuongThiCong();
            LoadSheetTDKH();
        }

        public void RecalcKPTD(bool reload = true)
        {
            try
            {
                WaitFormHelper.ShowWaitForm("Đang kiểm tra công tác thay đổi");
                var wb = spsheet_TD_KH_LapKeHoach.Document;
                var ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;


                var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
                var range = ws.Range[TDKH.RANGE_KeHoach];
                List<string> ctacs = new List<string>();

                for (int i = range.TopRowIndex; i <= range.BottomRowIndex; i++)
                {
                    var crRow = ws.Rows[i];
                    var typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    var code = crRow[dic[TDKH.COL_Code]].Value.ToString();
                    var cusNote = crRow[dic[TDKH.COL_CustomNote]].Value.ToString();

                    if (!cusNote.HasValue())
                        continue;


                    if (typeRow == MyConstant.TYPEROW_CVCha)
                    {
                        ctacs.Add(code);
                    }
                }

                if (ctacs.Any())
                {
                    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(ctacs);
                }
                if (reload)
                    LoadSheetTDKH();
            }
            finally
            {
                WaitFormHelper.CloseWaitForm();
            }
        }

        private void fcn_Handle_Recalc(object sender, EventArgs eventArgs)
        {
            RecalcKPTD();
        }

        private void fcn_Handle_Popup_TDKH_AnHienKinhPhiPhanBo(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            var col = ws.Columns[dic[TDKH.COL_KinhPhiDuKien]];
            //if (col.Visible)
            //{
            col.Visible = !col.Visible;
            //}

        }

        private void fcn_Handle_Popup_TDKH_LuuDinhMucNguoiDung(object sender, EventArgs eventArgs)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            //Dictionary<string, string> TDKH_DBC.dic_Dbc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH_DBC.RANGE_DoBocChuan]);

            Cell cell = ws.SelectedCell[0];
            Row CrRow = ws.Rows[cell.TopRowIndex];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            string crCodeCongTac = CrRow[dic[TDKH.COL_Code]].Value.ToString();
            string crMaDM = CrRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString().Replace(" ", "");
            string crTenDinhMuc = CrRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
            string crDonVi = CrRow[dic[TDKH.COL_DonVi]].Value.ToString();
            DataTable dt;
            string dbString;
            do
            {
                dbString = $"SELECT \"MaDinhMuc\" FROM {MyConstant.TBL_TBT_DINHMUCALL} WHERE \"MaDinhMuc\" = @MaDM";
                dt = DataProvider.InstanceTBT.ExecuteQuery(dbString, parameter: new object[] { crMaDM });

                if (dt.Rows.Count > 0)
                    crMaDM += ".VD";
            }
            while (dt.Rows.Count > 0);

            dbString = $"INSERT INTO {MyConstant.TBL_TBT_DINHMUCALL} (\"MaDinhMuc\", \"TenDinhMuc\", \"TenKhongDau\", \"DonVi\", \"LoaiTT\") VALUES " +
                $"(@MaDinhMuc, @TenDinhMuc, @TenKhongDau, @DonVi, '-1')";
            DataProvider.InstanceTBT.ExecuteNonQuery(dbString, parameter: new object[] { crMaDM, crTenDinhMuc, MyFunction.fcn_RemoveAccents(crTenDinhMuc), crDonVi });

            dbString = $"SELECT * FROM {TDKH.Tbl_HaoPhiVatTu} WHERE \"CodeCongTac\" = '{crCodeCongTac}'";
            dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            DataTable dtDinhMucNguoiDung = DataProvider.InstanceTBT.ExecuteQuery($"SELECT * FROM tbl_HaoPhiVatTu").Clone();

            foreach (DataRow dr in dt.Rows)
            {
                DataRow newRow = dtDinhMucNguoiDung.NewRow();
                newRow["MaDinhMuc"] = crMaDM;
                newRow["MaVatLieu"] = dr["MaVatLieu"];
                //newRow["VatTu"] = dr["VatTu"];
                newRow["LoaiVatTu"] = dr["LoaiVatTu"];
                newRow["DinhMuc"] = dr["DinhMucNguoiDung"];
                newRow["HeSo"] = dr["HeSoNguoiDung"];
                dtDinhMucNguoiDung.Rows.Add(newRow);
            }
            DataProvider.InstanceTBT.UpdateDataTableFromSqliteSource(dtDinhMucNguoiDung, "tbl_HaoPhiVatTu");
            CrRow[dic[TDKH.COL_MaHieuCongTac]].SetValue(crMaDM);
            CrRow.Font.Color = MyConstant.color_DinhMucTamTinh;

        }

        private void bt_TDKH_LuuVatLieu_Click(object sender, EventArgs e)
        {
            //fcn_TDKH_LuuVatLieu("Vật liệu");
            //fcn_TDKH_LuuVatLieu("Nhân công");
            //fcn_TDKH_LuuVatLieu("Máy thi công");
        }

        /*private void fcn_TDKH_LuuVatLieu(string loaiVL, List<Row> lsRow)
        {
            IWorkbook wb = spsheet_TDKH_VatTu.Document;
            Worksheet ws = wb.Worksheets[loaiVL];
            //string loaiVL = "Vật liệu";
            ws.Calculate();

            string LoaiVLRemoveAccents = MyFunction.fcn_RemoveAccents(loaiVL.Replace(" ", ""));
            CellRange rangeAuto = wb.Range[$"KeHoachVatTu_{LoaiVLRemoveAccents}_TuDong"];
            CellRange rangeNgay = wb.Range[$"{LoaiVLRemoveAccents}_Ngay"];

            Dictionary<string, int> dicDate = MyFunction.fcn_getDicDate(rangeNgay);
            Row headerRow = ws.Rows[rangeNgay.TopRowIndex];


            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM,MyConstant.TBL_THONGTINCONGTRINH,MyConstant.TBL_THONGTINHANGMUC,false);
            string lsHM = MyFunction.fcn_Array2listQueryCondition(dtHM.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            //int typeDoBoc = fcn_TDKH_GetTypeDoBocKeHoachTienDo();
            string condition = GetConditionNhaThauToDoiDoBoc();

            string dbString = "";
            //if (isUpdateAll)
            //{
            //    dbString = $"DELETE FROM {TDKH.TBL_KHVT_VatTu} WHERE \"CodeHangMuc\" IN ({lsHM}) AND \"LoaiVatTu\" = '{loaiVL}' AND {condition}";
            //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //}

            string[] lsCodeVatTu = lsRow.Select(x => $"'{x[dicKPVL[TDKH.COL_Code]].Value}'").ToArray();

            if (lsCodeVatTu.Any())
            {
                dbString = $"DELETE FROM {TDKH.TBL_KHVT_VatTu} WHERE \"CodeHangMuc\" IN ({lsHM}) AND \"LoaiVatTu\" = '{loaiVL}' AND Code NOT IN ({string.Join(", ", lsCodeVatTu)}) AND {condition}";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT * FROM {TDKH.TBL_KHVT_VatTu} WHERE \"CodeHangMuc\" IN ({lsHM}) AND \"LoaiVatTu\" = '{loaiVL}' AND {condition}");
            string lsVT = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            //if (isUpdateAll)
            //{
            //    DataProvider.InstanceTHDA.ExecuteNonQuery($"DELETE FROM {TDKH.TBL_KHVT_KhoiLuongHangNgay} WHERE \"CodeVatTu\" IN ({lsVT})");
            //}

            DataTable dtTheoNgay = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT * FROM {TDKH.TBL_KHVT_KhoiLuongHangNgay} WHERE \"CodeVatTu\" IN ({lsVT})");

            foreach (Row crRow in lsRow)
            {
                string codeCongTac = crRow[dicKPVL[TDKH.COL_Code]].Value.ToString();
                int STTCha = int.Parse(crRow[dicKPVL[TDKH.COL_RowCha]].Value.ToString());
                string codeHM = ws.Rows[STTCha - 1][dicKPVL[TDKH.COL_Code]].Value.ToString();

                //lsCodeVatTu.Add(codeCongTac);

                if (!ValidateHelper.IsDateTime(crRow[dicKPVL[TDKH.COL_NgayBatDau]].Value)
                    || !ValidateHelper.IsDateTime(crRow[dicKPVL[TDKH.COL_NgayKetThuc]].Value))
                    continue;

                DateTime dateBD = DateTime.Parse(crRow[dicKPVL[TDKH.COL_NgayBatDau]].Value.ToString());
                DateTime dateKT = DateTime.Parse(crRow[dicKPVL[TDKH.COL_NgayKetThuc]].Value.ToString());

                //MyFunction.fcn_getDateStrBDKTFromRowWs(crRow, dicKPVL, out DateTime dateBD, out DateTime dateKT, out var ngayBD, out var ngayKT);

                DataRow rowexist = dt.AsEnumerable().Where(x => x["Code"].ToString() == codeCongTac).SingleOrDefault();
                DataRow rowUpdate = rowexist ?? dt.NewRow();

                if (rowexist == null)
                {
                    dt.Rows.Add(rowUpdate);
                    rowUpdate["Code"] = codeCongTac;
                    rowUpdate["CodeHangMuc"] = codeHM;
                    rowUpdate["LoaiVatTu"] = loaiVL;
                    rowUpdate["CodeGiaiDoan"] = cbb_DBKH_ChonDot.SelectedValue.ToString();


                    if (!ctrl_DonViThucHienDuAn.IsAllDVTH)
                    {
                        DonViThucHien dvth = ctrl_DonViThucHienDuAn.SelectedDVTH;
                        if (dvth != null)
                            rowUpdate[dvth.ColCodeFK] = dvth.Code;
                    }
                    //if (typeDoBoc == TDKH.TYPEDoBoc_NhaThau)
                    //    rowUpdate["CodeNhaThau"] = cbo_MenuNhaThauThiCong.SelectedValue;
                    //else if (typeDoBoc == TDKH.TYPEDoBoc_ToDoi)
                    //    rowUpdate["CodeToDoi"] = cbo_MenuChonToDoi.SelectedValue;
                    //else if (typeDoBoc == TDKH.TYPEDoBoc_NhaThauPhu)
                    //    rowUpdate["CodeNhaThauPhu"] = cbo_MenuNhaThauPhu.SelectedValue;
                }

                foreach (var item in dicKPVL)
                {
                    if (dt.Columns.Contains(item.Key))
                    {
                        try
                        {
                            rowUpdate[item.Key] = crRow[item.Value].Value.ToObject();
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("Lỗi ghi công tác: " + ex.Message);
                        }
                    }
                }

                //Cập nhật theo ngày
                for (DateTime date = dateBD; date <= dateKT; date = date.AddDays(1))
                {
                    string dateStr = date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

                    rowexist = dtTheoNgay.AsEnumerable().Where(x => x["CodeVatTu"].ToString() == codeCongTac && x["Ngay"].ToString() == dateStr).SingleOrDefault();
                    rowUpdate = rowexist ?? dtTheoNgay.NewRow();

                    if (rowexist == null)
                    {

                        rowUpdate["Code"] = Guid.NewGuid().ToString();
                        rowUpdate["CodeVatTu"] = codeCongTac;
                        rowUpdate["Ngay"] = dateStr;
                        dtTheoNgay.Rows.Add(rowUpdate);
                    }
                    rowUpdate["KhoiLuong"] = crRow[dicDate[dateStr]].Value.ToString();
                    rowUpdate["ThanhTien"] = crRow[dicDate[dateStr] + 1].Value.ToString();
                    rowUpdate["KhoiLuongKeHoach"] = crRow[dicDate[dateStr] + 2].Value.ToString();
                    rowUpdate["ThanhTienKeHoach"] = crRow[dicDate[dateStr] + 3].Value.ToString();
                    rowUpdate["KhoiLuongThiCong"] = crRow[dicDate[dateStr] + 4].Value.ToString();
                    rowUpdate["ThanhTienThiCong"] = crRow[dicDate[dateStr] + 5].Value.ToString();
                }
            }

            //dt.AsEnumerable().Where(x => !lsCodeVatTu.Contains(x["Code"].ToString())).ForEach(x => x.Delete());
            DataProvider.InstanceTHDA.UpdateDataTable(dt, TDKH.TBL_KHVT_VatTu);
            DataProvider.InstanceTHDA.UpdateDataTable(dtTheoNgay, TDKH.TBL_KHVT_KhoiLuongHangNgay);
        }*/

        private void gc_Tiendo_CustomDrawTask(object sender, DevExpress.XtraGantt.CustomDrawTaskEventArgs e)
        {
            if (e.Node.GetValue("UID") == null)
                return;
            string UID = e.Node.GetValue("UID").ToString();
            if (e.Node.Level == 0)
                e.Appearance.BackColor = DXSkinColors.FillColors.Danger;
            else if (e.Node.Level == 1)
                e.Appearance.BackColor = MyConstant.color_Row_CongTrinh;
            else if (e.Node.Level == 2)
            {
                if (UID.Contains("_MuiTC"))
                    e.Appearance.BackColor = MyConstant.color_Row_MuiTC;
                else
                    e.Appearance.BackColor = MyConstant.color_Row_HangMuc;
            }
            else if (e.Node.Level == 3)
            {
                if (UID.Contains("_HM"))
                    e.Appearance.BackColor = MyConstant.color_Row_HangMuc;
                else if (UID.Contains("CodeTuyen"))
                    e.Appearance.BackColor = Color.Red;
                else
                    e.Appearance.BackColor = MyConstant.color_Row_NhaThau;
            }
            else
            {
                if (UID.Contains("_NhaThau"))
                    e.Appearance.BackColor = MyConstant.color_Row_NhaThau;
                if (UID.Contains("_CodeNhom"))
                    e.Appearance.BackColor = MyConstant.color_Row_NhomCongTac;
                else if (UID.Contains("CodeTuyen"))
                    e.Appearance.BackColor = Color.Red;
                else if (e.Node.GetValue("UID").ToString().Contains("Thi công") || e.Node.GetValue("UID").ToString().Contains("_ThiCong") || e.Node.GetValue("UID").ToString().Contains("_TCNT"))
                    e.Appearance.BackColor = Color.Orange;
                else if (e.Node.GetValue("UID").ToString().Contains("Kế hoạch") || e.Node.GetValue("UID").ToString().Contains("_KeHoach") || e.Node.GetValue("UID").ToString().Contains("_KHNT"))
                    e.Appearance.BackColor = Color.Blue;
                //else if (UID.Contains("CodePhanTuyen"))
                //    e.Appearance.BackColor = Color.Red;
            }

        }

        private void gc_Tiendo_TaskFinishDateModificationStarted(object sender, DevExpress.XtraGantt.TaskFinishModificationEventArgs e)
        {
            string Name = e.ProcessedNode.GetValue("UID").ToString();
            if (!Name.Contains("_KeHoach") /*&& !Name.Contains("ThiCong")*/)
            {
                MessageShower.ShowInformation("Chỉ có thể thay đổi ngày kế hoạch");
                e.Cancel = true;
                return;
            }
        }

        private void gc_Tiendo_TaskFinishDateModificationCompleted(object sender, DevExpress.XtraGantt.TaskFinishModificationEventArgs e)
        {
            if (cbo_LoaiTienDo.SelectedIndex > 0)
            {
                e.Cancel = true;
                return;
            }
            string str2Remove = "";
            string col = "NgayKetThuc";
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            CellRange range;
            string UID = e.ProcessedNode.GetValue("UID").ToString();
            if (UID.Contains("_KeHoach"))
            {
                str2Remove = "_KeHoach";
                range = wb.Range[TDKH.RANGE_KeHoach];
            }
            else
            {
                MessageShower.ShowInformation("Chỉ có thể thay đổi ngày kế hoạch");
                e.Cancel = true;
                return;
            }
            string code = e.ProcessedNode.GetValue("UID").ToString().Replace(str2Remove, "");
            string newDateKT = DateTime.Parse(e.CurrentTaskFinish.ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{col}\" = '{newDateKT}' WHERE \"Code\" = '{code}'"; ;
            //if (cbo_LoaiTienDo.SelectedIndex==0)
            //    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{col}\" = '{newDateKT}' WHERE \"Code\" = '{code}'";
            //else
            //{
            //    dbString = $"UPDATE {TDKH.TBL_KHVT_VatTu} SET \"{col}\" = '{newDateKT}' WHERE \"Code\" = '{code}'";
            //    TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach();
            //}
            if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString) != 1)
            {
                MessageShower.ShowInformation("Lỗi thay đổi dữ liệu");
                e.Cancel = true;
                return;
            }

            CapNhatNgaySauKhiModifiedTask(range, code, null, newDateKT);
            if (e.OriginalTaskFinish != e.CurrentTaskFinish && navigationPane1.SelectedPage == np_NhanCong)
            {
                WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu nhân công");
                LoadBieuDoNhanCong();
                WaitFormHelper.CloseWaitForm();
            }
        }

        private void gc_Tiendo_TaskDependencyModificationCompleted(object sender, DevExpress.XtraGantt.TaskDependencyModificationCancelEventArgs e)
        {
            if (cbo_LoaiTienDo.SelectedIndex > 0)
            {
                e.Cancel = true;
                return;
            }
            if (e.PredecessorNode == null || e.SuccessorNode == null)
                return;
            //if(e.OriginalSuccessorNode.Level<=)
            string IdPre = e.PredecessorNode.GetValue("UID").ToString();
            string IdSuc = e.SuccessorNode == null ? e.OriginalSuccessorNode.GetValue("UID").ToString() : e.SuccessorNode.GetValue("UID").ToString();
            if (!IdPre.Contains("_KeHoach") && !IdSuc.Contains("_KeHoach"))
            {
                if (e.PredecessorNode.Level != e.SuccessorNode.Level)
                {
                    MessageShower.ShowWarning("Chỉ nối liên kết cùng cấp với nhau!!!!!!!");
                    e.Cancel = true;
                    return;
                }
                DialogResult dr = MessageShower.ShowYesNoQuestion("Bạn có muốn giữ nguyên mối liên kết này không ???");
                if (dr == DialogResult.No)
                {
                    e.Cancel = true;
                    return;
                }
                gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Manual;
            }
            else
            {
                if (!IdPre.Contains("_KeHoach") || !IdSuc.Contains("_KeHoach"))
                {
                    e.Cancel = true;
                    MessageShower.ShowInformation("Chỉ có thể nối công tác của kế hoạch");
                    return;
                }
                else if (IdPre.Split('_').Last() != IdSuc.Split('_').Last())
                {
                    e.Cancel = true;
                    MessageShower.ShowInformation("Không thể nối thi công với kế hoạch");
                    return;
                }
                DialogResult dr = MessageShower.ShowYesNoQuestion("Bạn có muốn giữ nguyên ngày kế hoạch không ???");
                string MoiLienKet = string.Empty, LoaiLK = string.Empty;
                double NumBer = 0;
                if (dr == DialogResult.Yes)
                {
                    gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Manual;
                    switch (e.Type)
                    {
                        case DependencyType.FinishToStart:
                            if (ce_HienLienKet.Checked)
                            {
                                LoaiLK = MyConstant.FS;
                                NumBer = (e.SuccessorNode.GetStartDate().Value.Date - e.PredecessorNode.GetFinishDate().Value.Date).TotalDays;
                            }
                            break;
                        case DependencyType.FinishToFinish:
                            if (ce_HienLienKet.Checked)
                            {
                                LoaiLK = MyConstant.FF;
                                NumBer = (e.SuccessorNode.GetFinishDate().Value.Date - e.PredecessorNode.GetFinishDate().Value.Date).TotalDays;
                            }
                            break;
                        case DependencyType.StartToFinish:
                            if (ce_HienLienKet.Checked)
                            {
                                LoaiLK = MyConstant.SF;
                                NumBer = (e.SuccessorNode.GetFinishDate().Value.Date - e.PredecessorNode.GetStartDate().Value.Date).TotalDays;
                            }
                            break;
                        case DependencyType.StartToStart:
                            if (ce_HienLienKet.Checked)
                            {
                                LoaiLK = MyConstant.SS;
                                NumBer = (e.SuccessorNode.GetStartDate().Value.Date - e.PredecessorNode.GetStartDate().Value.Date).TotalDays;
                            }
                            break;
                        default:
                            break;
                    }
                }
                else
                {
                    gc_Tiendo.CellValueChanged -= gc_Tiendo_CellValueChanged;
                    gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Auto;
                    gc_Tiendo.CellValueChanged += gc_Tiendo_CellValueChanged;
                    var rs = DevExpress.XtraEditors.XtraInputBox.Show("Nhập số ngày trễ so với công tác gốc", "Nhập số ngày", "1");
                    bool Songay = int.TryParse(rs, out int Ngay);
                    Ngay = Songay ? Ngay : 0;
                    int SoNgaySucc = 0;
                    DateTime? _Pre;
                    if (Ngay <= 0)
                        gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Manual;
                    switch (e.Type)
                    {
                        case DependencyType.FinishToStart:
                            SoNgaySucc = int.Parse(e.SuccessorNode.GetValue("ThoiGianThiCong").ToString());
                            e.SuccessorNode.SetValue("StartDate", e.PredecessorNode.GetFinishDate().Value.AddDays(Ngay).AddHours(-22));
                            _Pre = e.SuccessorNode.GetStartDate();
                            e.SuccessorNode.SetValue("FinishDate", _Pre.Value.AddDays(SoNgaySucc - 1).AddHours(22));
                            if (ce_HienLienKet.Checked)
                            {
                                LoaiLK = MyConstant.FS;
                                NumBer = (e.SuccessorNode.GetStartDate().Value.Date - e.PredecessorNode.GetFinishDate().Value.Date).TotalDays;
                            }
                            break;
                        case DependencyType.FinishToFinish:
                            SoNgaySucc = int.Parse(e.SuccessorNode.GetValue("ThoiGianThiCong").ToString());
                            e.SuccessorNode.SetValue("FinishDate", e.PredecessorNode.GetFinishDate().Value.AddDays(Ngay));
                            _Pre = e.SuccessorNode.GetFinishDate();
                            e.SuccessorNode.SetValue("StartDate", _Pre.Value.AddDays(-SoNgaySucc + 1).AddHours(-22));
                            if (ce_HienLienKet.Checked)
                            {
                                LoaiLK = MyConstant.FF;
                                NumBer = (e.SuccessorNode.GetFinishDate().Value.Date - e.PredecessorNode.GetFinishDate().Value.Date).TotalDays;
                            }
                            break;
                        case DependencyType.StartToFinish:
                            SoNgaySucc = int.Parse(e.SuccessorNode.GetValue("ThoiGianThiCong").ToString());
                            e.SuccessorNode.SetValue("FinishDate", e.PredecessorNode.GetStartDate().Value.AddDays(Ngay).AddHours(22));
                            _Pre = e.SuccessorNode.GetFinishDate();
                            e.SuccessorNode.SetValue("StartDate", _Pre.Value.AddDays(-SoNgaySucc + 1).AddHours(-22));
                            if (ce_HienLienKet.Checked)
                            {
                                LoaiLK = MyConstant.SF;
                                NumBer = (e.SuccessorNode.GetFinishDate().Value.Date - e.PredecessorNode.GetStartDate().Value.Date).TotalDays;
                            }
                            break;
                        case DependencyType.StartToStart:
                            SoNgaySucc = int.Parse(e.SuccessorNode.GetValue("ThoiGianThiCong").ToString());
                            e.SuccessorNode.SetValue("StartDate", e.PredecessorNode.GetStartDate().Value.AddDays(Ngay));
                            _Pre = e.SuccessorNode.GetStartDate();
                            e.SuccessorNode.SetValue("FinishDate", _Pre.Value.AddDays(SoNgaySucc - 1).AddHours(22));
                            if (ce_HienLienKet.Checked)
                            {
                                LoaiLK = MyConstant.SS;
                                NumBer = (e.SuccessorNode.GetStartDate().Value.Date - e.PredecessorNode.GetStartDate().Value.Date).TotalDays;
                            }
                            break;
                        default:
                            break;

                    }
                }
                if (ce_HienLienKet.Checked)
                {
                    string Begin = e.PredecessorNode.GetValue("STT").ToString();
                    string IsNumBer = NumBer > 0 ? $"+{NumBer}" : NumBer.ToString();
                    string TextLK = NumBer != 0 ? $"{Begin}{LoaiLK}{IsNumBer}days" : $"{Begin}{LoaiLK}";
                    gc_Tiendo.CellValueChanged -= gc_Tiendo_CellValueChanged;
                    e.SuccessorNode.SetValue("NhapLienKet", TextLK);
                    gc_Tiendo.CellValueChanged += gc_Tiendo_CellValueChanged;
                }
            }
        }
        private static Dictionary<string, KeyValuePair<string, string>> fcn_updatesuccessorNodes_predecessorNodes(string NodeCha, DevExpress.XtraGantt.GanttControl gcTienDoKeHoach)
        {
            Dictionary<string, KeyValuePair<string, string>> DateTime = new Dictionary<string, KeyValuePair<string, string>>();
            IEnumerable<GanttControlNode> predecessorNodes =
    gcTienDoKeHoach.GetPredecessorNodes(gcTienDoKeHoach.FindNodeByFieldValue("Name", NodeCha) as GanttControlNode);
            IEnumerable<GanttControlNode> successorNodes =
    gcTienDoKeHoach.GetSuccessorNodes(gcTienDoKeHoach.FindNodeByFieldValue("Name", NodeCha) as GanttControlNode);
            if (predecessorNodes == null && successorNodes == null)
            {
                DateTime.Add("", new KeyValuePair<string, string>("", ""));
                return DateTime;
            }
            foreach (GanttControlNode pre in predecessorNodes)
            {
                string Nodecon_pre = pre.GetValue("UID").ToString();
                string begin_pre = pre.GetValue("StartDate").ToString();
                DateTime? beginDate = pre.GetBaselineStartDate();
                DateTime? endDate = pre.GetBaselineFinishDate();
                string end_pre = pre.GetValue("FinishDate").ToString();
                DateTime.Add(Nodecon_pre, new KeyValuePair<string, string>(begin_pre, end_pre));
                for (int i = 0; i < gcTienDoKeHoach.AllNodesCount; i++)
                {
                    predecessorNodes = gcTienDoKeHoach.GetPredecessorNodes(gcTienDoKeHoach.FindNodeByFieldValue("Name", Nodecon_pre) as GanttControlNode);
                    successorNodes = gcTienDoKeHoach.GetSuccessorNodes(gcTienDoKeHoach.FindNodeByFieldValue("Name", Nodecon_pre) as GanttControlNode);
                    if (predecessorNodes == null && successorNodes == null)
                        break;
                    foreach (GanttControlNode pre_con in predecessorNodes)
                    {
                        Nodecon_pre = pre_con.GetValue("UID").ToString();
                        begin_pre = pre_con.GetValue("StartDate").ToString();
                        end_pre = pre_con.GetValue("FinishDate").ToString();
                        DateTime.Add(Nodecon_pre, new KeyValuePair<string, string>(begin_pre, end_pre));
                    }
                    foreach (GanttControlNode succ_con in successorNodes)
                    {
                        Nodecon_pre = succ_con.GetValue("UID").ToString();
                        begin_pre = succ_con.GetValue("StartDate").ToString();
                        end_pre = succ_con.GetValue("FinishDate").ToString();
                        DateTime.Add(Nodecon_pre, new KeyValuePair<string, string>(begin_pre, end_pre));
                    }
                }
            }
            foreach (GanttControlNode succ in successorNodes)
            {
                string Nodecon_suc = succ.GetValue("UID").ToString();
                string begin_suc = succ.GetValue("StartDate").ToString();
                string end_suc = succ.GetValue("FinishDate").ToString();
                DateTime.Add(Nodecon_suc, new KeyValuePair<string, string>(begin_suc, end_suc));
                for (int i = 0; i < gcTienDoKeHoach.AllNodesCount; i++)
                {
                    predecessorNodes = gcTienDoKeHoach.GetPredecessorNodes(gcTienDoKeHoach.FindNodeByFieldValue("Name", Nodecon_suc) as GanttControlNode);
                    successorNodes = gcTienDoKeHoach.GetSuccessorNodes(gcTienDoKeHoach.FindNodeByFieldValue("Name", Nodecon_suc) as GanttControlNode);
                    if (predecessorNodes == null && successorNodes == null)
                        break;
                    foreach (GanttControlNode pre_con in predecessorNodes)
                    {
                        Nodecon_suc = pre_con.GetValue("UID").ToString();
                        begin_suc = pre_con.GetValue("StartDate").ToString();
                        end_suc = pre_con.GetValue("FinishDate").ToString();
                        DateTime.Add(Nodecon_suc, new KeyValuePair<string, string>(begin_suc, end_suc));
                    }
                    foreach (GanttControlNode succ_con in successorNodes)
                    {
                        Nodecon_suc = succ_con.GetValue("UID").ToString();
                        begin_suc = succ_con.GetValue("StartDate").ToString();
                        end_suc = succ_con.GetValue("FinishDate").ToString();
                        DateTime.Add(Nodecon_suc, new KeyValuePair<string, string>(begin_suc, end_suc));
                    }
                }
            }
            return DateTime;
        }

        private void gc_Tiendo_CellValueChanged(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            string str2Remove = "", newDateKT = "", newDateBD = "";
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            CellRange range = null;
            Dictionary<string, string> Name = new Dictionary<string, string>()
            {
                {"Ngày bắt đầu","NgayBatDau" },
                {"Ngày kết thúc","NgayKetThuc" }

            };
            if (e.Node.GetValue("UID") == null || e.Node.GetValue("StartDate") == null || e.Node.GetValue("FinishDate") == null || e.Column == null)
                return;

            if (e.Column.Caption == "Ngày bắt đầu" || e.Column.Caption == "Ngày kết thúc" || e.Column.FieldName == "GhiChu")
            {
                string col = e.Column.FieldName == "GhiChu" ? e.Column.FieldName : Name[e.Column.Caption];
                string UID = e.Node.GetValue("UID").ToString();
                if (UID.Contains("_KeHoach"))
                {
                    str2Remove = "_KeHoach";
                    range = wb.Range[TDKH.RANGE_KeHoach];
                }
                else
                {
                    return;
                }
                string code = UID.Replace(str2Remove, "");
                string dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"{col}\" = @Value WHERE \"Code\" = '{code}'";
                string val = col == "GhiChu" ? e.Value.ToString() : DateTime.Parse(e.Value.ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { val }) != 1)
                {
                    MessageShower.ShowInformation("Lỗi thay đổi dữ liệu");
                    return;
                }
                newDateBD = e.Column.Caption == "Ngày bắt đầu" ? DateTime.Parse(e.Value.ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET) : "";
                newDateKT = e.Column.Caption == "Ngày kết thúc" ? DateTime.Parse(e.Value.ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET) : "";
                if (col == "GhiChu")
                    CapNhatNgaySauKhiModifiedTask(range, code, "", "", e.Value.ToString());
                else
                    CapNhatNgaySauKhiModifiedTask(range, code, newDateBD, newDateKT);
            }
            else if (e.Column == col_LienKet)
            {
                string UID = e.Node.GetValue("UID").ToString();
                string Value = e.Value.ToString();
                if (Value.Contains(','))
                {
                    int count = Value.Count(x => x == ',');
                    if (count > 1)
                    {
                        MessageShower.ShowError("Ký tự nhập không đúng với quy ước, Vui lòng nhập đúng quy ước bao gồm: STT dòng muốn tạo liên kết+Ký hiệu" +
           " tạo liên kết (bao gồm FF,SS,SF,FS)...Vd 1FS+1days,5SS hoặc ký tự , không quá 1 lần Vd:1FS+1days,2SS+2days");
                        e.Node.SetValue("NhapLienKet", string.Empty);
                        return;
                    }
                }
                else
                {
                    Regex CheckValue = new Regex(@"(?<ViTri>\D+.|\d)(?<KyHieu>\D+)(?<sys>\-|\s|\+)(?<Number>\d)days|(?<ViTri1>\D+.|\d)(?<KyHieu1>\D+)");
                    MatchCollection Multimatch = CheckValue.Matches(Value);
                    if (Multimatch.Count == 0)
                    {
                        MessageShower.ShowError("Ký tự nhập không đúng với quy ước, Vui lòng nhập đúng quy ước bao gồm: STT dòng muốn tạo liên kết+Ký hiệu" +
              " tạo liên kết (bao gồm FF,SS,SF,FS)...Vd 1FS+1days,2SS-1days");
                        e.Node.SetValue("NhapLienKet", string.Empty);
                        return;
                    }
                    if (string.IsNullOrEmpty(Multimatch[0].Groups["ViTri"].ToString()))
                    {
                        string TaoLienKet = Multimatch[0].Groups["ViTri1"].ToString();
                        string LoaiLK = Multimatch[0].Groups["KyHieu1"].ToString().ToUpper();
                        if (!MyConstant.lstTaoLienKet.Contains(LoaiLK))
                        {
                            MessageShower.ShowError("Ký tự nhập không đúng với quy ước, Vui lòng nhập đúng quy ước bao gồm: STT dòng muốn tạo liên kết+Ký hiệu" +
              " tạo liên kết (bao gồm FF,SS,SF,FS)...Vd 1FS+1days,2SS-1days");
                            e.Node.SetValue("NhapLienKet", string.Empty);
                            return;
                        }
                        gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Auto;
                        int SoNgaySucc = int.Parse(e.Node.GetValue("ThoiGianThiCong").ToString());
                        string codePre = string.Empty, codeSuc = UID, dbString = string.Empty;
                        int depen = 0;
                        List<TaskDataItem> tasks_Depen = gc_Tiendo.DependencySource as List<TaskDataItem>;
                        List<TaskDataItem> tasks = gc_Tiendo.DataSource as List<TaskDataItem>;
                        TaskDataItem CongTacLK = tasks.Where(x => x.STT == TaoLienKet).FirstOrDefault();
                        if (CongTacLK is null)
                        {
                            MessageShower.ShowError("Dòng Liên kết không đúng, Vui lòng nhập lại dòng muốn liên kết!!!!!!");
                            e.Node.SetValue("NhapLienKet", string.Empty);
                            return;
                        }
                        codePre = CongTacLK.UID;
                        if (codePre == codeSuc)
                        {
                            MessageShower.ShowError("Dòng Liên kết không trùng với dòng hiện tại, Vui lòng nhập lại dòng muốn liên kết!!!!!!");
                            e.Node.SetValue("NhapLienKet", string.Empty);
                            return;
                        }
                        str2Remove = UID.Substring(UID.LastIndexOf("_"));
                        string LoaiCT = str2Remove == "_HM" ? "Hạng mục" : str2Remove == "_CTR" ? "Công trình" : str2Remove == "_KeHoach" ? "Kế Hoạch" : str2Remove == "_CodeNhom" ? "Nhóm" : "Tuyến";
                        string Predecessorcode = $"Predecessorcode{str2Remove}";
                        string Successorcode = $"Successorcode{str2Remove}";

                        string CodeIpre = codePre.Replace(str2Remove, string.Empty);
                        string CodeISuc = codeSuc.Replace(str2Remove, string.Empty);
                        if (UID.Contains("_CTR") || UID.Contains("_HM") || UID.Contains("_CodeTuyen") || UID.Contains("_CodeNhom"))
                        {
                            gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Manual;
                            if (!codePre.Contains(str2Remove))
                            {
                                MessageShower.ShowError("Chỉ tạo được liên kết với dòng Cùng CẤP ĐỘ, Ví dụ: Công trình-Công trình, Hạng mục-Hạng mục, Tuyến-Tuyến, Nhóm-Nhóm, Công tác-Công tác" +
                                    ", Vui lòng nhập lại dòng muốn tạo liên kết!!!!!!");
                                e.Node.SetValue("NhapLienKet", string.Empty);
                                return;
                            }
                            if (UID.Contains("_CodeTuyen") || UID.Contains("_CodeNhom"))
                            {
                                string removeSecondpre = CodeIpre.Substring(CodeIpre.LastIndexOf("_"));
                                string removeSecondsuc = CodeISuc.Substring(CodeISuc.LastIndexOf("_"));
                                CodeIpre = CodeIpre.Replace(removeSecondpre, string.Empty);
                                CodeISuc = CodeISuc.Replace(removeSecondsuc, string.Empty);
                            }
                            switch (LoaiLK)
                            {
                                case MyConstant.FF:
                                    depen = 1;
                                    break;
                                case MyConstant.FS:
                                    break;
                                case MyConstant.SS:
                                    depen = 3;
                                    break;
                                case MyConstant.SF:
                                    depen = 2;
                                    break;
                                default:
                                    break;
                            }
                            tasks_Depen.Add(new TaskDataItem()
                            {
                                PredecessorCode = codePre,
                                SuccessorCode = codeSuc,
                                DependencyType = (DependencyType)depen
                            });
                            gc_Tiendo.DependencySource = tasks_Depen;
                            gc_Tiendo.RefreshDataSource();
                            gc_Tiendo.Refresh();
                        }
                        else if (UID.Contains("_KeHoach"))
                        {
                            bool CongTac = int.TryParse(TaoLienKet, out int STTCongTac);
                            if (!CongTac)
                            {
                                MessageShower.ShowError("Chỉ tạo được liên kết với dòng Công Tác, Vui lòng nhập lại dòng muốn tạo liên kết, Ví dụ 1FF,1SF,....!!!!!!");
                                e.Node.SetValue("NhapLienKet", string.Empty);
                                return;
                            }
                            codePre = CongTacLK.UID;
                            switch (LoaiLK)
                            {
                                case MyConstant.FF:
                                    depen = 1;
                                    e.Node.SetValue("FinishDate", CongTacLK.FinishDate.Value.Date.AddHours(23));
                                    e.Node.SetValue("StartDate", CongTacLK.FinishDate.Value.AddDays(-SoNgaySucc + 1).Date.AddHours(1));
                                    break;
                                case MyConstant.FS:
                                    e.Node.SetValue("StartDate", CongTacLK.FinishDate.Value.Date.AddHours(1));
                                    e.Node.SetValue("FinishDate", CongTacLK.FinishDate.Value.AddDays(SoNgaySucc - 1).Date.AddHours(23));
                                    break;
                                case MyConstant.SS:
                                    depen = 3;
                                    e.Node.SetValue("StartDate", CongTacLK.StartDate.Value.Date.AddHours(1));
                                    e.Node.SetValue("FinishDate", CongTacLK.StartDate.Value.AddDays(SoNgaySucc - 1).Date.AddHours(23));
                                    break;
                                case MyConstant.SF:
                                    depen = 2;
                                    e.Node.SetValue("FinishDate", CongTacLK.StartDate.Value.Date.AddHours(23));
                                    e.Node.SetValue("StartDate", CongTacLK.StartDate.Value.AddDays(-SoNgaySucc + 1).Date.AddHours(1));
                                    break;
                                default:
                                    break;
                            }
                            tasks_Depen.Add(new TaskDataItem()
                            {
                                PredecessorCode = codePre,
                                SuccessorCode = codeSuc,
                                DependencyType = (DependencyType)depen
                            });
                            gc_Tiendo.DependencySource = tasks_Depen;
                            gc_Tiendo.RefreshDataSource();
                            gc_Tiendo.Refresh();
                            DateTime NBD = DateTime.Parse(e.Node.GetValue("StartDate").ToString());
                            DateTime NKT = DateTime.Parse(e.Node.GetValue("FinishDate").ToString());
                            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"NgayBatDau\" = '{NBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'," +
                                $"\"NgayKetThuc\" = '{NKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE \"Code\" = '{CodeISuc}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            CapNhatNgaySauKhiModifiedTask(wb.Range[TDKH.RANGE_KeHoach], CodeISuc,
                                NBD.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET), NKT.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET));

                        }
                        dbString = $"SELECT * FROM {TDKH.Tbl_Dependency} WHERE {Predecessorcode} = '{codePre.Replace(str2Remove, string.Empty)}' AND {Successorcode} = '{codeSuc}' AND \"LoaiCongTac\"='{LoaiCT}'";
                        DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        if (dt.Rows.Count != 0)
                        {
                            dbString = $"UPDATE {TDKH.Tbl_Dependency} SET \"Dependencytype\" = '{depen}' WHERE {Predecessorcode} = '{CodeIpre}' AND {Successorcode} = '{CodeISuc}' AND \"LoaiCongTac\"='Kế Hoạch'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }
                        else
                        {
                            dbString = $"INSERT INTO {TDKH.Tbl_Dependency} (\"Code\", {Predecessorcode}, {Successorcode}, \"LoaiCongTac\", \"Dependencytype\") VALUES " +
                           $"('{Guid.NewGuid()}', '{CodeIpre}', '{CodeISuc}', '{LoaiCT}', '{depen}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }
                    }
                    else
                    {

                        string TaoLienKet = Multimatch[0].Groups["ViTri"].ToString();
                        string LoaiLK = Multimatch[0].Groups["KyHieu"].ToString().ToUpper();
                        //string Sys = Multimatch[0].Groups["sys"].ToString();
                        int Number = int.Parse($"{Multimatch[0].Groups["sys"]}{Multimatch[0].Groups["Number"]}");
                        if (!MyConstant.lstTaoLienKet.Contains(LoaiLK))
                        {
                            MessageShower.ShowError("Ký tự nhập không đúng với quy ước, Vui lòng nhập đúng quy ước bao gồm: STT dòng muốn tạo liên kết+Ký hiệu" +
              " tạo liên kết (bao gồm FF,SS,SF,FS)...Vd 1FS+1days,2SS-1days");
                            e.Node.SetValue("NhapLienKet", string.Empty);
                            return;
                        }
                        gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Auto;
                        int SoNgaySucc = int.Parse(e.Node.GetValue("ThoiGianThiCong").ToString());
                        string codePre = string.Empty, codeSuc = UID, dbString = string.Empty;
                        int depen = 0;
                        List<TaskDataItem> tasks_Depen = gc_Tiendo.DependencySource as List<TaskDataItem>;
                        List<TaskDataItem> tasks = gc_Tiendo.DataSource as List<TaskDataItem>;
                        TaskDataItem CongTacLK = tasks.Where(x => x.STT == TaoLienKet).FirstOrDefault();
                        if (CongTacLK is null)
                        {
                            MessageShower.ShowError("Dòng Liên kết không đúng, Vui lòng nhập lại dòng muốn liên kết!!!!!!");
                            e.Node.SetValue("NhapLienKet", string.Empty);
                            return;
                        }
                        codePre = CongTacLK.UID;
                        if (codePre == codeSuc)
                        {
                            MessageShower.ShowError("Dòng Liên kết không trùng với dòng hiện tại, Vui lòng nhập lại dòng muốn liên kết!!!!!!");
                            e.Node.SetValue("NhapLienKet", string.Empty);
                            return;
                        }
                        str2Remove = UID.Substring(UID.LastIndexOf("_"));
                        string LoaiCT = str2Remove == "_HM" ? "Hạng mục" : str2Remove == "_CTR" ? "Công trình" : str2Remove == "_KeHoach" ? "Kế Hoạch" : str2Remove == "_CodeNhom" ? "Nhóm" : "Tuyến";
                        string Predecessorcode = $"Predecessorcode{str2Remove}";
                        string Successorcode = $"Successorcode{str2Remove}";

                        string CodeIpre = codePre.Replace(str2Remove, string.Empty);
                        string CodeISuc = codeSuc.Replace(str2Remove, string.Empty);
                        if (UID.Contains("_CTR") || UID.Contains("_HM") || UID.Contains("_CodeTuyen") || UID.Contains("_CodeNhom"))
                        {
                            gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Manual;
                            if (!codePre.Contains(str2Remove))
                            {
                                MessageShower.ShowError("Chỉ tạo được liên kết với dòng Cùng CẤP ĐỘ, Ví dụ: Công trình-Công trình, Hạng mục-Hạng mục, Tuyến-Tuyến, Nhóm-Nhóm, Công tác-Công tác" +
                                    ", Vui lòng nhập lại dòng muốn tạo liên kết!!!!!!");
                                e.Node.SetValue("NhapLienKet", string.Empty);
                                return;
                            }
                            if (UID.Contains("_CodeTuyen") || UID.Contains("_CodeNhom"))
                            {
                                string removeSecondpre = CodeIpre.Substring(CodeIpre.LastIndexOf("_"));
                                string removeSecondsuc = CodeISuc.Substring(CodeISuc.LastIndexOf("_"));
                                CodeIpre = CodeIpre.Replace(removeSecondpre, string.Empty);
                                CodeISuc = CodeISuc.Replace(removeSecondsuc, string.Empty);
                            }
                            switch (LoaiLK)
                            {
                                case MyConstant.FF:
                                    depen = 1;
                                    break;
                                case MyConstant.FS:
                                    break;
                                case MyConstant.SS:
                                    depen = 3;
                                    break;
                                case MyConstant.SF:
                                    depen = 2;
                                    break;
                                default:
                                    break;
                            }
                            tasks_Depen.Add(new TaskDataItem()
                            {
                                PredecessorCode = codePre,
                                SuccessorCode = codeSuc,
                                DependencyType = (DependencyType)depen
                            });
                            gc_Tiendo.DependencySource = tasks_Depen;
                            gc_Tiendo.RefreshDataSource();
                            gc_Tiendo.Refresh();
                        }
                        else if (UID.Contains("_KeHoach"))
                        {
                            bool CongTac = int.TryParse(TaoLienKet, out int STTCongTac);
                            if (!CongTac)
                            {
                                MessageShower.ShowError("Chỉ tạo được liên kết với dòng Công Tác, Vui lòng nhập lại dòng muốn tạo liên kết, Ví dụ 1FF,1SF,....!!!!!!");
                                e.Node.SetValue("NhapLienKet", string.Empty);
                                return;
                            }
                            codePre = CongTacLK.UID;
                            switch (LoaiLK)
                            {
                                case MyConstant.FF:
                                    depen = 1;
                                    e.Node.SetValue("FinishDate", CongTacLK.FinishDate.Value.Date.AddHours(23).AddDays(Number));
                                    e.Node.SetValue("StartDate", CongTacLK.FinishDate.Value.AddDays(-SoNgaySucc + 1).Date.AddHours(1).AddDays(Number));
                                    break;
                                case MyConstant.FS:
                                    e.Node.SetValue("StartDate", CongTacLK.FinishDate.Value.Date.AddHours(1).AddDays(Number));
                                    e.Node.SetValue("FinishDate", CongTacLK.FinishDate.Value.AddDays(SoNgaySucc - 1).Date.AddHours(23).AddDays(Number));
                                    break;
                                case MyConstant.SS:
                                    depen = 3;
                                    e.Node.SetValue("StartDate", CongTacLK.StartDate.Value.Date.AddHours(1).AddDays(Number));
                                    e.Node.SetValue("FinishDate", CongTacLK.StartDate.Value.AddDays(SoNgaySucc - 1).Date.AddHours(23).AddDays(Number));
                                    break;
                                case MyConstant.SF:
                                    depen = 2;
                                    e.Node.SetValue("FinishDate", CongTacLK.StartDate.Value.Date.AddHours(23).AddDays(Number));
                                    e.Node.SetValue("StartDate", CongTacLK.StartDate.Value.AddDays(-SoNgaySucc + 1).Date.AddHours(1).AddDays(Number));
                                    break;
                                default:
                                    break;
                            }
                            tasks_Depen.Add(new TaskDataItem()
                            {
                                PredecessorCode = codePre,
                                SuccessorCode = codeSuc,
                                DependencyType = (DependencyType)depen
                            });
                            gc_Tiendo.DependencySource = tasks_Depen;
                            gc_Tiendo.RefreshDataSource();
                            gc_Tiendo.Refresh();
                            DateTime NBD = DateTime.Parse(e.Node.GetValue("StartDate").ToString());
                            DateTime NKT = DateTime.Parse(e.Node.GetValue("FinishDate").ToString());
                            dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"NgayBatDau\" = '{NBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'," +
                                $"\"NgayKetThuc\" = '{NKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE \"Code\" = '{CodeISuc}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            CapNhatNgaySauKhiModifiedTask(wb.Range[TDKH.RANGE_KeHoach], CodeISuc,
                                NBD.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET), NKT.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET));

                        }
                        dbString = $"SELECT * FROM {TDKH.Tbl_Dependency} WHERE {Predecessorcode} = '{codePre.Replace(str2Remove, string.Empty)}' AND {Successorcode} = '{codeSuc}' AND \"LoaiCongTac\"='{LoaiCT}'";
                        DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        if (dt.Rows.Count != 0)
                        {
                            dbString = $"UPDATE {TDKH.Tbl_Dependency} SET \"Dependencytype\" = '{depen}' WHERE {Predecessorcode} = '{CodeIpre}' AND {Successorcode} = '{CodeISuc}' AND \"LoaiCongTac\"='Kế Hoạch'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }
                        else
                        {
                            dbString = $"INSERT INTO {TDKH.Tbl_Dependency} (\"Code\", {Predecessorcode}, {Successorcode}, \"LoaiCongTac\", \"Dependencytype\") VALUES " +
                           $"('{Guid.NewGuid()}', '{CodeIpre}', '{CodeISuc}', '{LoaiCT}', '{depen}')";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        }
                    }
                }
            }
        }

        private void gc_Tiendo_TaskMoveCompleted(object sender, TaskMovingEventArgs e)
        {
            if (cbo_LoaiTienDo.SelectedIndex > 0)
            {
                e.Cancel = true;
                return;
            }
            string str2Remove = "";
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            CellRange range = null;
            string Name = e.ProcessedNode.GetValue("UID").ToString();
            if (!Name.Contains("_KeHoach"))
            {
                MessageShower.ShowInformation("Chỉ có thể thay đổi ngày kế hoạch");
                e.Cancel = true;
            }
            else
            {
                if ((DateTime)e.CurrentTaskStart.Value.Date == (DateTime)e.OriginalTaskStart.Value.Date)
                {
                    e.Cancel = true;
                }
            }
        }

        private void CapNhatNgaySauKhiModifiedTask(CellRange range, string codeCV, string newDateBD, string newDateKT, string GhiChu = null)
        {
            Worksheet ws = range.Worksheet;
            int type = Array.IndexOf(TDKH.sheetsName, ws.Name);
            if (type < 0)
                return;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            var Search = MyFunction.SearchRangeCell(ws, codeCV);
            if (Search.FirstOrDefault() == null)
                return;
            int Rowindex = MyFunction.SearchRangeCell(ws, codeCV).FirstOrDefault().RowIndex;
            //int indColCode = ws.Columns[dic[TDKH.COL_Code]].Index;
            //var cells = ws.Range.FromLTRB(indColCode, range.TopRowIndex, indColCode, range.BottomRowIndex).Search(codeCV, MyConstant.MySearchOptions);
            //Cell cellCode = cells.First();
            Row rowChanged = ws.Rows[Rowindex];
            if (GhiChu != null)
                rowChanged[dic[TDKH.COL_GhiChu]].SetValueFromText(GhiChu);
            if (!string.IsNullOrEmpty(newDateBD))
            {
                rowChanged[dic[TDKH.ColsNgayBatDau[type]]].SetValueFromText(newDateBD);
            }

            if (!string.IsNullOrEmpty(newDateKT))
            {
                rowChanged[dic[TDKH.ColsNgayKetThuc[type]]].SetValueFromText(newDateKT);
            }
            //MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(rowChanged);
        }

        private void gc_Tiendo_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {
            if (e.Node.GetValue("UID") == null)
                return;
            if (e.Node.Level < 4)
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
            if (e.Node.Level == 0)
                e.Appearance.ForeColor = DXSkinColors.FillColors.Danger;
            else if (e.Node.Level == 1)
                e.Appearance.ForeColor = MyConstant.color_Row_CongTrinh;
            else if (e.Node.Level == 2)
            {
                if (e.Node.GetValue("UID").ToString().Contains("_MuiTC"))
                {
                    e.Appearance.ForeColor = MyConstant.color_Row_MuiTC;
                }
                else
                    e.Appearance.ForeColor = MyConstant.color_Row_HangMuc;
            }
            else if (e.Node.Level == 3)
            {
                if (e.Node.GetValue("UID").ToString().Contains("_HM"))
                {
                    e.Appearance.ForeColor = MyConstant.color_Row_HangMuc;
                }
                else if (e.Node.GetValue("UID").ToString().Contains("_CodeTuyen"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = Color.Red;
                }
                else if (e.Node.GetValue("UID").ToString().Contains("_CodeNhom"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = MyConstant.color_Row_NhomCongTac;
                }
            }
            else if (e.Node.Level == 4)
            {
                if (e.Node.GetValue("UID").ToString().Contains("_CodeTuyen"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = Color.Red;
                }
                else if (e.Node.GetValue("UID").ToString().Contains("_CodeNhom"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = MyConstant.color_Row_NhomCongTac;
                }
                else if (e.Node.GetValue("UID").ToString().Contains("_NhaThau"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = Color.Purple;
                }
            }
            else if (e.Node.Level == 5)
            {
                if (e.Node.GetValue("UID").ToString().Contains("_CodeNhom"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = MyConstant.color_Row_NhomCongTac;
                }
                else if (e.Node.GetValue("UID").ToString().Contains("_CodeTuyen"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = Color.Red;
                }
                else if (e.Node.GetValue("UID").ToString().Contains("Thi công") || e.Node.GetValue("UID").ToString().Contains("Kế hoạch"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                }
                else if (e.Node.GetValue("UID").ToString().Contains("_NhaThau"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = Color.Purple;
                }
            }
            else
            {
                if (e.Node.GetValue("UID").ToString().Contains("Thi công") || e.Node.GetValue("UID").ToString().Contains("Kế hoạch"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                }
                else if (e.Node.GetValue("UID").ToString().Contains("_NhaThau"))
                {
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                    e.Appearance.ForeColor = Color.Purple;
                }
            }
        }

        private void gc_Tiendo_PopupMenuShowing(object sender, DevExpress.XtraTreeList.PopupMenuShowingEventArgs e)
        {
            //gc_Tiendo.LookAndFeel.SkinName = 

        }

        private void cbo_MTD_ChonMauTienDo_SelectedIndexChanged(object sender, EventArgs e)
        {
            gc_Tiendo.LookAndFeel.SkinName = cbo_MTD_ChonMauTienDo.Text;
        }

        private void btn_TDKH_TienDo_xuat_Click(object sender, EventArgs e)
        {
            //gc_Tiendo.ShowPrintPreview();
            gc_Tiendo.ShowRibbonPrintPreview();
        }

        private void bt_TDKH_dayoffSetting_Click(object sender, EventArgs e)
        {

        }


        private void fcn_UpdateNgayNghi()
        {
            gc_Tiendo.OptionsBehavior.ScheduleMode = DevExpress.XtraGantt.Options.ScheduleMode.Manual;
            gc_Tiendo.BeginUpdate();
            List<DayOfWeek> lsNgayNghiChungTrongTuanDuAn = new List<DayOfWeek>();
            List<string> lsNgayNghiChungDuAn = new List<string>();

            List<DayOfWeek> lsNgayNghiChungTrongTuanCongTrinh = new List<DayOfWeek>();
            List<string> lsNgayNghiChungCongTrinh = new List<string>();

            List<DayOfWeek> lsNgayNghiChungTrongTuanHangMuc = new List<DayOfWeek>();
            List<string> lsNgayNghiChungHangMuc = new List<string>();
            List<TaskDataItem> tasks = gc_Tiendo.DataSource as List<TaskDataItem>;
            List<TaskSplitInfo> splitTasks = new List<TaskSplitInfo>();
            string query = "", dbString = "", CodeCongTacGD = "";
            List<string> NTC = new List<string>();

            if (tasks is null)
                return;

            foreach (TaskDataItem task in tasks)
            {

                if (task.TaskType == TDKH.TYPE_TaskTienDo_KeHoach || task.TaskType == TDKH.TYPE_TaskTienDo_ThiCong)
                {
                    //if(task.TaskType == TDKH.TYPE_TaskTienDo_ThiCong)
                    //{
                    //    NTC.Clear();
                    //    query = $"\"CodeCongTac\" = '{task.UID.Replace("_ThiCong", "")}' AND \"LoaiCongTac\" = 'Thi công'";
                    //    CodeCongTacGD = task.UID.Replace("_ThiCong", "");
                    //    if (task.ColCode == "CodeNhaThau")
                    //    {
                    //        dbString = $"SELECT \"Code\" FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeCongTac\"='{task.CodeCongTac}' AND \"CodeNhaThau\" IS NULL ";
                    //        DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    //        string lstCode = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                    //        dbString = $"SELECT \"Ngay\", \"KhoiLuongThiCong\" FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE \"CodeCongTacTheoGiaiDoan\" IN ({lstCode})";
                    //        dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    //        if (dt.Rows.Count != 0)
                    //        {
                    //            var CrowDate = dt.AsEnumerable().Where(x => x["KhoiLuongThiCong"] != DBNull.Value).GroupBy(x => DateTime.Parse(x["Ngay"].ToString()));
                    //            CrowDate.ForEach(x => NTC.Add(x.Key.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)));

                    //        }
                    //    }
                    //    else
                    //    {
                    //        dbString = $"SELECT \"Ngay\", \"KhoiLuongThiCong\" FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE \"CodeCongTacTheoGiaiDoan\"='{CodeCongTacGD}'";
                    //        DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    //        if (dt.Rows.Count != 0)
                    //            NTC = dt.AsEnumerable().Where(x => x["KhoiLuongThiCong"] != DBNull.Value).Select(x => DateTime.Parse(x["Ngay"].ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)).ToList();

                    //    }
                    //}
                    var ngayNghis = TDKHHelper.GetNgayNghiOfCongTac((cbo_LoaiTienDo.SelectedIndex == 0) ? TypeKLHN.CongTac : TypeKLHN.VatLieu, task.UID.Split('_').First());
                    if (ngayNghis.Count() == 0 /*&& NTC.Count() == 0*/)
                        continue;
                    for (DateTime date = task.StartDate ?? DateTime.Now.Date; date < task.FinishDate; date = date.AddDays(1))
                    {
                        if (ngayNghis.Contains(date))
                        {
                            splitTasks.Add(new TaskSplitInfo()
                            {
                                UID = task.UID,
                                StartDate = date.Date + TimeSpan.FromHours(0.00001),
                                Duration = TimeSpan.FromDays(0.999999)
                            });

                        }
                        //if (task.TaskType == TDKH.TYPE_TaskTienDo_ThiCong)
                        //{
                        //    if (NTC.Contains(date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)) || CodeCongTacGD.Contains("_DongTrong"))
                        //        continue;
                        //    splitTasks.Add(new TaskSplitInfo()
                        //    {
                        //        UID = task.UID,
                        //        StartDate = date.Date + TimeSpan.FromHours(0.00001),
                        //        Duration = TimeSpan.FromDays(0.999999)
                        //    });
                        //}
                    };

                }
            }
            gc_Tiendo.SplitTaskSource = splitTasks;
            gc_Tiendo.EndUpdate();
        }

        //private void fcn_TDKH_GetNgayNghiChung(string query, out List<string> Ngay, out List<DayOfWeek> NgayTrongTuan)
        //{
        //    Ngay = new List<string>();
        //    NgayTrongTuan = new List<DayOfWeek>();
        //    string dbString = $"SELECT * FROM {TDKH.Tbl_Ngaynghi} WHERE {query}";
        //    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //    DataRow NgayNghiTrongTuan = dt.AsEnumerable().Where(x => !string.IsNullOrEmpty(x["NgayTrongTuan"].ToString())).FirstOrDefault();

        //    if (NgayNghiTrongTuan != null)
        //    {
        //        string[] lsNgayNghi = NgayNghiTrongTuan["NgayTrongTuan"].ToString().Split(new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries);
        //        foreach (string str in lsNgayNghi)
        //        {
        //            if (!NgayTrongTuan.Contains(MyConstant.dicDayOfWeek[str]))
        //            {
        //                NgayTrongTuan.Add(MyConstant.dicDayOfWeek[str]);
        //            }
        //        }
        //    }


        //    DataRow[] NgayNghis = dt.AsEnumerable().Where(x => !string.IsNullOrEmpty(x["Ngay"].ToString())).ToArray();

        //    foreach (DataRow dr in NgayNghis)
        //    {
        //        Ngay.Add(dr["Ngay"].ToString());
        //    }

        //}

        private void tabGIAODIENCHINHQLTC_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F3)
            {
                np_ThongTinDA_ChucNangKhac.State = (np_ThongTinDA_ChucNangKhac.State == NavigationPaneState.Collapsed)
                    ? NavigationPaneState.Regular : NavigationPaneState.Collapsed;
            }
        }

        private void btn_Taomoihopdong_Click(object sender, EventArgs e)
        {
            //Form_Taomoihopdong_Thucong frm_hd = new Form_Taomoihopdong_Thucong(slke_ThongTinDuAn.EditValue.ToString());
            //frm_hd.ShowDialog();
        }

        private void hyperlinkLabelControl1_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start(hyperlinkLabelControl1.Text);
        }

        private void cbb_TDKH_DBC_PhatSinh_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox cbb = sender as ComboBox;
            if (cbb_TDKH_DBC_PhatSinh.SelectedIndex < 0)
                return;

            if (cbb.SelectedIndex == cbb.Items.Count - 1)
            {
                string dbString = $"SELECT * FROM {TDKH.TBL_SoLanPhatSinh} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string tenPhatSinh = "Phát sinh lần 1";
                if (dt.Rows.Count > 0)
                {
                    string ten = dt.Rows[dt.Rows.Count - 1]["Ten"].ToString();
                    string[] lsItem = ten.Split(' ');
                    int max;
                    if (!int.TryParse(lsItem.Last(), out max))
                    {
                        MessageShower.ShowInformation("Lỗi parse dữ liệu số lần phát sinh");
                        return;
                    }
                    tenPhatSinh = $"Phát sinh lần {max + 1}";
                }
                string newGuid = Guid.NewGuid().ToString();
                dt.Rows.Add(newGuid, slke_ThongTinDuAn.EditValue.ToString(), tenPhatSinh);
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, TDKH.TBL_SoLanPhatSinh);
                fcn_UpdateCboSoLanPhatSinh();
                WaitFormHelper.ShowWaitForm("Đang thêm phát sinh");
                TDKHHelper.fcn_TDKH_DBC_ChenCotPhatSinh(tenPhatSinh, newGuid);
                WaitFormHelper.CloseWaitForm();
            }
        }



        private async void spsheet_TD_KH_LapKeHoach_CustomDrawCell(object sender, CustomDrawCellEventArgs e)
        {

            string wsName = e.Cell.Worksheet.Name;
            //CellRange range = e.Cell.Worksheet.Workbook.Range[TDKH_DBC.RANGE_DoBocChuan];
            IWorkbook wb = e.Cell.Worksheet.Workbook;
            Worksheet ws = e.Cell.Worksheet;
            if (!wb.DefinedNames.Contains(TDKH.RANGE_DoBocChuan))
                return;
            //wb.BeginUpdate();
            //string loaiHang = e.Cell.Worksheet.Rows[e.Cell.RowIndex][dic[GiaoViec.COL_LOAIHANG].Value.ToString();
            Dictionary<string, string> dicDB = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);


            if (e.Cell.Value.ErrorValue?.Type == ErrorType.Value
                || e.Cell.Value.ErrorValue?.Type == ErrorType.DivisionByZero)
            {
                e.Text = "";
                e.DrawDefault();
                e.Handled = true;
            }

            string typeRow = ws.Rows[e.Cell.RowIndex][dicDB[TDKH.COL_TypeRow]].Value.ToString();

            switch (ws.Name)
            {
                case TDKH.SheetName_DoBocChuan:
                    if (e.Cell.RowIndex > BaseFrom.IndFstCellDataDoBocChuan && BaseFrom.IndsCheckBoxDoBocChuan.Contains(e.Cell.ColumnIndex))
                    {
                        e.Text = "";
                        int x_center = (e.Bounds.Left + e.Bounds.Right) / 2;
                        int y_center = (e.Bounds.Bottom + e.Bounds.Top) / 2;
                        Rectangle rec = new Rectangle(x_center - 25, y_center - 10, 50, 20);
                        e.Cache.Paint.DrawCheckBox(e.Cache.Graphics, rec, (e.Cell.Value == true) ? ButtonState.Checked : ButtonState.Normal);
                    }
                    break;
                case TDKH.SheetName_KeHoachKinhPhi:
                    if (e.Cell.RowIndex > BaseFrom.IndFstCellDataKeHoach && BaseFrom.IndsCheckBoxKeHoach.Contains(e.Cell.ColumnIndex))
                    {
                        e.Text = "";
                        int x_center = (e.Bounds.Left + e.Bounds.Right) / 2;
                        int y_center = (e.Bounds.Bottom + e.Bounds.Top) / 2;
                        Rectangle rec = new Rectangle(x_center - 25, y_center - 10, 50, 20);
                        e.Cache.Paint.DrawCheckBox(e.Cache.Graphics, rec, (e.Cell.Value == true) ? ButtonState.Checked : ButtonState.Normal);
                    }
                    break;
                default:

                    break;
            }




        }

        private void spsheet_TD_KH_LapKeHoach_KeyUp(object sender, KeyEventArgs e)
        {
            SpreadsheetControl spsheet = sender as SpreadsheetControl;
            Worksheet ws = spsheet.Document.Worksheets.ActiveWorksheet;

            if (e.KeyCode == Keys.Insert)
            {
                //Worksheet ws = spsheet_TDKH_DoBocKLKeHoach.Document.Worksheets[TDKH.SheetName_DoBocChuan];
                int ind = ws.SelectedCell.TopRowIndex;
                ws.Rows.Insert(ind, ws.SelectedCell.RowCount, RowFormatMode.FormatAsNext);
            }
            //else if (e.KeyCode == Keys.F8)
            //{
            //    int ind = ws.SelectedCell.TopRowIndex;
            //    ws.Rows.Remove(ind, ws.SelectedCell.RowCount);
            //}
            /*else if (e.KeyCode == Keys.Delete || e.KeyCode == Keys.F8)
            {
                if (ws.Name == TDKH.SheetName_DoBocChuan)
                {
                    var crRange = ws.SelectedCell;
                    var rangeDoBoc = ws.Range[TDKH.RANGE_DoBocChuan];
                    var dicDoBoc = MyFunction.fcn_getDicOfColumn(rangeDoBoc);
                    int indColCode = ws.Range.GetColumnIndexByName(dicDoBoc[TDKH.COL_Code]);
                    
                    if (crRange.LeftColumnIndex <= indColCode && crRange.RightColumnIndex >= indColCode)
                    {
                        List<string> codesCha = new List<string>();
                        List<string> codesCon = new List<string>();
                        
                        for (int i = crRange.BottomRowIndex; i <= crRange.TopRowIndex; i++)
                        {
                            
                            string typeRow = ws.Rows[i][dicDoBoc[TDKH.COL_TypeRow]].Value.ToString();
                            string code = ws.Rows[i][dicDoBoc[TDKH.COL_Code]].Value.ToString();
                            if (typeRow == MyConstant.TYPEROW_CVCha)
                            {
                                codesCha.Add(code);

                                //var inds = ws.Columns[dicDoBoc[TDKH.COL_RowCha]]
                                //            .Search((i + 1).ToString(), MyConstant.MySearchOptions)
                                //            .Select(x => x.RowIndex);
                                
                            }
                            else if (typeRow == MyConstant.TYPEROW_CVCON)
                            {
                                codesCon.Add(code);
                            }
                        }
                        if (codesCha.Any())
                        {
                            DuAnHelper.DeleteDataRows(TDKH.TBL_ChiTietCongTacTheoKy, codesCha);
                        }
                        if (codesCon.Any())
                        {
                            DuAnHelper.DeleteDataRows(TDKH.TBL_ChiTietCongTacTheoKy, codesCon);
                        }
                        if (codesCha.Any() || codesCon.Any())
                            fcn_LoadCongTacDoBoc();
                    }

                }
            }*/
            else return;
        }

        private void btn_TDKH_DocKhoiLuongExcelLamKeHoach_Click(object sender, EventArgs e)
        {

        }

        private void fcn_updatenhathau_todoi_ncc(string tensheet)
        {
            spsheet_Thongtinchinh.BeginUpdate();
            string dbString = $"SELECT \"Code\", \"Ten\" FROM \"{MyConstant.TBL_THONGTINNHATHAU}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_nhathau = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT \"Code\", \"Ten\" FROM \"{MyConstant.TBL_THONGTINTODOITHICONG}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_todoi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT \"Code\", \"Ten\" FROM \"{MyConstant.TBL_THONGTINNHATHAUPHU}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_thauphu = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT \"Code\", \"Ten\" FROM \"{MyConstant.TBL_THONGTINNHACUNGCAP}\" WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_NCC = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            int i = 0;
            IWorkbook workbook = spsheet_Thongtinchinh.Document;
            Worksheet sheetThongTin = workbook.Worksheets[tensheet];
            Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(sheetThongTin.Range[MyConstant.TBL_QUYETTHONGTIN]);
            foreach (var str in NAME_COL)
            {
                if (str.Key.Remove(2) == "KL" || str.Key.Remove(2) == "TT" || str.Key.Remove(2) == "DG")
                {
                    NAME_COL = MyFunction.fcn_getDicOfColumn(sheetThongTin.Range[MyConstant.TBL_QUYETTHONGTIN]);
                    sheetThongTin.Columns.Remove(NAME_COL[str.Key]);
                }

            }

            fcn_taocotnhathau_todoi_nhathauphu(i++, dt_nhathau, sheetThongTin, NAME_COL, true);
            fcn_taocotnhathau_todoi_nhathauphu(i++, dt_thauphu, sheetThongTin, NAME_COL, true);
            fcn_taocotnhathau_todoi_nhathauphu(i++, dt_todoi, sheetThongTin, NAME_COL, true);
            fcn_taocotchoVL_Mtc_NC(tensheet, tensheet);
            spsheet_Thongtinchinh.EndUpdate();
        }
        private void fcn_taocotnhathau_todoi_nhathauphu_ncc(int i, DataTable dt, Worksheet name, Dictionary<string, string> NameDic)
        {
            foreach (DataRow item in dt.Rows)
            {
                foreach (var str in NameDic)
                {
                    name.Columns.Insert(name.Range[str.Key].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                    name.Rows[1][name.Range[str.Key].RightColumnIndex - 1].Value = str.Value + item["Ten"].ToString();
                    name.Rows[0][name.Range[str.Key].RightColumnIndex - 1].Value = str.Value + item["Ten"].ToString();
                    name.Columns[name.Range[str.Key].RightColumnIndex - 1].Font.Color = MyConstant.color_COLNHATHAU_TODOI[i];
                }
            }
        }
        private void fcn_taocotchoVL_Mtc_NC(string namesheet, string loaiVL)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;
            IWorkbook workbook = spsheet_Thongtinchinh.Document;
            Worksheet ws = workbook.Worksheets[namesheet];
            spsheet_Thongtinchinh.CellValueChanged -= spsheet_Thongtinchinh_CellValueChanged;
            spsheet_Thongtinchinh.BeginUpdate();
            string dbString = $"SELECT cttk.Code,\r\n" +
                    $"cttk.CodeHangMuc,\r\n" +
                    $"cttk.LoaiVatTu,\r\n" +
                    $"cttk.DonVi,\r\n" +
                    $"cttk.DonGia,\r\n" +
                    $"cttk.DonGiaThiCong as DonGiaDuThau,\r\n" +
                    $"cttk.NgayBatDau,\r\n" +
                    $"cttk.NgayKetThuc,\r\n" +
                    $"cttk.CodeNhaThau,\r\n" +
                    $"cttk.CodeNhaThauPhu,\r\n" +
                    $"cttk.CodeToDoi,\r\n" +
                    $"cttk.KhoiLuongKeHoach as KhoiLuongToanBo,\r\n" +
                    $"cttk.VatTu as TenCongTac,\r\n" +
                    $"cttk.MaVatLieu as MaHieuCongTac,\r\n" +
                    $"hm.CodeCongTrinh,\r\n" +
                    $"hm.Ten as TenHangMuc,\r\n" +
                    $"ctrinh.Ten as TenCongTrinh,\r\n" +
                    $"ctrinh.CodeDuAn,\r\n" +
                    $"nt.Ten AS TenNhaThau,\r\n" +
                    $"tdtc.Ten AS TenToDoi,\r\n" +
                    $"ntp.Ten AS TenNhaThauPhu,Tuyen.Ten as TenTuyen,Tuyen.Code as CodePhanTuyen, null AS CodeNhom,\r\n" +
                    $"cttktp.KhoiLuongKeHoach as KhoiLuongThauPhu,cttktp.DonGiaThiCong as DonGiaThauPhu," +
                    $"cttktd.KhoiLuongKeHoach as KhoiLuongToDoi,cttktd.DonGiaThiCong as DonGiaToDoi,cttktp.CodeNhaThauPhu as CodeTP,cttktd.CodeToDoi as CodeTD \r\n" +
                    $"FROM {TDKH.TBL_KHVT_VatTu} cttk \r\n" +
                    $"LEFT JOIN {TDKH.TBL_KHVT_VatTu} cttktp \r\n" +
                    $"ON cttk.CodeHangMuc = cttktp.CodeHangMuc AND cttk.CodeGiaiDoan = cttktp.CodeGiaiDoan " +
                    $"AND { string.Format(TDKH.formatStringVatTu, "cttk")} = { string.Format(TDKH.formatStringVatTu, "cttktp")} \r\n" +
                    $"AND cttktp.CodeNhaThauPhu IS NOT NULL \r\n" +
                    $"LEFT JOIN {TDKH.TBL_KHVT_VatTu} cttktd \r\n" +
                    $"ON cttk.CodeHangMuc = cttktd.CodeHangMuc AND cttk.CodeGiaiDoan = cttktd.CodeGiaiDoan " +
                    $"AND { string.Format(TDKH.formatStringVatTu, "cttk")} = { string.Format(TDKH.formatStringVatTu, "cttktd")} \r\n" +
                    $"AND cttktd.CodeToDoi IS NOT NULL \r\n" +
                    $"LEFT JOIN {TDKH.Tbl_PhanTuyen} Tuyen \r\n" +
                    $"ON cttk.CodePhanTuyen = Tuyen.Code \r\n" +
                    $"INNER JOIN {MyConstant.TBL_THONGTINHANGMUC} hm \r\n" +
                    $"ON cttk.CodeHangMuc = hm.Code \r\n" +
                    $"INNER JOIN {MyConstant.TBL_THONGTINCONGTRINH} ctrinh \r\n" +
                    $"ON hm.CodeCongTrinh = ctrinh.Code \r\n" +
                    $"INNER JOIN {MyConstant.TBL_THONGTINDUAN} da \r\n" +
                    $"ON ctrinh.CodeDuAn = da.Code \r\n" +
                    $"LEFT JOIN {MyConstant.TBL_THONGTINNHATHAU} nt \r\n" +
                    $"ON cttk.CodeNhaThau = nt.Code \r\n" +
                    $"LEFT JOIN {MyConstant.TBL_THONGTINTODOITHICONG} tdtc\r\n" +
                    $"ON cttktd.CodeToDoi = tdtc.Code \r\n" +
                    $"LEFT JOIN {MyConstant.TBL_THONGTINNHATHAUPHU} ntp \r\n" +
                    $"ON cttktp.CodeNhaThauPhu = ntp.Code \r\n" +
                    $"WHERE cttk.LoaiVatTu = '{loaiVL}' AND cttk.CodeNhaThau IS NOT NULL \r\n" +
                    $"AND da.Code = '{SharedControls.slke_ThongTinDuAn.EditValue}'";
            DataTable dtCongTacTheoKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dtCongTacTheoKy.AddIndPhanTuyenNhom();
            CellRange RangeData = ws.Range[MyConstant.TBL_QUYETTHONGTIN];
            RangeData.ClearContents();
            if (RangeData.RowCount - 2 <= dtCongTacTheoKy.Rows.Count)
                ws.Rows.Insert(RangeData.BottomRowIndex,
                dtCongTacTheoKy.Rows.Count * 2, RowFormatMode.FormatAsPrevious);
            int crRowInd = RangeData.TopRowIndex + 1;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            string Mahieu = "", TenCT = "";
            int RowHM = 0, RowTuyen = 0, RowNhom = 0, RowCongTrinh = 0;
            long stt = 1;
            string Fomular = "";
            List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource) as List<DonViThucHien>;
            List<int> IndexHM = new List<int>();
            var grCongTrinh = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["CodeCongTrinh"].ToString());
            foreach (var Ctrinh in grCongTrinh)
            {
                IndexHM.Clear();
                Row crRowWs = ws.Rows[crRowInd++];
                RowCongTrinh = crRowInd;
                var First = Ctrinh.FirstOrDefault();
                crRowWs.Font.Bold = true;
                crRowWs.Font.Color = MyConstant.color_Row_CongTrinh;
                //crRowWs[Name[TDKH.COL_Code]].SetValueFromText(Ctrinh.Key);
                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(First["TenCongTrinh"].ToString().ToUpper());

                var grHangMuc = Ctrinh.GroupBy(x => x["CodeHangMuc"].ToString());
                foreach (var HM in grHangMuc)
                {
                    crRowWs = ws.Rows[crRowInd++];
                    RowHM = crRowInd;
                    IndexHM.Add(RowHM);
                    crRowWs.Font.Bold = true;
                    crRowWs.Font.Color = MyConstant.color_Row_HangMuc;
                    crRowWs[Name[TDKH.COL_Code]].SetValueFromText(HM.Key);
                    //crRowWs[Name[TDKH.COL_RowCha]].SetValue(RowCongTrinh);
                    crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(HM.FirstOrDefault()["TenHangMuc"].ToString().ToUpper());

                    var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"])
                        .OrderBy(x => x.Key);
                    foreach (var Tuyen in grPhanTuyen)
                    {
                        var fstTuyen = Tuyen.First();
                        string crCodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : $"{fstTuyen["CodePhanTuyen"]}";
                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                        {
                            crRowWs = ws.Rows[crRowInd++];
                            crRowWs.Font.Bold = true;
                            RowTuyen = crRowInd;
                            crRowWs.Font.Color = MyConstant.color_Row_PhanTuyen;
                            //crRowWs[Name[TDKH.COL_Code]].SetValueFromText(crCodeTuyen);
                            //crRowWs[Name[TDKH.COL_RowCha]].SetValue(RowHM);
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_PhanTuyen);
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(fstTuyen["TenTuyen"].ToString().ToUpper());
                        }
                        var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"])
                                 .OrderBy(x => x.Key);

                        foreach (var NhomTuyen in grTuyenNhom)
                        {
                            var fstNhom = NhomTuyen.First();

                            //string crCodeNhom = (fstNhom["CodeNhom"] == DBNull.Value) ? null : $"{fstNhom["CodeNhom"]}";
                            //if (fstNhom["CodeNhom"] != DBNull.Value)
                            //{
                            //    crRowWs = ws.Rows[crRowInd++];
                            //    crRowWs.Font.Bold = true;
                            //    RowNhom = crRowInd;
                            //    crRowWs.Font.Color = MyConstant.color_Row_NhomCongTac;
                            //    //crRowWs[Name[TDKH.COL_Code]].SetValueFromText(crCodeNhom);
                            //    //crRowWs[Name[TDKH.COL_RowCha]].SetValue(RowTuyen);
                            //    crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_NHOM);
                            //    crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(fstNhom["TenNhom"].ToString().ToUpper());
                            //}
                            var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"].ToString());
                            foreach (var CongTac in grCongTacTuyen)
                            {
                                //int RowCha = crCodeTuyen != null ? RowTuyen : crCodeNhom != null ? RowNhom : RowHM;
                                var FirstCT = CongTac.FirstOrDefault();
                                WaitFormHelper.ShowWaitForm($"{crRowInd}.{FirstCT["MaHieuCongTac"]}_{FirstCT["TenCongTac"]}");
                                crRowWs = ws.Rows[crRowInd++];
                                crRowWs.Font.Color = Color.Black;
                                crRowWs.Font.Bold = false;
                                //crRowWs[Name[TDKH.COL_RowCha]].SetValue(RowCha);
                                crRowWs[Name[TDKH.COL_STT]].SetValue(stt++);
                                //crRowWs[Name[TDKH.COL_Code]].SetValueFromText(CongTac.Key);
                                //crRowWs[Name["CodeNhom"]].SetValueFromText(crCodeNhom);
                                //crRowWs[Name["CodeHM"]].SetValueFromText(HM.Key);
                                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(FirstCT["MaHieuCongTac"]);
                                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(FirstCT["TenCongTac"]);
                                //crRowWs[Name["CodeCongTac"]].SetValue(FirstCT["CodeCongTac"]);
                                crRowWs[Name[TDKH.COL_DonVi]].SetValue(FirstCT["DonVi"]);
                                crRowWs[Name["KhoiLuongDuThau"]].SetValue(FirstCT["KhoiLuongToanBo"]);
                                crRowWs[Name["DonGiaDuThau"]].SetValue(FirstCT["DonGia"]);
                                crRowWs[Name["ThanhTienDuThau"]].Formula = $"({Name["KhoiLuongDuThau"]}{crRowInd}*{Name["DonGiaDuThau"]}{crRowInd})";

                                string cotnhathau = $"KL_{FirstCT["CodeNhaThau"]}";
                                string cotdongianhathau = $"DG_{FirstCT["CodeNhaThau"]}";
                                string thanhtiennhathau = $"TT_{FirstCT["CodeNhaThau"]}";
                                crRowWs[Name[cotnhathau]].SetValue(FirstCT["KhoiLuongToanBo"]);
                                crRowWs[Name[cotdongianhathau]].SetValue(FirstCT["DonGiaDuThau"]);
                                crRowWs[Name[thanhtiennhathau]].Formula = $"({Name[cotnhathau]}{crRowInd}*{Name[cotdongianhathau]}{crRowInd})";

                                var grNhaThauPhu = CongTac.Where(x => x["CodeTP"] != DBNull.Value).GroupBy(x => x["CodeTP"].ToString());
                                foreach (var tp in grNhaThauPhu)
                                {
                                    cotnhathau = $"KL_{tp.Key}";
                                    cotdongianhathau = $"DG_{tp.Key}";
                                    thanhtiennhathau = $"TT_{tp.Key}";
                                    crRowWs[Name[cotnhathau]].SetValue(tp.FirstOrDefault()["KhoiLuongThauPhu"]);
                                    crRowWs[Name[cotdongianhathau]].SetValue(tp.FirstOrDefault()["DonGiaThauPhu"]);
                                    crRowWs[Name[thanhtiennhathau]].Formula = $"({Name[cotnhathau]}{crRowInd}*{Name[cotdongianhathau]}{crRowInd})";
                                }
                                var grToDoi = CongTac.Where(x => x["CodeTD"] != DBNull.Value).GroupBy(x => x["CodeTD"].ToString());
                                foreach (var tp in grToDoi)
                                {
                                    cotnhathau = $"KL_{tp.Key}";
                                    cotdongianhathau = $"DG_{tp.Key}";
                                    thanhtiennhathau = $"TT_{tp.Key}";
                                    crRowWs[Name[cotnhathau]].SetValue(tp.FirstOrDefault()["KhoiLuongToDoi"]);
                                    crRowWs[Name[cotdongianhathau]].SetValue(tp.FirstOrDefault()["DonGiaToDoi"]);
                                    crRowWs[Name[thanhtiennhathau]].Formula = $"({Name[cotnhathau]}{crRowInd}*{Name[cotdongianhathau]}{crRowInd})";
                                }
                            }
                        }
                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                        {
                            crRowWs = ws.Rows[crRowInd++];
                            crRowWs.Font.Bold = true;
                            crRowWs.Font.Color = MyConstant.color_Row_PhanTuyen;
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue($"Hoàn thành {Tuyen.FirstOrDefault()["TenTuyen"]}".ToUpper());
                        }
                    }
                    ws.Rows[RowHM - 1][Name["ThanhTienDuThau"]].Formula = $"=SUM({Name["ThanhTienDuThau"]}{RowHM + 1}:{Name["ThanhTienDuThau"]}{crRowInd})";
                    foreach (DonViThucHien item in DVTH)
                        ws.Rows[RowHM - 1][Name[$"TT_{item.Code}"]].Formula = $"=SUM({Name[$"TT_{item.Code}"]}{RowHM + 1}:{Name[$"TT_{item.Code}"]}{crRowInd})";
                }
                IndexHM.ForEach(x => Fomular += $"+{Name["ThanhTienDuThau"]}{x}");
                ws.Rows[RowCongTrinh - 1][Name["ThanhTienDuThau"]].Formula = Fomular;
                foreach (DonViThucHien item in DVTH)
                {
                    string NewFomula = Fomular.Replace($"{Name["ThanhTienDuThau"]}", $"{Name[$"TT_{item.Code}"]}");
                    ws.Rows[RowCongTrinh - 1][Name[$"TT_{item.Code}"]].Formula = NewFomula;
                }

            }
            spsheet_Thongtinchinh.EndUpdate();
            spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
            WaitFormHelper.CloseWaitForm();
        }

        /*private void spsheet_TDKH_VatTu_PopupMenuShowing(object sender, DevExpress.XtraSpreadsheet.PopupMenuShowingEventArgs e)
        {
            IWorkbook wb = spsheet_TDKH_VatTu.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            Cell cell = ws.SelectedCell.First();
            Row crRow = ws.Rows[cell.RowIndex];

            string typeRow = crRow[dicKPVL[TDKH.COL_TypeRow]].Value.ToString();

            if (typeRow == MyConstant.TYPEROW_CVCha || typeRow == MyConstant.TYPEROW_CVCON)
            {
                SpreadsheetMenuItem CaiDatDonGia = new SpreadsheetMenuItem("Thay đổi đơn giá thi công", fcn_Handle_Popup_TDKH_ThayDoiDonGiaHaoPhiVatTu);
                e.Menu.Items.Add(CaiDatDonGia);
            }
        }*/

        /*private void spsheet_TDKH_VatTu_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            IWorkbook wb = spsheet_TDKH_VatTu.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;

            int cellInd = e.RowIndex;
            Dictionary<string, string> dic = dicKPVL;
            Row crRow = ws.Rows[cellInd];
            string codeCha = crRow[dic[TDKH.COL_Code]].Value.ToString();
            Guid guid;

            if (!Guid.TryParse(codeCha, out guid))
            {
                MessageShower.ShowInformation("Không thể lấy id công tác!");
                MyFunction.fcn_ReverseCell(e);
                return;
            }
            string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
            //string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

            if (typeRow == MyConstant.TYPEROW_CVTong)
            {
                fcn_TDKH_LuuVatLieu(ws.Name, new List<Row> { crRow });
                return;
            }
            if (typeRow != MyConstant.TYPEROW_CVCha)
                return;
            int type = Array.IndexOf(TDKH.sheetsName, ws.Name);
            CellRange rangeNgayName = wb.Range[TDKH.rangesNgayName[type]];
            string header = ws.Rows[TDKH.RowIndKLTT_VatTu][e.ColumnIndex].Value.ToString();
            switch (header)
            {
                case "Khối lượng":
                    double dbl;
                    if (!double.TryParse(e.Value.ToString(), out dbl))
                    {
                        MessageShower.ShowInformation("Vui lòng nhập số thực cho khối lượng");
                        MyFunction.fcn_ReverseCell(e);
                        return;
                    }
                    break;
                case "Thành tiền":
                    int TT;
                    if (!int.TryParse(e.Value.ToString(), out TT))
                    {
                        MessageShower.ShowInformation("Vui lòng nhập số nguyên cho thành tiền");
                        MyFunction.fcn_ReverseCell(e);
                        return;
                    }
                    break;
                default:
                    break;
            }
            MyFunction.fcn_TDKH_CapNhatKeHoachKinhPhiChiTietTungNgay(ws.Rows[cellInd], cell: e.Cell);
            //string typeRow = 
            int STTTong = int.Parse(crRow[dic[TDKH.COL_RowCha]].Value.ToString());
            fcn_TDKH_LuuVatLieu(ws.Name, new List<Row> { ws.Rows[STTTong - 1] });

        }*/

        private void cb_chitiet_CheckedChanged(object sender, EventArgs e)
        {
            fcn_updateSheetThongTinChinh();
        }

        /*private void cb_HienCongTacChoVL_CheckedChanged(object sender, EventArgs e)
        {
            spsheet_TDKH_VatTu.BeginUpdate();
            IWorkbook wb = spsheet_TDKH_VatTu.Document;
            foreach (Worksheet ws in wb.Worksheets)
            {
                int type = Array.IndexOf(TDKH.sheetsName, ws.Name);
                string rangeDateName = TDKH.rangesNgayName[type];
                CellRange range = wb.Range[TDKH.rangesNameData[type]];
                for (int i = range.TopRowIndex + 1; i < range.BottomRowIndex; i++)
                {
                    string typerow = ws.Rows[i][dicKPVL[TDKH.COL_TypeRow]].Value.ToString();
                    if (typerow == MyConstant.TYPEROW_CVCha)
                        ws.Rows[i].Visible = (cb_HienCongTacChoVL.Checked);
                }
            }
            spsheet_TDKH_VatTu.EndUpdate();

        }*/

        /*private void cb_HienKeHoach_CheckedChanged(object sender, EventArgs e)
        {
            spsheet_TDKH_VatTu.BeginUpdate();

            IWorkbook wb = spsheet_TDKH_VatTu.Document;
            foreach (Worksheet ws in wb.Worksheets)
            {
                int type = Array.IndexOf(TDKH.sheetsName, ws.Name);
                string rangeDateName = TDKH.rangesNgayName[type];
                CellRange rangeNgay = wb.Range[TDKH.rangesNgayName[type]];
                for (int i = rangeNgay.LeftColumnIndex + 3; i < rangeNgay.RightColumnIndex; i += 4)
                {
                    ws.Columns[i].Visible = ws.Columns[i + 1].Visible = cb_HienKeHoach.Checked;
                }
            }
            spsheet_TDKH_VatTu.EndUpdate();

        }*/

        private void bt_VeBieuDo_Click(object sender, EventArgs e)
        {
            //Chart_NhanCong.PushData(fcn_TDKH_GetDataChartVatTu("Nhân công"));
        }

        private DataTable fcn_TDKH_GetDataChartVatTu(string loaiVT, string additionalCondition = "")
        {
            //List<Chart_KhoiLuongThanhTien> lsSource = new List<Chart_KhoiLuongThanhTien>();

            string condition = TongHopHelper.GetConditionNhaThauToDoiDoBoc();
            string dbString = $"SELECT * FROM {TDKH.TBL_KHVT_VatTu} WHERE \"LoaiVatTu\" = '{loaiVT}' AND {condition}";
            if (additionalCondition != "") //Tên vật liệu cụ thể
                dbString += $" AND {additionalCondition}";

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dt.Rows.Count == 0)
            {
                MessageShower.ShowInformation("Không có nhân công để vẽ biểu đồ");
                return dt;
            }

            string lsCodeVatTu = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            dbString = $"SELECT * FROM {TDKH.TBL_KHVT_KhoiLuongHangNgay} WHERE \"CodeVatTu\" IN ({lsCodeVatTu}) ORDER BY \"Ngay\" ASC";
            DataTable dtKL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            return dtKL;
        }

        private void btVeGantt_Click(object sender, EventArgs e)
        {
            //Chart_FullVatLieu.pushDataGantt(fcn_TDKH_GetVatTu("Vật liệu"));
        }



        private DataTable fcn_TDKH_GetVatTu(string loaiVL)
        {
            string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();
            string dbString = $"SELECT * FROM {TDKH.TBL_KHVT_VatTu} cttk WHERE {condition} AND \"LoaiVatTu\" = '{loaiVL}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            return dt;
        }


        // This event is generated by Data Source Configuration Wizard
        void unboundSource1_ValueNeeded(object sender, DevExpress.Data.UnboundSourceValueNeededEventArgs e)
        {
            // Handle this event to obtain data from your data source
            // e.Value = something /* TODO: Assign the real data here.*/
        }

        // This event is generated by Data Source Configuration Wizard
        void unboundSource1_ValuePushed(object sender, DevExpress.Data.UnboundSourceValuePushedEventArgs e)
        {
            // Handle this event to save modified data back to your data source
            // something = e.Value; /* TODO: Propagate the value into the storage.*/
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            KanbanBoard form = new KanbanBoard();
            form.ShowDialog();
        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_CellEndEdit(object sender, SpreadsheetCellValidatingEventArgs e)
        {

        }

        private void fcn_LoadThucHienDuAn()
        {
            string dateNow = DateTime.Now.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string date7ngay = DateTime.Now.Date.AddDays(7).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string date14ngay = DateTime.Now.Date.AddDays(14).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

            DataTable dtChaDangTH, dtChaTuanToi, dtCha7NgayTT;

            string dbString = "";

            CVHN_DangThucHien.DataSource = GiaoViecHelper.LoadCongTacHangNgay(TypeLoadKLHangNgay.BetweenNgayBatDauKetThuc,
                DateTime.Now.Date, isShowDateDetail: false, isGetDangThucHien: true, codeDuAn: slke_ThongTinDuAn.EditValue.ToString());

            CVHN_DangThucHien.ExpandAll();

            CVHN_TuanToi.DataSource = GiaoViecHelper.LoadCongTacHangNgay(TypeLoadKLHangNgay.NgayBatDauBetween,
                DateTime.Now.Date.AddDays(1),
                DateTime.Now.Date.AddDays(7), isShowDateDetail: false);

            CVHN_TuanToi.ExpandAll();



            CVHN_7NgayTiepTheo.DataSource = GiaoViecHelper.LoadCongTacHangNgay(TypeLoadKLHangNgay.NgayBatDauBetween,
                DateTime.Now.Date.AddDays(8),
                DateTime.Now.Date.AddDays(14), isShowDateDetail: false);

            CVHN_7NgayTiepTheo.ExpandAll();


        }
        private void xtraTabControl_GiaoViec_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;
                return;
            }

            //if (tabControl.SelectedTabPage == null)
            //{
            //}
            xtraTabControl_TabMain_EnabledChanged(null, null);

            XtraTabPage crPage = xtraTabControl_GiaoViec.SelectedTabPage;

            if (crPage == xtraTabThucHienDuAn)
            {
                ctrl_DonViThucHienGiaoViec.Enabled = false;
                slke_ThongTinDuAn.Enabled = false;
                fcn_LoadThucHienDuAn();
            }
            else if (crPage == xtraTabBaoCaoCongViecHangNgay)
            {
                ctrl_DonViThucHienGiaoViec.Enabled = false;
                slke_ThongTinDuAn.Enabled = false;
                dtp_KLHangNgay.MaxDate = DateTime.Now;
                fcn_LoadBaoCaoCVHangNgay();
            }
            else
            {
                slke_ThongTinDuAn.Enabled = true;
                ctrl_DonViThucHienGiaoViec.Enabled = (rg_GV_DauViec.GetDescription() == "Thi công");
                fcn_GV_CapNhatHangMucCongViec(true);
            }



        }

        private void cb_GV_CongViecTuanToi_CheckedChanged(object sender, EventArgs e)
        {
            lci_tuantoi.Visibility = (cb_GV_CongViecTuanToi.Checked) ? DevExpress.XtraLayout.Utils.LayoutVisibility.Always : DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
        }

        private void cb_GV_THDA_CV7NgayTT_CheckedChanged(object sender, EventArgs e)
        {
            lci_7ngaytt.Visibility = (cb_GV_THDA_CV7NgayTT.Checked) ? DevExpress.XtraLayout.Utils.LayoutVisibility.Always : DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
        }

        private void bt_collapse_Click(object sender, EventArgs e)
        {
            pn_MenuChung.Visible = false;
            bt_collapse.Visible = false;
            bt_Expand.Visible = true;
            bt_Expand.Dock = DockStyle.Fill;
        }

        private void bt_Expand_Click(object sender, EventArgs e)
        {
            pn_MenuChung.Visible = true;
            bt_collapse.Visible = true;
            bt_Expand.Visible = false;
            bt_collapse.Dock = DockStyle.Fill;
        }
        static bool _CheckTrangThai = false;
        static bool _CheckTrangThaiHD = false;
        private void xtraTabControl_TabMain_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = xtraTabControl_TabMain;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;
                return;
            }


            xtraTabControl_TabMain_EnabledChanged(null, null);
            XtraTabPage crPage = xtraTabControl_TabMain.SelectedTabPage;
            if (crPage is null)
                return;

            CheckControlDonViThucHien();
            if (crPage != xtraTabPage_GiaoViec)
            {
                slke_ThongTinDuAn.Enabled = true;
            }

            if (crPage == xtraTabPage_ThongTinDuAn)
            {
                fcn_updateSheetThongTinChinh();
                if (m_isTPTGChanged)
                    fcn_updateThanhPhanThamGia();
                //fcn_updatenhathau_todoi("Khối lượng phân khai");
            }
            else if (crPage == xtraTabPage_DSDuAn_CT)
            {
                //if (isFirstTime)
                fcn_updateDanhSachDuAnCongTrinh();
                //fcn_updateDanhSachDuAnCongTrinh();
                isFirstTime = false;
            }
            else if (crPage == xtraTabPage_ThuChi_TamUng)
            {
                Fcn_LoadTCTU();
            }
            else if (crPage == xtraTab_QLTienDo_KeHoach)
            {
                if (!_CheckDobocKH)
                {
                    _CheckDobocKH = true;
                    xtraTabControl_TienDoKeHoach.SelectedTabPage = xtraTab_KeHoach;
                    //LoadSheetTDKH();
                    //fcn_LoadCongTacDoBoc();
                }
                if (gc_Tiendo.DataSource is null)
                    return;

            }
            else if (crPage == xtraTabPage_GiaoViec)
            {
                //if (ce_LayCongTacTuDong.Checked)
                //    fcn_LayCongTacTuDong();
                xtraTabControl_GiaoViec_SelectedPageChanged(null, null);
            }
            else if (crPage == xtraTabPage_QLHDong_TT)
            {
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                if (DVTH is null || _CheckTrangThai)
                    return;
                _CheckTrangThai = true;
                Fcn_LoadHopDong(DVTH);
            }
            else if (crPage == xtraTabPage_KiemSoat)
            {
                xtraTab_KiemSoat_SelectedPageChanged(null, null);
            }
            else if (crPage == xtraTabPage_CongVanDiDen)
            {
                ctrl_CongVanDiDen.InitData();
            }
            else if (crPage == xtraTabPage_NhanCong)
            {
                tabChamCongAll.xtraTabControl_BangNhanCong_SelectedPageChanged(null, null);
            }
            else if (crPage == xtraTabPage_QLMay_TB)
            {
                if (xtraTabControl_QLMayThietBi.SelectedTabPage is null)
                    return;
                if (xtraTabControl_QLMayThietBi.SelectedTabPage == xtraTab_DanhSachPhuongTien)
                {
                    Uc_DanhSachMayThiCong uc = new Uc_DanhSachMayThiCong();
                    uc.Dock = DockStyle.Fill;

                    xtraTab_DanhSachPhuongTien.Controls.Clear();
                    xtraTab_DanhSachPhuongTien.Controls.Add(uc);
                }
                else if (xtraTabControl_QLMayThietBi.SelectedTabPage == xtraTab_NhatTrinhThiCong)
                {
                    Uc_MTCHangNgay uc = new Uc_MTCHangNgay();
                    uc.LoadData();
                    uc.Dock = DockStyle.Fill;
                    xtraTab_NhatTrinhThiCong.Controls.Clear();
                    xtraTab_NhatTrinhThiCong.Controls.Add(uc);
                    xtraTabControl_QLMayThietBi.SelectedTabPage = xtraTab_NhatTrinhThiCong;
                }
            }

        }

        private void CheckControlDonViThucHien()
        {
            Ctrl_DonViThucHienDuAn[] ctrls_DVTH = pn_Contractor.Controls.OfType<Ctrl_DonViThucHienDuAn>().ToArray();
            foreach (Ctrl_DonViThucHienDuAn ctrl in ctrls_DVTH)
            {
                ctrl.Dock = DockStyle.Fill;
                ctrl.Visible = false;
            }
            XtraTabPage crPage = xtraTabControl_TabMain.SelectedTabPage;
            pc_HopDong.Visible = false;
            if (crPage == xtraTab_QLTienDo_KeHoach || crPage == xtraTabPage_QLMay_TB)
            {
                pn_Contractor.Visible = true;
                ctrl_DonViThucHienDuAnTDKH.Visible = true;
            }
            else if (crPage == xtraTabPage_GiaoViec)
            {
                pn_Contractor.Visible = true;
                ctrl_DonViThucHienGiaoViec.Visible = true;
            }
            else if (crPage == xtraTabPage_QLHDong_TT)
            {
                pn_Contractor.Visible = true;
                ctrl_DonViThucHienDuAnTDKH.Visible = true;
                pc_HopDong.Visible = true;
            }
            else
            {
                pc_HopDong.Visible = false;
                pn_Contractor.Visible = false;
                pn_Contractor.Enabled = false;
                return;
            }

            pn_Contractor.Enabled = true;

        }

        private void xtraTabControl_ThongTinDA_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;
                return;
            }

            xtraTabControl_TabMain_EnabledChanged(null, null);
            string text = xtraTabControl_ThongTinDA.SelectedTabPage?.Text;
            switch (text)
            {
                case "Thông tin":
                    if (m_isTPTGChanged)
                        fcn_updateSheetThongTinChinh();
                    break;
                case "Thành phần tham gia":
                    if (m_isThongTinChinhChanged)
                        fcn_updateThanhPhanThamGia();
                    break;
                default:
                    break;
            }
        }

        private void xtraTabControl_HopDongThanhToan_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;

                return;
            }

            xtraTabControl_TabMain_EnabledChanged(null, null);
            if (xtraTabControl_HopDongThanhToan.SelectedTabPage?.Text == "Tổng hợp danh sách các hợp đồng")
            {
                WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
                ctrl_TongHopHopDong.Fcn_Update();
                WaitFormHelper.CloseWaitForm();

            }
            else if (xtraTabControl_HopDongThanhToan.SelectedTabPage?.Text == "Giá trị dự án")
            {
                Fcn_UpdateTongHopHopDong();
            }
            else if (xtraTabControl_HopDongThanhToan.SelectedTabPage?.Text == "Chi tiết phụ lục giá")
            {
                if (xtraTab_ThanhToanNhaCC.PageVisible)
                {
                    Fcn_UpdatePhuLucHDNCC();
                    //fcn_updatephuluchopdongNCC();
                }
                else
                {
                    Fcn_UpDatePLHD();
                    //fcn_updatephuluchopdong();
                }
            }

        }

        private void xtraTabControl_TienDoKeHoach_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;
                return;
            }

            xtraTabControl_TabMain_EnabledChanged(null, null);
            switch (xtraTabControl_TienDoKeHoach.SelectedTabPage?.Name)
            {
                case nameof(xtraTab_KeHoach):
                    LoadSheetTDKH(false);
                    break;
                case nameof(xtraTab_TienDo):
                    //Chart_NhanCong.PushData(fcn_TDKH_GetDataChartVatTu("Nhân công"));
                    fcn_TDKH_loadTienDo();
                    if (navigationPane1.SelectedPage == np_NhanCong)
                    {
                        WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu nhân công");
                        LoadBieuDoNhanCong();
                        WaitFormHelper.CloseWaitForm();
                    }    
                    break;
                default:
                    string dbString = $"SELECT hp.MaDinhMuc,hp.MaVatLieu,hp.DinhMuc,hp.LoaiVatTu,hp.HeSo,VT.VatTu,VT.DonVi as DonViVatTu," +
                                   $"CT.TenDinhMuc,CT.DonVi as DonViCongTac FROM {MyConstant.TBL_HaoPhiVatTu} hp " +
                                   $"LEFT JOIN  {MyConstant.TBL_TBT_DINHMUCALL} CT ON CT.MaDinhMuc=hp.MaDinhMuc " +
                                   $"LEFT JOIN  {MyConstant.TBL_TBT_VATTU} VT ON VT.MaVatLieu=hp.MaVatLieu";
                    DataTable dt = DataProvider.InstanceTBT.ExecuteQuery(dbString);
                    ctrl_KiemSoatSoLieuDocVao1._dtDuLieuGoc = dt;
                    break;
            }
        }

        private void xtraTabControl_QLMayThietBi_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;

                return;
            }

            xtraTabControl_TabMain_EnabledChanged(null, null);
            if (tabControl.SelectedTabPage == xtraTab_DanhSachPhuongTien)
            {
                Uc_DanhSachMayThiCong uc = new Uc_DanhSachMayThiCong();
                //uc.LoadData();
                uc.Dock = DockStyle.Fill;

                xtraTab_DanhSachPhuongTien.Controls.Clear();
                xtraTab_DanhSachPhuongTien.Controls.Add(uc);
            }
            else if (tabControl.SelectedTabPage == xtraTab_NhatTrinhThiCong)
            {
                Uc_MTCHangNgay uc = new Uc_MTCHangNgay();
                uc.LoadData();
                uc.Dock = DockStyle.Fill;
                xtraTab_NhatTrinhThiCong.Controls.Clear();
                xtraTab_NhatTrinhThiCong.Controls.Add(uc);
                xtraTabControl_QLMayThietBi.SelectedTabPage = xtraTab_NhatTrinhThiCong;
            }
            //if (xtraTabControl_QLMayThietBi.SelectedTabPage?.Text == "Danh sách phương tiện")
            //    fcn_loadataQLmay(true, null);
            //if (xtraTabControl_QLMayThietBi.SelectedTabPage?.Text == "Nhật trình thi công" && check_NTTC_TatCaCacMayTrongNgay.Checked == true)
            //    fcn_loadatanhaptrinhthicong(true, false, null);
            //if (xtraTabControl_QLMayThietBi.SelectedTabPage?.Text == "Sửa chữa - Bảo dưỡng")
            //    fcn_loadatasuachua(true, false, null);
            //if (xtraTabControl_QLMayThietBi.SelectedTabPage?.Text == "Đề xuất phương tiện công tác")
            //    fcn_loadatadexuatphuongtien(true, false, null);
            //if (xtraTabControl_QLMayThietBi.SelectedTabPage?.Text == "Đề xuất máy thi công")
            //    fcn_loadtenphuongtien();
            //if (xtraTabControl_QLMayThietBi.SelectedTabPage?.Text == "Chi tiết lịch trình thiết bị")
            //    fcn_UpdateCbbChitietlichtring();
        }

        private void xtraTabControl11_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {

        }

        private void xtraTabControl_ChamCong_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;

                return;
            }

            xtraTabControl_TabMain_EnabledChanged(null, null);
            //if (xtraTabControl_ChamCong.SelectedTabPage?.Text == "TamUng")
            //    fcn_Importdatabasetoexecl(spsheet_TamUng, MyConstant.Tbl_ChamCong_BangNhanVien);
            //if (xtraTabControl_ChamCong.SelectedTabPage?.Text == "Danh sách nhân viên")
            //    fcn_Importdatabasetoexecl(spsheet_DanhSachNhanVien, MyConstant.Tbl_ChamCong_BangNhanVien); if (tab_BANGNHANLUC.SelectedTab.Text == "TamUng")
            //    fcn_Importdatabasetoexecl(spsheet_TamUng, MyConstant.Tbl_ChamCong_BangNhanVien);
            //if (xtraTabControl_ChamCong.SelectedTabPage?.Text == "Danh sách nhân viên")
            //    fcn_Importdatabasetoexecl(spsheet_DanhSachNhanVien, MyConstant.Tbl_ChamCong_BangNhanVien);
        }
        private void fcn_UpdateCboTenHopDong()
        {
            string dbString = $"SELECT * FROM {MyConstant.Tbl_TAOMOIHOPDONG} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dt.Rows.Count == 0)
                return;
            cbo_MeNuTenHopDong.DataSource = dt.AsEnumerable().ToDictionary(x => x["Code"], x => x["TenHopDong"]).ToList();
        }
        private void fcn_UpdateCboDotHopdong()
        {
            // cbo_AB_LanThanhToan.SelectedIndexChanged -= cbo_DBKH_ChonDot_SelectedIndexChanged;

            string dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}' AND \"CodeHd\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            if (dt.Rows.Count == 0)
            {
                MessageShower.ShowInformation("Không thể tải thông tin đợt hợp đồng");
                return;
            }
            Dictionary<string, string> dic = new Dictionary<string, string>();
            foreach (DataRow r in dt.Rows)
            {
                dic.Add(r["Code"].ToString(), r["Ten"].ToString());
            }
            dic.Add("Add", "Thêm đợt mới");
            cbo_AB_LanThanhToan.DataSource = dic.ToList();
            //cbo_AB_LanThanhToan.SelectedIndexChanged += cbo_AB_LanThanhToan_SelectedIndexChanged;

        }
        private void fcn_DobocAB(SpreadsheetControl NameSheet)
        {
            //if(NameSheet== spsheet_ThanhToanA_B)
            //{
            //    Fcn_DobocAB_GiaoThau();
            //    return;
            //}
            Dictionary<SpreadsheetControl, string> dicLoad = new Dictionary<SpreadsheetControl, string>()
            {
                {spsheet_ThanhToanA_B,"3.aBangThanhToanTongHop_A_B.xls" },
                {spsheet_ThanhToanB_B,"3.bBangThanhToanTongHop_B_B.xls" },
                {spsheet_ThanhToan_ToDoi,"3.cBangThanhToanTongHop_ToDoi.xls" },
                {spsheet_TuThucHien,"3.aBangThanhToanTongHopTuThucHien.xls" },
            };
            FileHelper.fcn_spSheetStreamDocument(NameSheet, $@"{BaseFrom.m_templatePath}\FileExcel\{dicLoad[NameSheet]}"); // Thanh toán thàu chính A-B
            //SharedControls._CheckTrangThaiNghiemThu = false;
            SharedControls._CheckTrangThaiThongThuong = false;
            SharedControls._CheckTrangThaiThongThuongTH = false;
            SharedControls._CheckTrangThaiDeNghi = false;
            pc_CaiDatThanhToan.Visible = false;
            ce_ThanhToan.CheckedChanged -= ce_ThanhToan_CheckedChanged;
            ce_ThanhToan.Checked = false;
            ce_ThanhToan.CheckedChanged += ce_ThanhToan_CheckedChanged;
            IWorkbook workbook = NameSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Đo bóc"];
            Worksheet wsBia = workbook.Worksheets["Bìa"];
            workbook.Worksheets["Khối lượng nghiệm thu"].Visible = false;
            workbook.Worksheets["Thanh toán KL phát sinh"].Visible = false;
            workbook.Worksheets["Thanh toán thông thường"].Visible = false;
            workbook.Worksheets["Tổng hợp các kỳ thanh toán"].Visible = false;
            workbook.Worksheets["Bảng đề nghị thanh toán"].Visible = false;
            NameSheet.Document.Worksheets.ActiveWorksheet = worksheet;
            string dbString = $"SELECT * FROM view_DoBocHopDong_NhomCongTac WHERE " +
                $"CodeHopDong='{cbo_MeNuTenHopDong.SelectedValue}' AND CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' " +
                $"GROUP BY CodeHangMuc,CodePhanTuyen,Code" +
                $" ORDER BY SortIdCtrinh ASC, SortIdHM ASC,SortIdCtac ASC";
            DataTable dt_CT_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dt_CT_DB.AddIndPhanTuyenNhom();
            dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacCon} WHERE \"CodeDoBocHD\" IS NOT NULL  ORDER BY \"Row\" ASC";
            DataTable dt_CT_Con = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string[] doboc =
            {
                TDKH.COL_DanhMucCongTac,
                TDKH.COL_DBC_SoBoPhanGiongNhau,
                TDKH.COL_DBC_Dai,
                TDKH.COL_DBC_Rong,
                TDKH.COL_DBC_Cao,
                TDKH.COL_DBC_HeSoCauKien,
                TDKH.COL_Code,
                TDKH.COL_DBC_LoaiCT,
            };
            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            int numRowNeedInsert = dtCT.Rows.Count * 3 + dtHM.Rows.Count * 3 + dt_CT_DB.Rows.Count;
            if (worksheet.Range[MyConstant.TBL_QUYETTHONGTIN].RowCount - 4 < (dtCT.Rows.Count + dtHM.Rows.Count + dt_CT_DB.Rows.Count + dt_CT_Con.Rows.Count))
                worksheet.Rows.Insert(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex - 1,
               numRowNeedInsert, RowFormatMode.FormatAsPrevious);
            int crRowInd = worksheet.Range[MyConstant.TBL_QUYETTHONGTIN].TopRowIndex + 2;
            string range = $"Dot_1";
            string ngaybatdau = dte_DotbeginAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string ngayketthuc = dte_DotendAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            Worksheet worksheet_3A = workbook.Worksheets["Thanh toán KL hoàn thành"];
            if (worksheet_3A.Range[range].RowCount - 2 <= dt_CT_DB.Rows.Count + dtCT.Rows.Count + dtHM.Rows.Count)
                worksheet_3A.Rows.Insert(worksheet_3A.Range[range].BottomRowIndex - 1, numRowNeedInsert, RowFormatMode.FormatAsNext);
            int crRowInd3A = worksheet_3A.Range[range].TopRowIndex + 1;
            if (NameSheet == spsheet_ThanhToanA_B && ce_HienThiHDCon.Checked)
            {
                Fcn_TaoCotNhaThauPhuToDoi(MyConstant.CONST_SheetName_TTKLHT, true, 12, 13, 14);
                pc_CaiDatThanhToan.Visible = true;
            }
            worksheet_3A.Calculate();
            NameSheet.BeginUpdate();
            Dictionary<string, string> Name3A = MyFunction.fcn_getDicOfColumn(worksheet_3A.Range[range]);
            int crRowCha = 0, crRowHM = 0;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[MyConstant.TBL_QUYETTHONGTIN]);
            long STT = 1;

            var grCongTrinh = dt_CT_DB.AsEnumerable().GroupBy(x => x["CodeCongTrinh"].ToString());
            foreach (var Ctrinh in grCongTrinh)
            {
                string crCodeCT = Ctrinh.Key;
                Row crRowWs = worksheet.Rows[crRowInd++];
                crRowWs.Font.Bold = true;
                crRowWs.Font.Color = Color.DarkTurquoise;
                crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeCT);
                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(Ctrinh.FirstOrDefault()["TenCongTrinh"].ToString());

                Row crRowWs3A = worksheet_3A.Rows[crRowInd3A++];
                crRowWs3A.Font.Bold = true;
                crRowWs3A.Font.Color = Color.DarkTurquoise;
                crRowWs3A[Name3A[TDKH.COL_Code]].SetValue(crCodeCT);
                crRowWs3A[Name3A[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs3A[Name3A[TDKH.COL_DanhMucCongTac]].SetValue(Ctrinh.FirstOrDefault()["TenCongTrinh"].ToString());
                var grHangMuc = Ctrinh.GroupBy(x => x["CodeHangMuc"].ToString());
                foreach (var HM in grHangMuc)
                {
                    string crCodeHM = HM.Key;

                    crRowWs = worksheet.Rows[crRowInd++];
                    crRowHM = crRowInd;
                    crRowWs.Font.Bold = true;
                    crRowWs.Font.Color = Color.DarkGreen;
                    crRowWs[Name[TDKH.COL_RowCha]].SetValue(crRowInd - 1);
                    crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeHM);
                    crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(HM.FirstOrDefault()["TenHangMuc"].ToString().ToUpper());

                    crRowWs3A = worksheet_3A.Rows[crRowInd3A++];
                    crRowWs3A.Font.Bold = true;
                    crRowWs3A.Font.Color = Color.DarkGreen;
                    crRowWs3A[Name3A[TDKH.COL_Code]].SetValue(crCodeHM);
                    crRowWs3A[Name3A[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs3A[Name3A[TDKH.COL_DanhMucCongTac]].SetValue(HM.FirstOrDefault()["TenHangMuc"].ToString().ToUpper());
                    var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"]).OrderBy(x => x.Key);
                    foreach (var Tuyen in grPhanTuyen)
                    {
                        var fstTuyen = Tuyen.First();
                        string crCodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : fstTuyen["CodePhanTuyen"].ToString();
                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                        {
                            crRowWs = worksheet.Rows[crRowInd++];
                            crRowWs.Font.Bold = true;
                            worksheet.Rows.Insert(crRowInd + 1, 1, RowFormatMode.FormatAsNext);
                            crRowWs.Font.Color = Color.Red;
                            crRowWs[Name[TDKH.COL_RowCha]].SetValue(crRowInd - 1);
                            crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeTuyen);
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_PhanTuyen);
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(fstTuyen["TenTuyen"].ToString().ToUpper());

                            crRowWs3A = worksheet_3A.Rows[crRowInd3A++];
                            crRowWs3A.Font.Bold = true;
                            worksheet_3A.Rows.Insert(crRowInd3A + 1, 1, RowFormatMode.FormatAsNext);
                            crRowWs3A.Font.Color = Color.Red;
                            crRowWs3A[Name3A[TDKH.COL_Code]].SetValue(crCodeHM);
                            crRowWs3A[Name3A[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_PhanTuyen);
                            crRowWs3A[Name3A[TDKH.COL_DanhMucCongTac]].SetValue(fstTuyen["TenTuyen"].ToString().ToUpper());
                        }
                        var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"])
                   .OrderBy(x => x.Key);
                        foreach (var NhomTuyen in grTuyenNhom)
                        {
                            var fstNhom = NhomTuyen.First();

                            string crCodeNhom = (fstNhom["CodeNhom"] == DBNull.Value) ? null : fstNhom["CodeNhom"].ToString();
                            if (fstNhom["CodeNhom"] != DBNull.Value)
                            {
                                crRowWs = worksheet.Rows[crRowInd++];
                                worksheet.Rows.Insert(crRowInd + 1, 1, RowFormatMode.FormatAsNext);
                                crRowWs.Font.Bold = false;
                                crRowWs.Font.Color = MyConstant.color_Row_NhomCongTac;
                                crRowWs[Name[TDKH.COL_STT]].SetValue(STT++);
                                crRowWs[Name[TDKH.COL_RowCha]].SetValue(crRowInd - 1);
                                crRowWs[Name[TDKH.COL_Code]].SetValue(fstNhom["CodeDB"]);
                                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_NHOM);
                                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(fstNhom["TenNhom"].ToString().ToUpper());
                                crRowWs[Name[TDKH.COL_IsEdit]].SetValue(fstNhom["IsEdit"]);
                                crRowWs[Name[TDKH.COL_Code_Goc]].SetValue(fstNhom[TDKH.COL_Code_Goc]);
                                crRowWs[Name[TDKH.COL_RowCha]].SetValue(crRowHM);
                                crRowWs[Name[TDKH.COL_DonVi]].SetValue(fstNhom["DonViNhom"]);
                                crRowWs[Name[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(fstNhom[TDKH.COL_DBC_KhoiLuongToanBo]);
                                crRowWs[Name[TDKH.COL_DBC_TheoHD]].SetValue(fstNhom[TDKH.COL_DBC_TheoHD]);
                                crRowWs[Name[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCha);
                                crRowWs[Name[TDKH.COL_DBC_LoaiCT]].SetValue(fstNhom["LoaiCT"]);
                                //crRowWs[Name[TDKH.COL_CodeDot]].SetValue(fstNhom["CodeDot"]);


                                crRowWs3A = worksheet_3A.Rows[crRowInd3A++];
                                worksheet_3A.Rows.Insert(crRowInd3A + 1, 1, RowFormatMode.FormatAsNext);
                                crRowWs3A.CopyFrom(worksheet_3A.Rows[15], PasteSpecial.Formulas);
                                crRowWs3A.Font.Bold = false;
                                crRowWs3A.Font.Color = MyConstant.color_Row_NhomCongTac;
                                if (fstNhom["GhiChuBoSungJson"] != DBNull.Value)
                                {
                                    var GhiChuBoSungJson = JsonConvert.DeserializeObject<TDKH_GhiChuBoSungJson>(fstNhom["GhiChuBoSungJson"].ToString());
                                    crRowWs3A[Name3A[TDKH.COL_STTDocVao]].SetValueFromText(GhiChuBoSungJson.STT);
                                    crRowWs3A[Name3A[TDKH.COL_STTND]].SetValueFromText(GhiChuBoSungJson.STTND);
                                }
                                crRowWs3A[Name3A["Stt"]].SetValue(STT - 1);
                                crRowWs3A[Name3A[TDKH.COL_Code]].SetValue(fstNhom["CodeHT"]);
                                crRowWs3A[Name3A["CodeCongTacTheoGiaiDoan"]].SetValue(crCodeNhom);
                                crRowWs3A[Name3A[TDKH.COL_Code_Goc]].SetValue(fstNhom["Code_Goc"]);
                                crRowWs3A[Name3A[TDKH.COL_DonGiaTheoHopDong]].SetValue(fstNhom["DonGia"]);
                                //crRowWs3A[Name3A[TDKH.COL_CodeDot]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_CodeDot]].GetReferenceA1()}";
                                crRowWs3A[Name3A[TDKH.COL_IsEdit]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_IsEdit]].GetReferenceA1()}";
                                crRowWs3A[Name3A[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                                crRowWs3A[Name3A[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                                crRowWs3A[Name3A[TDKH.COL_DonVi]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_DonVi]].GetReferenceA1()}";
                                crRowWs3A[Name3A["TheoHopDong"]].Formula = $"='{worksheet.Name}'!{crRowWs[Name["TheoHopDong"]].GetReferenceA1()}";
                                crRowWs3A[Name3A["CodeDB"]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_Code]].GetReferenceA1()}";
                                if (!ce_HienThiHDCon.Checked)
                                    crRowWs3A[Name3A["ThucHienKyNay"]].SetValueFromText(fstNhom["ThucHienKyNay"].ToString());
                            }
                            var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"].ToString());
                            foreach (var CongTac in grCongTacTuyen)
                            {
                                if (crCodeNhom != null)
                                    continue;
                                var fstCongTac = CongTac.FirstOrDefault();
                                string Mahieu = fstCongTac["MaHieuCongTac"].ToString();
                                string TenCongTac = fstCongTac["TenCongTac"].ToString();
                                WaitFormHelper.ShowWaitForm($"{STT}.{Mahieu}_{TenCongTac}");
                                crRowCha = crRowInd;
                                crRowWs = worksheet.Rows[crRowInd++];
                                crRowWs.Visible = crCodeNhom is null ? true : false;
                                crRowWs.Font.Bold = false;
                                crRowWs.Font.Color = Color.Black;
                                crRowWs[Name[TDKH.COL_STT]].SetValue(STT++);
                                crRowWs[Name[TDKH.COL_Code]].SetValue(fstCongTac["CodeDB"]);
                                crRowWs[Name[TDKH.COL_IsEdit]].SetValue(fstCongTac["IsEdit"]);
                                crRowWs[Name[TDKH.COL_Code_Goc]].SetValue(fstCongTac[TDKH.COL_Code_Goc]);
                                crRowWs[Name[TDKH.COL_RowCha]].SetValue(crRowHM);
                                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValueFromText(Mahieu);
                                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValueFromText(TenCongTac);
                                crRowWs[Name[TDKH.COL_DonVi]].SetValue(fstCongTac["DonVi"]);
                                crRowWs[Name[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(fstCongTac[TDKH.COL_DBC_KhoiLuongToanBo]);
                                crRowWs[Name[TDKH.COL_DBC_TheoHD]].SetValue(fstCongTac[TDKH.COL_DBC_TheoHD]);
                                crRowWs[Name[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_Nhom);
                                crRowWs[Name[TDKH.COL_DBC_LoaiCT]].SetValue(fstCongTac["LoaiCT"]);
                                //crRowWs[Name[TDKH.COL_CodeDot]].SetValue(fstCongTac["CodeDot"]);

                                crRowWs3A = worksheet_3A.Rows[crRowInd3A++];
                                crRowWs3A.Font.Color = Color.Black;
                                crRowWs3A.Font.Bold = false;
                                crRowWs3A.CopyFrom(worksheet_3A.Rows[15], PasteSpecial.Formulas);
                                if (fstCongTac["GhiChuBoSungJson"] != DBNull.Value)
                                {
                                    var GhiChuBoSungJson = JsonConvert.DeserializeObject<TDKH_GhiChuBoSungJson>(fstCongTac["GhiChuBoSungJson"].ToString());
                                    crRowWs3A[Name3A[TDKH.COL_STTDocVao]].SetValueFromText(GhiChuBoSungJson.STT);
                                    crRowWs3A[Name3A[TDKH.COL_STTND]].SetValueFromText(GhiChuBoSungJson.STTND);
                                }
                                if (cbo_AB_LanThanhToan.Text != MyConstant.NAMEDOT1)
                                {
                                    string tendot = $"Đợt {cbo_AB_LanThanhToan.SelectedIndex}";
                                    dbString = $"SELECT \"Code\" FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"Ten\" = '{tendot}'AND \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'AND \"CodeHd\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                                    DataTable Dt_Dot_pre = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                    dbString = $"SELECT * FROM {MyConstant.TBL_hopdongAB_HT} WHERE \"CodeDot\"='{Dt_Dot_pre.Rows[0][0]}' AND \"Code_Goc\"='{fstCongTac["Code_Goc"]}'";
                                    DataTable Dt_HD_pre = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                    crRowWs3A[Name3A["LuyKeDenHetKyTruoc"]].SetValueFromText(Dt_HD_pre.Rows[0]["LuyKeDenHetKyNay"].ToString());
                                }
                                crRowWs3A[Name3A[TDKH.COL_Code]].SetValueFromText(fstCongTac["CodeHT"].ToString());
                                crRowWs3A[Name3A["CodeCongTacTheoGiaiDoan"]].SetValueFromText(fstCongTac["Code"].ToString());
                                crRowWs3A[Name3A["Stt"]].SetValue(STT - 1);
                                crRowWs3A[Name3A[TDKH.COL_Code_Goc]].SetValueFromText(fstCongTac["Code_Goc"].ToString());
                                //crRowWs3A[Name3A["CodeCongTac"]].SetValueFromText(fstCongTac["CodeCongTac"].ToString());
                                crRowWs3A[Name3A[TDKH.COL_DonGiaTheoHopDong]].SetValue(fstCongTac["DonGia"]);
                                //crRowWs3A[Name3A[TDKH.COL_CodeDot]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_CodeDot]].GetReferenceA1()}";
                                crRowWs3A[Name3A[TDKH.COL_IsEdit]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_IsEdit]].GetReferenceA1()}";
                                crRowWs3A[Name3A[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                                crRowWs3A[Name3A[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                                crRowWs3A[Name3A[TDKH.COL_DonVi]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_DonVi]].GetReferenceA1()}";
                                crRowWs3A[Name3A["TheoHopDong"]].Formula = $"='{worksheet.Name}'!{crRowWs[Name["TheoHopDong"]].GetReferenceA1()}";
                                crRowWs3A[Name3A["CodeDB"]].Formula = $"='{worksheet.Name}'!{crRowWs[Name[TDKH.COL_Code]].GetReferenceA1()}";
                                if (!ce_HienThiHDCon.Checked)
                                    crRowWs3A[Name3A["ThucHienKyNay"]].SetValueFromText(fstCongTac["ThucHienKyNay"].ToString());
                                if (NameSheet == spsheet_ThanhToanA_B && ce_HienThiHDCon.Checked)
                                    Fcn_TongHopHopDongCon(fstCongTac["CodeCongTac"].ToString(), crRowInd3A - 1, worksheet_3A, Name3A);
                                var CT_Con = dt_CT_Con.AsEnumerable().Where(x => x["CodeDoBocHD"].ToString() == fstCongTac["Code"].ToString()).ToList();
                                string formualar = "", formualarTT = "";
                                foreach (var row in CT_Con)
                                {
                                    crRowWs = worksheet.Rows[crRowInd++];
                                    worksheet.Rows.Insert(crRowInd + 1, 1, RowFormatMode.FormatAsNext);
                                    crRowWs.Font.Bold = false;
                                    string LoaiCT = row["LoaiCT"].ToString();
                                    crRowWs[Name[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCON);
                                    crRowWs[Name[TDKH.COL_RowCha]].SetValue(crRowCha + 1);
                                    crRowWs.Font.Color = MyConstant.color_Row_DienGiai;

                                    foreach (string items in doboc)
                                        crRowWs[Name[items]].SetValueFromText(row[items].ToString());
                                    TDKHHelper.fcn_TDKH_UpdateRowConTheoTenCongTac_Suacongtac(worksheet, crRowInd - 1, out double KLKH);

                                    if (LoaiCT == MyConstant.COL_HD_PS)
                                    {
                                        crRowWs[Name[TDKH.COL_IsCongTacPhatSinh]].Formula = $"={crRowWs[Name[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                                        crRowWs[Name[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(0);
                                        formualar += $"+ {crRowWs[Name[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                                    }
                                    else
                                    {
                                        crRowWs[Name[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"={crRowWs[Name[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                                        formualarTT += $"+ {crRowWs[Name[TDKH.COL_DBC_KL1BoPhan]].GetReferenceA1()}";
                                    }
                                }
                                worksheet.Rows[crRowCha][Name[TDKH.COL_IsCongTacPhatSinh]].Formula = formualar;
                                worksheet.Rows[crRowCha][Name[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = formualarTT;

                            }
                        }
                        if (crCodeTuyen != null)
                        {
                            crRowWs = worksheet.Rows[crRowInd++];
                            worksheet.Rows.Insert(crRowInd + 1, 1, RowFormatMode.FormatAsNext);
                            crRowWs.Font.Bold = true;
                            crRowWs.Font.Color = Color.Red;
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue($"HOÀN THÀNH {fstTuyen["TenTuyen"]}".ToUpper());

                            crRowWs3A = worksheet_3A.Rows[crRowInd3A++];
                            worksheet_3A.Rows.Insert(crRowInd3A + 1, 1, RowFormatMode.FormatAsNext);
                            crRowWs3A.Font.Bold = true;
                            crRowWs3A.Font.Color = Color.Red;
                            crRowWs3A[Name3A[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            crRowWs3A[Name3A[TDKH.COL_DanhMucCongTac]].SetValue($"HOÀN THÀNH {fstTuyen["TenTuyen"]}".ToUpper());
                        }
                    }

                }

            }
            dbString = $"SELECT {MyConstant.Tbl_CHITIETHOPDONG}.*,{MyConstant.Tbl_TAOMOIHOPDONG}.GiaTriHopDong " +
$"FROM {MyConstant.Tbl_CHITIETHOPDONG} " +
$"INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code={MyConstant.Tbl_CHITIETHOPDONG}.CodeHopDong WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dtChiTiet = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dtChiTiet.Rows.Count != 0)
            {
                List<ChiTietHopDong> ChiTiet = DuAnHelper.ConvertToList<ChiTietHopDong>(dtChiTiet);
                List<ChiTietHopDong> TU = ChiTiet.Where(x => x.Loai == 0 && DateTime.Parse(x.Ngay).Date >= dte_DotbeginAB.DateTime.Date && DateTime.Parse(x.Ngay).Date <= dte_DotendAB.DateTime.Date).Any() ?
                    ChiTiet.Where(x => x.Loai == 0 && DateTime.Parse(x.Ngay).Date >= dte_DotbeginAB.DateTime.Date && DateTime.Parse(x.Ngay).Date <= dte_DotendAB.DateTime.Date).ToList() : null;
                ChiTietHopDong ThuHoiTU = ChiTiet.Where(x => x.Loai == 4).Any() ? ChiTiet.Where(x => x.Loai == 4).FirstOrDefault() : null;
                ChiTietHopDong TLTTT = ChiTiet.Where(x => x.Loai == 5).Any() ? ChiTiet.Where(x => x.Loai == 5).FirstOrDefault() : null;
                if (TU != null)
                {
                    CellRange TamUng = worksheet_3A.Range[MyConstant.CONST_TamUngHT];
                    Cell TT = worksheet_3A.Rows[TamUng.BottomRowIndex - 1][TamUng.RightColumnIndex];
                    string fomular = "";
                    foreach (ChiTietHopDong item in TU)
                    {
                        if (item.IsPhanTram)
                            fomular += $"+{TT.GetReferenceA1()}*{Math.Round(double.Parse(item.GiaTri) / 100, 2)}";
                        else
                            fomular += $"+{item.SoTienCal}";

                    }
                    worksheet_3A.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].Formula = $"={fomular}";
                }
                if (ThuHoiTU != null)
                {
                    CellRange TamUng = worksheet_3A.Range[MyConstant.CONST_ThuHoiTamUngHT];
                    if (ThuHoiTU.IsPhanTram)
                        worksheet_3A.Rows[TamUng.BottomRowIndex][Name3A["TheoHopDong_Thanhtien"]].SetValue(Math.Round(double.Parse(ThuHoiTU.GiaTri) / 100, 2));
                    else
                        worksheet_3A.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].SetValue(ThuHoiTU.SoTienCal);
                }
                if (TLTTT != null)
                {
                    CellRange TamUng = worksheet_3A.Range[MyConstant.CONST_TLTTTHT];
                    if (TLTTT.IsPhanTram)
                        worksheet_3A.Rows[TamUng.BottomRowIndex][Name3A["TheoHopDong_Thanhtien"]].SetValue(Math.Round(double.Parse(TLTTT.GiaTri) / 100, 2));
                    else
                        worksheet_3A.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].SetValue(TLTTT.SoTienCal);
                }
            }
            worksheet_3A.Calculate();
            CellRange SoTienTamUng = worksheet_3A.Range[MyConstant.CONST_SOTIENTAMUNG];
            CellRange SanLuongTC = worksheet_3A.Range[MyConstant.CONST_SANLUONGTHICONG];
            double STTU = worksheet_3A.Rows[SoTienTamUng.BottomRowIndex][SoTienTamUng.RightColumnIndex].Value.NumericValue;
            double SL = worksheet_3A.Rows[SanLuongTC.BottomRowIndex][SanLuongTC.RightColumnIndex].Value.NumericValue;
            dbString = $"UPDATE {MyConstant.TBL_HopDong_DotHopDong} SET \"SoTienDaTamUng\"='{STTU}'," +
                $"\"SanLuongThiCong\"='{SL}' WHERE \"Code\"='{cbo_AB_LanThanhToan.SelectedValue}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINDUAN} WHERE \"Code\"='{slke_ThongTinDuAn.EditValue}'";
            List<Tbl_ThongTinDuAnViewModel> lst = DataProvider.InstanceTHDA.ExecuteQueryModel<Tbl_ThongTinDuAnViewModel>(dbString);
            dbString = $"SELECT {MyConstant.Tbl_TAOMOIHOPDONG}.* FROM  {MyConstant.Tbl_TAOMOIHOPDONG} " +
            $" WHERE {MyConstant.Tbl_TAOMOIHOPDONG}.Code='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            Tbl_ThongTinDuAnViewModel DA = lst.SingleOrDefault();
            List<DonViThucHien> lstDVTH = DuAnHelper.GetDonViThucHiens();
            DonViThucHien DVGT = lstDVTH.Where(x => x.IsGiaoThau).SingleOrDefault();
            DonViThucHien DVNT = NameSheet == spsheet_ThanhToanA_B ? DVGT : ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            wsBia.Rows[7]["B"].SetValueFromText($"HỒ SƠ THANH TOÁN KHỐI LƯỢNG HOÀN THÀNH ĐỢT {cbo_AB_LanThanhToan.Text.Replace("Đợt", "")}");
            wsBia.Rows[14]["B"].SetValueFromText($"Dự án: {DA.TenDuAn}");
            wsBia.Rows[16]["B"].SetValueFromText($"Địa điểm: {DA.DiaChi}");
            wsBia.Rows[17]["B"].SetValueFromText($"Chủ đầu tư: {DVGT.Ten}");
            wsBia.Rows[19]["B"].SetValueFromText($"Nhà thầu: {DVNT.Ten}");
            worksheet_3A.Rows[7]["A"].SetValueFromText($"Bên nhận thầu: {DVNT.Ten}");
            worksheet_3A.Rows[8]["A"].SetValueFromText($"Thanh toán lần thứ:{cbo_AB_LanThanhToan.Text.Replace("Đợt", "")}");
            worksheet_3A.Rows[5]["A"].SetValueFromText($"Hợp đồng số: {dt.Rows[0]["SoHopDong"]}   .......... ngày .... tháng .... năm .....");
            wsBia.Rows[20]["B"].SetValueFromText($"Hợp đồng: {dt.Rows[0]["TenHopDong"]}");

            NameSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_ThanhToanTHNCC(SpreadsheetControl NameSheet)
        {
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu", "Vui Lòng chờ!");
            string dbstring = $"SELECT {MyConstant.TBL_hopdongNCC_TT}.* " +
          $"FROM {MyConstant.TBL_hopdongNCC_TT} " +
          $"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
          $"ON {MyConstant.TBL_hopdongNCC_TT}.CodePhuLuc = {MyConstant.TBL_HopDong_PhuLuc}.Code " +
          $"INNER JOIN {MyConstant.TBL_HopDong_DotHopDong} " +
          $"ON {MyConstant.TBL_HopDong_DotHopDong}.Code = {MyConstant.TBL_hopdongNCC_TT}.CodeDot " +
          $"INNER JOIN {TDKH.TBL_KHVT_VatTu} " +
          $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodeKHVT = {TDKH.TBL_KHVT_VatTu}.Code " +
          $"WHERE {MyConstant.TBL_HopDong_DotHopDong}.CodeHd= '{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
            NameSheet.BeginUpdate();
            Worksheet worksheet = NameSheet.Document.Worksheets[MyConstant.CONST_SheetName_THTT];
            Worksheet worksheet_HT = NameSheet.Document.Worksheets[0];
            DataTable dtCT, dtHM, dtCongTacTheoKy;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            TDKHHelper.fcn_TDKH_CTacTheoKy(out dtCongTacTheoKy, dtCT, dtHM);
            string dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"CodeGiaiDoan\" = '{cbb_DBKH_ChonDot.SelectedValue.ToString()}'";
            DataRow[] Dt_Dot = DataProvider.InstanceTHDA.ExecuteQuery(dbString).AsEnumerable().Where(x => x["CodeHd"].ToString() == cbo_MeNuTenHopDong.SelectedValue.ToString()).ToArray();
            string range = $"Dot_1";
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
            Dictionary<string, string> Name_HT = MyFunction.fcn_getDicOfColumn(worksheet_HT.Range[MyConstant.TBL_QUYETTHONGTIN]);
            foreach (var str in Name)
            {
                if (str.Key.Remove(2) == "KL" || str.Key.Remove(2) == "TT")
                {
                    Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
                    worksheet.Columns.Remove(Name[str.Key]);
                }
            }
            foreach (var row in Dt_Dot)
            {
                worksheet.Columns.Insert(worksheet.Range["KL_Dot_1"].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                worksheet.Columns.Insert(worksheet.Range["TT_Dot_1"].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                worksheet.Rows[6][worksheet.Range["KL_Dot_1"].RightColumnIndex - 1].SetValueFromText($"Khối lượng {row["Ten"].ToString()}");
                worksheet.Rows[0][worksheet.Range["KL_Dot_1"].RightColumnIndex - 1].SetValueFromText($"KL{row["Code"].ToString()}");
                worksheet.Rows[6][worksheet.Range["TT_Dot_1"].RightColumnIndex - 1].SetValueFromText($"Giá trị thanh toán {row["Ten"].ToString()}");
                worksheet.Rows[0][worksheet.Range["TT_Dot_1"].RightColumnIndex - 1].SetValueFromText($"TT{row["Code"].ToString()}");
                Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
                worksheet.Rows[7][worksheet.Range["TT_Dot_1"].RightColumnIndex - 1].Formula = $"({Name["DonGiaTheoHopDong"]}8+{Name["DonGiaBoSung"]}8)*{Name[$"KL{row["Code"].ToString()}"]}8";
            }
            CellRange HT = worksheet_HT.Range[range];
            if (worksheet.Range[range].RowCount - 2 <= HT.RowCount)
                worksheet.Rows.Insert(worksheet.Range[range].BottomRowIndex - 1, HT.RowCount, RowFormatMode.FormatAsNext);
            Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
            int crRowInd = worksheet.Range[range].TopRowIndex;
            long Stt = 1;
            for (int i = HT.TopRowIndex + 1; i <= HT.BottomRowIndex; i++)
            {
                Row CrowHT = worksheet_HT.Rows[i];
                Row CrowTH = worksheet.Rows[crRowInd++];
                string MaHieu = CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                {
                    CrowTH.Font.Bold = true;
                    CrowTH.Font.Color = MaHieu == MyConstant.CONST_TYPE_CONGTRINH ? Color.DarkTurquoise : MaHieu == MyConstant.CONST_TYPE_HANGMUC ? Color.DarkGreen : Color.Red;
                    CrowTH[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                }
                else if (MaHieu == "Dot" || MaHieu == "HTDot" || MaHieu == "")
                    continue;
                else
                {
                    CrowTH.CopyFrom(worksheet.Rows[7], PasteSpecial.Formulas);
                    CrowTH.Visible = true;
                    CrowTH.Font.Color = Color.Black;
                    CrowTH[Name["Stt"]].SetValue(Stt++);
                    CrowTH[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DonVi]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DonVi]].GetReferenceA1()}";
                    CrowTH[Name["DonGiaTheoHopDong"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["DonGiaTheoHopDong"]].GetReferenceA1()}";
                    CrowTH[Name["DonGiaBoSung"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["DonGiaBoSung"]].GetReferenceA1()}";
                    CrowTH[Name["TheoHopDong"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["TheoHopDong"]].GetReferenceA1()}";
                    string CodeGoc = CrowHT[Name_HT["Code_Goc"]].Value.ToString();
                    foreach (var rows in Dt_Dot)
                    {
                        DataRow[] crRows = dt.AsEnumerable().Where(x => x["Code_Goc"].ToString() == CodeGoc && x["CodeDot"].ToString() == rows["Code"].ToString()).ToArray();
                        if (crRows.Count() == 0)
                            continue;
                        double KLHT = crRows[0]["ThucHienKyNay"] != DBNull.Value ? double.Parse(crRows[0]["ThucHienKyNay"].ToString()) : 0;
                        CrowTH[Name[$"KL{rows["Code"]}"]].SetValue(KLHT);
                        CrowTH[Name[$"KL{cbo_AB_LanThanhToan.SelectedValue}"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["ThucHienKyNay"]].GetReferenceA1()}";
                    }
                }
            }
            NameSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_ThemDotNCC(string newdot, bool insert, string CodeDot = default)
        {
            if (CodeDot != default)
                goto Label;
            Worksheet ws = spsheet_ThanhToan_NhaCungCap.Document.Worksheets[0];
            Worksheet ws_TH = spsheet_ThanhToan_NhaCungCap.Document.Worksheets[1];
            Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> NAME_COL_TH = MyFunction.fcn_getDicOfColumn(ws_TH.Range[MyConstant.TBL_QUYETTHONGTIN]);
            CellRange range_pre = ws.Range["Dot_1"];
            string cellrange = $"A13:{ws.Rows[range_pre.BottomRowIndex - 1][NAME_COL["TongHop"]].GetReferenceA1()}";
            string cellrange_TH = $"A9:{ws_TH.Rows[ws_TH.Range["Dot_1"].BottomRowIndex - 1][NAME_COL_TH["GhiChu"]].GetReferenceA1()}";

            spsheet_ThanhToan_NhaCungCap.BeginUpdate();
            ws.ClearContents(ws.Range[cellrange]);
            ws_TH.ClearContents(ws_TH.Range[cellrange_TH]);
            ws.Rows[12][NAME_COL["TenCongTac"]].SetValueFromText(newdot);
            ws.Rows[range_pre.BottomRowIndex][NAME_COL["TenCongTac"]].SetValueFromText($"Hoàn thành {newdot}");
            spsheet_ThanhToan_NhaCungCap.EndUpdate();
            Label:
            if (insert)
            {
                string dbString = $"SELECT \"Code\" FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"CodeHd\" = '{cbo_MeNuTenHopDong.SelectedValue}' AND \"Ten\"='{$"Đợt {cbo_AB_LanThanhToan.Items.Count - 1}"}'";
                DataTable Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                dbString = $"SELECT * FROM {MyConstant.TBL_hopdongNCC_TT} WHERE \"CodeDot\" ='{Dt.AsEnumerable().FirstOrDefault()[0]}'";
                Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                foreach (DataRow row in Dt.Rows)
                {
                    dbString = $"INSERT INTO '{MyConstant.TBL_hopdongNCC_TT}' (\"Code\",\"Code_Goc\",\"CodeDot\",\"CodePhuLuc\") VALUES ('{Guid.NewGuid()}','{row["Code_Goc"]}','{CodeDot}','{row["CodePhuLuc"]}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }
        }
        private void Fcn_TTNCC()
        {
            string dbString = $"SELECT * FROM view_DoBocHDNhaCungCap" +
                $" WHERE CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' ORDER BY SortIdCtrinh ASC, SortIdHM ASC,SortIdCtac ASC ";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            if (dt.Rows.Count == 0)
                return;
            dt.AddIndPhanTuyenNhom();
            spsheet_ThanhToan_NhaCungCap.BeginUpdate();
            Worksheet ws = spsheet_ThanhToan_NhaCungCap.Document.Worksheets[0];
            spsheet_ThanhToan_NhaCungCap.Document.Worksheets.ActiveWorksheet = ws;
            List<string> checkMaVatLieu = new List<string>();
            string range = $"Dot_1";
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[range]);
            if (ws.Range[range].RowCount - 2 <= dt.Rows.Count * 2)
                ws.Rows.Insert(ws.Range[range].BottomRowIndex - 1, dt.Rows.Count * 2, RowFormatMode.FormatAsNext);
            int crRowInd = ws.Range[range].TopRowIndex + 1;
            int STT = 1;
            double KLHD = 0;
            double KLTC = 0;
            string ngaybatdau = dte_DotbeginAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string ngayketthuc = dte_DotendAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            var grCongTrinh = dt.AsEnumerable().GroupBy(x => x["CodeCongTrinh"].ToString());
            foreach (var Ctrinh in grCongTrinh)
            {
                string crCodeCT = Ctrinh.Key;
                Row crRowWs = ws.Rows[crRowInd++];

                crRowWs.Font.Bold = true;
                crRowWs.Font.Color = Color.DarkTurquoise;
                crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeCT);
                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(Ctrinh.FirstOrDefault()["TenCongTrinh"].ToString());

                var grHangMuc = Ctrinh.GroupBy(x => x["CodeHangMuc"].ToString());
                foreach (var HM in grHangMuc)
                {
                    string crCodeHM = HM.Key;

                    crRowWs = ws.Rows[crRowInd++];
                    crRowWs.Font.Bold = true;
                    crRowWs.Font.Color = Color.DarkGreen;
                    crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeHM);
                    crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(HM.FirstOrDefault()["TenHangMuc"].ToString().ToUpper());
                    var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"]).OrderBy(x => x.Key);
                    foreach (var Tuyen in grPhanTuyen)
                    {
                        var fstTuyen = Tuyen.First();
                        string crCodeTuyen = fstTuyen["CodePhanTuyen"] == DBNull.Value ? null : fstTuyen["CodePhanTuyen"].ToString();
                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                        {
                            crRowWs = ws.Rows[crRowInd++];
                            crRowWs.Font.Bold = true;
                            crRowWs.Font.Color = Color.Red;
                            //crRowWs[Name[TDKH.COL_RowCha]].SetValue(crRowInd - 1);
                            crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeTuyen);
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_PhanTuyen);
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(fstTuyen["TenTuyen"].ToString().ToUpper());
                        }
                        var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"]).OrderBy(x => x.Key);
                        foreach (var NhomTuyen in grTuyenNhom)
                        {
                            var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"].ToString());
                            foreach (var CongTac in grCongTacTuyen)
                            {
                                var fstCongTac = CongTac.FirstOrDefault();
                                string Mahieu = fstCongTac["MaHieuCongTac"].ToString();
                                string TenCongTac = fstCongTac["TenCongTac"].ToString();
                                WaitFormHelper.ShowWaitForm($"{STT}.{Mahieu}_{TenCongTac}");
                                crRowWs = ws.Rows[crRowInd++];
                                crRowWs.Font.Bold = false;
                                crRowWs.CopyFrom(ws.Rows[11], PasteSpecial.Formulas);
                                crRowWs.Font.Color = Color.Black;
                                crRowWs[Name[TDKH.COL_STT]].SetValue(STT++);
                                if (cbo_AB_LanThanhToan.Text != MyConstant.NAMEDOT1)
                                {
                                    string tendot = $"Đợt {cbo_AB_LanThanhToan.SelectedIndex}";
                                    dbString = $"SELECT \"Code\" FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"Ten\" = '{tendot}'AND \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'AND \"CodeHd\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                                    DataTable Dt_Dot_pre = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                    dbString = $"SELECT * FROM {MyConstant.TBL_hopdongNCC_TT} WHERE \"CodeDot\"='{Dt_Dot_pre.Rows[0][0]}' AND \"Code_Goc\"='{fstCongTac["Code_Goc"]}'";
                                    DataTable Dt_HD_pre = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                    crRowWs[Name["LuyKeDenHetKyTruoc"]].SetValueFromText(Dt_HD_pre.Rows[0]["LuyKeDenHetKyNay"].ToString());
                                }
                                crRowWs[Name[TDKH.COL_Code]].SetValueFromText(fstCongTac["Code"].ToString());
                                crRowWs[Name["Code_Goc"]].SetValueFromText(fstCongTac["Code_Goc"].ToString());
                                crRowWs[Name["CodeCongTacTheoGiaiDoan"]].SetValueFromText(fstCongTac["CodeCongTacTheoGiaiDoan"].ToString());
                                crRowWs[Name[TDKH.COL_DonGiaTheoHopDong]].SetValue(fstCongTac["DonGiaPLHD"]);
                                crRowWs[Name["DonGiaBoSung"]].SetValue(fstCongTac["DonGiaBoSung"]);
                                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValueFromText(Mahieu);
                                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValueFromText(TenCongTac);
                                crRowWs[Name[TDKH.COL_DonVi]].SetValueFromText(fstCongTac["DonVi"].ToString());
                                crRowWs[Name["TheoHopDong"]].SetValue(fstCongTac["KLPLHD"]);
                                if (bool.Parse(fstCongTac["IsEdit"].ToString()))
                                    crRowWs[Name["ThucHienKyNay"]].SetValueFromText(fstCongTac["ThucHienKyNay"].ToString());
                                crRowWs[Name["KhoiLuongHangNgay"]].SetValueFromText(fstCongTac["KhoiLuongHangNgay"].ToString());
                                crRowWs[Name["KhoiLuongVanChuyen"]].SetValueFromText(fstCongTac["KhoiLuongVanChuyen"].ToString());
                                crRowWs[Name["KhoiLuongThuCong"]].SetValueFromText(fstCongTac["KhoiLuongThuCong"].ToString());
                                if (fstCongTac["KhoiLuongThanhToan"] != DBNull.Value)
                                    crRowWs[Name["KhoiLuongThanhToan"]].SetValueFromText(fstCongTac["KhoiLuongThanhToan"].ToString());

                            }

                        }
                        if (crCodeTuyen != null)
                        {
                            crRowWs = ws.Rows[crRowInd++];
                            crRowWs.Font.Bold = true;
                            crRowWs.Font.Color = Color.Red;
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue($"HOÀN THÀNH {fstTuyen["TenTuyen"]}".ToUpper());
                        }

                    }

                }
            }
            //            dbString = $"SELECT {MyConstant.Tbl_CHITIETHOPDONG}.*,{MyConstant.Tbl_TAOMOIHOPDONG}.GiaTriHopDong " +
            //$"FROM {MyConstant.Tbl_CHITIETHOPDONG} " +
            //$"INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code={MyConstant.Tbl_CHITIETHOPDONG}.CodeHopDong WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            //            DataTable dtChiTiet = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //            if (dtChiTiet.Rows.Count != 0)
            //            {
            //                List<ChiTietHopDong> ChiTiet = DuAnHelper.ConvertToList<ChiTietHopDong>(dtChiTiet);
            //                List<ChiTietHopDong> TU = ChiTiet.Where(x => x.Loai == 0 && DateTime.Parse(x.Ngay).Date >= dte_DotbeginAB.DateTime.Date && DateTime.Parse(x.Ngay).Date <= dte_DotendAB.DateTime.Date).Any() ?
            //                    ChiTiet.Where(x => x.Loai == 0 && DateTime.Parse(x.Ngay).Date >= dte_DotbeginAB.DateTime.Date && DateTime.Parse(x.Ngay).Date <= dte_DotendAB.DateTime.Date).ToList() : null;
            //                ChiTietHopDong ThuHoiTU = ChiTiet.Where(x => x.Loai == 4).Any() ? ChiTiet.Where(x => x.Loai == 4).FirstOrDefault() : null;
            //                ChiTietHopDong TLTTT = ChiTiet.Where(x => x.Loai == 5).Any() ? ChiTiet.Where(x => x.Loai == 5).FirstOrDefault() : null;
            //                if (TU != null)
            //                {
            //                    CellRange TamUng = ws.Range[MyConstant.CONST_TamUngHT];
            //                    Cell TT = ws.Rows[TamUng.BottomRowIndex - 1][TamUng.RightColumnIndex];
            //                    string fomular = "";
            //                    foreach (ChiTietHopDong item in TU)
            //                    {
            //                        if (item.IsPhanTram)
            //                            fomular += $"+{TT.GetReferenceA1()}*{Math.Round(double.Parse(item.GiaTri) / 100, 2)}";
            //                        else
            //                            fomular += $"+{item.SoTienCal}";

            //                    }
            //                    ws.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].Formula = $"={fomular}";
            //                }
            //                if (ThuHoiTU != null)
            //                {
            //                    CellRange TamUng = ws.Range[MyConstant.CONST_ThuHoiTamUngHT];
            //                    if (ThuHoiTU.IsPhanTram)
            //                        ws.Rows[TamUng.BottomRowIndex][Name["TheoHopDong_Thanhtien"]].SetValue(Math.Round(double.Parse(ThuHoiTU.GiaTri) / 100, 2));
            //                    else
            //                        ws.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].SetValue(ThuHoiTU.SoTienCal);
            //                }
            //                if (TLTTT != null)
            //                {
            //                    CellRange TamUng = ws.Range[MyConstant.CONST_TLTTTHT];
            //                    if (TLTTT.IsPhanTram)
            //                        ws.Rows[TamUng.BottomRowIndex][Name["TheoHopDong_Thanhtien"]].SetValue(Math.Round(double.Parse(TLTTT.GiaTri) / 100, 2));
            //                    else
            //                        ws.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].SetValue(TLTTT.SoTienCal);
            //                }
            //            }
            spsheet_ThanhToan_NhaCungCap.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_TTNCC()
        {
            string dbstring = $"SELECT {MyConstant.TBL_hopdongNCC_TT}.Code,{MyConstant.TBL_hopdongNCC_TT}.KhoiLuongThuCong," +
                $"{MyConstant.TBL_HopDong_PhuLuc}.DonGia AS DonGiaTheoHopDong,{MyConstant.TBL_HopDong_PhuLuc}.KhoiLuong,{MyConstant.TBL_HopDong_PhuLuc}.CodeHM," +
                $"{MyConstant.TBL_HopDong_PhuLuc}.Code as CodeVatLieu,{TDKH.TBL_KHVT_VatTu}.MaVatLieu,{TDKH.TBL_KHVT_VatTu}.VatTu,{TDKH.TBL_KHVT_VatTu}.DonVi, " +
                $"{MyConstant.TBL_hopdongNCC_TT}.CodeDot,{MyConstant.TBL_HopDong_DotHopDong}.NgayBatDau,{MyConstant.TBL_HopDong_DotHopDong}.NgayKetThuc,{TDKH.TBL_KHVT_VatTu}.CodeHangMuc " +
    $"FROM {MyConstant.TBL_hopdongNCC_TT} HD " +
    $"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} PLHD " +
    $"ON HD.CodePhuLuc = PLHD.Code " +
    $"INNER JOIN {MyConstant.TBL_HopDong_DotHopDong} DOT " +
    $"ON DOT.Code =HĐ.CodeDot " +
    $"INNER JOIN {TDKH.TBL_KHVT_VatTu} cttk " +
    $"ON PLHD.CodeKHVT = cttk.Code " +
    $"INNER JOIN {TDKH.Tbl_PhanTuyen} Tuyen" +
    $"ON Tuyen.Code = cttk.CodePhanTuyen " +
    $"INNER JOIN {MyConstant.TBL_THONGTINHANGMUC} hm\r\n" +
    $"ON cttk.CodeHangMuc = hm.Code \r\n" +
    $"INNER JOIN {MyConstant.TBL_THONGTINCONGTRINH} ctrinh\r\n" +
    $"ON hm.CodeCongTrinh = ctrinh.Code \r\n" +
    $"WHERE  HD.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
            if (dt.Rows.Count == 0)
                return;
            spsheet_ThanhToan_NhaCungCap.BeginUpdate();
            Worksheet ws = spsheet_ThanhToan_NhaCungCap.Document.Worksheets[0];
            spsheet_ThanhToan_NhaCungCap.Document.Worksheets.ActiveWorksheet = ws;
            DataTable dtCT, dtHM, dtCongTacTheoKy;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            TDKHHelper.fcn_TDKH_CTacTheoKy(out dtCongTacTheoKy, dtCT, dtHM);
            dbstring = $"SELECT * FROM {MyConstant.TBL_hopdongNCC_TT_NTC} WHERE \"CodeDot\" = '{cbo_AB_LanThanhToan.SelectedValue}'";
            DataTable Dt_NTC = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
            //string lsCodeVL = MyFunction.fcn_Array2listQueryCondition(dt.AsEnumerable().Select(x => x["CodeCongTacTheoGiaiDoan"].ToString()).ToArray());
            string[] MaVatLieu = dt.AsEnumerable().Select(x => x["MaVatLieu"].ToString()).Distinct().ToArray();
            List<string> checkMaVatLieu = new List<string>();
            string range = $"Dot_1";
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[range]);
            if (ws.Range[range].RowCount - 2 <= MaVatLieu.Length + dtCT.Rows.Count + dtHM.Rows.Count)
                ws.Rows.Insert(ws.Range[range].BottomRowIndex - 1, MaVatLieu.Length + dtCT.Rows.Count + dtHM.Rows.Count, RowFormatMode.FormatAsNext);
            //if (ws_THTT.Range[range].RowCount - 2 <= MaVatLieu.Length+ dtCT.Rows.Count + dtHM.Rows.Count)
            //    ws_THTT.Rows.Insert(ws_THTT.Range[range].BottomRowIndex - 1, MaVatLieu.Length+ dtCT.Rows.Count + dtHM.Rows.Count, RowFormatMode.FormatAsNext);
            int crRowInd = ws.Range[range].TopRowIndex + 1;
            bool contains = false;
            double KLHD = 0;
            double KLTC = 0;
            string ngaybatdau = DateTime.Parse(dt.Rows[0]["NgayBatDau"].ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string ngayketthuc = DateTime.Parse(dt.Rows[0]["NgayKetThuc"].ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            //int crRowInd_THTT = ws_THTT.Range[range].TopRowIndex + 1;
            string[] doboc =
            {
                TDKH.COL_DonVi,
                TDKH.COL_VatTu,
                TDKH.COL_MaVatLieu,
                TDKH.COL_CodeDot,
                "DonGiaTheoHopDong",
                "KhoiLuongThuCong",
                TDKH.COL_Code,
            };
            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();
                //ws.rows.insert(crRowInd, 1);
                Row crRowWs = ws.Rows[crRowInd++];

                crRowWs.Font.Bold = true;
                crRowWs.Font.Color = Color.DarkTurquoise;
                crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeCT);
                crRowWs[Name[TDKH.COL_MaVatLieu]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs[Name[TDKH.COL_VatTu]].SetValue(CT["Ten"].ToString());
                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();

                    crRowWs = ws.Rows[crRowInd++];
                    crRowWs.Font.Bold = true;
                    crRowWs.Font.Color = Color.DarkGreen;
                    crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeHM);
                    crRowWs[Name[TDKH.COL_MaVatLieu]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs[Name[TDKH.COL_VatTu]].SetValue(HM["Ten"].ToString().ToUpper());
                    DataRow[] crRows_VL = dt.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToArray();
                    //DataRow[] crRows_VLKHVT = dt.AsEnumerable().Where(x =>x["CodeHM"].ToString()==crCodeHM).ToArray();

                    foreach (var item in crRows_VL)
                    {
                        crRowWs = ws.Rows[crRowInd++];
                        crRowWs.Font.Bold = true;
                        crRowWs.Font.Color = Color.Black;
                        crRowWs.CopyFrom(ws.Rows[11], PasteSpecial.Formulas);
                        //contains = Dt_NTC.AsEnumerable().Any(row => item[TDKH.COL_MaVatLieu].ToString() == row.Field<String>(TDKH.COL_MaVatLieu));
                        //if (!contains)
                        //{
                        //    dbstring = $"INSERT INTO '{MyConstant.TBL_hopdongNCC_TT_NTC}' (\"Code\",\"CodeDot\",\"MaVatLieu\") VALUES ('{Guid.NewGuid().ToString()}','{cbo_AB_LanThanhToan.SelectedValue}','{item[TDKH.COL_MaVatLieu].ToString()}')";
                        //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);
                        //}
                        //else
                        //{
                        //    double KLTCong = Dt_NTC.AsEnumerable().Where(x => x[TDKH.COL_MaVatLieu].ToString() == item[TDKH.COL_MaVatLieu].ToString()).FirstOrDefault()["KhoiLuongThuCong"].ToString()==""?0
                        //        :double.Parse(Dt_NTC.AsEnumerable().Where(x => x[TDKH.COL_MaVatLieu].ToString() == item[TDKH.COL_MaVatLieu].ToString()).FirstOrDefault()["KhoiLuongThuCong"].ToString());
                        //    crRowWs[Name["KhoiLuongThuCong"]].SetValueFromText(KLTCong.ToString());
                        //}
                        foreach (string items in doboc)
                            crRowWs[Name[items]].SetValueFromText(item[items].ToString());
                        //DataRow[] crRow = crRows_VL.AsEnumerable().Where(x => x[TDKH.COL_MaVatLieu].ToString() == item[TDKH.COL_MaVatLieu].ToString()).ToArray();
                        //string CodeHPVT = MyFunction.fcn_Array2listQueryCondition(crRow.CopyToDataTable().AsEnumerable().Select(x => x["CodeVatLieu"].ToString()).ToArray());
                        //dbstring = $"SELECT * FROM {TDKH.TBL_KhoiLuongHaoPhiTheoNgay} WHERE \"CodeHaoPhiVatTu\" IN ({CodeHPVT}) AND \"Ngay\">='{ngaybatdau}' AND \"Ngay\"<='{ngayketthuc}'";
                        //DataTable dtHPVTHN = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                        //KLTC = 0;
                        //foreach (DataRow row in dtHPVTHN.Rows)
                        //{
                        //    if (row["KhoiLuongThiCong"].ToString() == "")
                        //        continue;
                        //    KLTC += double.Parse(row["KhoiLuongThiCong"].ToString());
                        //}
                        //crRowWs[Name["KhoiLuongHangNgay"]].SetValueFromText(KLTC.ToString());
                        ////crRowWs[Name["DonGiaTheoHopDong"]].SetValueFromText(item["DonGia"].ToString());
                        //KLHD = 0;
                        //foreach (var row in crRow)
                        //    KLHD += double.Parse(row[TDKH.COL_KHVT_DinhMucNguoiDung].ToString()) * double.Parse(row[TDKH.COL_KHVT_HeSoNguoiDung].ToString()) * double.Parse(row[TDKH.COL_KhoiLuongHopDongChiTiet].ToString());
                        crRowWs[Name["TheoHopDong"]].SetValueFromText(item["KhoiLuong"].ToString());
                        dbstring = $"SELECT \"Code\" FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeHd\" = '{cbo_MeNuTenHopDong.SelectedValue}' AND \"TenVatTu\"=@Vatu AND \"MaVatTu\"=@MaVatTu";
                        DataTable Dt_YeuCau = DataProvider.InstanceTHDA.ExecuteQuery(dbstring, parameter: new object[] { item[TDKH.COL_VatTu], item[TDKH.COL_MaVatLieu] });

                        string lsCodeCongTac = MyFunction.fcn_Array2listQueryCondition(Dt_YeuCau.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                        dbstring = $"SELECT \"KhoiLuong\" FROM {QLVT.TBL_QLVT_YEUCAUVTKLHN} WHERE \"CodeYeuCauVatTu\" IN ({lsCodeCongTac}) AND \"Ngay\">='{ngaybatdau}' AND \"Ngay\"<='{ngayketthuc}'";
                        DataTable dt_YeuCauHN = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                        double KLVC = 0;
                        foreach (DataRow row in dt_YeuCauHN.Rows)
                            KLVC += double.Parse(row[0].ToString());
                        crRowWs[Name["KhoiLuongVanChuyen"]].SetValueFromText(KLVC.ToString());
                        //if (cbo_AB_LanThanhToan.Text != MyConstant.NAMEDOT1)
                        //{
                        //    string tendot = $"Đợt {cbo_AB_LanThanhToan.SelectedIndex}";
                        //    dbstring = $"SELECT \"Code\" FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"Ten\" = '{tendot}'AND \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'";
                        //    DataTable Dt_Dot_pre = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                        //    //cbo_AB_LanThanhToan.DataBindings.
                        //    dbstring = $"SELECT * FROM {MyConstant.TBL_hopdongNCC_TT} WHERE \"CodeDot\"='{Dt_Dot_pre.Rows[0][0].ToString()}' AND \"Code_Goc\"='{row["Code_Goc"].ToString()}'";
                        //    DataTable Dt_HD_pre = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);

                        //    crRowWs[Name["LuyKeDenHetKyTruoc"]].SetValueFromText(Dt_HD_pre.Rows[0]["LuyKeDenHetKyNay"].ToString());
                        //    //crRowWs[Name["LuyKeDenHetKyNay"]].SetValue(row["LuyKeHetKyNay"]);
                        //}
                    }
                    //foreach (var item in crRows_VLKHVT)
                    //{
                    //    crRowWs = ws.Rows[crRowInd++];
                    //    crRowWs.Font.Bold = true;
                    //    crRowWs.Font.Color = Color.Black;
                    //    crRowWs.CopyFrom(ws.Rows[11], PasteSpecial.Formulas);
                    //    foreach (string items in doboc)
                    //        crRowWs[Name[items]].SetValueFromText(item[items].ToString());
                    //    crRowWs[Name["TheoHopDong"]].SetValueFromText(item["KhoiLuong"].ToString());
                    //    dbstring = $"SELECT \"Code\" FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeHd\" = '{cbo_MeNuTenHopDong.SelectedValue}' AND \"TenVatTu\"='{item[TDKH.COL_VatTu]}' AND \"MaVatTu\"='{item[TDKH.COL_MaVatLieu]}'";
                    //    DataTable Dt_YeuCau = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);

                    //    string lsCodeCongTac = MyFunction.fcn_Array2listQueryCondition(Dt_YeuCau.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                    //    dbstring = $"SELECT \"KhoiLuong\" FROM {QLVT.TBL_QLVT_YEUCAUVTKLHN} WHERE \"CodeYeuCauVatTu\" IN ({lsCodeCongTac}) AND \"Ngay\">='{ngaybatdau}' AND \"Ngay\"<='{ngayketthuc}'";
                    //    DataTable dt_YeuCauHN = DataProvider.InstanceTHDA.ExecuteQuery(dbstring);
                    //    double KLVC = 0;
                    //    foreach (DataRow row in dt_YeuCauHN.Rows)
                    //        KLVC += double.Parse(row[0].ToString());
                    //    crRowWs[Name["KhoiLuongVanChuyen"]].SetValueFromText(KLVC.ToString());
                    //}
                }

            }
            spsheet_ThanhToan_NhaCungCap.EndUpdate();
        }
        private void fcn_ThanhToanNghiemThu(SpreadsheetControl NameSheet)
        {
            if (cbo_MeNuTenHopDong.SelectedValue == null)
                return;
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu", "Vui Lòng chờ!");

            NameSheet.BeginUpdate();
            //           NameSheet.Document.History.IsEnabled = false;
            IWorkbook workbook = NameSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Khối lượng nghiệm thu"];
            Worksheet worksheet_HT = workbook.Worksheets["Thanh toán KL hoàn thành"];
            Worksheet worksheet_PS = workbook.Worksheets["Thanh toán KL phát sinh"];
            Dictionary<string, string> Name_HT = MyFunction.fcn_getDicOfColumn(worksheet_HT.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> Name_PS = MyFunction.fcn_getDicOfColumn(worksheet_HT.Range[MyConstant.TBL_QUYETTHONGTIN]);

            string range = $"Dot_1";
            CellRange HT = worksheet_HT.Range[range];
            if (worksheet.Range[range].RowCount - 2 <= HT.RowCount)
                worksheet.Rows.Insert(worksheet.Range[range].BottomRowIndex - 1, HT.RowCount, RowFormatMode.FormatAsNext);
            int crRowInd = worksheet.Range[range].TopRowIndex;
            long Stt = 1;
            if (NameSheet == spsheet_ThanhToanA_B)
                Fcn_TaoCotNhaThauPhuToDoi(MyConstant.CONST_SheetName_TTNghiemThu, false, 31, 32, 32);
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
            int RowInDexPS = 0;
            int RowDb = 0;
            List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource as List<DonViThucHien>).Where(x => x.Table != MyConstant.TBL_THONGTINNHATHAU).ToList();
            string dbString = $"SELECT * FROM view_DoBocHopDong_NhomCongTac WHERE " +
                  $"CodeHopDong='{cbo_MeNuTenHopDong.SelectedValue}' AND CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' " +
                  $"GROUP BY CodeHangMuc,CodePhanTuyen,Code" +
                  $" ORDER BY SortIdCtrinh ASC, SortIdHM ASC,SortIdCtac ASC";
            DataTable dt_CT_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            for (int i = HT.TopRowIndex; i <= HT.BottomRowIndex; i++)
            {
                Row CrowHT = worksheet_HT.Rows[i];
                Row CrowTH = worksheet.Rows[crRowInd++];
                string MaHieu = CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_HoanThanhPhanTuyen || MaHieu == "Dot" || MaHieu == "HTDot")
                {
                    CrowTH.Font.Bold = true;
                    CrowTH.Font.Color = MaHieu == MyConstant.CONST_TYPE_CONGTRINH ? Color.DarkTurquoise : MaHieu == MyConstant.CONST_TYPE_HANGMUC ? Color.DarkGreen : Color.Red;
                    CrowTH[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                }
                else if (string.IsNullOrEmpty(MaHieu))
                    continue;
                else
                {
                    CrowTH.CopyFrom(worksheet.Rows[33], PasteSpecial.Formulas);
                    CrowTH.Font.Color = MaHieu == MyConstant.CONST_TYPE_NHOM ? MyConstant.color_Row_NhomCongTac : Color.Black;
                    CrowTH[Name["Stt"]].SetValue(Stt++);
                    CrowTH[Name[TDKH.COL_STTDocVao]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_STTDocVao]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_STTND]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_STTND]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_Code]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_Code]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DonVi]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DonVi]].GetReferenceA1()}";
                    CrowTH[Name["TheoHopDong"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["TheoHopDong"]].GetReferenceA1()}";
                    CrowTH[Name["ThucHienKyNay"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["ThucHienKyNay"]].GetReferenceA1()}";
                    string CodeGoc = CrowHT[Name_HT["Code_Goc"]].Value.ToString();
                    if (string.IsNullOrEmpty(CodeGoc))
                        continue;
                    RowInDexPS = fcn_GetRowPS(worksheet_PS, CodeGoc, "Code_Goc");
                    if (RowInDexPS != 0)
                    {
                        CrowTH[Name["KyNayPhatSinh"]].Formula = $"='{worksheet_PS.Name}'!{worksheet_PS.Rows[RowInDexPS][Name_PS["ThucHienKyNay"]].GetReferenceA1()}";
                        CrowTH[Name["LuyKeDenHetKyTruoc"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["LuyKeDenHetKyTruoc"]].GetReferenceA1()}" +
                            $"+'{worksheet_PS.Name}'!{worksheet_PS.Rows[RowInDexPS][Name_PS["LuyKeDenHetKyTruoc"]].GetReferenceA1()}";
                        //CrowTH[Name["LuyKeHetKyNay"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["LuyKeDenHetKyNay"]].GetReferenceA1()}" +
                        //    $"+'{worksheet_PS.Name}'!{worksheet_PS.Rows[RowInDexPS][Name_PS["LuyKeDenHetKyNay"]].GetReferenceA1()}";
                        if (NameSheet == spsheet_ThanhToanA_B)
                        {
                            foreach (DonViThucHien item in DVTH)
                            {
                                CrowTH[Name[item.CodeFk]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[item.CodeFk]].GetReferenceA1()}" +
                                 $"+'{worksheet_PS.Name}'!{worksheet_PS.Rows[RowInDexPS][Name_PS[item.CodeFk]].GetReferenceA1()}";
                            }
                        }
                    }
                    else
                    {

                        CrowTH[Name["LuyKeDenHetKyTruoc"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["LuyKeDenHetKyTruoc"]].GetReferenceA1()}";
                        //CrowTH[Name["LuyKeHetKyNay"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["LuyKeDenHetKyNay"]].GetReferenceA1()}";
                        if (NameSheet == spsheet_ThanhToanA_B)
                        {
                            foreach (DonViThucHien item in DVTH)
                            {
                                if (Name.Keys.Contains(item.CodeFk))
                                    continue;
                                CrowTH[Name[item.CodeFk]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[item.CodeFk]].GetReferenceA1()}";
                            }
                        }
                    }
                    DataRow[] RowHT = dt_CT_DB.AsEnumerable().Where(x => x["CodeHT"].ToString() == CrowHT[Name_HT[TDKH.COL_Code]].Value.ToString()).ToArray();
                    if (RowHT.Any())
                    {
                        DataRow fstCongTac = RowHT.FirstOrDefault();
                        CrowTH[Name["SanLuong"]].SetValue(fstCongTac["SanLuong"]);
                        CrowTH[Name["KyNayHopDongNghiemThu"]].SetValue(fstCongTac["KyNayHopDongNghiemThu"]);
                        if (fstCongTac["DangDo"] == DBNull.Value)
                        {
                            CrowTH[Name["DangDo"]].Formula = $"={CrowTH[Name["SanLuong"]].GetReferenceA1()}-{CrowTH[Name["KyNayHopDongNghiemThu"]].GetReferenceA1()}";
                        }
                        else
                            CrowTH[Name["DangDo"]].SetValue(fstCongTac["DangDo"]);
                    }
                }
            }
            NameSheet.EndUpdate();
            //           NameSheet.Document.History.IsEnabled = true;
            WaitFormHelper.CloseWaitForm();
        }
        private void Fcn_TongHopHopDongCon(string CodeCongTac, int RowIndex, Worksheet ws, Dictionary<string, string> Name)
        {
            string ngaybatdau = dte_DotbeginAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string ngayketthuc = dte_DotendAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource as List<DonViThucHien>).Where(x => x.Table != MyConstant.TBL_THONGTINNHATHAU).ToList();
            foreach (DonViThucHien item in DVTH)
            {
                //string dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeCongTac\"='{CodeCongTac}' AND {item.ColCodeFK}='{item.Code}' ";
                //DataTable DtCT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string dbString = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi} INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG_MECON}" +
                    $" ON {MyConstant.Tbl_TAOMOIHOPDONG_MECON}.CodeCon= {MyConstant.TBL_TaoHopDongMoi}.Code WHERE " +
                    $" {MyConstant.TBL_TaoHopDongMoi}.{item.ColCodeFK}='{item.Code}' AND  {MyConstant.TBL_TaoHopDongMoi_Hopdongmecon}.CodeMe='{cbo_MeNuTenHopDong.SelectedValue}' ";
                if (item.LoaiDVTH == MyConstant.LoaiDVTH_TuThucHien)
                    dbString = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi} WHERE {item.ColCodeFK}='{item.Code}'";
                DataTable DtHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string lstCode = MyFunction.fcn_Array2listQueryCondition(DtHD.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT {MyConstant.TBL_HopDong_PhuLuc}.* FROM " +
                    $"{MyConstant.TBL_HopDong_PhuLuc} " +
                    //$"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
                    //$"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                    $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodePl = {MyConstant.TBL_ThongtinphulucHD}.Code " +
                    $"INNER JOIN {MyConstant.TBL_tonghopdanhsachhopdong} " +
                    $"ON {MyConstant.TBL_ThongtinphulucHD}.CodeHd = {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
                    $"INNER JOIN {TDKH.TBL_ChiTietCongTacTheoKy} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan = {TDKH.TBL_ChiTietCongTacTheoKy}.Code " +
                    //$"INNER JOIN {TDKH.TBL_DanhMucCongTac} " +
                    //$"ON {TDKH.TBL_DanhMucCongTac}.Code = {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac " +
                    $" WHERE {MyConstant.TBL_tonghopdanhsachhopdong}.CodeHopDong IN ({lstCode}) " +
                    $"AND {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac='{CodeCongTac}'";
                DataTable DtCT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                if (DtCT.Rows.Count == 0)
                    continue;
                lstCode = MyFunction.fcn_Array2listQueryCondition(DtCT.AsEnumerable().Select(x => x["CodeCongTacTheoGiaiDoan"].ToString()).ToArray());
                dbString = $"SELECT * FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE \"CodeCongTacTheoGiaiDoan\" IN ({lstCode}) AND \"Ngay\">='{ngaybatdau}' AND \"Ngay\"<='{ngayketthuc}'";
                DataTable dtKLHN = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                if (dtKLHN.Rows.Count == 0)
                    continue;
                double KLTC = dtKLHN.AsEnumerable().Where(x => x["KhoiLuongThiCong"] != DBNull.Value).Sum(x => double.Parse(x["KhoiLuongThiCong"].ToString()));
                if (Name.Keys.Contains(item.CodeFk))
                    ws.Rows[RowIndex][Name[item.CodeFk]].SetValue(KLTC);
            }
        }
        private void Fcn_UpdateHDConTT(string CodeCongTac, int RowIndex, Worksheet ws, Dictionary<string, string> Name)
        {
            List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource as List<DonViThucHien>).Where(x => x.Table != MyConstant.TBL_THONGTINNHATHAU).ToList();
            foreach (DonViThucHien item in DVTH)
            {
                string dbString = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi} INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG_MECON}" +
    $" ON {MyConstant.Tbl_TAOMOIHOPDONG_MECON}.CodeCon= {MyConstant.TBL_TaoHopDongMoi}.Code WHERE " +
    $" {MyConstant.TBL_TaoHopDongMoi}.{item.ColCodeFK}='{item.Code}' AND  {MyConstant.TBL_TaoHopDongMoi_Hopdongmecon}.CodeMe='{cbo_MeNuTenHopDong.SelectedValue}' ";
                DataTable DtHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string lstCode = MyFunction.fcn_Array2listQueryCondition(DtHD.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT *  FROM {MyConstant.TBL_HopDongCaiDatDot} WHERE \"CodeHopDongCon\" IN ({lstCode}) ";
                DataTable Dt_CaiDat = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                double KLTC = 0;
                foreach (DataRow row in Dt_CaiDat.Rows)
                {
                    string dot = MyFunction.fcn_Array2listQueryCondition(row["CodeDotCon"].ToString().Replace(", ", ",").Split(','));
                    dbString = $"SELECT *  FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"CodeHd\"='{row["CodeHopDongCon"]}' AND \"Ten\" IN ({dot}) ";
                    DataTable Dt_Dot = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    string lstCodeDot = MyFunction.fcn_Array2listQueryCondition(Dt_Dot.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                    dbString = $"SELECT {MyConstant.TBL_hopdongAB_HT}.* " +
                //$"{MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan,{MyConstant.TBL_HopDong_DoBoc}.IsEdit,{MyConstant.TBL_HopDong_PhuLuc}.DonGia,{TDKH.TBL_DanhMucCongTac}.Code as CodeCongTac " +
                $"FROM {MyConstant.TBL_hopdongAB_HT} " +
                $"INNER JOIN {MyConstant.TBL_HopDong_DotHopDong} " +
                 $"ON {MyConstant.TBL_HopDong_DotHopDong}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDot " +
                    $"INNER JOIN {MyConstant.TBL_HopDong_DoBoc} " +
                    $"ON {MyConstant.TBL_HopDong_DoBoc}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDB " +
                    $"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                    $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodePl = {MyConstant.TBL_ThongtinphulucHD}.Code " +
                    $"INNER JOIN {MyConstant.TBL_tonghopdanhsachhopdong} " +
                    $"ON {MyConstant.TBL_ThongtinphulucHD}.CodeHd = {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
                    $"INNER JOIN {TDKH.TBL_ChiTietCongTacTheoKy} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan = {TDKH.TBL_ChiTietCongTacTheoKy}.Code " +
                    //$"INNER JOIN {TDKH.TBL_DanhMucCongTac} " +
                    //$"ON {TDKH.TBL_DanhMucCongTac}.Code = {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac " +
                    $" WHERE {MyConstant.TBL_HopDong_DoBoc}.CodeDot IN ({lstCodeDot}) " +
                    $"AND {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac='{CodeCongTac}' ";
                    DataTable Dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    KLTC += Dt_HD.AsEnumerable().Where(x => x["ThucHienKyNay"] != DBNull.Value).Any() ? Dt_HD.AsEnumerable().Where(x => x["ThucHienKyNay"] != DBNull.Value).Sum(x => double.Parse(x["ThucHienKyNay"].ToString())) : 0;
                }
                ws.Rows[RowIndex][Name[item.CodeFk]].SetValue(KLTC);
            }
        }
        private void fcn_ThanhToanTT(SpreadsheetControl NameSheet)
        {
            if (cbo_MeNuTenHopDong.SelectedValue == null)
                return;
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu", "Vui Lòng chờ!");
            NameSheet.BeginUpdate();
            //           NameSheet.Document.History.IsEnabled = false;
            IWorkbook workbook = NameSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán thông thường"];
            Worksheet worksheet_HT = workbook.Worksheets[MyConstant.CONST_SheetName_TTKLHT];
            Worksheet worksheet_PS = workbook.Worksheets[MyConstant.CONST_SheetName_TTKLPS];
            Dictionary<string, string> Name_HT = MyFunction.fcn_getDicOfColumn(worksheet_HT.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> Name_PS = MyFunction.fcn_getDicOfColumn(worksheet_HT.Range[MyConstant.TBL_QUYETTHONGTIN]);

            string range = $"Dot_1";
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
            CellRange HT = worksheet_HT.Range[range];
            if (worksheet.Range[range].RowCount - 2 <= HT.RowCount)
                worksheet.Rows.Insert(worksheet.Range[range].BottomRowIndex - 1, HT.RowCount, RowFormatMode.FormatAsNext);

            int crRowInd = worksheet.Range[range].TopRowIndex;
            long Stt = 1;
            int RowInDexPS = 0;
            for (int i = HT.TopRowIndex; i <= HT.BottomRowIndex; i++)
            {
                Row CrowHT = worksheet_HT.Rows[i];
                Row CrowTH = worksheet.Rows[crRowInd++];
                string MaHieu = CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                {
                    CrowTH.Font.Bold = true;
                    CrowTH.Font.Color = MaHieu == MyConstant.CONST_TYPE_CONGTRINH ? Color.DarkTurquoise : MaHieu == MyConstant.CONST_TYPE_HANGMUC ? Color.DarkGreen : Color.Red;
                    CrowTH[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                }
                else if (MaHieu == "" || MaHieu == "Dot" || MaHieu == "HTDot")
                    continue;
                else
                {
                    CrowTH.CopyFrom(worksheet.Rows[10], PasteSpecial.Formulas);
                    CrowTH.Font.Color = MaHieu == MyConstant.CONST_TYPE_NHOM ? MyConstant.color_Row_NhomCongTac : Color.Black;
                    CrowTH[Name["Stt"]].SetValue(Stt++);
                    CrowTH[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DonGiaTheoHopDong]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["DonGiaTheoHopDong"]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DonVi]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DonVi]].GetReferenceA1()}";
                    CrowTH[Name["TheoHopDong"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["TheoHopDong"]].GetReferenceA1()}";
                    string CodeGoc = CrowHT[Name_HT["Code_Goc"]].Value.ToString();
                    RowInDexPS = fcn_GetRowPS(worksheet_PS, CodeGoc, "Code_Goc");
                    if (RowInDexPS != 0)
                    {
                        CrowTH[Name["DonGiaBoSung"]].Formula = $"'{worksheet_PS.Name}'!{worksheet_PS.Rows[RowInDexPS][Name_PS[TDKH.COL_DonGiaPS]].GetReferenceA1()}";
                        CrowTH[Name["TheoThiCong"]].Formula = $"='{worksheet_HT.Name}'!{worksheet_HT.Name}'!{CrowHT[Name_HT["ThucHienKyNay"]].GetReferenceA1()}+" +
                   $"'{worksheet_PS.Name}'!{worksheet_PS.Rows[RowInDexPS][Name_PS["ThucHienKyNay"]].GetReferenceA1()}";
                    }
                    else
                    {
                        CrowTH[Name["TheoThiCong"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["ThucHienKyNay"]].GetReferenceA1()}";
                    }
                }
            }
            NameSheet.EndUpdate();
            //           NameSheet.Document.History.IsEnabled = true;
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_ThanhToanPS(SpreadsheetControl NameSheet, bool Update, bool Convert)
        {
            WaitFormHelper.ShowWaitForm("Đang phân tích thanh toán phát sinh, Vui lòng chờ!");
            string dbString = $"SELECT * FROM {MyConstant.TBL_hopdongAB_PS} " +
                    $"INNER JOIN {MyConstant.TBL_HopDong_DoBoc} " +
                    $"ON {MyConstant.TBL_HopDong_DoBoc}.Code = {MyConstant.TBL_hopdongAB_PS}.CodeDB " +
                    $"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                    $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodePl = {MyConstant.TBL_ThongtinphulucHD}.Code " +
                    $"INNER JOIN {MyConstant.TBL_tonghopdanhsachhopdong} " +
                    $"ON {MyConstant.TBL_ThongtinphulucHD}.CodeHd = {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
                    $"INNER JOIN {TDKH.TBL_ChiTietCongTacTheoKy} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan = {TDKH.TBL_ChiTietCongTacTheoKy}.Code " +
                    $"INNER JOIN {TDKH.TBL_DanhMucCongTac} " +
                    $"ON {TDKH.TBL_DanhMucCongTac}.Code = {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac " +
                    $" WHERE {MyConstant.TBL_HopDong_DoBoc}.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' AND {MyConstant.TBL_tonghopdanhsachhopdong}.CodeHopDong='{cbo_MeNuTenHopDong.SelectedValue}' " +
                    $"AND {TDKH.TBL_ChiTietCongTacTheoKy}.CodeGiaiDoan='{SharedControls.cbb_DBKH_ChonDot.SelectedValue}' ";
            DataTable Dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //if (Dt_HD.Rows.Count == 0)
            //    return;
            IWorkbook workbook = NameSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán KL phát sinh"];
            Worksheet worksheet_DB = workbook.Worksheets["Đo bóc"];
            DataTable dtCT, dtHM, dtCongTacTheoKy;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            TDKHHelper.fcn_TDKH_CTacTheoKy(out dtCongTacTheoKy, dtCT, dtHM);


            NameSheet.BeginUpdate();
            string range = $"Dot_1";
            if (worksheet.Range[range].RowCount - 2 <= Dt_HD.Rows.Count + dtCT.Rows.Count + dtHM.Rows.Count)
                worksheet.Rows.Insert(worksheet.Range[range].BottomRowIndex - 1, Dt_HD.Rows.Count + dtCT.Rows.Count + dtHM.Rows.Count, RowFormatMode.FormatAsNext);
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
            Dictionary<string, string> Name_DB = MyFunction.fcn_getDicOfColumn(worksheet_DB.Range[MyConstant.TBL_QUYETTHONGTIN]);
            int crRowInd = worksheet.Range[range].TopRowIndex + 1;
            if (NameSheet == spsheet_ThanhToanA_B)
                Fcn_TaoCotNhaThauPhuToDoi(MyConstant.CONST_SheetName_TTKLPS, Convert, 12, 13, 14);
            long STT = 1;
            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();
                //ws.rows.insert(crRowInd, 1);
                Row crRowWs = worksheet.Rows[crRowInd++];

                crRowWs.Font.Bold = true;
                crRowWs.Font.Color = Color.DarkTurquoise;
                crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeCT);
                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(CT["Ten"].ToString());
                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();
                    //crRowInd = wb.Range[RangeName].BottomRowIndex;

                    //ws.rows.insert(crRowInd, 1);
                    crRowWs = worksheet.Rows[crRowInd++];
                    crRowWs.Font.Bold = true;
                    crRowWs.Font.Color = Color.DarkGreen;
                    crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeHM);
                    crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(HM["Ten"].ToString().ToUpper());
                    DataRow[] drs_ct = Dt_HD.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToArray();
                    foreach (var row in drs_ct)
                    {
                        if (cbo_AB_LanThanhToan.Text != MyConstant.NAMEDOT1)
                        {
                            string tendot = $"Đợt {cbo_AB_LanThanhToan.SelectedIndex}";
                            dbString = $"SELECT \"Code\" FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"Ten\" = '{tendot}'AND \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue.ToString()}'";
                            DataTable Dt_Dot_pre = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                            dbString = $"SELECT * FROM {MyConstant.TBL_hopdongAB_PS} WHERE \"CodeDot\"='{Dt_Dot_pre.Rows[0][0].ToString()}' AND \"Code_Goc\"='{row["Code_Goc"].ToString()}'";
                            DataTable Dt_PS_pre = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                            if (Dt_PS_pre.Rows.Count != 0)
                                crRowWs[Name["LuyKeDenHetKyTruoc"]].SetValueFromText(Dt_PS_pre.Rows[0]["LuyKeDenHetKyNay"].ToString());
                        }
                        var search = worksheet_DB.Search(row["CodeDB"].ToString());
                        crRowWs = worksheet.Rows[crRowInd++];
                        //crRowWs.Font.Bold = true;
                        crRowWs.Font.Color = Color.Black;
                        crRowWs.CopyFrom(worksheet.Rows[15], PasteSpecial.Formulas);
                        crRowWs[Name[TDKH.COL_Code]].SetValue(row["Code"]);
                        crRowWs[Name["Stt"]].SetValue(STT++);
                        crRowWs[Name[TDKH.COL_DonGiaTheoHopDong]].SetValue(row["DonGia"]);
                        crRowWs[Name[TDKH.COL_DonGiaPS]].SetValue(row[TDKH.COL_DonGiaPS]);
                        crRowWs[Name[TDKH.COL_CodeDot]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB[TDKH.COL_CodeDot]].GetReferenceA1()}";
                        crRowWs[Name[TDKH.COL_IsEdit]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB[TDKH.COL_IsEdit]].GetReferenceA1()}";
                        crRowWs[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                        crRowWs[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                        crRowWs[Name[TDKH.COL_DonVi]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB[TDKH.COL_DonVi]].GetReferenceA1()}";
                        crRowWs[Name["TheoHopDong"]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB["TheoHopDong"]].GetReferenceA1()}";
                        crRowWs[Name["CodeDB"]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB[TDKH.COL_Code]].GetReferenceA1()}";
                        crRowWs[Name["ThucHienKyNay"]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB[TDKH.COL_IsCongTacPhatSinh]].GetReferenceA1()}";
                        //bool.TryParse(row["IsEdit"].ToString(), out bool Edit);
                        //if (Edit)
                        //{
                        //    crRowWs[Name["ThucHienKyNay"]].Formula = $"='{worksheet_DB.Name}'!{worksheet_DB.Rows[search.FirstOrDefault().RowIndex][Name_DB[TDKH.COL_DBC_KhoiLuongToanBo]].GetReferenceA1()}";
                        //    continue;
                        //}
                        //if (Update)
                        //{
                        //    DataRow[] crRow = dtKLHN.AsEnumerable().Where(x => x["CodeCongTacTheoGiaiDoan"].ToString() == row["CodeCongTacTheoGiaiDoan"].ToString() && DateTime.Parse(x["Ngay"].ToString()) >= DateTime.Parse(ngaybatdau) && DateTime.Parse(x["Ngay"].ToString()) <= DateTime.Parse(ngayketthuc)).ToArray();

                        //    double KLTC = 0;
                        //    foreach (var item in crRow)
                        //    {
                        //        if (item["KhoiLuongThiCong"].ToString() == "")
                        //            continue;
                        //        KLTC += double.Parse(item["KhoiLuongThiCong"].ToString());
                        //    }
                        //    crRowWs[Name["ThucHienKyNay"]].SetValueFromText(KLTC.ToString());
                        //    dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET \"ThucHienKyNay\"='{KLTC}' WHERE \"Code\"='{row["Code"]}' ";
                        //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        //    continue;
                        //}
                        //crRowWs[Name["ThucHienKyNay"]].SetValueFromText(row["ThucHienKyNay"].ToString());
                    }
                }
            }
            dbString = $"SELECT {MyConstant.Tbl_CHITIETHOPDONG}.*,{MyConstant.Tbl_TAOMOIHOPDONG}.GiaTriHopDong " +
                $"FROM {MyConstant.Tbl_CHITIETHOPDONG} " +
                $"INNER JOIN {MyConstant.Tbl_TAOMOIHOPDONG} ON {MyConstant.Tbl_TAOMOIHOPDONG}.Code={MyConstant.Tbl_CHITIETHOPDONG}.CodeHopDong WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable dtChiTiet = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (dtChiTiet.Rows.Count != 0)
            {
                List<ChiTietHopDong> ChiTiet = DuAnHelper.ConvertToList<ChiTietHopDong>(dtChiTiet);
                List<ChiTietHopDong> TU = ChiTiet.Where(x => x.Loai == 0 && DateTime.Parse(x.Ngay).Date >= dte_DotbeginAB.DateTime.Date && DateTime.Parse(x.Ngay).Date <= dte_DotendAB.DateTime.Date).Any() ?
                    ChiTiet.Where(x => x.Loai == 0 && DateTime.Parse(x.Ngay).Date >= dte_DotbeginAB.DateTime.Date && DateTime.Parse(x.Ngay).Date <= dte_DotendAB.DateTime.Date).ToList() : null;
                ChiTietHopDong ThuHoiTU = ChiTiet.Where(x => x.Loai == 4).Any() ? ChiTiet.Where(x => x.Loai == 4).FirstOrDefault() : null;
                ChiTietHopDong TLTTT = ChiTiet.Where(x => x.Loai == 5).Any() ? ChiTiet.Where(x => x.Loai == 5).FirstOrDefault() : null;
                if (TU != null)
                {
                    CellRange TamUng = worksheet.Range[MyConstant.CONST_TamUngPS];
                    Cell TT = worksheet.Rows[TamUng.BottomRowIndex - 1][TamUng.RightColumnIndex];
                    string fomular = "";
                    foreach (ChiTietHopDong item in TU)
                    {
                        if (item.IsPhanTram)
                            fomular += $"+{TT.GetReferenceA1()}*{Math.Round(double.Parse(item.GiaTri) / 100, 2)}";
                        else
                            fomular += $"+{item.SoTienCal}";

                    }
                    worksheet.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].Formula = $"={fomular}";
                }
                if (ThuHoiTU != null)
                {
                    CellRange TamUng = worksheet.Range[MyConstant.CONST_ThuHoiTamUngPS];
                    if (ThuHoiTU.IsPhanTram)
                        worksheet.Rows[TamUng.BottomRowIndex][Name["DonGiaPhatSinh"]].SetValue(Math.Round(double.Parse(ThuHoiTU.GiaTri) / 100, 2));
                    else
                        worksheet.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].SetValue(ThuHoiTU.SoTienCal);
                }
                if (TLTTT != null)
                {
                    CellRange TamUng = worksheet.Range[MyConstant.CONST_TLTTTPS];
                    if (TLTTT.IsPhanTram)
                        worksheet.Rows[TamUng.BottomRowIndex][Name["DonGiaPhatSinh"]].SetValue(Math.Round(double.Parse(TLTTT.GiaTri) / 100, 2));
                    else
                        worksheet.Rows[TamUng.BottomRowIndex][TamUng.RightColumnIndex].SetValue(TLTTT.SoTienCal);
                }
            }
            NameSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_ThanhToanTH(SpreadsheetControl NameSheet)
        {
            if (cbo_MeNuTenHopDong.SelectedValue == null)
                return;
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu", "Vui Lòng chờ!");

            string dbString = $"SELECT {MyConstant.TBL_hopdongAB_HT}.*,{MyConstant.TBL_hopdongAB_PS}.ThucHienKyNay as KyNayPhatSinh,{MyConstant.TBL_hopdongAB_PS}.DonGiaPhatSinh," +
                $"{MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan,{MyConstant.TBL_HopDong_PhuLuc}.DonGia " +
                $"FROM {MyConstant.TBL_hopdongAB_HT} " +
                $"INNER JOIN {MyConstant.TBL_HopDong_DotHopDong} " +
                $"ON {MyConstant.TBL_HopDong_DotHopDong}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDot " +
                    $"INNER JOIN {MyConstant.TBL_HopDong_DoBoc} " +
                    $"ON {MyConstant.TBL_HopDong_DoBoc}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDB " +
                    $"LEFT JOIN {MyConstant.TBL_hopdongAB_PS} " +
                    $"ON {MyConstant.TBL_HopDong_DoBoc}.Code = {MyConstant.TBL_hopdongAB_PS}.CodeDB " +
                    $"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                    $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodePl = {MyConstant.TBL_ThongtinphulucHD}.Code " +
                    $"INNER JOIN {MyConstant.TBL_tonghopdanhsachhopdong} " +
                    $"ON {MyConstant.TBL_ThongtinphulucHD}.CodeHd = {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
                    $" WHERE {MyConstant.TBL_tonghopdanhsachhopdong}.CodeHopDong='{cbo_MeNuTenHopDong.SelectedValue}' ";
            DataTable Dt_HT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            NameSheet.BeginUpdate();
            //           NameSheet.Document.History.IsEnabled = false;
            Worksheet worksheet = NameSheet.Document.Worksheets[MyConstant.CONST_SheetName_THTT];
            Worksheet worksheet_HT = NameSheet.Document.Worksheets[MyConstant.CONST_SheetName_TTKLHT];
            Worksheet worksheet_PS = NameSheet.Document.Worksheets[MyConstant.CONST_SheetName_TTKLPS];
            Dictionary<string, string> Name_HT = MyFunction.fcn_getDicOfColumn(worksheet_HT.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> Name_PS = MyFunction.fcn_getDicOfColumn(worksheet_HT.Range[MyConstant.TBL_QUYETTHONGTIN]);
            dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"CodeGiaiDoan\" = '{cbb_DBKH_ChonDot.SelectedValue.ToString()}'";
            DataRow[] Dt_Dot = DataProvider.InstanceTHDA.ExecuteQuery(dbString).AsEnumerable().Where(x => x["CodeHd"].ToString() == cbo_MeNuTenHopDong.SelectedValue.ToString()).ToArray();
            string range = $"Dot_1";
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
            foreach (var str in Name)
            {
                if (str.Key.Remove(2) == "KL" || str.Key.Remove(2) == "TT")
                {
                    Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
                    worksheet.Columns.Remove(Name[str.Key]);
                }
            }
            foreach (var row in Dt_Dot)
            {
                worksheet.Columns.Insert(worksheet.Range["KL_Dot_1"].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                worksheet.Columns.Insert(worksheet.Range["TT_Dot_1"].RightColumnIndex, 1, ColumnFormatMode.FormatAsPrevious);
                worksheet.Rows[6][worksheet.Range["KL_Dot_1"].RightColumnIndex - 1].SetValueFromText($"Khối lượng {row["Ten"].ToString()}");
                worksheet.Rows[0][worksheet.Range["KL_Dot_1"].RightColumnIndex - 1].SetValueFromText($"KL{row["Code"].ToString()}");
                worksheet.Rows[6][worksheet.Range["TT_Dot_1"].RightColumnIndex - 1].SetValueFromText($"Giá trị thanh toán {row["Ten"].ToString()}");
                worksheet.Rows[0][worksheet.Range["TT_Dot_1"].RightColumnIndex - 1].SetValueFromText($"TT{row["Code"].ToString()}");
                Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
                worksheet.Rows[7][worksheet.Range["TT_Dot_1"].RightColumnIndex - 1].Formula = $"({Name["DonGia"]}8+{Name["DonGiaBoSung"]}8)*{Name[$"KL{row["Code"].ToString()}"]}8";
            }
            CellRange HT = worksheet_HT.Range[range];
            if (worksheet.Range[range].RowCount - 2 <= HT.RowCount)
                worksheet.Rows.Insert(worksheet.Range[range].BottomRowIndex - 1, HT.RowCount, RowFormatMode.FormatAsNext);
            Name = MyFunction.fcn_getDicOfColumn(worksheet.Range[range]);
            int crRowInd = worksheet.Range[range].TopRowIndex;
            long Stt = 1;
            int RowInDexPS = 0;
            for (int i = HT.TopRowIndex + 1; i <= HT.BottomRowIndex; i++)
            {
                Row CrowHT = worksheet_HT.Rows[i];
                Row CrowTH = worksheet.Rows[crRowInd++];
                string MaHieu = CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                {
                    CrowTH.Font.Bold = true;
                    CrowTH.Font.Color = MaHieu == MyConstant.CONST_TYPE_CONGTRINH ? Color.DarkTurquoise : MaHieu == MyConstant.CONST_TYPE_HANGMUC ? Color.DarkGreen : Color.Red;
                    CrowTH[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                }
                else if (MaHieu == "Dot" || MaHieu == "HTDot" || MaHieu == "")
                    continue;
                else
                {
                    CrowTH.CopyFrom(worksheet.Rows[7], PasteSpecial.Formulas);
                    CrowTH.Font.Color = MaHieu == MyConstant.CONST_TYPE_NHOM ? MyConstant.color_Row_NhomCongTac : Color.Black;
                    CrowTH[Name["Stt"]].SetValue(Stt++);
                    CrowTH[Name[TDKH.COL_MaHieuCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_MaHieuCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DanhMucCongTac]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DanhMucCongTac]].GetReferenceA1()}";
                    CrowTH[Name[TDKH.COL_DonVi]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT[TDKH.COL_DonVi]].GetReferenceA1()}";
                    CrowTH[Name["DonGia"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["DonGiaTheoHopDong"]].GetReferenceA1()}";
                    CrowTH[Name["KhoiLuongHopDongChiTiet"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["TheoHopDong"]].GetReferenceA1()}";
                    string CodeGoc = CrowHT[Name_HT["Code_Goc"]].Value.ToString();
                    RowInDexPS = fcn_GetRowPS(worksheet_PS, CodeGoc, "Code_Goc");
                    foreach (var rows in Dt_Dot)
                    {
                        DataRow[] crRows = Dt_HT.AsEnumerable().Where(x => x["Code_Goc"].ToString() == CodeGoc && x["CodeDot"].ToString() == rows["Code"].ToString()).ToArray();
                        if (crRows.Count() == 0)
                            continue;
                        double KLPS = crRows[0]["KyNayPhatSinh"] != DBNull.Value ? double.Parse(crRows[0]["KyNayPhatSinh"].ToString()) : 0;
                        double KLHT = crRows[0]["ThucHienKyNay"] != DBNull.Value ? double.Parse(crRows[0]["ThucHienKyNay"].ToString()) : 0;
                        //double DonGia = crRows[0]["DonGia"] != DBNull.Value ? double.Parse(crRows[0]["DonGia"].ToString()) : 0;
                        double DonGiaPS = crRows[0]["DonGiaPhatSinh"] != DBNull.Value ? double.Parse(crRows[0]["DonGiaPhatSinh"].ToString()) : 0;
                        CrowTH[Name[$"KL{rows["Code"]}"]].SetValue(KLPS + KLHT);
                        //CrowTH[Name["DonGia"]].SetValue(DonGia);
                        if (DonGiaPS > 0)
                            CrowTH[Name["DonGiaBoSung"]].SetValue(DonGiaPS);
                    }
                    if (RowInDexPS != 0)
                    {
                        CrowTH[Name[$"KL{cbo_AB_LanThanhToan.SelectedValue}"]].Formula = $"'{worksheet_HT.Name}'!{CrowHT[Name_HT["ThucHienKyNay"]].GetReferenceA1()} + '{worksheet_PS.Name}'!{worksheet_PS.Rows[RowInDexPS][Name_PS["ThucHienKyNay"]].GetReferenceA1()}";
                        CrowTH[Name["DonGiaBoSung"]].Formula = $"'{worksheet_PS.Name}'!{worksheet_PS.Rows[RowInDexPS][Name_PS[TDKH.COL_DonGiaPS]]}";

                    }
                    else
                    {
                        CrowTH[Name[$"KL{cbo_AB_LanThanhToan.SelectedValue}"]].Formula = $"='{worksheet_HT.Name}'!{CrowHT[Name_HT["ThucHienKyNay"]].GetReferenceA1()}";
                    }
                }
            }
            NameSheet.EndUpdate();
            //           NameSheet.Document.History.IsEnabled = true;
            WaitFormHelper.CloseWaitForm();
        }
        private void cbo_MeNuTenHopDong_SelectedIndexChanged(object sender, EventArgs e)
        {
            string dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"CodeHd\" = '{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable Dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (Dt_HD.Rows.Count == 0)
                return;
            //cbo_AB_LanThanhToan.DataSource = Dt_HD.AsEnumerable().ToDictionary(x => x["Code"].ToString(), y => y["Ten"].ToString()).ToList();
            //fcb_TTNCC();
            dbString = $"SELECT {MyConstant.TBL_LoaiHD}.LoaiHopDong, {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
              $"FROM {MyConstant.TBL_tonghopdanhsachhopdong} " +
              $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
              $"ON {MyConstant.TBL_tonghopdanhsachhopdong}.Code = {MyConstant.TBL_ThongtinphulucHD}.CodeHd " +
              $"LEFT JOIN {MyConstant.TBL_LoaiHD} " +
              $"ON {MyConstant.TBL_LoaiHD}.Code = {MyConstant.TBL_ThongtinphulucHD}.CodeLoaiHd " +
              $"WHERE \"CodeHopDong\"='{cbo_MeNuTenHopDong.SelectedValue}'";
            DataTable LoaiHD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (LoaiHD.Rows.Count == 0)
                return;
            fcn_HideTab(LoaiHD.Rows[0][0].ToString());
            fcn_UpdateCboDotHopdong();
            if (xtraTabControl_HopDongThanhToan.SelectedTabPage == xtraTab_ChiTietPhuLucGia)
            {
                if (xtraTab_ThanhToanNhaCC.PageVisible)
                {
                    //fcn_updatephuluchopdongNCC();
                    Fcn_UpdatePhuLucHDNCC();
                }
                else
                {
                    Fcn_UpDatePLHD();
                    //fcn_updatephuluchopdong();
                }
            }

        }

        private void cbo_AB_LanThanhToan_SelectedIndexChanged(object sender, EventArgs e)
        {

            SpreadsheetControl Name;
            if (cbo_AB_LanThanhToan.Text == "Thêm đợt mới")
            {
                try
                {
                    XtraInputBoxArgs args = new XtraInputBoxArgs();
                    args.Caption = "Cài đặt ngày bắt đầu";
                    args.Prompt = "Ngày bắt đầu";
                    args.DefaultButtonIndex = 0;
                    args.Showing += Args_Showing_Begin;
                    args.Editor.BackColor = Color.Red;
                    DateEdit editor = new DateEdit();
                    editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
                    editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
                    args.Editor = editor;

                    args.DefaultResponse = dte_DotendAB.DateTime.AddDays(1);
                    var begin = XtraInputBox.Show(args).ToString();
                    args.Caption = "Cài đặt ngày kết thúc";
                    args.Prompt = "Ngày kết thúc";
                    var end = XtraInputBox.Show(args).ToString();
                    string CodeDot = Guid.NewGuid().ToString();
                    string dbString = $"INSERT INTO {MyConstant.TBL_HopDong_DotHopDong} (\"TrangThai\",\"Code\",\"CodeGiaiDoan\",\"Ten\",\"NgayBatDau\",\"NgayKetThuc\",\"CodeHd\") VALUES" +
                        $" ('Đang thực hiện','{CodeDot}','{cbb_DBKH_ChonDot.SelectedValue}', 'Đợt {cbo_AB_LanThanhToan.Items.Count}','{DateTime.Parse(begin).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{DateTime.Parse(end).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{cbo_MeNuTenHopDong.SelectedValue}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"UPDATE  {MyConstant.Tbl_TAOMOIHOPDONG} SET \"NgayKetThuc\"='{DateTime.Parse(end).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE \"Code\"='{cbo_MeNuTenHopDong.SelectedValue}'";
                    DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
                    Name = Fcn_Spreadsheet();
                    if (Name == spsheet_ThanhToan_NhaCungCap)
                    {
                        //fcn_UpdateLuyKeNCC(MyConstant.TBL_hopdongNCC_TT, "Thanh toán nhà cung cấp");
                        fcn_ThemDotNCC(cbo_AB_LanThanhToan.Text, true, CodeDot);
                        WaitFormHelper.CloseWaitForm();
                    }
                    else
                    {

                        fcn_themdot(cbo_AB_LanThanhToan.Text, true, Name, CodeDot);
                        WaitFormHelper.CloseWaitForm();
                    }
                    cbo_AB_LanThanhToan.SelectedIndexChanged -= cbo_AB_LanThanhToan_SelectedIndexChanged;
                    fcn_UpdateCboDotHopdong();
                    cbo_AB_LanThanhToan.SelectedIndexChanged += cbo_AB_LanThanhToan_SelectedIndexChanged;
                    cbo_AB_LanThanhToan.SelectedIndex = cbo_AB_LanThanhToan.Items.Count - 2;
                    dte_DotbeginAB.DateTime = DateTime.Parse(begin);
                    dte_DotendAB.DateTime = DateTime.Parse(end);
                }
                catch
                {
                    fcn_UpdateCboDotHopdong();
                }

            }
            else
            {
                string dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"Code\"='{cbo_AB_LanThanhToan.SelectedValue}'";
                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                if (dt.Rows.Count == 0)
                    return;

                dte_DotbeginAB.DateTime = DateTime.Parse(dt.Rows[0]["NgayBatDau"].ToString());
                dte_DotendAB.DateTime = DateTime.Parse(dt.Rows[0]["NgayKetThuc"].ToString());
                WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
                Name = Fcn_Spreadsheet();
                if (Name == spsheet_ThanhToan_NhaCungCap)
                {
                    fcn_ThemDotNCC(cbo_AB_LanThanhToan.Text, false);
                    Fcn_TTNCC();

                    WaitFormHelper.CloseWaitForm();

                    return;
                }
                else
                {

                    fcn_themdot(cbo_AB_LanThanhToan.Text, false, Name);
                    fcn_DobocAB(Name);
                    WaitFormHelper.CloseWaitForm();
                }
            }

        }
        private void Args_Showing_Begin(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Icon = this.Icon;
        }
        private void spsheet_ThanhToanA_B_CellBeginEdit(object sender, SpreadsheetCellCancelEventArgs e)
        {
            IWorkbook wb = e.Worksheet.Workbook;
            Worksheet ws = e.Worksheet;
            string colHeading = ws.Columns[e.Cell.ColumnIndex].Heading;

            //string colInDb = dic.Where(x => x.Value == colHeading).FirstOrDefault().Key;
            Row crRow = ws.Rows[e.RowIndex];
            switch (ws.Name)
            {
                case TDKH.SheetName_DoBoc:
                    Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
                    string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                    if (e.Cell.ColumnIndex == 0) //Ô chọn
                    {
                        e.Cancel = true;
                        e.Cell.SetValue((e.Cell.Value == true) ? false : true);
                    }
                    if (!ws.Range[MyConstant.TBL_QUYETTHONGTIN].Contains(e.Cell)/* || string.IsNullOrEmpty(colInDb)*/)
                        return;
                    switch (typeRow)
                    {
                        case MyConstant.TYPEROW_CVCON:
                            string DienGiai = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();
                            bool isCongThuc;
                            try
                            {
                                fcn_TDKH_KiemTraCongThuc(DienGiai);
                                isCongThuc = true;
                            }
                            catch
                            {
                                isCongThuc = false;
                            }
                            List<string> lsUpdateCon = new List<string>()
                            {
                                dic[TDKH.COL_DBC_HeSoCauKien],
                                dic[TDKH.COL_DonVi],
                                dic[TDKH.COL_DBC_Dai],
                                dic[TDKH.COL_DBC_Rong],
                                dic[TDKH.COL_DBC_Cao],
                                dic[TDKH.COL_DBC_HeSoCauKien],
                                dic[TDKH.COL_DBC_KL1BoPhan]
                            };

                            if (lsUpdateCon.Contains(colHeading) && isCongThuc)
                                e.Cancel = true;
                            break;
                        case MyConstant.TYPEROW_CVCha:
                            break;
                        default:
                            break;
                    }
                    break;
                case "Thanh toán KL hoàn thành":
                    CellRange Dot1 = ws.Range["Dot_1"];
                    Dictionary<string, string> dicHT = MyFunction.fcn_getDicOfColumn(Dot1);
                    if (!Dot1.Contains(e.Cell) || ws.Columns[e.ColumnIndex].Heading != dicHT["ThucHienKyNay"])
                        e.Cancel = true;
                    string CodeDB = ws.Rows[e.RowIndex][dicHT["CodeDB"]].Value.ToString();
                    if (CodeDB == "")
                        e.Cancel = true;

                    break;
                case "Tổng hợp VT A cấp":
                    CellRange RangeDataVTACap = ws.Range["RangeDataVTACap"];
                    Dictionary<string, string> dicVT = MyFunction.fcn_getDicOfColumn(RangeDataVTACap);
                    if (!RangeDataVTACap.Contains(e.Cell) || ws.Columns[e.ColumnIndex].Heading == dicVT["MaVatLieu"]
                        || ws.Columns[e.ColumnIndex].Heading == dicVT["VatTu"] || ws.Columns[e.ColumnIndex].Heading == dicVT["DonVi"])
                        e.Cancel = true;
                    string Code = ws.Rows[e.RowIndex][dicVT["Code"]].Value.ToString();
                    if (Code == "")
                        e.Cancel = true;

                    break;
                case "Bảng đề nghị thanh toán":
                    CellRange RangeData = ws.Range["RangeData"];
                    Dictionary<string, string> dicDaTa = MyFunction.fcn_getDicOfColumn(RangeData);
                    if (!RangeData.Contains(e.Cell))
                        e.Cancel = true;
                    //string Code = ws.Rows[e.RowIndex][dicVT["Code"]].Value.ToString();
                    //if (Code == "")
                    //    e.Cancel = true;

                    break;
                default:
                    break;
            }
        }
        private void fcn_themdot(string newdot, bool insert, SpreadsheetControl Sheet, string CodeDot = default)
        {
            if (CodeDot != default)
                goto Label;
            IWorkbook workbook = Sheet.Document;
            Worksheet ws = workbook.Worksheets[0];
            Worksheet ws_ps = workbook.Worksheets["Thanh toán KL phát sinh"];
            Worksheet ws_HT = workbook.Worksheets[MyConstant.CONST_SheetName_TTKLHT];
            Worksheet ws_TT = workbook.Worksheets[MyConstant.CONST_SheetName_TTKLTT];
            Worksheet ws_TH = workbook.Worksheets[MyConstant.CONST_SheetName_THTT];
            Worksheet ws_NT = workbook.Worksheets[MyConstant.CONST_SheetName_TTNghiemThu];
            Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> NAME_COL_PS = MyFunction.fcn_getDicOfColumn(ws_ps.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> NAME_COL_HT = MyFunction.fcn_getDicOfColumn(ws_HT.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> NAME_COL_TT = MyFunction.fcn_getDicOfColumn(ws_TT.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> NAME_COL_TH = MyFunction.fcn_getDicOfColumn(ws_TH.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> NAME_COL_NT = MyFunction.fcn_getDicOfColumn(ws_NT.Range[MyConstant.TBL_QUYETTHONGTIN]);
            DataTable dtCT, dtHM, dtCongTacTheoKy;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            TDKHHelper.fcn_TDKH_CTacTheoKy(out dtCongTacTheoKy, dtCT, dtHM);
            CellRange range_pre = ws.Range["Dot_1"];
            string cellrange = $"A6:{ws.Rows[range_pre.BottomRowIndex - 1][NAME_COL["IsPhatSinh"]].GetReferenceA1()}";
            string cellrange_ps = $"A18:{ws_ps.Rows[ws_ps.Range["Dot_1"].BottomRowIndex - 1][NAME_COL_PS["GhiChu"]].GetReferenceA1()}";
            string cellrange_HT = $"A18:{ws_HT.Rows[ws_HT.Range["Dot_1"].BottomRowIndex - 1][NAME_COL_HT["GhiChu"]].GetReferenceA1()}";
            string cellrange_TT = $"A13:{ws_TT.Rows[ws_TT.Range["Dot_1"].BottomRowIndex - 1][NAME_COL_TT["GhiChu"]].GetReferenceA1()}";
            string cellrange_TH = $"A9:{ws_TH.Rows[ws_TH.Range["Dot_1"].BottomRowIndex - 1][NAME_COL_TH["GhiChu"]].GetReferenceA1()}";
            string cellrange_NT = $"A36:{ws_NT.Rows[ws_NT.Range["Dot_1"].BottomRowIndex - 1][NAME_COL_NT["GhiChu"]].GetReferenceA1()}";
            Sheet.BeginUpdate();
            ws.ClearContents(ws.Range[cellrange]);
            ws_ps.ClearContents(ws_ps.Range[cellrange_ps]);
            ws_HT.ClearContents(ws_HT.Range[cellrange_HT]);
            ws_TT.ClearContents(ws_TT.Range[cellrange_TT]);
            ws_TH.ClearContents(ws_TH.Range[cellrange_TH]);
            ws_NT.ClearContents(ws_NT.Range[cellrange_NT]);
            ws.Rows[4][NAME_COL["TenCongTac"]].SetValue(newdot);
            ws.Rows[range_pre.BottomRowIndex][NAME_COL["TenCongTac"]].SetValue($"Hoàn thành {newdot}");
            Sheet.EndUpdate();
            Label:
            WaitFormHelper.ShowWaitForm("Đang thêm dữ liệu cho đợt mới", "Vui Lòng chờ!");
            if (insert)
            {
                string dbString = $"SELECT \"Code\" FROM {MyConstant.TBL_HopDong_DotHopDong} WHERE \"CodeHd\" = '{cbo_MeNuTenHopDong.SelectedValue}' AND \"Ten\"='{$"Đợt {cbo_AB_LanThanhToan.Items.Count - 1}"}'";
                DataTable Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                dbString = $"SELECT {MyConstant.TBL_HopDong_DoBoc}.*,{MyConstant.TBL_hopdongAB_HT}.LuyKeDenHetKyNay FROM {MyConstant.TBL_HopDong_DoBoc} " +
                    $"LEFT JOIN {MyConstant.TBL_hopdongAB_HT} " +
                    $"ON {MyConstant.TBL_HopDong_DoBoc}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDB " +
                    $"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                    $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
                    $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodePl = {MyConstant.TBL_ThongtinphulucHD}.Code " +
                    $"INNER JOIN {MyConstant.TBL_tonghopdanhsachhopdong} " +
                    $"ON {MyConstant.TBL_ThongtinphulucHD}.CodeHd = {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
                    $" WHERE {MyConstant.TBL_HopDong_DoBoc}.CodeDot='{Dt.Rows[0][0]}' AND {MyConstant.TBL_tonghopdanhsachhopdong}.CodeHopDong='{cbo_MeNuTenHopDong.SelectedValue}' ";
                Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                foreach (DataRow row in Dt.Rows)
                {
                    string codeDB = Guid.NewGuid().ToString();
                    dbString = $"INSERT INTO '{MyConstant.TBL_HopDong_DoBoc}'(\"TheoHopDong\",\"CodePL\",\"Code\",\"CodeDot\",\"LoaiCT\",\"KhoiLuongToanBo_Iscongthucmacdinh\",\"Code_Goc\") VALUES ('{row["TheoHopDong"]}','{row["CodePL"]}','{codeDB}','{CodeDot}','{3}','{true}','{row["Code_Goc"]}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"INSERT INTO '{MyConstant.TBL_hopdongAB_HT}' (\"LuyKeDenHetKyNay\",\"CodeDB\",\"Code\",\"CodeDot\",\"Code_Goc\") VALUES ('{row["LuyKeDenHetKyNay"]}','{codeDB}','{Guid.NewGuid()}','{CodeDot}','{row["Code_Goc"]}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"INSERT INTO '{MyConstant.TBL_hopdongAB_TT}' (\"CodeDB\",\"Code\",\"CodeDot\") VALUES ('{codeDB}','{Guid.NewGuid()}','{CodeDot}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }
            WaitFormHelper.CloseWaitForm();
        }
        private void Fcn_CellvalueChanged(Cell Cell, CellValue oldValue, SpreadsheetControl Name)
        {
            IWorkbook workbook = Name.Document;
            Worksheet ws = Name.ActiveWorksheet;
            Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
            string newVal = Cell.Value.ToString();
            string colHeading = ws.Columns[Cell.ColumnIndex].Heading;
            string colInDb = ws.Rows[0][Cell.ColumnIndex].Value.ToString();
            string dbString = "";
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            Dictionary<string, string> Name_HT = MyFunction.fcn_getDicOfColumn(Dot1);
            string CodeHT = "";
            double KLLK = 0;
            if (Name.Document.Worksheets.ActiveWorksheet.Name == MyConstant.CONST_SheetName_HOPDONGDB)
            {
                Guid guid;
                if (Cell.Value.ToString() == oldValue.ToString())
                    return;
                Name.BeginUpdate();
                CellRange range = ws.Range[MyConstant.TBL_QUYETTHONGTIN];
                Row crRow = ws.Rows[Cell.RowIndex];
                //if(colHeading== NAME_COL[TDKH.KYNAYPHATSINH])
                //{
                //    e.Cancel = true;
                //    return;
                //}
                string code = crRow[NAME_COL[MyConstant.COL_HD_CodeCT]].Value.ToString();
                string typeRow = crRow[NAME_COL[TDKH.COL_TypeRow]].Value.ToString();
                //string ID = crRow[NAME_COL[TDKH.ID]].Value.ToString();
                bool isHaveCode = Guid.TryParse(code, out guid); //Trường hợp là dòng trống, chưa có công tác
                if (!isHaveCode)
                {
                    Row crRowCha = null;
                    string newGuid = Guid.NewGuid().ToString();
                    for (int i = Cell.RowIndex; i >= range.TopRowIndex; i--)
                    {
                        string typeRowTemp = ws.Rows[i][NAME_COL[TDKH.COL_TypeRow]].Value.ToString();

                        if (typeRowTemp == MyConstant.TYPEROW_CVCha)
                        {
                            crRowCha = ws.Rows[i];
                            //if (i == e.RowIndex - 1 && crRowCha[NAME_COL[TDKH.COL_DBC_KLHOPDONG]].Formula.Contains("Thiết lập"))
                            //    crRowCha[NAME_COL[TDKH.COL_DBC_KLHOPDONG]].SetValue("");
                            break;
                        }
                    }

                    if (crRowCha == null)
                    {
                        MessageShower.ShowInformation("Không thể tìm công tác cha");
                        Name.EndUpdate();
                        return;
                    }
                    string codeCha = crRowCha[NAME_COL[TDKH.COL_Code]].Value.ToString();
                    dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\"='{true}' WHERE \"Code\" = '{codeCha}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    //var search = MyFunction.SearchRangeCell(worksheet,codeCha);
                    int RowIndexHT = fcn_GetRowPS(worksheet, codeCha, "CodeDB");
                    if (RowIndexHT != 0)
                    {
                        worksheet.Rows[RowIndexHT][Name_HT["ThucHienKyNay"]].Formula = $"='{ws.Name}'!{crRowCha[NAME_COL[TDKH.COL_DBC_KhoiLuongToanBo]].GetReferenceA1()}";
                        CodeHT = worksheet.Rows[RowIndexHT][Name_HT["Code"]].Value.ToString();
                        worksheet.Calculate();
                        KLLK = worksheet.Rows[RowIndexHT][Name_HT["LuyKeDenHetKyNay"]].Value.NumericValue;
                    }
                    dbString = $"INSERT INTO {TDKH.TBL_ChiTietCongTacCon} (\"Code\", \"CodeDoBocHD\", \"TenCongTac\", \"LoaiCT\") VALUES " +
                        $"('{newGuid}', '{codeCha}', @TenCongTac, '{MyConstant.COL_HD_TT}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newVal });
                    crRow[NAME_COL[TDKH.COL_Code]].SetValue(newGuid);
                    //crRow[NAME_COL[TDKH.COL_RowCha]].Formula = $"ROW(A{crRowCha.Index + 1})";
                    crRow[NAME_COL[TDKH.COL_TypeRow]].SetValue(MyConstant.TYPEROW_CVCON);
                    crRow[NAME_COL[TDKH.COL_DBC_LoaiCT]].SetValue(MyConstant.COL_HD_TT);
                    TDKHHelper.fcn_TDKH_UpdateRowConTheoTenCongTac_Suacongtac(ws, crRow.Index, out double KLKH);
                    crRow[NAME_COL[TDKH.COL_RowCha]].SetValue(crRowCha.TopRowIndex + 1);
                    crRow.Font.Bold = false;
                    crRow.Font.Color = MyConstant.color_Row_DienGiai;
                    //if (crRowCha[NAME_COL[TDKH.COL_DBC_KhoiLuongToanBoIsCongThucMacDinh]].Value.ToString() == true.ToString())
                    crRowCha[NAME_COL[TDKH.COL_DBC_KhoiLuongToanBo]].Formula = $"+ {NAME_COL[TDKH.COL_DBC_KL1BoPhan]}{Cell.RowIndex + 1}" + crRowCha[NAME_COL[TDKH.COL_DBC_KhoiLuongToanBo]].Formula.Replace("=", "");
                    if (colHeading == NAME_COL["TheoHopDong"])
                    {
                        MessageShower.ShowWarning("Vui lòng quay lại phụ lục hợp đồng để thay đổi khối lượng hợp đồng!");
                        //dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"TheoHopDong\"='{Cell.Value}' WHERE \"Code\" = '{code}'";
                        //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                    }
                    ws.Calculate();
                    double KLToanBo = crRowCha[NAME_COL[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue;
                    dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET \"ThucHienKyNay\"='{KLToanBo}',\"LuyKeDenHetKyNay\"='{KLLK}' WHERE \"Code\" = '{CodeHT}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
                else
                {
                    switch (typeRow)
                    {
                        case MyConstant.TYPEROW_CVCON:
                            if (ws.Columns[Cell.ColumnIndex].Heading == NAME_COL[TDKH.COL_DanhMucCongTac])
                            {
                                string checkvalue = TDKHHelper.fcn_TDKH_UpdateRowConTheoTenCongTac_Suacongtac(ws, Cell.RowIndex, out double KLKH);
                                if (checkvalue != newVal)
                                    ws.Rows[Cell.RowIndex][Cell.ColumnIndex].Value = checkvalue;
                            }
                            break;
                        case MyConstant.TYPEROW_CVCha:
                            string CodeCha = ws.Rows[Cell.RowIndex][NAME_COL[TDKH.COL_Code]].Value.ToString();
                            if (colHeading == NAME_COL[TDKH.COL_DBC_KhoiLuongToanBo])
                            {

                                DialogResult rs = MessageShower.ShowYesNoQuestion("Nếu thay đổi cột khối lượng toàn bộ thì diễn dãi sẽ bị xóa, bạn có xác nhận không?");
                                if (rs == DialogResult.Yes)
                                {
                                    //var search = MyFunction.SearchRangeCell(worksheet, CodeCha);
                                    int RowIndexHT = fcn_GetRowPS(worksheet, CodeCha, "CodeDB");
                                    if (RowIndexHT != 0)
                                    {
                                        worksheet.Rows[RowIndexHT][Name_HT["ThucHienKyNay"]].Formula = $"='{ws.Name}'!{ws.Rows[Cell.RowIndex][NAME_COL[TDKH.COL_DBC_KhoiLuongToanBo]].GetReferenceA1()}";
                                        CodeHT = worksheet.Rows[RowIndexHT][Name_HT["Code"]].Value.ToString();
                                        worksheet.Calculate();
                                        KLLK = worksheet.Rows[RowIndexHT][Name_HT["LuyKeDenHetKyNay"]].Value.NumericValue;
                                    }
                                    dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\"='{true}',\"KhoiLuongToanBo\"='{Cell.Value}' WHERE \"Code\" = '{CodeCha}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                    dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET \"ThucHienKyNay\"='{Cell.Value}',\"LuyKeDenHetKyNay\"='{KLLK}' WHERE \"Code\" = '{CodeHT}'";
                                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                    int rowremove = 0;
                                    for (int i = Cell.RowIndex + 1; i <= ws.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex; i++)
                                    {
                                        Row crow = ws.Rows[i];
                                        if (crow[NAME_COL[TDKH.COL_TypeRow]].Value.ToString() == MyConstant.TYPEROW_CVCha || crow[NAME_COL[TDKH.COL_MaHieuCongTac]].Value.ToString() == "HTHM" || crow[NAME_COL[TDKH.COL_DanhMucCongTac]].Value.ToString() == "")
                                            break;
                                        else
                                        {
                                            dbString = $"DELETE  FROM {TDKH.TBL_ChiTietCongTacCon} WHERE \"Code\" = '{crow[NAME_COL[MyConstant.COL_KHVT_CodeCT]].Value}'";
                                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                                            rowremove++;
                                        }
                                    }
                                    if (rowremove != 0)
                                        ws.Rows.Remove(Cell.RowIndex + 1, rowremove);
                                }
                                else
                                    Cell.Value = oldValue;

                            }
                            break;
                    }
                }
                Name.EndUpdate();
            }
            else if (Name.Document.Worksheets.ActiveWorksheet.Name == MyConstant.CONST_SheetName_TTKLHT)
            {
                if (Cell.Value == oldValue)
                    return;
                if (!Dot1.Contains(Cell) || ws.Columns[Cell.ColumnIndex].Heading != NAME_COL["ThucHienKyNay"])
                    return;
                string code = ws.Rows[Cell.RowIndex][NAME_COL[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                string CodeDB = ws.Rows[Cell.RowIndex][NAME_COL["CodeDB"]].Value.TextValue;
                ws.Calculate();
                double LKKN = ws.Rows[Cell.RowIndex][NAME_COL["LuyKeDenHetKyNay"]].Value.NumericValue;
                dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET '{colInDb}' = @NewVal,\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newVal });
                dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\"='{true}' WHERE \"Code\" = '{CodeDB}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            else if (Name.Document.Worksheets.ActiveWorksheet.Name == MyConstant.CONST_SheetName_TTKLPS)
            {
                Dot1 = ws.Range["Dot_1"];
                if (Cell.Value == oldValue)
                    return;
                if (!Dot1.Contains(Cell) || (ws.Columns[Cell.ColumnIndex].Heading != NAME_COL["ThucHienKyNay"] && ws.Columns[Cell.ColumnIndex].Heading != NAME_COL["DonGiaPhatSinh"]))
                    return;
                string code = ws.Rows[Cell.RowIndex][NAME_COL[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                ws.Calculate();
                double LKKN = ws.Rows[Cell.RowIndex][NAME_COL["LuyKeDenHetKyNay"]].Value.NumericValue;
                dbString = $"UPDATE {MyConstant.TBL_hopdongAB_PS} SET '{colInDb}' = @NewVal,\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newVal });
            }
            else if (Name.Document.Worksheets.ActiveWorksheet.Name == "Tổng hợp VT A cấp")
            {
                string code = ws.Rows[Cell.RowIndex][NAME_COL[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                dbString = $"UPDATE Tbl_HopDong_TongHopACap SET {colInDb} = '{newVal}' WHERE \"Code\" = '{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            else if (Name.Document.Worksheets.ActiveWorksheet.Name == MyConstant.CONST_SheetName_TTNghiemThu)
            {
                if (ws.Columns[Cell.ColumnIndex].Heading != NAME_COL["ThucHienKyNay"] &&
                    ws.Columns[Cell.ColumnIndex].Heading != NAME_COL["SanLuong"] &&
                    ws.Columns[Cell.ColumnIndex].Heading != NAME_COL["DangDo"] &&
                    ws.Columns[Cell.ColumnIndex].Heading != NAME_COL["KyNayHopDongNghiemThu"])
                    return;
                string code = ws.Rows[Cell.RowIndex][NAME_COL[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET '{colInDb}' = @NewVal WHERE \"Code\" = '{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newVal });

                if (ws.Columns[Cell.ColumnIndex].Heading == NAME_COL["ThucHienKyNay"])
                {
                    var Search = MyFunction.SearchRangeCell(worksheet, code).FirstOrDefault();
                    string CodeDB = ws.Rows[Cell.RowIndex][NAME_COL["CodeDB"]].Value.TextValue;
                    worksheet.Rows[Search.RowIndex][Name_HT["ThucHienKyNay"]].SetValue(newVal);
                    worksheet.Calculate();
                    double LKKN = worksheet.Rows[Search.RowIndex][Name_HT["LuyKeDenHetKyNay"]].Value.NumericValue;
                    dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET '{colInDb}' = @NewVal,\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{code}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newVal });
                    dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\"='{true}' WHERE \"Code\" = '{CodeDB}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }
            else if (Name.Document.Worksheets.ActiveWorksheet.Name == "Bảng đề nghị thanh toán")
            {
                string code = ws.Rows[Cell.RowIndex][NAME_COL[MyConstant.COL_HD_CodeCT]].Value.TextValue;
                double IndexCha = ws.Rows[Cell.RowIndex][NAME_COL["IndexCha"]].Value.NumericValue;
                double LoaiCT = ws.Rows[Cell.RowIndex][NAME_COL["LoaiCT"]].Value.NumericValue;
                bool IsCoDinh = ws.Rows[Cell.RowIndex][NAME_COL["IsCoDinh"]].Value.BooleanValue;
                string TypeRow = ws.Rows[Cell.RowIndex][NAME_COL["Type_Row"]].Value.TextValue;
                string GhiChu = ws.Rows[Cell.RowIndex][NAME_COL["GhiChu"]].Value.TextValue;
                newVal = Cell.Formula == "" ? newVal : Cell.Formula;
                if (string.IsNullOrEmpty(code))
                {
                    code = Guid.NewGuid().ToString();
                    ws.Rows[Cell.RowIndex][NAME_COL["Code"]].SetValueFromText(code);
                    string Ten = ws.Rows[Cell.RowIndex][NAME_COL["TenCongTac"]].Value.TextValue;
                    string DV = ws.Rows[Cell.RowIndex][NAME_COL["DonVi"]].Value.TextValue;
                    if (IsCoDinh)
                    {
                        string LuyKeKyTruoc = ws.Rows[Cell.RowIndex][NAME_COL["LuyKeKyTruoc"]].Formula == "" ?
                            ws.Rows[Cell.RowIndex][NAME_COL["LuyKeKyTruoc"]].Value.ToString() : ws.Rows[Cell.RowIndex][NAME_COL["LuyKeKyTruoc"]].Formula;
                        string KyNay = ws.Rows[Cell.RowIndex][NAME_COL["KyNay"]].Formula == "" ?
                            ws.Rows[Cell.RowIndex][NAME_COL["KyNay"]].Value.ToString() : ws.Rows[Cell.RowIndex][NAME_COL["KyNay"]].Formula;
                        string LuyKeKyNay = ws.Rows[Cell.RowIndex][NAME_COL["LuyKeKyNay"]].Formula == "" ?
                            ws.Rows[Cell.RowIndex][NAME_COL["LuyKeKyNay"]].Value.ToString() : ws.Rows[Cell.RowIndex][NAME_COL["LuyKeKyNay"]].Formula;
                        dbString = $"INSERT INTO {MyConstant.TBL_HopDong_DeNghiThanhToan} (\"TenCongTac\",\"DonVi\",\"LuyKeKyTruoc\",\"KyNay\"," +
         $"\"LuyKeKyNay\",\"LoaiCT\",\"IndexCha\",\"IsCoDinh\",\"Type_Row\",\"Code\",\"GhiChu\",\"CodeDot\",\"IndexCT\") " +
         $"VALUES ('{Ten}','{DV}','{LuyKeKyTruoc}','{KyNay}','{LuyKeKyNay}','{LoaiCT}'," +
         $"'{IndexCha}','{IsCoDinh}','{TypeRow}','{code}','{GhiChu}','{cbo_AB_LanThanhToan.SelectedValue}','{Cell.RowIndex + 1}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                    else
                    {
                        dbString = $"INSERT INTO {MyConstant.TBL_HopDong_DeNghiThanhToan} ({colInDb}," +
$"\"LoaiCT\",\"IndexCha\",\"IsCoDinh\",\"Type_Row\",\"Code\",\"CodeDot\",\"IndexCT\") " +
$"VALUES ('{newVal}','{LoaiCT}'," +
$"'{IndexCha}','{IsCoDinh}','{TypeRow}','{code}','{cbo_AB_LanThanhToan.SelectedValue}','{Cell.RowIndex + 1}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }
                }
                else
                {
                    dbString = $"UPDATE {MyConstant.TBL_HopDong_DeNghiThanhToan} SET {colInDb} = '{newVal}' WHERE \"Code\" = '{code}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }
        }
        private void spsheet_ThanhToanA_B_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            SpreadsheetControl Name = sender as SpreadsheetControl;
            Fcn_CellvalueChanged(e.Cell, e.OldValue, Name);
        }

        private void spsheet_ThanhToanA_B_CustomDrawCell(object sender, CustomDrawCellEventArgs e)
        {
            if (e.Cell.Worksheet.Name != "Đo bóc")
                return;
            IWorkbook wb = e.Cell.Worksheet.Workbook;
            Worksheet ws = e.Cell.Worksheet;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[MyConstant.TBL_QUYETTHONGTIN]);

            if (e.Cell.ColumnIndex == 0 && wb.Range[MyConstant.TBL_QUYETTHONGTIN].Contains(e.Cell))
            {
                e.Text = "";
                int x_center = (e.Bounds.Left + e.Bounds.Right) / 2;
                int y_center = (e.Bounds.Bottom + e.Bounds.Top) / 2;
                Rectangle rec = new Rectangle(x_center - 25, y_center - 10, 50, 20);
                e.Cache.Paint.DrawCheckBox(e.Cache.Graphics, rec, (e.Cell.Value == true) ? ButtonState.Checked : ButtonState.Normal);
            }
        }

        private void spsheet_ThanhToanA_B_KeyUp(object sender, KeyEventArgs e)
        {
            SpreadsheetControl spsheet = sender as SpreadsheetControl;
            Worksheet ws = spsheet.Document.Worksheets.ActiveWorksheet;

            if (e.KeyCode == Keys.Insert)
            {
                //Worksheet ws = spsheet_TDKH_DoBocKLKeHoach.Document.Worksheets[TDKH.SheetName_DoBocChuan];
                int ind = ws.SelectedCell.TopRowIndex;
                ws.Rows.Insert(ind, ws.SelectedCell.RowCount);
            }
            else if (e.KeyCode == Keys.F8)
            {
                int ind = ws.SelectedCell.TopRowIndex;
                ws.Rows.Remove(ind, ws.SelectedCell.RowCount);
            }
            else if (e.KeyCode == Keys.F3)
            {
                if (ws.Name != "Tổng hợp VL-NC-MTC")
                    return;
                WaitFormHelper.ShowWaitForm("Đang ẩn hao phí, Vui lòng chờ");
                spsheet.BeginUpdate();
                CellRange Range = ws.Range["Dot_1"];
                Range.Search(MyConstant.TYPEROW_CVCON).Select(x => x.RowIndex).ForEach(x => ws.Rows[x].Visible = !ws.Rows[x].Visible);
                spsheet.EndUpdate();
                WaitFormHelper.CloseWaitForm();
            }
            else return;
        }
        private void spsheet_ThanhToanA_B_PopupMenuShowing(object sender, DevExpress.XtraSpreadsheet.PopupMenuShowingEventArgs e)
        {
            SharedControls.m_SpreadSheet = sender as SpreadsheetControl;
            IWorkbook wb = (sender as SpreadsheetControl).Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            Cell cell = ws.SelectedCell[0];

            if (ws.Name == TDKH.SheetName_DoBoc)
            {
                Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(wb.Range[MyConstant.TBL_QUYETTHONGTIN]);
                string col = ws.Rows[0][cell.ColumnIndex].Value.ToString();
                if (ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_LoaiCT]].Value.ToString() == MyConstant.COL_HD_TT)
                {
                    SpreadsheetMenuItem ChuyenPs = new SpreadsheetMenuItem("Chuyển sang phát sinh", fcn_Handle_Popup_ChuyenPS);
                    e.Menu.Items.Add(ChuyenPs);
                }
                if (ws.Rows[cell.RowIndex][dic[TDKH.COL_DBC_LoaiCT]].Value.ToString() == MyConstant.COL_HD_PS)
                {
                    SpreadsheetMenuItem ChuyenTT = new SpreadsheetMenuItem("Chuyển sang thông thường", fcn_Handle_Popup_ChuyenTT);
                    e.Menu.Items.Add(ChuyenTT);
                }
            }
            else if (ws.Name == MyConstant.CONST_SheetName_TTKLHT)
            {
                SpreadsheetMenuItem LayKLTCToanBo = new SpreadsheetMenuItem("Lấy khối lượng hợp đồng của toàn bộ công tác sang thực hiện kỳ này", fcn_Handle_Popup_LayToanBoKL);
                e.Menu.Items.Add(LayKLTCToanBo);
                SpreadsheetMenuItem LayKLThiCong = new SpreadsheetMenuItem("Lấy khối lượng hợp đồng công tác chọn sang thực hiện kỳ này", fcn_Handle_Popup_LayToanBoKLDaChon);
                e.Menu.Items.Add(LayKLThiCong);
                SpreadsheetMenuItem DatLaiKLKyNay = new SpreadsheetMenuItem("Đặt lại khối lượng kỳ này", fcn_Handle_Popup_DatLaiKLKN);
                e.Menu.Items.Add(DatLaiKLKyNay);
                SpreadsheetMenuItem LayLaiThiCong = new SpreadsheetMenuItem("Lấy lại khối lượng thi công công tác chọn", fcn_Handle_Popup_LayLaiKLDaChon);
                e.Menu.Items.Add(LayLaiThiCong);
                SpreadsheetMenuItem LayLaiSangDoBoc = new SpreadsheetMenuItem("Lấy khối lượng thực hiện kỳ này công tác chọn này sang đo bóc", fcn_Handle_Popup_LaySangDoBoc);
                e.Menu.Items.Add(LayLaiSangDoBoc);
            }
            else if (ws.Name == "Bảng đề nghị thanh toán")
            {
                SpreadsheetMenuItem ChuyenThuChi = new SpreadsheetMenuItem("Chuyển sang thu chi", fcn_Handle_Popup_ChuyenThuChi);
                e.Menu.Items.Add(ChuyenThuChi);
                SpreadsheetMenuItem ChenMucConMoi = new SpreadsheetMenuItem("Chèn thêm mục nhỏ vào mục chính", fcn_Handle_Popup_ChenMucNho);
                e.Menu.Items.Add(ChenMucConMoi);
                //SpreadsheetMenuItem ChenMucLon = new SpreadsheetMenuItem("Chèn thêm mục lớn", fcn_Handle_Popup_ChenMucLon);
                //e.Menu.Items.Add(ChenMucLon);
            }
            else if (ws.Name == "Tổng hợp VL-NC-MTC")
            {
                SpreadsheetMenuItem UnHide = new SpreadsheetMenuItem("Hiện chi tiết hao phí", fcn_Handle_Popup_HienHaoPhi);
                e.Menu.Items.Add(UnHide);
                SpreadsheetMenuItem Hide = new SpreadsheetMenuItem("Ẩn chi tiết hao phí", fcn_Handle_Popup_AnHaoPhi);
                e.Menu.Items.Add(Hide);
            }
            else if (ws.Name == MyConstant.CONST_SheetName_TTNghiemThu)
            {
                var LayGiaTriHD = new DXSubMenuItem("Lấy khối lượng cho Kỳ này hợp đồng từ Khối lượng được chọn ");
                SpreadsheetMenuItem KLSL = new SpreadsheetMenuItem("Sản lượng", (s, a) => { Fcn_UpdateGiaTriNghiemThu("SanLuong"); });
                SpreadsheetMenuItem KLTT = new SpreadsheetMenuItem("Khối lượng thanh toán", (s, a) => { Fcn_UpdateGiaTriNghiemThu("ThucHienKyNay"); });
                SpreadsheetMenuItem KLZero = new SpreadsheetMenuItem("Khối lượng =0", (s, a) => { Fcn_UpdateGiaTriNghiemThu(); });
                LayGiaTriHD.Items.Add(KLSL);
                LayGiaTriHD.Items.Add(KLTT);
                LayGiaTriHD.Items.Add(KLZero);
                e.Menu.Items.Add(LayGiaTriHD);
                fcn_ThanhToanNghiemThu(SharedControls.m_SpreadSheet);
            }
        }
        private void fcn_Handle_Popup_LayLaiKLDaChon(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật khối lượng hợp đồng kế hoạch");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            CellRange Cell = worksheet.Selection;
            string dbString = "";
            DataTable dtKLHN = new DataTable();
            bool CheckAB = SharedControls.m_SpreadSheet == spsheet_ThanhToanA_B ? true : false;
            double KLTC = 0;
            List<KLHN> Lst = new List<KLHN>();
            for (int i = Cell.TopRowIndex; i <= Cell.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                string CodeCongTacTheoGiaiDoan = Crow[Name["CodeCongTacTheoGiaiDoan"]].Value.ToString();
                if (MaHieu == "HTDot")
                    break;
                string CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                if (CodeDB == "")
                    continue;
                string Code = Crow[Name["Code"]].Value.ToString();
                string TenCongTac = Crow[Name[TDKH.COL_DanhMucCongTac]].Value.ToString();
                WaitFormHelper.ShowWaitForm($"Dòng {i}:{MaHieu}_{TenCongTac}");
                dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\" = '{false}' WHERE \"Code\" = '{CodeDB}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                if (MaHieu == "*" && CodeCongTacTheoGiaiDoan != "")
                    Lst = MyFunction.Fcn_CalKLKHNew(TypeKLHN.Nhom, new string[] { CodeCongTacTheoGiaiDoan }, dte_DotbeginAB.DateTime, dte_DotendAB.DateTime, ignoreKLKH: true);
                else
                    Lst = MyFunction.Fcn_CalKLKHNew(TypeKLHN.CongTac, new string[] { CodeCongTacTheoGiaiDoan }, dte_DotbeginAB.DateTime, dte_DotendAB.DateTime, ignoreKLKH: true);
                KLTC = 0;
                if (Lst.Count() != 0)
                {
                    //List<KLHN> LstCheck = Lst.Where(x => x.CodeCha == Dt_HD.Rows[0]["Code"].ToString()).ToList();
                    KLTC = (double)Lst.Sum(x => x.KhoiLuongThiCong);
                }
                Crow[Name["ThucHienKyNay"]].SetValue(KLTC);
                worksheet.Calculate();
                double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;
                dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET \"ThucHienKyNay\"='{KLTC}',\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\"='{Code}' ";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            }
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void fcn_Handle_Popup_LayLaiKLDaChonNCC(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật khối lượng hợp đồng kế hoạch");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán nhà cung cấp"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            CellRange Cell = worksheet.Selection;
            string dbString = "";
            DataTable dtKLHN = new DataTable();
            double KLTC = 0;
            double KLVC = 0;
            List<KLHN> Lst = new List<KLHN>();
            string ngaybatdau = dte_DotbeginAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string ngayketthuc = dte_DotendAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            for (int i = Cell.TopRowIndex; i <= Cell.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                string CodeCongTacTheoGiaiDoan = Crow[Name["CodeCongTacTheoGiaiDoan"]].Value.ToString();
                if (MaHieu == "" || MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                    break;
                string Code = Crow[Name["Code"]].Value.ToString();
                string TenCongTac = Crow[Name[TDKH.COL_DanhMucCongTac]].Value.ToString();
                WaitFormHelper.ShowWaitForm($"Dòng {i}:{MaHieu}_{TenCongTac}");
                if (CodeCongTacTheoGiaiDoan != "")
                    Lst = MyFunction.Fcn_CalKLKHNew(TypeKLHN.VatLieu, new string[] { CodeCongTacTheoGiaiDoan }, dte_DotbeginAB.DateTime, dte_DotendAB.DateTime, ignoreKLKH: true);
                else
                    continue;
                KLTC = KLVC = 0;
                if (Lst.Count() != 0)
                {
                    KLTC = (double)Lst.Sum(x => x.KhoiLuongThiCong);
                }
                Crow[Name["KhoiLuongHangNgay"]].SetValue(KLTC);
                double DonGia = Crow[Name["DonGiaTheoHopDong"]].Value.NumericValue;
                string DonVi = Crow[Name[TDKH.COL_DonVi]].Value.ToString();
                dbString = $"SELECT \"Code\" FROM {QLVT.TBL_QLVT_YEUCAUVT}" +
                $" WHERE \"CodeHd\" = '{cbo_MeNuTenHopDong.SelectedValue}' " +
                $"AND \"TenVatTu\"=@TenCongTac AND \"MaVatTu\"=@MaHieu " +
                $"AND \"DonVi\"=@DonVi AND \"DonGiaHienTruong\"='{DonGia}'";
                DataTable Dt_YeuCau = DataProvider.InstanceTHDA.ExecuteQuery(dbString, parameter: new object[] { TenCongTac, MaHieu, DonVi });
                if (Dt_YeuCau.Rows.Count != 0)
                {
                    string lsCodeCongTac = MyFunction.fcn_Array2listQueryCondition(Dt_YeuCau.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                    dbString = $"SELECT \"KhoiLuong\" FROM {QLVT.TBL_QLVT_YEUCAUVTKLHN} WHERE \"CodeYeuCauVatTu\" IN ({lsCodeCongTac}) AND \"Ngay\">='{ngaybatdau}' AND \"Ngay\"<='{ngayketthuc}'";
                    DataTable dt_YeuCauHN = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    foreach (DataRow row in dt_YeuCauHN.Rows)
                        KLVC += double.Parse(row[0].ToString());
                    Crow[Name["KhoiLuongVanChuyen"]].SetValueFromText(KLVC.ToString());

                }
                double KLThuCong = Crow[Name["KhoiLuongThuCong"]].Value.NumericValue;

                worksheet.Calculate();
                Crow[Name["ThucHienKyNay"]].Formula = $"{Crow[Name["TongHop"]].GetReferenceA1()}";
                double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;
                dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT} SET \"ThucHienKyNay\"='{KLTC}',\"IsEdit\" = '{false}'," +
                    $"\"LuyKeDenHetKyNay\"='{LKKN}',\"KhoiLuongVanChuyen\"='{KLVC}',\"KhoiLuongHangNgay\"='{KLTC}' WHERE \"Code\"='{Code}' ";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            }
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void fcn_Handle_Popup_LaySangDoBoc(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            DialogResult rs = MessageShower.ShowYesNoQuestion("Tất cả công tác có khối lượng đo bóc khác với khối lượng thực hiện kỳ này sẽ bị xóa diễn dãi, Bạn có muốn thực hiện không?");
            if (rs == DialogResult.No)
                return;
            WaitFormHelper.ShowWaitForm("Đang cập nhật sang đo bóc");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);

            CellRange Cell = worksheet.Selection;
            string dbString = "";
            Worksheet ws = workbook.Worksheets[TDKH.SheetName_DoBoc];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            for (int i = Cell.TopRowIndex; i <= Cell.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == "HTDot")
                    break;
                string CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                string Code = Crow[Name["Code"]].Value.ToString();
                if (CodeDB == "")
                    continue;
                //int RowIndex = MyFunction.SearchRangeCell(ws, CodeDB).FirstOrDefault().RowIndex;  
                int RowIndex = fcn_GetRowPS(ws, CodeDB, "Code");
                double KLToanBo = ws.Rows[RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue;
                double KLThucHienKyNay = Crow[Name["ThucHienKyNay"]].Value.NumericValue;
                if (KLToanBo == KLThucHienKyNay)
                    continue;

                int rowremove = 0;
                for (int j = RowIndex + 1; j <= ws.Range[MyConstant.TBL_QUYETTHONGTIN].BottomRowIndex; j++)
                {
                    Row crow = ws.Rows[j];
                    if (crow[dic[TDKH.COL_TypeRow]].Value.ToString() == MyConstant.TYPEROW_CVCha || crow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString() == "HTHM" || crow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString() == "")
                        break;
                    else
                    {
                        dbString = $"DELETE  FROM {TDKH.TBL_ChiTietCongTacCon} WHERE \"Code\" = '{crow[dic[MyConstant.COL_KHVT_CodeCT]].Value}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        rowremove++;
                    }
                }
                if (rowremove != 0)
                    ws.Rows.Remove(RowIndex + 1, rowremove);
                dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"KhoiLuongToanBo\" = '{KLThucHienKyNay}' WHERE \"Code\" = '{CodeDB}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                ws.Rows[RowIndex][dic[TDKH.COL_DBC_KhoiLuongToanBo]].SetValue(KLThucHienKyNay);

            }
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void fcn_Handle_Popup_DatLaiKLKN(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật lại  khối lượng kỳ này");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            CellRange Cell = worksheet.Selection;
            string dbString = "";
            for (int i = Cell.TopRowIndex; i <= Cell.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                string MaHieu = Crow[Name["MaHieuCongTac"]].Value.ToString();
                if (MaHieu == "HTDot")
                    break;
                string CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                string Code = Crow[Name["Code"]].Value.ToString();
                if (CodeDB == "")
                    continue;
                Crow[Name["ThucHienKyNay"]].SetValue(0);
                double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;
                worksheet.Calculate();
                dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET \"ThucHienKyNay\" = '{0}',\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{Code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\" = '{false}' WHERE \"Code\" = '{CodeDB}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            }
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void fcn_Handle_Popup_DatLaiKLKNncc(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật lại  khối lượng kỳ này");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán nhà cung cấp"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            CellRange Cell = worksheet.Selection;
            string dbString = "";
            for (int i = Cell.TopRowIndex; i <= Cell.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                string MaHieu = Crow[Name["MaHieuCongTac"]].Value.ToString();
                if (MaHieu == "" || MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                    break;
                string Code = Crow[Name["Code"]].Value.ToString();
                Crow[Name["ThucHienKyNay"]].SetValue(0);
                double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;
                worksheet.Calculate();
                dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT} SET \"IsEdit\" = '{false}',\"ThucHienKyNay\" = '{0}',\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{Code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void fcn_Handle_Popup_LayToanBoKLDaChon(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật lại  khối lượng kỳ này");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            CellRange Cell = worksheet.Selection;
            string dbString = "";
            for (int i = Cell.TopRowIndex; i <= Cell.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                string MaHieu = Crow[Name["MaHieuCongTac"]].Value.ToString();
                if (MaHieu == "HTDot")
                    break;
                string CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                string Code = Crow[Name["Code"]].Value.ToString();
                if (CodeDB == "")
                    continue;
                Crow[Name["ThucHienKyNay"]].Formula = $"={Crow[Name["TheoHopDong"]].GetReferenceA1()}";
                worksheet.Calculate();
                double KLHD = Crow[Name["TheoHopDong"]].Value.NumericValue;
                double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;

                dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET \"ThucHienKyNay\" = '{KLHD}',\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{Code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\" = '{true}' WHERE \"Code\" = '{CodeDB}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            }
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void fcn_Handle_Popup_LayToanBoKLDaChonNCC(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật lại  khối lượng kỳ này");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán nhà cung cấp"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            CellRange Cell = worksheet.Selection;
            string dbString = "", MaHieu = "", Code = "";
            for (int i = Cell.TopRowIndex; i <= Cell.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                MaHieu = Crow[Name["MaHieuCongTac"]].Value.ToString();
                if (MaHieu == "" || MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                    break;
                Code = Crow[Name["Code"]].Value.ToString();
                Crow[Name["ThucHienKyNay"]].Formula = $"={Crow[Name["TheoHopDong"]].GetReferenceA1()}";
                worksheet.Calculate();
                double KLHD = Crow[Name["TheoHopDong"]].Value.NumericValue;
                double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;

                dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT} SET \"IsEdit\" = '{true}',\"ThucHienKyNay\" = '{KLHD}'," +
                    $"\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{Code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            }
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void fcn_Handle_Popup_LayToanBoKL(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật khối lượng hợp đồng kế hoạch");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            string dbString = "", MaHieu = "", CodeDB = "", Code = "";
            for (int i = Dot1.TopRowIndex; i <= Dot1.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                MaHieu = Crow[Name["MaHieuCongTac"]].Value.ToString();
                if (MaHieu == "HTDot")
                    break;
                CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                if (CodeDB == "")
                    continue;
                Code = Crow[Name["Code"]].Value.ToString();
                Crow[Name["ThucHienKyNay"]].Formula = $"={Crow[Name["TheoHopDong"]].GetReferenceA1()}";
                worksheet.Calculate();
                double KLHD = Crow[Name["TheoHopDong"]].Value.NumericValue;
                double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;

                dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET \"ThucHienKyNay\" = '{KLHD}',\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{Code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\" = '{true}' WHERE \"Code\" = '{CodeDB}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            }
            SharedControls.m_SpreadSheet.EndUpdate();


            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");



        }
        private void fcn_Handle_Popup_LayToanBoKLNCC(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật khối lượng hợp đồng kế hoạch");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán nhà cung cấp"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            string dbString = "", MaHieu = "", CodeDB = "", Code = "";
            for (int i = Dot1.TopRowIndex; i <= Dot1.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                MaHieu = Crow[Name["MaHieuCongTac"]].Value.ToString();
                if (MaHieu == "" || MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                    break;
                Code = Crow[Name["Code"]].Value.ToString();
                Crow[Name["ThucHienKyNay"]].Formula = $"={Crow[Name["TheoHopDong"]].GetReferenceA1()}";
                worksheet.Calculate();
                double KLHD = Crow[Name["TheoHopDong"]].Value.NumericValue;
                double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;

                dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT} SET \"IsEdit\" = '{true}',\"ThucHienKyNay\" = '{KLHD}'," +
                    $"\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\" = '{Code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            }
            SharedControls.m_SpreadSheet.EndUpdate();


            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");



        }
        private void fcn_Handle_Popup_AnHaoPhi(object sender, EventArgs eventArgs)
        {
            WaitFormHelper.ShowWaitForm("Đang ẩn hao phí, Vui lòng chờ");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Tổng hợp VL-NC-MTC"];
            CellRange Range = worksheet.Range["Dot_1"];
            Range.Search(MyConstant.TYPEROW_CVCON).Select(x => x.RowIndex).ForEach(x => worksheet.Rows[x].Visible = false);
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_Handle_Popup_HienHaoPhi(object sender, EventArgs eventArgs)
        {
            WaitFormHelper.ShowWaitForm("Đang hiện hao phí, Vui lòng chờ");
            SharedControls.m_SpreadSheet.BeginUpdate();
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Tổng hợp VL-NC-MTC"];
            CellRange Range = worksheet.Range["Dot_1"];
            Range.Search(MyConstant.TYPEROW_CVCON).Select(x => x.RowIndex).ForEach(x => worksheet.Rows[x].Visible = true);
            //Range.Select(x => x.RowIndex).ForEach(x => worksheet.Rows[x].Visible=true);
            SharedControls.m_SpreadSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void fcn_Handle_Popup_ChenMucLon(object sender, EventArgs eventArgs)
        {
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet ws = workbook.Worksheets["Bảng đề nghị thanh toán"];
            CellRange RangeData = ws.Range["RangeData"];
            CellRange Select = ws.SelectedCell;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            ws.Rows[RangeData.BottomRowIndex][Name["Type_Row"]].Formula = $"= ARABIC({ ws.Rows[RangeData.BottomRowIndex][Name["Stt"]].Value.TextValue})";
            double STT = ws.Rows[RangeData.BottomRowIndex][Name["Type_Row"]].Value.NumericValue;
            ws.Rows.Insert(RangeData.BottomRowIndex - 1, 1, RowFormatMode.FormatAsPrevious);
            ws.Rows[RangeData.BottomRowIndex - 2].CopyFrom(ws.Rows[RangeData.BottomRowIndex - 1], PasteSpecial.All);
            ws.Rows[RangeData.BottomRowIndex - 1].Visible = true;
            ws.Rows[RangeData.BottomRowIndex][Name["IsCoDinh"]].SetValue(false);
            ws.Rows[RangeData.BottomRowIndex][Name["Stt"]].Formula = $"ROMAN({STT})";
            RangeData = ws.Range["RangeData"];
            ws.Rows[RangeData.BottomRowIndex][Name["Stt"]].Formula = $"ROMAN({STT + 1})";
            ws.Rows[RangeData.BottomRowIndex][Name["Type_Row"]].SetValueFromText("Type_Cha");

        }
        private void fcn_Handle_Popup_ChenMucNho(object sender, EventArgs eventArgs)
        {
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet ws = workbook.Worksheets["Bảng đề nghị thanh toán"];
            CellRange RangeData = ws.Range["RangeData"];
            CellRange Select = ws.SelectedCell;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            for (int i = Select.TopRowIndex; i <= RangeData.BottomRowIndex; i++)
            {
                Row Crow = ws.Rows[i];
                double STT = Crow[Name[MyConstant.STT]].Value.NumericValue;
                if (STT == 0)
                {
                    STT = ws.Rows[i - 1]["A"].Value.NumericValue + 1;
                    ws.Rows.Insert(i, 1, RowFormatMode.FormatAsPrevious);
                    Crow.CopyFrom(ws.Rows[i + 1], PasteSpecial.All);
                    Crow.Visible = true;
                    Crow[Name["IsCoDinh"]].SetValue(false);
                    Crow[Name["Stt"]].SetValue(STT);
                    return;
                }
            }

        }
        private void fcn_Handle_Popup_ChuyenThuChi(object sender, EventArgs eventArgs)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            DialogResult rs = MessageShower.ShowYesNoQuestion("Trước khi chuyển sang thu, Vui lòng kiểm tra lại số liệu, Bạn có muốn tiếp tục không?");
            if (rs == DialogResult.No)
                return;
            WaitFormHelper.ShowWaitForm("Đang cập nhật khối lượng hợp đồng kế hoạch");
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            IWorkbook workbook = SharedControls.m_SpreadSheet.Document;
            Worksheet worksheet = workbook.Worksheets["Bảng đề nghị thanh toán"];
            CellRange Range = worksheet.Range["GiaTriDotNay"];
            long GiaTriKyNay = (long)Math.Round(Range.Value.NumericValue);
            string dbString = $"UPDATE {MyConstant.TBL_HopDong_DotHopDong} SET \"GiaTriKyNay\" = '{GiaTriKyNay}'WHERE \"Code\" = '{cbo_AB_LanThanhToan.SelectedValue}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            int Thu = SharedControls.m_SpreadSheet == spsheet_ThanhToanA_B ? 2 : 1;
            string Code = Guid.NewGuid().ToString();
            dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} (\"TrangThai\",\"ToChucCaNhanNhanChiPhiTamUng\",\"NguonThuChi\",\"GiaTriDotNay\"," +
                $"\"IsEdit\",\"Code\",\"NoiDungUng\",\"CodeDuAn\",\"CodeHd\") " +
                $"VALUES ('{1}','{DVTH.Code}','{Thu}','{GiaTriKyNay}','{true}','{Code}',@NoiDungUng," +
                $"'{slke_ThongTinDuAn.EditValue}','{cbo_MeNuTenHopDong.SelectedValue}')";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { cbo_MeNuTenHopDong.Text });
            BindingList<DeXuat> DeXuatVL = new BindingList<DeXuat>();
            DeXuatVL.Add(new DeXuat
            {
                Code = Code,
                GiaTriDotNay = GiaTriKyNay,
                NoiDungUng = cbo_MeNuTenHopDong.Text,
                NguonThuChi = Thu,
                CodeHd = cbo_MeNuTenHopDong.SelectedValue.ToString(),
                TrangThai = 1,
                ToChucCaNhanNhanChiPhiTamUng = DVTH.Code
            });
            dbString = $"SELECT {MyConstant.TBL_hopdongAB_HT}.*,{MyConstant.TBL_HopDong_PhuLuc}.Code as CodePL," +
               $"{MyConstant.TBL_HopDong_PhuLuc}.DonGia,{MyConstant.TBL_HopDong_PhuLuc}.KhoiLuong FROM {MyConstant.TBL_hopdongAB_HT} " +
   $"INNER JOIN {MyConstant.TBL_HopDong_DotHopDong} " +
   $"ON {MyConstant.TBL_HopDong_DotHopDong}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDot " +
                   $"INNER JOIN {MyConstant.TBL_HopDong_DoBoc} " +
                   $"ON {MyConstant.TBL_HopDong_DoBoc}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDB " +
                   $"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
                   $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                   $" WHERE {MyConstant.TBL_HopDong_DoBoc}.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}'";
            DataTable Dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            foreach (DataRow rowct in Dt_HD.Rows)
            {
                double TT = rowct["ThucHienKyNay"] != DBNull.Value && rowct["DonGia"] != DBNull.Value ? Math.Round(double.Parse(rowct["ThucHienKyNay"].ToString()) * double.Parse(rowct["DonGia"].ToString())) : 0;

                string code = Guid.NewGuid().ToString();
                dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD} (\"NgayBD\",\"NgayKT\",\"Code\",\"CodeCha\",\"ThanhTien\",\"KhoiLuong\",\"CodePl\")" +
                    $" VALUES ('{dte_DotbeginAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{dte_DotendAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'," +
                    $"'{code}','{Code}','{TT}','{ rowct["ThucHienKyNay"]}','{rowct["CodePL"]}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            Fcn_AddData(DeXuatVL);
            form_ThuChiTamUng_DeXuat.Fcn_AddData(DeXuatVL);
            xtraTabControl_TabMain.SelectedTabPage = xtraTabPage_ThuChi_TamUng;
            xrTab_ThuChiTamUng.SelectedTabPage = xtraTab_ThuChi_DeXuat;
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void btn_NutXuatHoSoThanhToan_Click(object sender, EventArgs e)
        {

        }
        private void rg_ThucHienDuAn_SelectedIndexChanged(object sender, EventArgs e)
        {
            fcn_LoadThucHienDuAn();
        }

        private void slke_ThongTinDuAn_DataSourceChanged(object sender, EventArgs e)
        {
            //fcn_CapNhatDauViec();
        }

        private void rg_BaoCaoHangNgay_SelectedIndexChanged(object sender, EventArgs e)
        {
            fcn_LoadBaoCaoCVHangNgay();
        }

        private void btn_GV_KH_XoaMauNoiDung_Click(object sender, EventArgs e)
        {

        }

        private void btn_GV_KH_LuuNoiDung_Click(object sender, EventArgs e)
        {

        }

        private void ce_LayCongTacTuDong_CheckedChanged(object sender, EventArgs e)
        {
            if (ce_LayCongTacTuDong.Checked)
            {
                DialogResult res = MessageShower.ShowOkCancelInformation($"Các công tác có ngày bắt đầu trong {(int)nud_SoNgayTuDongLayCongTac.Value} ngày tới sẽ được cập nhật tự động sang phần GIAO VIỆC?", "");
                if (res == DialogResult.Cancel)
                {
                    ce_LayCongTacTuDong.Checked = false;
                    return;
                }
                fcn_LayCongTacTuDong();
            }


            string dbString = $"UPDATE {MyConstant.TBL_THONGTINDUAN} SET \"IsLayCongTacTuDong\" = '{ce_LayCongTacTuDong.Checked}' WHERE \"Code\" = '{slke_ThongTinDuAn.EditValue}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

        }


        private void fcn_LayCongTacTuDong()
        {
            AlertShower.ShowInfo("Đang lấy công tác tự động từ Tiến độ kế hoạch");
            //string colCodeDonViThucHien = "Code" + MyFunction.fcn_RemoveAccents(cbb_DoiTuong.Text).Replace(" ", "");
            string minDate = DateTime.Now.Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
            string maxDate = DateTime.Now.AddDays((double)nud_SoNgayTuDongLayCongTac.Value + 1).Date.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

            string dbString = $"SELECT {TDKH.TBL_ChiTietCongTacTheoKy}.*, {TDKH.TBL_ChiTietCongTacTheoKy}.KhoiLuongHopDongChiTiet AS KhoiLuongHopDong,{TDKH.TBL_DanhMucCongTac}.TenCongTac, " +
                        $"{TDKH.TBL_DanhMucCongTac}.CodeHangMuc, " +
                        $"{TDKH.TBL_DanhMucCongTac}.KhoiLuongHopDongToanDuAn, " +
                        $"{TDKH.TBL_DanhMucCongTac}.DonVi, " +
                        $"{TDKH.TBL_DanhMucCongTac}.MaHieuCongTac," +
                        $"{GiaoViec.TBL_CONGVIECCHA}.CodeCongViecCha " +
                        //$"{GiaoViec.TBL_CONGVIECCHA}.CodeNhaThauPhu," +
                        //$"{GiaoViec.TBL_CONGVIECCHA}.CodeToDoi " +
                        $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                        $"JOIN {TDKH.TBL_DanhMucCongTac} " +
                        $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac = {TDKH.TBL_DanhMucCongTac}.Code " +
                        $"LEFT JOIN {GiaoViec.TBL_CONGVIECCHA} ON {TDKH.TBL_ChiTietCongTacTheoKy}.Code = {GiaoViec.TBL_CONGVIECCHA}.CodeCongTacTheoGiaiDoan " +
                        $"WHERE \"CodeGiaiDoan\" = '{SharedControls.cbb_DBKH_ChonDot.SelectedValue}' " +
                        $"AND " +
                        $"({TDKH.TBL_ChiTietCongTacTheoKy}.NgayKetThuc >= '{minDate}' AND {TDKH.TBL_ChiTietCongTacTheoKy}.NgayBatDau <= '{maxDate}') " +
                        $"AND {GiaoViec.TBL_CONGVIECCHA}.CodeCongViecCha IS NULL " +
                        $"AND {TDKH.TBL_ChiTietCongTacTheoKy}.CodeNhaThau IS NULL";


            var dt = DataProvider.InstanceTHDA.ExecuteQueryModel<LayCongTac>(dbString);

            btn_NhanDataTuDialogForm(dt.ToArray(), MyConstant.CONST_TYPE_LAYDAUVIEC_KeHoachTDsangGiaoViec);

        }

        private void gv_DanhSachDACT_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            if (!e.IsGetData)
                return;
            DanhSachDACTDto dr = (e.Row as DanhSachDACTDto);
            string code = dr.Code;
            if (e.IsGetData && e.Column == col_DanhSachDACT_Chart && dicBieuDoKL.ContainsKey(code))
            {
                e.Value = dicBieuDoKL[code];
            }
            else if (e.IsGetData && e.Column == Col_BieuDoTaiChinh && dicBieuDoTaiChinh.ContainsKey(code))
            {
                e.Value = dicBieuDoTaiChinh[code];
            }
        }

        private void gc_Tiendo_TaskDependencyModified(object sender, TaskDependencyModificationEventArgs e)
        {
            if (e.PredecessorNode == null)
                return;
            string IdPre = e.PredecessorNode.GetValue("UID").ToString();
            string IdSuc = e.SuccessorNode == null ? e.OriginalSuccessorNode.GetValue("UID").ToString() : e.SuccessorNode.GetValue("UID").ToString();
            string str2Remove = "";
            string UID = e.PredecessorNode.GetValue("UID").ToString();
            if (UID.Contains("_"))
            {
                str2Remove = UID.Substring(UID.LastIndexOf("_"));
            }
            //if (UID.Contains("_KeHoach"))
            //{
            //    str2Remove = "_KeHoach";
            //}
            //else if(UID.Contains("_CodeNhom"))
            //    str2Remove = "_CodeNhom";
            //else if (UID.Contains("_CodeTuyen"))
            //    str2Remove = "_CodeTuyen";
            string CodeIpre = str2Remove == "" ? IdPre : IdPre.Replace(str2Remove, "");
            string CodeISuc = str2Remove == "" ? IdSuc : IdSuc.Replace(str2Remove, "");
            string LoaiCT = str2Remove == "_HM" ? "Hạng mục" : str2Remove == "_CTR" ? "Công trình" : str2Remove == "_KeHoach" ? "Kế Hoạch" : str2Remove == "_CodeNhom" ? "Nhóm" : "Tuyến";
            string Predecessorcode = $"Predecessorcode{str2Remove}";
            string Successorcode = $"Successorcode{str2Remove}";
            string dbString = $"SELECT * FROM {TDKH.Tbl_Dependency} WHERE {Predecessorcode} = '{CodeIpre}' AND {Successorcode} = '{CodeISuc}' AND \"LoaiCongTac\"='{LoaiCT}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            if (e.SuccessorNode == null)
            {
                dbString = $"DELETE FROM {TDKH.Tbl_Dependency}  WHERE {Predecessorcode}  = '{CodeIpre}' AND {Successorcode} = '{CodeISuc}' AND \"LoaiCongTac\"='Kế Hoạch'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                if (ce_HienLienKet.Checked)
                {
                    gc_Tiendo.CellValueChanged -= gc_Tiendo_CellValueChanged;
                    e.OriginalSuccessorNode.SetValue("NhapLienKet", string.Empty);
                    gc_Tiendo.CellValueChanged += gc_Tiendo_CellValueChanged;
                }
                return;
            }
            if (dt.Rows.Count != 0)
            {
                dbString = $"UPDATE {TDKH.Tbl_Dependency} SET \"Dependencytype\" = '{(double)e.Type}' WHERE {Predecessorcode} = '{CodeIpre}' AND {Successorcode} = '{CodeISuc}' AND \"LoaiCongTac\"='Kế Hoạch'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            else
            {
                dbString = $"INSERT INTO {TDKH.Tbl_Dependency} (\"Code\", {Predecessorcode}, {Successorcode}, \"LoaiCongTac\", \"Dependencytype\") VALUES " +
               $"('{Guid.NewGuid()}', '{CodeIpre}', '{CodeISuc}', '{LoaiCT}', '{((double)e.Type)}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
        }

        private void spsheet_TD_KH_LapKeHoach_RowsRemoved(object sender, RowsChangedEventArgs e)
        {
            //fcn_KHGV_loadLaiCongTacChaCon();
        }

        private void spsheet_TD_KH_LapKeHoach_RowsRemoving(object sender, RowsChangingEventArgs e)
        {
            //e.Cancel = true;
            //fcn_LoadLaiCongThucDoBoc(spsheet_TD_KH_LapKeHoach.Document.Worksheets[e.SheetName].Rows[e.StartIndex]);
        }

        private void btn_TDKH_DoBocChiTietLamKeHoach_Click(object sender, EventArgs e)
        {

        }

        private void ce_HienCongTacChuaThucHien_CheckedChanged(object sender, EventArgs e)
        {
            ce_HienCongTacChuaThucHien_CheckedChanged();
        }

        private void ce_HienCongTacChuaThucHien_CheckedChanged()
        {
            spsheet_TD_KH_LapKeHoach.BeginUpdate();

            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            foreach (Worksheet ws in wb.Worksheets)
            {
                int type = Array.IndexOf(TDKH.sheetsName, ws.Name);
                if (type < 0)
                {
                    continue;
                }
                //string rangeDateName = TDKH.rangesNgayName[type];
                CellRange range = wb.Range[TDKH.rangesNameData[type]];
                Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

                if (dic is null || !dic.ContainsKey(TDKH.COL_NgayBatDau) || !dic.ContainsKey(TDKH.COL_NgayKetThuc))
                    continue;
                for (int i = range.TopRowIndex + 1; i < range.BottomRowIndex; i++)
                {
                    Row crRow = ws.Rows[i];
                    string typerow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();

                    try
                    {
                        string ngayBD = crRow[dic[TDKH.COL_NgayBatDau]].Value.ToString();
                        string ngayKT = crRow[dic[TDKH.COL_NgayKetThuc]].Value.ToString();

                        DateTime.TryParse(ngayBD, out DateTime dateBD);
                        DateTime.TryParse(ngayKT, out DateTime dateKT);

                        if (dateBD > DateTime.Now.Date || dateKT < DateTime.Now.Date)
                        {
                            //crRow.Visible = ce_HienCongTacChuaThucHien.Checked;
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            spsheet_TD_KH_LapKeHoach.EndUpdate();
        }

        private void xtraTab_BieuDoTienDo_TabIndexChanged(object sender, EventArgs e)
        {
            //xtraTab_BieuDoTienDo.sele
        }

        private void xtraTab_BieuDoTienDo_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;
                return;
            }

        }
        private void Fcn_UpdateQLVT_TDKH(List<TCTU_TDKH> ThuChiTDKH, DonViThucHien DVTH)
        {
            //tL_YeuCauVatTu.DeleteSelectedNodes();
            List<VatLieu> VL = tL_YeuCauVatTu.DataSource as List<VatLieu>;
            List<NhapVatLieu> NVL = tL_NhapKho.DataSource as List<NhapVatLieu>;
            string dbString = "";
            foreach (TCTU_TDKH item in ThuChiTDKH)
            {
                if (item.IsVatLieu)
                {
                    if (VL == null)
                        goto Label;
                    else
                    {
                        VatLieu Update = VL.FindAll(x => x.CodeKHVT == item.ID).SingleOrDefault();
                        if (Update == null)
                            goto Label;
                        else
                        {
                            Update.YeuCauDotNay = item.KhoiLuongKeHoach;
                            Update.LuyKeYeuCau = Update.LuyKeYeuCau + item.KhoiLuongKeHoach;
                            dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET  \"YeuCauDotNay\"='{Update.YeuCauDotNay}' WHERE \"Code\"='{Update.ID}'";
                            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                            continue;
                        }

                    }
                    Label:
                    dbString = $"SELECT * FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeKHVT\"='{item.ID}'";
                    DataTable DTyeucau = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    DTyeucau.Columns["Code"].ColumnName = "ID";
                    VatLieu VatLieuAdd = DuAnHelper.ConvertToList<VatLieu>(DTyeucau).SingleOrDefault();
                    VatLieuAdd.YeuCauDotNay = item.KhoiLuongKeHoach;
                    VatLieuAdd.ParentID = VatLieuAdd.CodeHangMuc;
                    VatLieuAdd.LuyKeYeuCau = VatLieuAdd.LuyKeYeuCau + item.KhoiLuongKeHoach;
                    dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET  \"YeuCauDotNay\"='{item.KhoiLuongKeHoach}',\"IsDone\"='{false}' WHERE \"Code\"='{VatLieuAdd.ID}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    VL.Add(VatLieuAdd);

                }
                else
                {
                    string codedexuat = Guid.NewGuid().ToString();
                    dbString = $"INSERT INTO '{QLVT.TBL_QLVT_YEUCAUVT}' (\"DonViThucHien\",\"DonGiaHienTruong\",\"TrangThai\",\"Code\",\"TenVatTu\",\"MaVatTu\",\"DonVi\",\"CodeGiaiDoan\",\"CodeHangMuc\",\"CodeKHVT\",\"HopDongKl\",\"YeuCauDotNay\")" +
    $" VALUES ('{DVTH.Code}','{item.DonGia}','{1}','{codedexuat}', @TenCongViec, @MaHieu, @DonVi,'{cbb_DBKH_ChonDot.SelectedValue}','{item.ParentID}','{item.ID}','{item.KhoiLuongHopDong}','{item.KhoiLuongKeHoach}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item.TenCongViec, item.MaHieu, item.DonVi });
                    string codeNhapVT = Guid.NewGuid().ToString();
                    dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVT} (\"DonGia\",\"TrangThai\",\"CodeDeXuat\",\"Code\",\"CodeGiaiDoan\",\"TenKhoNhap\") VALUES ('{item.DonGia}','{1}','{codedexuat}','{codeNhapVT}','{cbb_DBKH_ChonDot.SelectedValue}','{item.ParentID}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    VL.Add(new VatLieu()
                    {
                        ParentID = item.ParentID,
                        DonViThucHien = DVTH.Code,
                        ID = codedexuat,
                        TrangThai = 1,
                        MaVatTu = item.MaHieu,
                        TenVatTu = item.TenCongViec,
                        DonVi = item.DonVi,
                        HopDongKl = item.KhoiLuongHopDong,
                        YeuCauDotNay = item.KhoiLuongKeHoach,
                        LuyKeYeuCau = item.KhoiLuongKeHoach,
                        DonGiaHienTruong = item.DonGia,
                        FileDinhKem = "Xem File",
                        //CodeHd = "",
                        CodeKHVT = item.ID
                        //CodeTDKH = ""
                    });
                    NVL.Add(new NhapVatLieu()
                    {
                        ParentID = item.ParentID,
                        TenKhoNhap = item.ParentID,
                        DonViThucHien = DVTH.Code,
                        ID = codeNhapVT,
                        CodeDeXuat = codedexuat,
                        MaVatTu = item.MaHieu,
                        TenVatTu = item.TenCongViec,
                        DonVi = item.DonVi,
                        TrangThai = 1,
                        //CodeHd = null,
                        //CodeTDKH = null,
                        CodeKHVT = item.ID,
                        DonGia = item.DonGia,
                        FileDinhKem = "Xem File"
                    });

                }

            }

            tL_YeuCauVatTu.RefreshDataSource();
            tL_YeuCauVatTu.Refresh();
            tL_YeuCauVatTu.ExpandAll();
            //tL_YeuCauVatTu.DataSource = VL;
            tL_YeuCauVatTu.FocusedNode = tL_YeuCauVatTu.MoveLastVisible();

            tL_NhapKho.RefreshDataSource();
            tL_NhapKho.Refresh();
            tL_NhapKho.ExpandAll();
            //tL_NhapKho.DataSource = NVL;
            tL_NhapKho.FocusedNode = tL_NhapKho.MoveLastVisible();
        }
        private void btn_KH_LayTuExcel_Click(object sender, EventArgs e)
        {

        }
        private void fcn_UpdateQLVT_KHVT(DataTable dt)
        {
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt, QLVT.TBL_QLVT_KHVT);
            fcn_QLVT_KHVT();
        }
        private void fcn_QLVT_KHVT()
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu phần Quản lý vật tư", "Vui Lòng chờ!");
            Worksheet ws = spsheet_KeHachVatTu.Document.Worksheets[0];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[QLVT.TBL_QLVT_KHVT]);
            string dbString = $"SELECT \"Code\", \"Ten\" FROM {QLVT.TBL_QLVT_KHVT_CongTrinh} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dtCT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string lsCodeCT = MyFunction.fcn_Array2listQueryCondition(dtCT.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());

            dbString = $"SELECT \"Code\", \"Ten\", \"CodeCongTrinh\" FROM {QLVT.TBL_QLVT_KHVT_HangMuc} WHERE \"CodeCongTrinh\" IN ({lsCodeCT})";
            DataTable dtHM = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lsCodeHM = MyFunction.fcn_Array2listQueryCondition(dtHM.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
            dbString = $"SELECT * FROM {QLVT.TBL_QLVT_KHVT} WHERE \"CodeHangMuc\" IN ({lsCodeHM})";
            DataTable dt_VT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            spsheet_KeHachVatTu.BeginUpdate();
            ws.Range[QLVT.TBL_QLVT_KHVT].ClearContents();
            ws.Range[QLVT.TBL_QLVT_KHVT].Font.Color = Color.Black;
            if (ws.Range[QLVT.TBL_QLVT_KHVT].RowCount < dtCT.Rows.Count * 2 + dtHM.Rows.Count * 2 + dt_VT.Rows.Count)
                ws.Rows.Insert(ws.Range[QLVT.TBL_QLVT_KHVT].BottomRowIndex - 1,
                dtCT.Rows.Count * 2 + dtHM.Rows.Count * 2 + dt_VT.Rows.Count, RowFormatMode.FormatAsPrevious);
            int crRowInd = ws.Range[QLVT.TBL_QLVT_KHVT].TopRowIndex;
            Row copy = ws.Rows[2];
            int RowHM = 0, STT = 1;
            foreach (DataRow CT in dtCT.Rows)
            {
                string crCodeCT = CT["Code"].ToString();
                //ws.rows.insert(crRowInd, 1);
                Row crRowWs = ws.Rows[crRowInd++];

                crRowWs.Font.Bold = true;
                crRowWs.Font.Color = Color.DarkTurquoise;
                crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeCT);
                crRowWs[Name["MaVatTu"]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs[Name["TenVatTu"]].SetValue(CT["Ten"].ToString());
                foreach (var HM in dtHM.Select($"[CodeCongTrinh] = '{crCodeCT}'"))
                {
                    string crCodeHM = HM["Code"].ToString();
                    crRowWs = ws.Rows[crRowInd++];
                    crRowWs.Font.Bold = true;
                    crRowWs.Font.Color = Color.DarkGreen;
                    crRowWs[Name[TDKH.COL_Code]].SetValue(crCodeHM);
                    crRowWs[Name[MyConstant.COL_KHVT_RowCha]].SetValue(crRowInd - 1);
                    crRowWs[Name["MaVatTu"]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs[Name["TenVatTu"]].SetValue(HM["Ten"].ToString().ToUpper());
                    DataRow[] dtvl = dt_VT.AsEnumerable().Where(x => x["CodeHangMuc"].ToString() == crCodeHM).ToArray();
                    RowHM = crRowInd;
                    foreach (var row in dtvl)
                    {
                        crRowWs = ws.Rows[crRowInd++];
                        crRowWs.CopyFrom(copy, PasteSpecial.All);
                        crRowWs.Visible = true;
                        crRowWs.Font.Color = Color.Black;
                        if (row["MaVatLieu"].ToString() == "TT")
                            crRowWs.Font.Color = MyConstant.color_DinhMucTamTinh;
                        crRowWs[Name["TenVatTu"]].SetValueFromText(row["VatTu"].ToString());
                        crRowWs[Name["MaVatTu"]].SetValueFromText(row["MaVatLieu"].ToString());
                        crRowWs[Name[MyConstant.COL_KHVT_RowCha]].SetValue(RowHM);
                        crRowWs[Name[MyConstant.COL_KHVT_STT]].SetValue(STT++);
                        foreach (DataColumn colum in dt_VT.Columns)
                        {
                            if (Name.ContainsKey(colum.ColumnName))
                            {
                                if (colum.ColumnName == "ThoiGianTu" || colum.ColumnName == "ThoiGianDen")
                                {
                                    if (row[colum.ColumnName] == DBNull.Value)
                                        continue;
                                    crRowWs[Name[colum.ColumnName]].SetValueFromText(DateTime.Parse(row[colum.ColumnName].ToString()).ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET));
                                }
                                else
                                    crRowWs[Name[colum.ColumnName]].SetValueFromText(row[colum.ColumnName].ToString());
                            }
                        }
                    }
                    crRowInd++;
                }
                crRowInd++;
            }
            spsheet_KeHachVatTu.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void Fcn_UpdateQLVT_KHVT(List<KeHoachVatTu> KHVT)
        {
            List<VatLieu> VL = tL_YeuCauVatTu.DataSource as List<VatLieu>;
            List<NhapVatLieu> NVL = tL_NhapKho.DataSource as List<NhapVatLieu>;
            foreach (KeHoachVatTu item in KHVT)
            {
                string codedexuat = Guid.NewGuid().ToString();
                string dbString = $"INSERT INTO '{QLVT.TBL_QLVT_YEUCAUVT}' (\"DonGiaHienTruong\",\"TrangThai\",\"Code\",\"TenVatTu\",\"MaVatTu\",\"DonVi\",\"CodeGiaiDoan\",\"CodeHangMuc\",\"CodeTDKH\",\"HopDongKl\")" +
                    $" VALUES ('{item.DonGia}','{1}','{codedexuat}',@VatTu, @MaVatLieu, @DonVi,'{cbb_DBKH_ChonDot.SelectedValue}','{item.CodeHangMuc}','{item.Code}','{item.KhoiLuong}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item.VatTu, item.MaVatLieu, item.DonVi });
                string codeNhapVT = Guid.NewGuid().ToString();
                dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVT} (\"DonGia\",\"TrangThai\",\"CodeDeXuat\",\"Code\",\"CodeGiaiDoan\",\"TenKhoNhap\") VALUES ('{item.DonGia}','{1}','{codedexuat}','{codeNhapVT}','{cbb_DBKH_ChonDot.SelectedValue}','{item.CodeHangMuc}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                VL.Add(new VatLieu()
                {
                    ParentID = item.CodeHangMuc,
                    ID = codedexuat,
                    TrangThai = 1,
                    MaVatTu = item.MaVatLieu,
                    TenVatTu = item.VatTu,
                    DonVi = item.DonVi,
                    HopDongKl = item.KhoiLuong,
                    DonGiaHienTruong = item.DonGia,
                    //CodeHd = "",
                    CodeTDKH = item.Code,
                    FileDinhKem = "Xem File"
                    //CodeTDKH = ""
                }); ;
                NVL.Add(new NhapVatLieu()
                {
                    ParentID = item.CodeHangMuc,
                    TenKhoNhap = item.CodeHangMuc,
                    ID = codeNhapVT,
                    CodeDeXuat = codedexuat,
                    MaVatTu = item.MaVatLieu,
                    TenVatTu = item.VatTu,
                    DonVi = item.DonVi,
                    TrangThai = 1,
                    //CodeHd = null,
                    //CodeTDKH = null,
                    CodeTDKH = item.Code,
                    DonGia = item.DonGia,
                    FileDinhKem = "Xem File"
                });

            }

            tL_YeuCauVatTu.RefreshDataSource();
            tL_YeuCauVatTu.Refresh();
            tL_YeuCauVatTu.ExpandAll();
            //tL_YeuCauVatTu.DataSource = VL;
            tL_YeuCauVatTu.FocusedNode = tL_YeuCauVatTu.MoveLastVisible();

            tL_NhapKho.RefreshDataSource();
            tL_NhapKho.Refresh();
            tL_NhapKho.ExpandAll();
            //tL_NhapKho.DataSource = NVL;
            tL_NhapKho.FocusedNode = tL_NhapKho.MoveLastVisible();
        }
        private void spsheet_ThanhToanB_B_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            Fcn_CellvalueChanged(e.Cell, e.OldValue, spsheet_ThanhToanB_B);
        }

        private void dte_Dotbegin_EditValueChanged(object sender, EventArgs e)
        {
            Dictionary<DateEdit, string> Datemap = new Dictionary<DateEdit, string>
            {
                {dte_DotbeginAB,"NgayBatDau" },
                {dte_DotendAB,"NgayKetThuc" },
            };
            DateEdit name = (DateEdit)sender;

            string dbString = $"UPDATE {MyConstant.TBL_HopDong_DotHopDong} SET '{Datemap[name]}'='{name.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE \"Code\" = '{cbo_AB_LanThanhToan.SelectedValue}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        }
        private void Fcn_UpdateQLVT_HD(List<LayCongTacHopDong> CTHD, string CodeHD, string CodeNCC)
        {
            if (CTHD == null)
                return;
            //foreach(LayCongTacHopDong item in CTHD)
            //{
            //    string codedexuat = Guid.NewGuid().ToString();
            //    string dbString = $"INSERT INTO '{QLVT.TBL_QLVT_YEUCAUVT}' (\"TrangThai\",\"Code\",\"MaVatTu\",\"CodeHd\",\"HopDongKl\",\"CodeGiaiDoan\",\"TenVatTu\",\"DonVi\",\"CodeHangMuc\") VALUES ('{item.DonGiaHopDong}','{1}','{codedexuat}','{item.MaHieu}','{CodeHD}','{item.KhoiLuongHopDong}','{cbb_DBKH_ChonDot.SelectedValue}','{item.TenCongViec}','{item.DonVi}','{item.ParentID}')";
            //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //    dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVT} (\"DonGia\",\"TrangThai\",\"CodeDeXuat\",\"Code\",\"CodeGiaiDoan\",\"TenKhoNhap\") VALUES ('{item.DonGiaHopDong}','{1}','{codedexuat}','{Guid.NewGuid()}','{cbb_DBKH_ChonDot.SelectedValue}','{item.ParentID}')";
            //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //}
            List<VatLieu> VL = tL_YeuCauVatTu.DataSource as List<VatLieu>;
            List<NhapVatLieu> NVL = tL_NhapKho.DataSource as List<NhapVatLieu>;
            foreach (LayCongTacHopDong item in CTHD)
            {
                string codedexuat = Guid.NewGuid().ToString();
                string dbString = $"INSERT INTO '{QLVT.TBL_QLVT_YEUCAUVT}' (\"TenNhaCungCap\",\"DonGiaHienTruong\",\"TrangThai\",\"Code\",\"MaVatTu\",\"CodeHd\",\"HopDongKl\",\"CodeGiaiDoan\",\"TenVatTu\",\"DonVi\",\"CodeHangMuc\") VALUES" +
                    $" ('{CodeNCC}','{item.DonGiaHopDong}','{1}','{codedexuat}', @MaVatTu,'{CodeHD}','{item.KhoiLuongHopDong}','{cbb_DBKH_ChonDot.SelectedValue}',@TenCongViec,@DonVi,'{item.ParentID}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item.MaHieu, item.TenCongViec, item.DonVi });
                string codeNhapVT = Guid.NewGuid().ToString();
                dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVT} (\"DonGia\",\"TrangThai\",\"CodeDeXuat\",\"Code\",\"CodeGiaiDoan\",\"TenKhoNhap\") VALUES ('{item.DonGiaHopDong}','{1}','{codedexuat}','{codeNhapVT}','{cbb_DBKH_ChonDot.SelectedValue}', @TenKhoNhap)";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { item.ParentID });
                VL.Add(new VatLieu()
                {
                    ParentID = item.ParentID,
                    ID = codedexuat,
                    CodeHd = CodeHD,
                    TrangThai = 1,
                    MaVatTu = item.MaHieu,
                    TenVatTu = item.TenCongViec,
                    TenNhaCungCap = CodeNCC,
                    DonVi = item.DonVi,
                    HopDongKl = Math.Round(item.KhoiLuongHopDong, 3),
                    DonGiaHienTruong = (long)Math.Round(item.DonGiaHopDong),
                    FileDinhKem = "Xem File"
                }); ;
                NVL.Add(new NhapVatLieu()
                {
                    ParentID = item.ParentID,
                    TenKhoNhap = item.ParentID,
                    ID = codeNhapVT,
                    CodeDeXuat = codedexuat,
                    MaVatTu = item.MaHieu,
                    TenVatTu = item.TenCongViec,
                    DonVi = item.DonVi,
                    TrangThai = 1,
                    CodeHd = CodeHD,
                    //CodeTDKH=null,
                    DonGia = (long)Math.Round(item.DonGiaHopDong),
                    FileDinhKem = "Xem File"
                });

            }
            //VL.Add(new VatLieu()
            //{
            //    ParentID = m_ctrlVatlieu.m_codeHM,
            //    ID = Guid.NewGuid().ToString(),
            //});


            tL_YeuCauVatTu.RefreshDataSource();
            tL_YeuCauVatTu.Refresh();
            tL_YeuCauVatTu.ExpandAll();
            //tL_YeuCauVatTu.DataSource = VL;
            //tL_YeuCauVatTu.FocusedNode = tL_YeuCauVatTu.MoveLastVisible();

            tL_NhapKho.RefreshDataSource();
            tL_NhapKho.Refresh();
            tL_NhapKho.ExpandAll();
            //tL_NhapKho.DataSource = NVL;
            //tL_NhapKho.FocusedNode = tL_NhapKho.MoveLastVisible();
        }

        private void gv_TongHopHopDong_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            string dbString = $"UPDATE  {MyConstant.TBL_tonghopdanhsachhopdong} SET '{e.Column.FieldName}'=@NewValue WHERE \"Code\"='{gv_TongHopHopDong.GetRowCellValue(e.RowHandle, "Code")}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
        }
        private void HPL_ThemFile_Click(object sender, EventArgs e)
        {
            FormLuaChon luachon = new FormLuaChon(gv_TongHopHopDong.GetRowCellValue(gv_TongHopHopDong.FocusedRowHandle, "Code").ToString(), FileManageTypeEnum.TongHopDanhSachHopDong);
            luachon.ShowDialog();
        }
        private void btn_TraCuuCongTac_Click(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_DoBocChuan];

            CellRange rangeData = ws.Range[TDKH.RANGE_DoBocChuan];
            Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(rangeData);
            List<string> listId = new List<string>();

            var dr = MessageShower.ShowYesOKNoCancelQuestionWithCustomText("Bạn muốn tra mã cho những công tác nào", "Lựa chọn",
                                    "Toàn bộ công tác", "Công tác có mã hiệu không hợp lệ", "Công tác đã chọn");
            WaitFormHelper.ShowWaitForm("Đang lọc công tác");
            switch (dr)
            {
                case DialogResult.Yes:
                    for (int i = rangeData.TopRowIndex; i < rangeData.BottomRowIndex; i++)
                    {
                        Row crRow = ws.Rows[i];
                        string id = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();
                        if (Guid.TryParse(id, out Guid guid))
                            listId.Add($"'{id}'");
                    }
                    break;
                case DialogResult.OK:
                    for (int i = rangeData.TopRowIndex; i < rangeData.BottomRowIndex; i++)
                    {
                        Row crRow = ws.Rows[i];

                        if (crRow[dicDoBoc[TDKH.COL_MaHieuCongTac]].FillColor.ToArgb() != MyColor.InvalidMHCT.ToArgb())
                            continue;

                        string id = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();
                        if (Guid.TryParse(id, out Guid guid))
                            listId.Add($"'{id}'");
                    }
                    break;

                case DialogResult.No:
                    for (int i = rangeData.TopRowIndex; i < rangeData.BottomRowIndex; i++)
                    {
                        Row crRow = ws.Rows[i];

                        if (crRow[TDKH.COL_Chon].Value.ToString() != true.ToString())
                            continue;

                        string id = crRow[dicDoBoc[TDKH.COL_Code]].Value.ToString();
                        if (Guid.TryParse(id, out Guid guid))
                            listId.Add($"'{id}'");
                    }
                    break;
                default:
                    WaitFormHelper.CloseWaitForm();
                    return;
            }


            string dbString = $"SELECT {TDKH.TBL_ChiTietCongTacTheoKy}.Code as IdCongTacGd, " +
                $"{TDKH.TBL_DanhMucCongTac}.Code, " +
                $"{TDKH.TBL_DanhMucCongTac}.MaHieuCongTac, " +
                $"{TDKH.TBL_DanhMucCongTac}.TenCongTac " +
                $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                $"INNER JOIN {TDKH.TBL_DanhMucCongTac} " +
                $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac = {TDKH.TBL_DanhMucCongTac}.Code " +
                $"WHERE {TDKH.TBL_ChiTietCongTacTheoKy}.Code IN ({string.Join(", ", listId)})";

            List<CongTac> dt = DataProvider.InstanceTHDA.ExecuteQueryModel<CongTac>(dbString);

            DataColumn cl = new DataColumn("Chon", typeof(bool));
            cl.DefaultValue = true; ;

            WaitFormHelper.CloseWaitForm();

            Frm_TraCuuThuCong frm = new Frm_TraCuuThuCong(dt);
            frm.senData = new Frm_TraCuuThuCong.SenData(fcn_UpdateMaDinhMucThuCong);
            //frm.congTacsWithDM = lstSelects;
            frm.ShowDialog();
            //}
        }


        private void fcn_UpdateMaDinhMucThuCong(List<CongTac> dt)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhật mã định mức mới");
            string[] codes = dt.AsEnumerable().Select(x => $"'{x.ParentId}'").ToArray();
            DataTable dtGoc = DataProvider.InstanceTHDA.ExecuteQuery($"SELECT * FROM {TDKH.TBL_DanhMucCongTac} WHERE Code IN ({string.Join(", ", codes)})");

            Worksheet ws = spsheet_TD_KH_LapKeHoach.Document.Worksheets[TDKH.SheetName_DoBocChuan];
            var range = ws.Range[TDKH.RANGE_DoBocChuan];
            var dic = MyFunction.fcn_getDicOfColumn(range);

            foreach (var dr in dt)
            {
                DataRow drGoc = dtGoc.AsEnumerable().Where(x => x["Code"].ToString() == dr.ParentId).First();
                drGoc["MaHieuCongtac"] = dr.MaHieuCongTac;

                int i = ws.Columns[dic[TDKH.COL_Code]]
                        .Search(dr.IdCongTacGd, MyConstant.MySearchOptions)
                        .Select(x => x.RowIndex).Single();

                ws.Rows[i][dic[TDKH.COL_MaHieuCongTac]].SetValue(dr.MaHieuCongTac);
                ws.Rows[i][dic[TDKH.COL_MaHieuCongTac]].FillColor = MyColor.NormalBackground;
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtGoc, TDKH.TBL_DanhMucCongTac);
            WaitFormHelper.CloseWaitForm();
            //fcn_LoadCongTacDoBoc();

        }

        private void btn_AutoTimeThiCong_Click(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            Row crRow = ws.Rows[ws.SelectedCell.TopRowIndex];

            //Dictionary<string, string> dicDB = MyFunction.fcn_getDicOfColumn(ws.Range[TDKH.RANGE_DoBocChuan]);

            string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
            if (typeRow != MyConstant.TYPEROW_HangMuc
                && typeRow != MyConstant.TYPEROW_Nhom
                && typeRow != MyConstant.TYPEROW_PhanTuyen)
            {
                MessageShower.ShowInformation("Vui lòng chọn vào dòng Hạng mục/Nhóm/Phân đoạn để tính ngày cho các công tác");
                return;
            }

            DateTime.TryParse(crRow[dic[TDKH.COL_NgayBatDau]].Value.ToString(), out DateTime dateBD);
            DateTime.TryParse(crRow[dic[TDKH.COL_NgayKetThuc]].Value.ToString(), out DateTime dateKT);

            if (dateBD.Year < 2000 || dateKT.Year < 2000)
            {
                dateBD = dateKT = DateTime.Now.Date;
            }

            string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
            string ten = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();

            XtraForm_CaiDatTimNgayCongTac form = new XtraForm_CaiDatTimNgayCongTac(code, dateBD, dateKT, typeRow, ten);
            //form._sendata = new XtraForm_CaiDatTimNgayCongTac.DE_SENDATANGAY(received_NgayMongMuonCaiDatCongTac);
            if (form.ShowDialog() == DialogResult.OK)
            {
                //fcn_LoadCongTacDoBoc();
                LoadSheetTDKH();
                MessageShower.ShowInformation("Đã tính xong!");
            }

        }

        private void sB_UpdateVL_Click(object sender, EventArgs e)
        {
        }

        private void rg_hienThiTienDo_SelectedIndexChanged(object sender, EventArgs e)
        {
            fcn_TDKH_loadTienDo();
        }

        private void spsheet_ThanhToan_NhaCungCap_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            Worksheet ws = e.Worksheet;
            if (ws.Name == "Tổng hợp các kỳ thanh toán")
                return;
            CellRange Dot1 = ws.Range["Dot_1"];
            string dbString = "";
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETTHONGTIN]);
            if (!Dot1.Contains(e.Cell) || ws.Columns[e.ColumnIndex].Heading != Name["KhoiLuongThuCong"]
                || ws.Columns[e.ColumnIndex].Heading != Name["ThucHienKyNay"] || ws.Columns[e.ColumnIndex].Heading != Name["DonGiaBoSung"])
                return;
            string code = ws.Rows[e.RowIndex][Name[MyConstant.COL_HD_CodeCT]].Value.TextValue;
            ws.Calculate();
            double LKKN = ws.Rows[e.RowIndex][Name["LuyKeDenHetKyNay"]].Value.NumericValue;
            if (ws.Columns[e.ColumnIndex].Heading != Name["KhoiLuongThuCong"])
            {
                double THKN = ws.Rows[e.RowIndex][Name["ThucHienKyNay"]].Value.NumericValue;
                dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT_NTC} SET \"ThucHienKyNay\" = '{THKN}'," +
                    $"\"KhoiLuongThuCong\"='{e.Value}',\"LuyKeDenHetKyNay\"='{LKKN}',\"IsEdit\"='{false}' WHERE \"Code\" = '{code}' ";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            else if (ws.Columns[e.ColumnIndex].Heading != Name["DonGiaBoSung"])
            {
                dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT} SET \"DonGiaBoSung\" = '{e.Value}' WHERE \"Code\" = '{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            else
            {
                dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT} SET \"ThucHienKyNay\" = '{e.Value}'," +
                    $"\"LuyKeDenHetKyNay\"='{LKKN}',\"IsEdit\"='{true}' WHERE \"Code\" = '{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }

        }

        private void tL_YeuCauVatTu_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.Green;
                return;
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.LightSeaGreen;
                return;
            }
            VatLieu task = tL_YeuCauVatTu.GetRow(e.Node.Id) as VatLieu;
            if (task == null)
                return;
            if (task.LuyKeYeuCau < task.HopDongKl && task.TrangThai > 1)
            {
                e.Appearance.ForeColor = Color.Blue;
            }
            if (task.YeuCauDotNay > 0)
            {
                e.Appearance.BackColor = Color.LightYellow;
            }
            if (task == null || !task.IsCompleted)
                return;
            if (e.Column.FieldName == "HopDongKl")
            {
                e.Appearance.FontStyleDelta = (FontStyle.Italic | FontStyle.Strikeout);
                e.Appearance.ForeColor = Color.Red;
            }

        }

        private void tL_YeuCauVatTu_CellValueChanged(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            string dbString = "";
            string TenCotTrongCSDL = e.Column.FieldName;
            string queryStr = $"SELECT *  FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'";
            string code = (string)tL_YeuCauVatTu.GetRowCellValue(e.Node, "ID");
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            if (TenCotTrongCSDL == "YeuCauDotNay")
            {
                if (string.IsNullOrEmpty(e.Value.ToString()))
                    return;
                if (string.IsNullOrEmpty(code))
                    return;
                if (e.Value.ToString().Contains("."))
                {
                    return;
                }
                var KLHD = tL_YeuCauVatTu.GetRowCellValue(e.Node, "HopDongKl");
                try
                {
                    if ((double)KLHD == 0)
                        tL_YeuCauVatTu.SetRowCellValue(e.Node, tL_YeuCauVatTu.Columns["HopDongKl"], e.Value);
                    var n_yeucau = dt.AsEnumerable().Where(y => y["Code"].ToString() == code).Select(x => x["TrangThai"].ToString()).ToArray();
                    var n_Luyke = dt.AsEnumerable().Where(y => y["Code"].ToString() == code).Select(x => x["LuyKeYeuCau"].ToString()).ToArray();
                    double luyke = 0;
                    if (n_yeucau[0].ToString() == "1")
                    {
                        tL_YeuCauVatTu.SetRowCellValue(e.Node, tL_YeuCauVatTu.Columns["LuyKeYeuCau"], e.Value);
                    }
                    else
                    {
                        luyke = double.Parse(e.Value.ToString()) + double.Parse(n_Luyke[0].ToString());
                        tL_YeuCauVatTu.SetRowCellValue(e.Node, tL_YeuCauVatTu.Columns["LuyKeYeuCau"], luyke);
                    }
                }
                catch (Exception ex)
                {
                }
            }
            if (tL_YeuCauVatTu.GetRowCellValue(e.Node, "MaVatTu") != null && e.Column.FieldName != "Chon")
            {
                dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET \"{TenCotTrongCSDL}\"=@NewValue WHERE \"Code\"='{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
                if (e.Column.FieldName == "DonVi" && cbo_LuaChon.SelectedIndex == 4)
                    fcn_loadYeuCauVT_Thucong_TDKH(true, false, true, "CodeKHVT", "CodeTDKH");
            }
            else
            {
                if (cbo_LuaChon.SelectedIndex == 4)
                {
                    if (e.Column.FieldName == "TenVatTu")
                    {
                        TreeListNode Parent = e.Node.ParentNode;
                        string CodeHM = Parent.GetValue("ID").ToString();
                        string codedexuat = Guid.NewGuid().ToString();
                        dbString = $"INSERT INTO '{QLVT.TBL_QLVT_YEUCAUVT}' (\"TrangThai\",\"Code\",{TenCotTrongCSDL},\"MaVatTu\",\"CodeGiaiDoan\",\"CodeHangMuc\") " +
                            $"VALUES ('{1}','{codedexuat}',@{TenCotTrongCSDL},'TT','{cbb_DBKH_ChonDot.SelectedValue}','{CodeHM}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
                        string codeNhapVT = Guid.NewGuid().ToString();
                        dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVT} (\"TrangThai\",\"CodeDeXuat\",\"Code\",\"CodeGiaiDoan\",\"TenKhoNhap\") VALUES ('{1}','{codedexuat}','{codeNhapVT}','{cbb_DBKH_ChonDot.SelectedValue}','{CodeHM}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        fcn_loadYeuCauVT_Thucong_TDKH(true, false, true, "CodeKHVT", "CodeTDKH");
                    }
                }
            }
        }

        private void tL_YeuCauVatTu_CellValueChanging(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            var HM = tL_YeuCauVatTu.GetRowCellValue(e.Node.ParentNode, "TenVatTu");
            var codeHM = tL_YeuCauVatTu.GetRowCellValue(e.Node.ParentNode, "ID");

            //e.Node.ParentNode.Id;
            //var value = tL_YeuCauVatTu.EditingValue;
            //if (e.Node.Level == 0 || e.Node.Level == 1)
            //{
            //    tL_YeuCauVatTu.CancelCurrentEdit();
            //    return;
            //}

            //if (check_DXVL_LayTuTienDoVatTu.Checked)
            //{
            //    m_ctrlVatlieu.fcn_LoadCot(e.Column.FieldName, 1, (string)codeHM, 0, (string)HM, this.Controls);
            //    if (e.Column.FieldName != "TenVatTu" && e.Column.FieldName != "MaVatTu")
            //        m_ctrlVatlieu.Hide();
            //    BeginInvoke(new Action<DevExpress.XtraTreeList.TreeList>((ss) =>
            //    {
            //        TextBox tb = FindTextBox(ss.Controls);
            //        if (tb != null)
            //            tb.TextChanged += fcn_handle_txtBoxTimKiemVatLieu_TextChange;
            //    }), sender as DevExpress.XtraTreeList.TreeList);
            //    Debug.WriteLine("Finished");
            //    return;
            //}
            if (cbo_LuaChon.SelectedIndex == 0)
            {
                m_ctrlVatlieu.fcn_LoadCot(e.Column.FieldName, 2, (string)codeHM, 0, (string)HM, this.Controls);

                if (e.Column.FieldName == "TenVatTu")
                {
                    Thread thread = new Thread(() =>
                     {
                         tL_YeuCauVatTu.BeginInvoke(new Action<DevExpress.XtraTreeList.TreeList>((ss) =>
                         {
                             TextBox tb = FindTextBox(ss.Controls);
                             if (tb != null)
                                 fcn_handle_txtBoxTimKiemVatLieuThuCong_TextChange(tb);
                             //tb.TextChanged += fcn_handle_txtBoxTimKiemVatLieuThuCong_TextChange;
                         }), sender as DevExpress.XtraTreeList.TreeList);
                     });
                    thread.Start();
                }
                else
                    m_ctrlVatlieu.Hide();
                //else if (e.Column.FieldName == "MaVatTu")
                //{
                //    BeginInvoke(new Action<DevExpress.XtraTreeList.TreeList>((ss) =>
                //    {
                //        TextBox tb = FindTextBox(ss.Controls);
                //        if (tb != null)
                //            tb.TextChanged += fcn_handle_txtBoxTimKiemVatLieuThuCong_TextChange;
                //    }), sender as DevExpress.XtraTreeList.TreeList);
                //    tL_YeuCauVatTu.EndUpdate();
                //    return;
                //}
                //else
                //    m_ctrlVatlieu.Hide();
            }
            else
                m_ctrlVatlieu.Hide();
            //else if (check_DXVL_LayTuKHVT.Checked)
            //{
            //    m_ctrlVatlieu.fcn_LoadCot(e.Column.FieldName, 2, (string)codeHM, 0, (string)HM, this.Controls);
            //    BeginInvoke(new Action<SpreadsheetControl>((ss) =>
            //    {
            //        TextBox tb = FindTextBox(ss.Controls);
            //        if (tb != null)
            //        {
            //            tb.TextChanged += fcn_handle_txtBoxTimKiemVatLieuKHVT_TextChange;
            //        }
            //    }), sender as SpreadsheetControl);
            //    Debug.WriteLine("Finished");

            //    return;
            //}

        }
        private void tL_YeuCauVatTu_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (treeList.FocusedColumn == e.Column && treeList.FocusedNode == e.Node)
                return;
            if (object.Equals(e.CellValue, (double)0) || (object.Equals(e.CellValue, false) && (e.Node.Level < 2)))
            {
                e.Appearance.FillRectangle(e.Cache, e.Bounds);
                e.Handled = true;
            }
            else if ((e.Column.FieldName == "Nguon" || e.Column.FieldName == "FileDinhKem") && e.Node.Level <= 1)
            {
                e.Appearance.FillRectangle(e.Cache, e.Bounds);
                e.Handled = true;
            }
            //else if((int)treeList.GetRowCellValue(e.Node, "TrangThai") < 2)
            //{
            //    e.Appearance.ForeColor = Color.Red;
            //}

            //else if(object.Equals(e.CellValue, (double)0)&& treeList.GetRowCellValue(e.Node, "ID") == null)
            //{
            //    e.Appearance.FillRectangle(e.Cache, e.Bounds);
            //    e.Handled = true;
            //}
        }

        private void gv_HaoPhiDinhMuc_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            GridView gv = sender as GridView;
            //if (gv.FocusedColumn.ColumnEdit != null)


            string code = gv.GetFocusedDataRow()["Code"] as string;// dgv_TDKH_KH_HaoPhi.Rows[e.RowIndex].Cells["Code"].Value.ToString();
            string colName = gv.FocusedColumn.FieldName;

            string dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu} SET \"{colName}\" = @NewValue " +
                $"WHERE \"Code\" = '{code}'";

            if (DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value }) == 0)
            {
                MessageShower.ShowInformation("Lỗi cập nhật vật tư");
            }

            //DataRow drVL = gv.GetFocusedDataRow();
            //if (gv.FocusedColumn.FieldName == "PhanTichKeHoach")
            //{
            //    if ((bool)e.Value == true)
            //    {
            //        DinhMucHelper.CapNhatVatTuTheoHaoPhiVaoVatTu(drVL["CodeCongTac"] as string, drVL["Code"] as string);
            //    }
            //    else
            //    {
            //        DinhMucHelper.BoPhanTichKeHoachVatTu(drVL["Code"] as string, drVL["CodeCongTac"] as string);
            //    }
            //}
            //else if (gv.FocusedColumn.FieldName != "DonGia")
            //{
            //    DinhMucHelper.CapNhatVatTuTheoHaoPhiVaoVatTu(drVL["CodeCongTac"] as string, drVL["Code"] as string, colName);
            //}
            //else
            //{

            //    fcn_LoadCongTacDoBoc();
            //}
        }

        private void gv_HaoPhiDinhMuc_ValidatingEditor(object sender, DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs e)
        {
            GridView view = sender as GridView;
            string[] doubColumn =
            {
                "Định mức người dùng",
                "Hệ số người dùng",
            };

            if (doubColumn.Contains(view.FocusedColumn.Caption))
            {
                if (!double.TryParse((string)e.Value, out double db))
                {
                    e.Valid = false;
                    e.ErrorText = "Vui lòng nhập số thực!";
                }
            }

            if (view.FocusedColumn.Caption == "Đơn giá")
            {
                if (!int.TryParse((string)e.Value, out int db))
                {
                    e.Valid = false;
                    e.ErrorText = "Vui lòng nhập số nguyên!";
                }
            }
        }

        //private void repo_ce_PhanTichKeHoach_CheckedChanged(object sender, EventArgs e)
        //{
        //}
        private void tL_YeuCauVatTu_PopupMenuShowing(object sender, DevExpress.XtraTreeList.PopupMenuShowingEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList tL = sender as DevExpress.XtraTreeList.TreeList;
            DevExpress.XtraTreeList.TreeListHitInfo hitInfo = tL.CalcHitInfo(e.Point);
            if (hitInfo.HitInfoType == DevExpress.XtraTreeList.HitInfoType.Cell && (cbo_LuaChon.SelectedIndex == 0 || cbo_LuaChon.SelectedIndex == 4))
            {
                DXMenuItem menuItem = new DXMenuItem("Lưu thành vật liệu người dùng", this.fcn_Handle_Popup_QLVT_LuuDinhMucNguoiDung_Test);
                menuItem.Tag = hitInfo.Column;
                e.Menu.Items.Add(menuItem);
            }
            DXMenuItem menuChon = new DXMenuItem("Chọn Vật Liệu", this.fcn_Handle_Popup_QLVT_ChonVatLieu);
            menuChon.Tag = hitInfo.Column;
            e.Menu.Items.Add(menuChon);
            DXMenuItem menuXoa = new DXMenuItem("Xóa Vật Liệu", this.fcn_Handle_Popup_QLVT_XoaVatLieu);
            menuXoa.Tag = hitInfo.Column;
            e.Menu.Items.Add(menuXoa);
            DXMenuItem menuThuChi = new DXMenuItem("Lấy khối lượng hợp đồng qua yêu cầu đợt này", this.fcn_Handle_Popup_QLVT_ChuyenKLHD);
            menuThuChi.Tag = hitInfo.Column;
            e.Menu.Items.Add(menuThuChi);

        }

        private void fcn_Handle_Popup_QLVT_LuuDinhMucNguoiDung_Test(object sender, EventArgs e)
        {
            string query = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} ";
            DataTable dt = DataProvider.InstanceTBT.ExecuteQuery(query);
            foreach (VatLieu item in (tL_YeuCauVatTu.DataSource as List<VatLieu>))
            {
                if (item.Chon)
                {
                    item.Chon = false;
                    string crMaDM = $"TT";
                    string crTenDinhMuc = item.MaVatTu;
                    string crDonVi = item.DonVi;
                    //CrRow["A"].SetValue(false);
                    string dbString = $"INSERT INTO {MyConstant.TBL_TBT_VATTU} (\"Id\",\"MaVatLieu\", \"VatTu\", \"VatTu_KhongDau\", \"DonVi\", \"LoaiVatTu\") VALUES " +
              $"('{Guid.NewGuid()}', @MaDinhMuc, @TenDinhMuc, @VatTuKhongDau, @DonVi, '{"Vật liệu"}')";
                    DataProvider.InstanceTBT.ExecuteNonQuery(dbString, parameter: new object[] { crMaDM, crTenDinhMuc, MyFunction.fcn_RemoveAccents(crTenDinhMuc), crDonVi });
                    item.MaVatTu = crMaDM;
                    dbString = $"UPDATE  {QLVT.TBL_QLVT_YEUCAUVT} SET \"MaVatTu\"=@MaDinhMuc WHERE \"Code\"='{item.ID}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { crMaDM });
                }
            }
            tL_YeuCauVatTu.Refresh();
        }
        private void fcn_Handle_Popup_QLVT_ChonVatLieu(object sender, EventArgs e)
        {
            var node = tL_YeuCauVatTu.Selection;
            foreach (TreeListNode row in node)
            {
                row.CheckState = CheckState.Checked;
            }
            tL_YeuCauVatTu.Refresh();
        }
        private void fcn_Handle_Popup_QLVT_XoaVatLieu(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang Xóa dữ liệu Quản lý Vận chuyển", "Vui Lòng chờ!!!!!");
            var node = tL_YeuCauVatTu.GetNodeList().Where(x => x.Checked == true);
            foreach (TreeListNode row in node)
            {
                object Value = row.GetValue("MaVatTu");
                if (Value is null)
                    continue;
                string MaVL = Value.ToString();
                if (MaVL == MyConstant.CONST_TYPE_CONGTRINH || MaVL == MyConstant.CONST_TYPE_HANGMUC || MaVL == "")
                    continue;
                string ID = row.GetValue("ID").ToString();
                string dbString = $"DELETE FROM {QLVT.TBL_QLVT_YEUCAUVT} WHERE \"Code\" ='{ID}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            WaitFormHelper.CloseWaitForm();
            Fcn_LoadDataQLVC();
            MessageShower.ShowInformation("Xóa dữ liệu thành công !!!!!");
        }
        private void fcn_Handle_Popup_QLVT_ChuyenKLHD(object sender, EventArgs e)
        {
            List<VatLieu> VL = tL_YeuCauVatTu.DataSource as List<VatLieu>;
            if (VL == null)
                return;
            List<VatLieu> VLConDitions = VL.Where(x => x.Chon && x.MaVatTu != "HM" && x.MaVatTu != "CTR").ToList();
            foreach (VatLieu item in VLConDitions)
            {
                if (item.HopDongKl == 0 || item.HopDongKl <= item.LuyKeYeuCau)
                    continue;
                item.YeuCauDotNay = item.HopDongKl - item.LuyKeYeuCau;
                item.LuyKeYeuCau = item.HopDongKl;
            }
            tL_YeuCauVatTu.RefreshDataSource();
            tL_YeuCauVatTu.Refresh();



        }
        //private void fcn_Handle_Popup_QLVT_ChuyenThuChi(object sender, EventArgs e)
        //{
        //    var node = tL_YeuCauVatTu.Selection;
        //    BindingList<DeXuat> DeXuatVL = new BindingList<DeXuat>();
        //    foreach (TreeListNode row in node)
        //    {                
        //        string CodeHm =(string)tL_YeuCauVatTu.GetRowCellValue(row.ParentNode, "ID");
        //        string code = Guid.NewGuid().ToString();
        //        DeXuatVL.Add(new DeXuat
        //        {
        //            Code = code,
        //            CodeQLVCYCVT= row["ID"].ToString(),
        //            GiaTriDotNay =int.Parse(row["ThanhTien"].ToString()),
        //            NoiDungUng=row["TenVatTu"].ToString(), 
        //            CongTrinh=CodeHm,
        //            File="Chi tiết"
        //        }) ;
        //        string dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} (\"CodeDuAn\",\"Code\",\"CodeQLVCYCVT\",\"GiaTriDotNay\",\"NoiDungUng\") VALUES ('{slke_ThongTinDuAn.EditValue}','{code}','{row["ID"]}','{row["ThanhTien"]}','{row["TenVatTu"]}')";
        //        DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //    }
        //    Fcn_AddData(DeXuatVL);
        //    //tL_YeuCauVatTu.SetRowCellValue(row, tL_YeuCauVatTu.Columns["Chon"], true);
        //    tL_YeuCauVatTu.Refresh();
        //}

        public void Fcn_AddData(BindingList<DeXuat> DexuatVL)
        {
            //BindingList<DeXuat> DX = gc_ThuChiTamUng_DeXuat.DataSource as BindingList<DeXuat>;
            //if (DX == null)
            //{
            //    List<InforCT_HM> Infor = MyFunction.InforHMCT(slke_ThongTinDuAn.Properties.DataSource,false);
            //    rILUE_CongTrinhHM.DataSource = Infor;
            //    rILUE_CongTrinhHM.DropDownRows = Infor.Count;

            //    string dbString = $"SELECT *  FROM {ThuChiTamUng.TBL_THUCHITAMUNG_LOAIKINHPHI}";
            //    List<Infor> LoaiKP = new List<Infor>();

            //    foreach (DataRow item in DataProvider.InstanceTHDA.ExecuteQuery(dbString).Rows)
            //        LoaiKP.Add(new Infor
            //        {
            //            Code = item["Code"].ToString(),
            //            Ten = item["Ten"].ToString()
            //        });
            //    dbString = $"SELECT * FROM {DanhSachNhanVienConstant.TBL_CHAMCONG_BANGNHANVIEN}";
            //    List<Infor> TenNV = new List<Infor>();
            //    foreach (DataRow item in DataProvider.InstanceTHDA.ExecuteQuery(dbString).Rows)
            //        TenNV.Add(new Infor
            //        {
            //            Code = item["Code"].ToString(),
            //            Ten = item["TenNhanVien"].ToString(),
            //            Decription = item["MaNhanVien"].ToString()
            //        });
            //    LoaiKP.Add(new Infor
            //    {
            //        Code = "Add",
            //        Ten = "Thêm"
            //    });
            //    rILUE_LoaiKinhPhi.DataSource = LoaiKP;
            //    //lUE_LoaiKinhPhi.Properties.DataSource = LoaiKP;
            //    rILUE_TenNguoiLap.DataSource = TenNV;
            //    //lUE_TenNguoiLap.Properties.DataSource = TenNV;
            //    rILUE_ToChucCaNhan.DataSource = DuAnHelper.GetCaNhanToChuc();
            //    //lUE_ToChucCaNhan.Properties.DataSource = DuAnHelper.GetCaNhanToChuc();
            //    gc_ThuChiTamUng_DeXuat.DataSource = DexuatVL;
            //    dbString = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            //    DataTable dt_hd = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            //    List<Infor_HopDong> HD = DuAnHelper.ConvertToList<Infor_HopDong>(dt_hd);
            //    ILUE_TenHopDong.DataSource = HD;
            //}
            //else
            //{
            //    foreach (DeXuat item in DexuatVL)
            //        DX.Add(item);
            //}
            //gc_ThuChiTamUng_DeXuat.RefreshDataSource();
        }
        private void tL_NhapKho_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.Green;
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.LightSeaGreen;
            }
            else if (e.Node.Level == 2)
            {
                if (treeList.GetRowCellValue(e.Node, "TrangThai") is null)
                    return;
                if ((int)treeList.GetRowCellValue(e.Node, "TrangThai") == 1)
                    e.Appearance.ForeColor = Color.Red;
                else if ((bool)treeList.GetRowCellValue(e.Node, "IsXuat") == true)
                    e.Appearance.ForeColor = Color.Purple;
                else
                {
                    NhapVatLieu task = tL_NhapKho.GetRow(e.Node.Id) as NhapVatLieu;
                    if (task == null)
                        return;
                    if (task.TrangThai > 1 && task.LuyKeNhapTheoDot >= task.DaDuyetDeXuat && e.Column.FieldName == "DaDuyetDeXuat")
                    {
                        e.Appearance.FontStyleDelta = (FontStyle.Italic | FontStyle.Strikeout);
                        e.Appearance.ForeColor = Color.Red;
                    }
                    else if (task.TrangThai > 1 && task.LuyKeNhapTheoDot < task.DaDuyetDeXuat)
                        e.Appearance.ForeColor = Color.Blue;
                }
            }
        }

        private void xtraTabControl8_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;

                return;
            }

            xtraTabControl_TabMain_EnabledChanged(null, null);
            if (e.Page?.Text == "Nhập kho")
            {
                tL_NhapKho.RefreshDataSource();
                tL_NhapKho.ExpandAll();
            }
            else if (e.Page?.Text == "Xuất kho")
            {
                tL_XuatKho.RefreshDataSource();
                tL_XuatKho.ExpandAll();
            }
            else if (e.Page?.Text == "Quản lý vận chuyển")
            {
                tL_QLVC.RefreshDataSource();
                tL_QLVC.ExpandAll();
            }
            else if (e.Page?.Text == "Chuyển kho")
            {
                tL_ChuyenKho.RefreshDataSource();
                tL_ChuyenKho.ExpandAll();
            }
            else if (e.Page?.Text == "Đề xuất khối lượng")
            {
                tL_YeuCauVatTu.RefreshDataSource();

                tL_YeuCauVatTu.ExpandAll();
            }
            else if (e.Page?.Text == "Thông tin kho vật liệu")
            {
                DataTable dtCT, dtHM;
                DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
                List<InforCT_HM> Infor = MyFunction.InforHMCT(slke_ThongTinDuAn.Properties.DataSource, true);
                Fcn_LoadDataTongHop(dtCT, dtHM, Infor);
            }
            else if (e.Page?.Text == "Kế hoạch vật tư")
                fcn_QLVT_KHVT();
        }

        private void tL_NhapKho_CellValueChanged(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            string TenCotTrongCSDL = e.Column.FieldName;
            string code = (string)tL_NhapKho.GetRowCellValue(e.Node, "ID");
            string queryStr = $"SELECT *  FROM {QLVT.TBL_QLVT_NHAPVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            if (e.Column.FieldName == "TenNhaCungCap" || e.Column.FieldName == "DonViThucHien")
                return;
            if (TenCotTrongCSDL == "ThucNhap")
            {
                if (e.Value.ToString().Contains("."))
                {
                    return;
                }
                var n_yeucau = dt.AsEnumerable().Where(y => y["Code"].ToString() == code).Select(x => x["TrangThai"].ToString()).ToArray().FirstOrDefault();
                var n_Luyke = dt.AsEnumerable().Where(y => y["Code"].ToString() == code).Select(x => x["LuyKeNhapTheoDot"].ToString()).ToArray().FirstOrDefault();
                //string[] n_yeucau = worksheet.Rows[e.RowIndex][NAME["Trangthai"]].Value.TextValue.Split(' ');
                if (n_yeucau == "2")
                {
                    tL_NhapKho.SetRowCellValue(e.Node, tL_NhapKho.Columns["LuyKeNhapTheoDot"], e.Value);
                    //ws_NhapVT.Rows[e.RowIndex][NAME["LuyKeNhapTheoDot"]].Formula = $"={NAME["ThucNhap"]}{e.RowIndex + 1}";
                    //worksheet.Rows[e.RowIndex][NAME["LuyKeYeuCau"]].Formula = $"={NAME["YeuCauDotNay"]}{e.RowIndex+ 1}+{NAME["LuyKeYeuCau"]}{e.RowIndex}";
                }
                else
                {
                    double luyke = double.Parse(e.Value.ToString()) + double.Parse(n_Luyke);
                    tL_NhapKho.SetRowCellValue(e.Node, tL_NhapKho.Columns["LuyKeNhapTheoDot"], luyke);
                }
            }
            if (e.Column.FieldName != "Chon" && e.Column.FieldName != "DaThanhToan")
            {
                string dbString = $"UPDATE  {QLVT.TBL_QLVT_NHAPVT} SET \"{TenCotTrongCSDL}\" = @NewValue WHERE \"Code\"='{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
            }
        }
        private void tL_XuatKho_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.Green;
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.LightSeaGreen;
            }
            else if (e.Node.Level == 2)
            {
                XuatVatLieu XVL = tL_XuatKho.GetRow(e.Node.Id) as XuatVatLieu;
                if (XVL == null)
                    return;
                if (XVL.IsXuat)
                    e.Appearance.ForeColor = Color.Purple;
                else if (XVL.TrangThai > 1 && XVL.LuyKeXuatTheoDot < XVL.LuyKeNhapTheoDot)
                {
                    e.Appearance.ForeColor = Color.Blue;
                }
                else if (XVL.TrangThai >= 1 && XVL.LuyKeXuatTheoDot >= XVL.LuyKeNhapTheoDot)
                {
                    if (XVL.IsXuat)
                        return;
                    if (e.Column.FieldName == "LuyKeNhapTheoDot")
                    {
                        e.Appearance.FontStyleDelta = (FontStyle.Italic | FontStyle.Strikeout);
                        e.Appearance.ForeColor = Color.Red;
                    }
                }

            }
        }

        private void tL_QLVC_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.Green;
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.LightSeaGreen;
            }
        }

        private void tL_QLVC_CellValueChanging(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            if (e.Node.Level == 0 || e.Node.Level == 1)
                tL_QLVC.CancelCurrentEdit();
        }

        private void tL_QLVC_CellValueChanged(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            string dbString = "";
            string TenCotTrongCSDL = e.Column.FieldName;
            QLVC qLVC = tL_QLVC.GetFocusedRow() as QLVC;
            if (TenCotTrongCSDL != "Chon")
            {
                dbString = $"UPDATE  {QLVT.TBL_QLVT_QLVC} SET \"{TenCotTrongCSDL}\"='{e.Value}' WHERE \"Code\"='{qLVC.ID}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            if (TenCotTrongCSDL == "ThucTeVanChuyen" || TenCotTrongCSDL == "TongSoLuongChuyen" || TenCotTrongCSDL == "KhoiLuong_1Chuyen")
            {
                if (qLVC.ThucTeVanChuyen != 0)
                {
                    dbString = $"SELECT *  FROM {QLVT.TBL_QLVT_NKVC} WHERE \"CodeCha\"='{qLVC.ID}'";
                    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    if (dt.Rows.Count == 0)
                    {
                        //dbString = $"SELECT *  FROM {QLVT.TBL_QLVT_QLVC} WHERE \"Code\"='{code}'";
                        //dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        qLVC.LuyKeVanChuyenTheoDot = qLVC.ThucTeVanChuyen;
                        //ws_QLVC.Rows[e.RowIndex][NAMEQLVC["LuyKeVanChuyenTheoDot"]].Formula = $"{ws_QLVC.Rows[e.RowIndex][NAMEQLVC["ThucTeVanChuyen"]].GetReferenceA1()}";
                        //ws_QLVC.Calculate();
                        //luyke = double.Parse(dt.Rows[0]["LuyKeNhapKho"].ToString()) + ws_QLVC.Rows[e.RowIndex][NAMEQLVC["LuyKeVanChuyenTheoDot"]].Value.NumericValue;
                        //ws_QLVC.Rows[e.RowIndex][NAMEQLVC["LuyKeNhapKho"]].SetValue(luyke);
                    }
                    else
                    {
                        double luyke = 0;
                        foreach (DataRow row in dt.Rows)
                            luyke += int.Parse(row["ThucTeVanChuyen"].ToString());
                        luyke = luyke + qLVC.ThucTeVanChuyen;
                        qLVC.LuyKeVanChuyenTheoDot = luyke;

                    }
                }
            }
            tL_QLVC.RefreshDataSource();

        }
        private void tL_QLVC_CustomNodeCellEdit(object sender, DevExpress.XtraTreeList.GetCustomNodeCellEditEventArgs e)
        {
            if (tL_QLVC.FocusedNode == null)
                return;
            if (e.Node.Level < 2)
            {
                DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit btnActivate = new DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit();
                btnActivate.Buttons.Clear();
                e.RepositoryItem = btnActivate;
            }
            else if (e.Node.Focused == tL_QLVC.FocusedNode.Focused && e.Column.FieldName == "HoanThoanh_Ok")
            {
                e.RepositoryItem = rIBE_HoanThanh;
            }
        }

        private void rIBE_HoanThanh_Click(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageShower.ShowYesNoQuestion("Bạn muốn hoàn thành nhập dữ liệu! Vui lòng kiểm tra kỹ trước khi nhấn nút đồng ý ?", "Cảnh Báo!");
            if (dialogResult == DialogResult.Yes)
            {
                var ngay = "";
                try
                {
                    XtraInputBoxArgs args = new XtraInputBoxArgs();
                    args.Caption = "Cài đặt ngày vận chuyển vật tư";
                    args.Prompt = "Ngày Vận Chuyển";
                    args.DefaultButtonIndex = 0;
                    args.Showing += Args_Showing_Begin;
                    DateEdit editor = new DateEdit();
                    editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
                    editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
                    args.Editor = editor;
                    args.DefaultResponse = DateTime.Now.Date;
                    ngay = XtraInputBox.Show(args).ToString();
                }
                catch
                {
                    return;
                }
                QLVC qLVC = tL_QLVC.GetFocusedRow() as QLVC;
                tL_NhapKho.RefreshDataSource();
                tL_XuatKho.RefreshDataSource();
                NhapVatLieu NVL = (tL_NhapKho.DataSource as List<NhapVatLieu>).FindAll(x => x.ID == qLVC.CodeNhapVT).FirstOrDefault();
                XuatVatLieu XVL = (tL_XuatKho.DataSource as List<XuatVatLieu>).FindAll(x => x.CodeNhapVT == qLVC.CodeNhapVT).FirstOrDefault();
                string dbString = $"INSERT INTO {QLVT.TBL_QLVT_NKVC} (\"Ngay\",\"DonGia\",\"Code\",\"CodeCha\",\"TaiXe\",\"BienSoXe\",\"KichThuocThungXe\",\"KhoiLuong_1Chuyen\",\"TongSoLuongChuyen\",\"ThucTeVanChuyen\")" +
                    $" VALUES ('{DateTime.Parse(ngay).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{qLVC.DonGia}','{Guid.NewGuid()}','{qLVC.ID}','{qLVC.TaiXe}','{qLVC.BienSoXe}','{qLVC.KichThuocThungXe}','{qLVC.KhoiLuong_1Chuyen}','{qLVC.TongSoLuongChuyen}','{qLVC.ThucTeVanChuyen}')";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                //string[] DB = { "HoanThoanh_Ok", "TaiXe", "BienSoXe", "KichThuocThungXe", "KhoiLuong_1Chuyen", "TongSoLuongChuyen", "ThucTeVanChuyen" };
                //foreach (string item in DB)
                //    ws_QLVC.Rows[e.RowIndex][NAMEQLVC[item]].SetValueFromText("");
                dbString = $"UPDATE  {QLVT.TBL_QLVT_QLVC} SET \"LuyKeNhapKho\"='{qLVC.LuyKeNhapKho}',\"LuyKeVanChuyenTheoDot\"='{qLVC.LuyKeVanChuyenTheoDot}' WHERE \"Code\"='{qLVC.ID}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                dbString = $"UPDATE  {QLVT.TBL_QLVT_NHAPVT} SET \"LuyKeNhapTheoDot\"='{qLVC.LuyKeNhapKho}' WHERE \"Code\"='{qLVC.CodeNhapVT}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                dbString = $"UPDATE  {QLVT.TBL_QLVT_XUATVT} SET \"LuyKeNhapTheoDot\"='{qLVC.LuyKeNhapKho}' WHERE \"CodeNhapVT\"='{qLVC.CodeNhapVT}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                NVL.LuyKeNhapTheoDot = qLVC.LuyKeNhapKho;
                XVL.LuyKeNhapTheoDot = qLVC.LuyKeNhapKho;
                qLVC.KhoiLuongDaNhap = qLVC.LuyKeNhapKho;
                qLVC.GenerateSource(qLVC);
                tL_QLVC.RefreshDataSource();
            }
            else
                return;
            Fcn_UpdateVatLieuVC();
        }

        private void rIHPL_NhatKy_Click(object sender, EventArgs e)
        {
            QLVC qLVC = tL_QLVC.GetFocusedRow() as QLVC;
            Form_QLVT_NhatKy QLNK = new Form_QLVT_NhatKy(qLVC.ID, qLVC.TenVatTu);
            QLNK.ShowDialog();
        }

        private void tL_QLVC_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (treeList.FocusedColumn == e.Column && treeList.FocusedNode == e.Node)
                return;
            if (object.Equals(e.CellValue, (double)0) || (object.Equals(e.CellValue, false) && (e.Node.Level < 2)))
            {
                e.Appearance.FillRectangle(e.Cache, e.Bounds);
                e.Handled = true;
            }
            if (e.Column.FieldName == "FileDinhKem" && e.Node.Level <= 1)
            {
                e.Appearance.FillRectangle(e.Cache, e.Bounds);
                e.Handled = true;
            }
        }

        private void tL_XuatKho_CellValueChanged(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            if (string.IsNullOrEmpty(e.Value.ToString()))
                return;
            string TenCotTrongCSDL = e.Column.FieldName;
            string dbString = "";
            string code = (string)tL_XuatKho.GetRowCellValue(e.Node, "ID");
            string queryStr = $"SELECT *  FROM {QLVT.TBL_QLVT_XUATVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            if (TenCotTrongCSDL != "Chon")
            {
                if (TenCotTrongCSDL == "TenKhoNhap")
                {
                    XuatVatLieu XVL = tL_XuatKho.GetFocusedRow() as XuatVatLieu;
                    List<ChuyenVatTu> CVT = tL_ChuyenKho.DataSource as List<ChuyenVatTu>;
                    ChuyenVatTu m_CVT = CVT.FindAll(x => x.CodeNhapVT == XVL.CodeNhapVT).FirstOrDefault();
                    m_CVT.TenKhoChuyenDi = e.Value.ToString();
                    dbString = $"UPDATE  {QLVT.TBL_QLVT_CHUYENKHOVT} SET \"TenKhoChuyenDi\"='{m_CVT.TenKhoChuyenDi}' WHERE \"CodeNhapVT\"='{XVL.CodeNhapVT}'";
                    tL_ChuyenKho.RefreshDataSource();
                }
                else
                    dbString = $"UPDATE  {QLVT.TBL_QLVT_XUATVT} SET \"{TenCotTrongCSDL}\"= @NewValue WHERE \"Code\"='{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
            }
            if (TenCotTrongCSDL == "ThucXuat")
            {
                XuatVatLieu XVL = tL_XuatKho.GetFocusedRow() as XuatVatLieu;
                if (e.Value.ToString().Contains("."))
                {
                    return;
                }
                var n_yeucau = dt.AsEnumerable().Where(y => y["Code"].ToString() == code).Select(x => x["TrangThai"].ToString()).ToArray().FirstOrDefault();
                var n_Luyke = dt.AsEnumerable().Where(y => y["Code"].ToString() == code).Select(x => x["LuyKeXuatTheoDot"].ToString()).ToArray().FirstOrDefault();
                if (n_yeucau == "1")
                {
                    if (double.Parse(e.Value.ToString()) > XVL.DaDuyetDeXuat)
                    {
                        MessageShower.ShowWarning("Bạn nhập quá khối lượng đã nhập kho, Vui lòng nhập lại khối lượng!");
                        e.Value = XVL.LuyKeNhapTheoDot;
                    }
                    tL_XuatKho.SetRowCellValue(e.Node, tL_XuatKho.Columns["LuyKeXuatTheoDot"], e.Value);
                }
                else
                {
                    double luyke = double.Parse(e.Value.ToString()) + double.Parse(n_Luyke);
                    if (luyke > XVL.LuyKeNhapTheoDot)
                    {
                        MessageShower.ShowWarning("Bạn nhập quá khối lượng đã nhập kho, Vui lòng nhập lại khối lượng!");
                        e.Value = XVL.LuyKeNhapTheoDot - double.Parse(n_Luyke);
                        luyke = XVL.LuyKeNhapTheoDot;

                    }
                    tL_XuatKho.SetRowCellValue(e.Node, tL_XuatKho.Columns["LuyKeXuatTheoDot"], luyke);
                }
            }
        }

        private void tL_XuatKho_CellValueChanging(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            if (e.Node.Level == 0 || e.Node.Level == 1)
                tL_XuatKho.CancelCurrentEdit();
        }

        private void tL_ChuyenKho_CellValueChanging(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            if (tL_ChuyenKho.GetRowCellValue(e.Node, "TonKhoChuyenDi") is null)
                return;
            if (e.Node.Level == 0 || e.Node.Level == 1 || (double)tL_ChuyenKho.GetRowCellValue(e.Node, "TonKhoChuyenDi") == 0)
                tL_ChuyenKho.CancelCurrentEdit();
            //else if(e.Column.FieldName=="ChuyenKho")
            //    tL_ChuyenKho.CancelCurrentEdit();
            //else if(e.Column.FieldName== "ThucNhapKhoDen"||e.Column.FieldName== "TenKhoChuyenDen")
            //{
            //    if((int)tL_ChuyenKho.GetRowCellValue(e.Node, "ChuyenKho") == 1)
            //        tL_ChuyenKho.CancelCurrentEdit();
            //}
        }

        private void tL_ChuyenKho_CellValueChanged(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            string TenCotTrongCSDL = e.Column.FieldName;
            string dbString = "";
            string code = (string)tL_ChuyenKho.GetRowCellValue(e.Node, "ID");
            string queryStr = $"SELECT *  FROM {QLVT.TBL_QLVT_CHUYENKHOVT} WHERE \"CodeGiaiDoan\"='{cbb_DBKH_ChonDot.SelectedValue}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            if (TenCotTrongCSDL != "Chon" && TenCotTrongCSDL != "ThucNhapKhoDen" && TenCotTrongCSDL != "TenKhoChuyenDen" && TenCotTrongCSDL != "ChuyenKho")
            {
                dbString = $"UPDATE  {QLVT.TBL_QLVT_CHUYENKHOVT} SET \"{TenCotTrongCSDL}\"= @NewValue WHERE \"Code\"='{code}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
            }
        }

        private void ctrl_DonViThucHienDuAn_CheckedChanged(object sender, EventArgs e)
        {
            if (ctrl_DonViThucHienDuAnTDKH.SelectedDVTH != null)
                LoadSheetTDKH();
        }
        static bool _CheckDobocKH = false;
        private void ctrl_DonViThucHienDuAn_DVTHChanged(object sender, EventArgs e)
        {
            _CheckTrangThai = _CheckDobocKH = false;
            fcn_LoadCongTrinhHangMuc();
            //LoadSheetTDKH();
            //if (xtraTabControl_TienDoKeHoach.SelectedTabPage == xtraTab_TienDo)
            //    fcn_TDKH_loadTienDo();
            if (xtraTabControl_TabMain.SelectedTabPage == xtraTabPage_QLHDong_TT)
            {
                _CheckTrangThai = true;
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                Fcn_LoadHopDong(DVTH);
                return;
            }
            _CheckDobocKH = true;
            if (navigationPane1.SelectedPage == np_BieuDoTaiChinh)
            {
                WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu");
                DataTable dtCT, dtHM, dtCongTacTheoKy = null;
                List<KLHN> dtHangNgay = new List<KLHN>();
                bool isCongTac = cbo_LoaiTienDo.SelectedIndex == 0;
                string loaiVatTu = (isCongTac) ? null : cbo_HienThiTienDo.Text;
                DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                if (DVTH.Table == MyConstant.TBL_THONGTINNHATHAU)
                {
                    DinhMucHelper.fcn_CTacTheoKyNew(loaiVatTu, out DataTable dtCongTacTheoKy_New, out List<KLHN> dtHangNgay_New, true);
                    dtHangNgay = dtHangNgay_New;
                }
                else
                {
                    DinhMucHelper.fcn_CTacTheoKyNew(loaiVatTu, out DataTable dtCongTacTheoKy_New, out List<KLHN> dtHangNgay_New, false);
                    dtHangNgay = dtHangNgay_New;
                }
                #region Vẽ biểu đồ tài chính
                ctrl_ChartKhoiLuongThanhTien.PushData(dtHangNgay, DVTH.IsGiaoThau);
                #endregion
                WaitFormHelper.CloseWaitForm();
            }
            else if (navigationPane1.SelectedPage == np_NhanCong)
            {
                WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu nhân công");
                LoadBieuDoNhanCong();
                WaitFormHelper.CloseWaitForm();
            }  
            else if (xtraTabControl_TabMain.SelectedTabPage == xtraTabPage_QLMay_TB)
            {
                Uc_MTCHangNgay uc = new Uc_MTCHangNgay();
                uc.LoadData();
                uc.Dock = DockStyle.Fill;
                xtraTab_NhatTrinhThiCong.Controls.Clear();
                xtraTab_NhatTrinhThiCong.Controls.Add(uc);
                xtraTabControl_QLMayThietBi.SelectedTabPage = xtraTab_NhatTrinhThiCong;

            }

        }
        private void Fcn_LoadHopDong(DonViThucHien DVTH)
        {
            string queryStr = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG} WHERE \"CodeDonViThucHien\"='{DVTH.Code}'";
            if (DVTH.Table == MyConstant.TBL_THONGTINNHATHAU)
                queryStr = $"SELECT *  FROM {MyConstant.Tbl_TAOMOIHOPDONG} WHERE \"CodeDonViThucHien\"=\"CodeNcc\" OR \"CodeDonViThucHien\"='{DVTH.Code}' ORDER BY \"SoHopDong\" ASC ";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(queryStr);
            if (dt.Rows.Count == 0)
            {
                cbo_MeNuTenHopDong.DataSource = null;
                Fcn_UpdatePhuLucHDEmpty();
                fcn_HideTab("");
                ; return;
            }
            cbo_MeNuTenHopDong.DisplayMember = "Value";
            cbo_MeNuTenHopDong.ValueMember = "Key";
            cbo_MeNuTenHopDong.DataSource = dt.AsEnumerable().ToDictionary(x => x["Code"], x => x["TenHopDong"]).ToList();
            //cbo_MeNuTenHopDong.SelectedIndex = cbo_MeNuTenHopDong.Items.Count - 1;
        }
        private void tL_ChuyenKho_CustomNodeCellEdit(object sender, DevExpress.XtraTreeList.GetCustomNodeCellEditEventArgs e)
        {
            if (tL_ChuyenKho.FocusedNode == null)
                return;
            if (e.Node.Level < 2)
            {
                DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit btnActivate = new DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit();
                btnActivate.Buttons.Clear();
                e.RepositoryItem = btnActivate;
            }
            else if (e.Node.Focused == tL_ChuyenKho.FocusedNode.Focused && e.Column.FieldName == "ChuyenKho")
            {
                e.RepositoryItem = rIBE_ChuyeKho;
            }
        }

        private void tL_ChuyenKho_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (treeList.FocusedColumn == e.Column && treeList.FocusedNode == e.Node)
                return;
            if (object.Equals(e.CellValue, (double)0) || (object.Equals(e.CellValue, false) && (e.Node.Level < 2)))
            {
                e.Appearance.FillRectangle(e.Cache, e.Bounds);
                e.Handled = true;

            }
        }
        private void tL_ChuyenKho_CustomNodeCellEditForEditing(object sender, DevExpress.XtraTreeList.GetCustomNodeCellEditEventArgs e)
        {
            if (e.Node.Focused == tL_ChuyenKho.FocusedNode.Focused && e.Column.FieldName == "ChuyenKho")
            {
                e.RepositoryItem = rIBE_ChuyeKho;
            }
        }
        private void tL_ChuyenKho_EditFormPrepared(object sender, DevExpress.XtraTreeList.EditFormPreparedEventArgs e)
        {
            //e.Panel.Location = new Point(tL_ChuyenKho.Parent.Location.X + tL_ChuyenKho.Width, tL_ChuyenKho.Parent.Parent.Location.Y + 25);
            Control ctrl = MyExtenstions.FindControl(e.Panel, "Update");
            if (ctrl != null)
            {
                ctrl.Text = "Ok";
                (ctrl as SimpleButton).ImageOptions.Image = imageCollection.Images[0];
                (ctrl as SimpleButton).Click += (s, ee) =>
                {
                    ChuyenVatTu CVL = tL_ChuyenKho.GetFocusedRow() as ChuyenVatTu;
                    CVL.HoanThanh = true;
                    MessageShower.ShowInformation("Kiểm tra lại số liệu và nhấn chọn Ok để hoàn thành!", "Lưu ý");
                    tL_ChuyenKho.RefreshDataSource();
                };
            }

            ctrl = MyExtenstions.FindControl(e.Panel, "Cancel");
            if (ctrl != null)
            {
                (ctrl as SimpleButton).ImageOptions.Image = imageCollection.Images[1];
                ctrl.Text = "Đóng";
            }
        }

        private async void rIBE_ChuyeKho_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            switch (e.Button.Caption)
            {
                case "Chuyển Kho":
                    ChuyenVatTu CVL = tL_ChuyenKho.GetFocusedRow() as ChuyenVatTu;
                    if (CVL.HoanThanh || CVL.CodeNhapVT == null || CVL.TonKhoChuyenDi == 0)
                        return;
                    if (MessageShower.ShowYesNoQuestion("Bạn có muốn Chuyển Kho?", "Chuyển Kho") != DialogResult.No)
                    {
                        CVL.ThucNhapKhoDen = CVL.TonKhoChuyenDi;
                        tL_ChuyenKho.OptionsBehavior.EditingMode = DevExpress.XtraTreeList.TreeListEditingMode.EditForm;
                        tL_ChuyenKho.CloseEditor();
                        tL_ChuyenKho.OptionsEditForm.PopupEditFormWidth = tL_ChuyenKho.Width;
                        tL_ChuyenKho.ShowEditForm();
                        tL_ChuyenKho.OptionsBehavior.EditingMode = DevExpress.XtraTreeList.TreeListEditingMode.Default;
                    }
                    break;
                case "Đồng ý":
                    ChuyenVatTu CVT = tL_ChuyenKho.GetFocusedRow() as ChuyenVatTu;
                    if (!CVT.HoanThanh)
                        return;
                    if (CVT.TenKhoChuyenDen == CVT.TenKhoChuyenDi || CVT.TenKhoChuyenDen == "")
                    {
                        MessageShower.ShowYesNoQuestion("Tên kho đến và kho đi phải khác nhau!", "Cảnh báo tên kho trùng nhau");
                        return;
                    }
                    CVT.HoanThanh = false;
                    XtraInputBoxArgs args = new XtraInputBoxArgs();
                    args.Caption = "Cài đặt ngày Chuyển Kho";
                    args.Prompt = "Ngày Chuyển Kho";
                    args.DefaultButtonIndex = 0;
                    args.Showing += Args_Showing_Begin;
                    DateEdit editor = new DateEdit();
                    editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
                    editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
                    args.Editor = editor;
                    args.DefaultResponse = DateTime.Now.Date;
                    var ngay = "";
                    try
                    {
                        ngay = XtraInputBox.Show(args).ToString();
                    }
                    catch (Exception ex)
                    {
                        return;
                    }

                    var dr = MessageShower.ShowYesNoCancelQuestionWithCustomText("Chọn phương pháp duyệt!", "Lựa chọn", yesString: "Duyệt 1 bước", Nostring: "Duyệt theo quy trình");
                    if (dr == DialogResult.Cancel)
                        return;
                    bool isQuyTrinh = dr == DialogResult.No;
                    WaitFormHelper.ShowWaitForm("Quá trình gửi duyệt đang được tiến hành,Vui lòng chờ!");

                    int countOK = 0;
                    int countBad = 0;
                    int count = 1;
                    var date = DateTime.Parse(ngay);
                    List<string> Noti = new List<string>();
                    if (isQuyTrinh)
                    {
                        var newDXVTHN = new Tbl_QLVT_ChuyenKho_KhoiLuongHangNgayViewModel()
                        {
                            Code = Guid.NewGuid().ToString(),
                            CodeCha = CVT.ID,
                            Ngay = date,
                            KhoiLuong = CVT.ThucNhapKhoDen,
                            DonGia = CVT.DonGia,
                            TrangThai = (int)VatTuStateEnum.DangXetDuyet,
                            //ACapB = item.ACapB
                        };

                        var result = await CusHttpClient.InstanceCustomer.MPostAsJsonAsync<Tbl_QLVT_ChuyenKho_KhoiLuongHangNgayViewModel>(RouteAPI.ApprovalChuyenKho_SendApprovalRequest, newDXVTHN);
                        if (result.MESSAGE_TYPECODE)
                        {
                            countOK++;

                        }
                        else
                        {
                            countBad++;
                            Noti.Add($"{CVT.MaVatTu}: {CVT.TenVatTu}: {result.MESSAGE_CONTENT}");
                        }
                        if (result.Dto != null)
                        {
                            var cvCha = (new List<Tbl_QLVT_ChuyenKho_KhoiLuongHangNgayViewModel>() { result.Dto }).fcn_ObjToDataTable();
                            DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(cvCha, Server.Tbl_QLVT_ChuyenKho_KhoiLuongHangNgay, isCompareTime: false);
                        }
                        DialogResult drs = DialogResult.None;
                        if (countOK == 1)
                            MessageShower.ShowInformation("Gửi duyệt thành công", "");
                        else if (countOK == 0)
                            drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Gửi duyệt không thành công", "", yesString: "Xem chi tiết lỗi", Nostring: "Không xem chi tiết");
                        else
                        {
                            string mess = $@"Gửi duyệt thành công 1 phần: {countOK} thành công, {countBad} thất bại";
                            drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Gửi duyệt không thành công một phần", "", yesString: "Xem chi tiết lỗi", Nostring: "Không xem chi tiết");
                        }
                        if (drs == DialogResult.Yes)
                        {
                            XtraFormThongBaoMutilError FrmThongBao = new XtraFormThongBaoMutilError();
                            FrmThongBao.Description = string.Join("\r\n\t", Noti.ToArray());
                            FrmThongBao.ShowDialog();
                        }
                    }
                    else
                    {
                        string dbString = $"INSERT INTO {QLVT.TBL_QLVT_CHUYENKHOVTKLHN} (\"Code\",\"CodeCha\",\"Ngay\",\"KhoiLuong\",\"TenKhoChuyenDen\") " +
    $"VALUES ('{Guid.NewGuid()}','{CVT.ID}','{DateTime.Parse(ngay).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{CVT.ThucNhapKhoDen}', @TenKhoChuyenDen)";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { CVT.TenKhoChuyenDen });

                        List<NhapVatLieu> NVL = tL_NhapKho.DataSource as List<NhapVatLieu>;
                        NhapVatLieu NhapVL = NVL.FindAll(x => x.ID == CVT.CodeNhapVT).FirstOrDefault();
                        NhapVL.LuyKeNhapTheoDot = NhapVL.LuyKeNhapTheoDot - CVT.TonKhoChuyenDen;
                        QLVC VC = (tL_QLVC.DataSource as List<QLVC>).FindAll(x => x.CodeNhapVT == CVT.CodeNhapVT).FirstOrDefault();
                        VC.KhoiLuongDaNhap = NhapVL.LuyKeNhapTheoDot;
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_NHAPVT} SET \"LuyKeNhapTheoDot\"='{ NhapVL.LuyKeNhapTheoDot}' WHERE \"Code\"='{NhapVL.ID}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_QLVC} SET \"LuyKeNhapKho\"='{NhapVL.LuyKeNhapTheoDot}' WHERE \"CodeNhapVT\"='{NhapVL.ID}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                        string codeNhapVT = Guid.NewGuid().ToString();
                        string codedexuat = Guid.NewGuid().ToString();
                        dbString = $"INSERT INTO '{QLVT.TBL_QLVT_YEUCAUVT}' (\"TrangThai\",\"Code\",\"TenVatTu\",\"MaVatTu\",\"DonVi\",\"CodeGiaiDoan\",\"CodeHangMuc\",\"IsDone\") " +
    $"VALUES ('{2}','{codedexuat}',@TenVatTu, @MaVatTu, @DonVi,'{cbb_DBKH_ChonDot.SelectedValue}',@TenKhoChuyenDen,'{true}')";

                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { CVT.TenVatTu, CVT.MaVatTu, CVT.DonVi, CVT.TenKhoChuyenDen });
                        dbString = $"INSERT INTO {QLVT.TBL_QLVT_NHAPVT} (\"IsChuyenKho\",\"TrangThai\",\"CodeDeXuat\",\"Code\",\"CodeGiaiDoan\",\"TenKhoNhap\",\"DeXuatVatTu\",\"DaDuyetDeXuat\") VALUES " +
                            $"('{true}','{4}','{codedexuat}','{codeNhapVT}','{cbb_DBKH_ChonDot.SelectedValue}',@TenKhoNhap,'{CVT.ThucNhapKhoDen}','{CVT.ThucNhapKhoDen}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { CVT.TenKhoChuyenDen });
                        DataTable dtCT, dtHM;
                        DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
                        Fcn_LoadDataNhapKho(dtCT, dtHM);
                        CVT.LuyKeThucNhapKhoDen = CVT.TonKhoChuyenDen;
                        CVT.ThucNhapKhoDen = 0;
                        dbString = $"UPDATE  {QLVT.TBL_QLVT_CHUYENKHOVT} SET \"TonKhoChuyenDen\"='{ CVT.LuyKeThucNhapKhoDen}',\"TonKhoChuyenDi\"='{ CVT.TonKhoChuyenDi - CVT.TonKhoChuyenDen}' WHERE \"Code\"='{CVT.ID}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        CVT.TenKhoChuyenDen = null;
                        CVT.TonKhoChuyenDi = CVT.TonKhoChuyenDi - CVT.TonKhoChuyenDen;

                        tL_ChuyenKho.RefreshDataSource();
                        tL_NhapKho.RefreshDataSource();
                        tL_XuatKho.RefreshDataSource();
                        tL_QLVC.RefreshDataSource();
                        fcn_UpdateChuyenKho();
                        Fcn_UpdateTenKho();
                        MessageShower.ShowInformation("Chuyển kho thành công!!!!!!!!!!");
                        WaitFormHelper.CloseWaitForm();
                    }
                    break;
            }
        }
        private void tL_ChuyenKho_ShowingEditor(object sender, CancelEventArgs e)
        {
            //e.Cancel = tL_ChuyenKho.FocusedColumn != tL_ChuyenKho.Columns["ChuyenKho"];
        }


        private void tL_NhapKho_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (treeList.FocusedColumn == e.Column && treeList.FocusedNode == e.Node)
                return;
            if (object.Equals(e.CellValue, (double)0) || (object.Equals(e.CellValue, false) && (e.Node.Level < 2)))
            {
                e.Appearance.FillRectangle(e.Cache, e.Bounds);
                e.Handled = true;
            }
        }

        private void tL_XuatKho_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (treeList.FocusedColumn == e.Column && treeList.FocusedNode == e.Node)
                return;
            if (object.Equals(e.CellValue, (double)0) || (object.Equals(e.CellValue, false) && (e.Node.Level < 2)))
            {
                e.Appearance.FillRectangle(e.Cache, e.Bounds);
                e.Handled = true;
            }
        }

        private void CE_DetailNhapKho_CheckedChanged(object sender, EventArgs e)
        {
            if (!CE_DetailNhapKho.Checked)
            {
                Fcn_LoadDataNhapKho_Tong();
            }
            else
            {
                tL_NhapKho.Columns["Nguon"].Visible = true;
                tL_NhapKho.Columns["TrangThai"].Visible = true;
                tL_NhapKho.Columns["ThucNhap"].Visible = true;
                DataTable dtCT, dtHM;
                DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
                Fcn_LoadDataNhapKho(dtCT, dtHM);
            }
        }
        //private void tL_NhapKho_ShowingEditor(object sender, CancelEventArgs e)
        //{
        //    //var treeList = sender as DevExpress.XtraTreeList.TreeList;
        //    //treeList.ExpandAll();
        //    //var activeEditor = treeList.ActiveEditor as DevExpress.XtraEditors.BaseEdit;
        //    //activeEditor.KeyDown += ActiveEditor_KeyDown;
        //}
        //private void ActiveEditor_KeyDown(object sender, KeyEventArgs e)
        //{
        //    var activeEditor = sender as DevExpress.XtraEditors.BaseEdit;
        //    var popupBaseEdit = activeEditor as DevExpress.XtraEditors.PopupBaseEdit;
        //    if (popupBaseEdit != null && popupBaseEdit.IsPopupOpen)
        //        return;

        //    if (e.KeyCode == Keys.Enter)
        //    {
        //        //e.SuppressKeyPress = true;               
        //        var treeList = activeEditor.Parent as DevExpress.XtraTreeList.TreeList;
        //        treeList.CloseEditor();
        //        if (CheckYourConditionHere(treeList))
        //            treeList.FocusedNode = treeList.FocusedNode.NextNode;
        //        //FocusNextColumn(treeList);
        //    }
        //}
        //bool CheckYourConditionHere(DevExpress.XtraTreeList.TreeList treeList)
        //{
        //    return true;
        //}

        //private void tL_NhapKho_KeyDown(object sender, KeyEventArgs e)
        //{
        //    var treeList = sender as DevExpress.XtraTreeList.TreeList;
        //    if (e.KeyCode == Keys.Enter)
        //    {

        //        treeList.CloseEditor();
        //        e.SuppressKeyPress = true;
        //        treeList.FocusedNode = treeList.FocusedNode.NextNode;
        //        //FocusNextColumn(treeList);
        //    }
        //}

        private void tL_NhapKho_KeyUp(object sender, KeyEventArgs e)
        {
            var treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (e.KeyCode == Keys.Enter)
            {
                treeList.CloseEditor();
                e.SuppressKeyPress = true;
                treeList.FocusedNode = treeList.FocusedNode.NextNode;
            }
        }
        private void tL_YeuCauVatTu_KeyUp(object sender, KeyEventArgs e)
        {
            var treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (e.KeyCode == Keys.Enter)
            {
                treeList.CloseEditor();
                e.SuppressKeyPress = true;
                if (treeList.FocusedNode is null)
                    return;
                treeList.FocusedNode = treeList.FocusedNode.NextNode;
            }
            else if (e.KeyCode == Keys.Delete)
            {
                var node = tL_YeuCauVatTu.Selection;
                List<TreeListNode> List_Node = new List<TreeListNode>();
                foreach (TreeListNode row in node)
                {
                    VatLieu vl = tL_YeuCauVatTu.GetRow(row.Id) as VatLieu;
                    if (vl.TrangThai <= 1)
                    {
                        //tL_YeuCauVatTu.DeleteNode(row);
                        List_Node.Add(row);
                        //tL_YeuCauVatTu.Refresh();
                        MessageShower.ShowInformation($"Xóa thành công {vl.TenVatTu}", "Cảnh báo!");
                    }
                    else
                    {
                        //tL_YeuCauVatTu.Nodes.re
                        MessageShower.ShowInformation($"Không được xóa {vl.TenVatTu}", "Cảnh báo!");
                    }
                }
                List_Node.ForEach(x => tL_YeuCauVatTu.DeleteNode(x));
                //tL_YeuCauVatTu.LockReloadNodes();
                //int[] node = tL_YeuCauVatTu.Selection.AsEnumerable().Select(x => x.Id).ToArray();
                //foreach (TreeListNode row in node)
                //{
                //    VatLieu vl = tL_YeuCauVatTu.GetRow(row.Id) as VatLieu;
                //    if (vl.TrangThai <= 1)
                //    {
                //        List_Node.Add(row.Id);
                //        tL_YeuCauVatTu.DeleteNode(row);
                //        //tL_YeuCauVatTu.Refresh();
                //        MessageShower.ShowInformation($"Xóa thành công {vl.TenVatTu}", "Cảnh báo!", MessageBoxButtons.OK);
                //    }
                //    else
                //    {
                //        //tL_YeuCauVatTu.Nodes.re
                //        MessageShower.ShowInformation($"Không được xóa {vl.TenVatTu}", "Cảnh báo!", MessageBoxButtons.OK);
                //    }
                //}
                //List_Node.ForEach(x => tL_YeuCauVatTu.Nodes.RemoveAt(x));
                //tL_YeuCauVatTu.Refresh();
                //tL_YeuCauVatTu.UnlockReloadNodes();
                //tL_YeuCauVatTu.SetRowCellValue(row, tL_YeuCauVatTu.Columns["Chon"], true);
                //tL_YeuCauVatTu.Refresh();
                //if (VL.TrangThai <= 1)
                //{

                //}
            }
        }

        private void form_ThuChiTamUng_DeXuat_Leave(object sender, EventArgs e)
        {
            //form_ThuChiTamUng_DeXuat.Fcn_UpdateDB();
        }

        private void tL_NhapKho_PopupMenuShowing(object sender, DevExpress.XtraTreeList.PopupMenuShowingEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList tL = sender as DevExpress.XtraTreeList.TreeList;
            DevExpress.XtraTreeList.TreeListHitInfo hitInfo = tL.CalcHitInfo(e.Point);
            //if (hitInfo.HitInfoType == DevExpress.XtraTreeList.HitInfoType.Cell && radio_DXVL_NhapThuCong.Checked)
            //{
            //    DXMenuItem menuItem = new DXMenuItem("Lưu thành vật liệu người dùng", this.fcn_Handle_Popup_QLVT_LuuDinhMucNguoiDung_Test);
            //    menuItem.Tag = hitInfo.Column;
            //    e.Menu.Items.Add(menuItem);
            //}
            if (hitInfo.HitInfoType == DevExpress.XtraTreeList.HitInfoType.Cell)
            {
                DXMenuItem menuChon = new DXMenuItem("Chọn Vật Liệu", this.fcn_Handle_Popup_QLVT_ChonVatLieuNK);
                menuChon.Tag = hitInfo.Column;
                e.Menu.Items.Add(menuChon);
                DXMenuItem menuThuChi = new DXMenuItem("Lấy khối lượng đề xuất sang nhập kho", this.fcn_Handle_Popup_QLVT_ChuyenKLNhap);
                menuThuChi.Tag = hitInfo.Column;
                e.Menu.Items.Add(menuThuChi);
            }
        }
        private void fcn_Handle_Popup_QLVT_ChuyenKLNhap(object sender, EventArgs e)
        {
            List<NhapVatLieu> NK = tL_NhapKho.DataSource as List<NhapVatLieu>;
            if (NK == null)
                return;
            List<NhapVatLieu> NKCondition = NK.Where(x => x.Chon && x.MaVatTu != "HM" && x.MaVatTu != "CTR").ToList();
            foreach (NhapVatLieu item in NKCondition)
            {
                if (item.DaDuyetDeXuat <= item.LuyKeNhapTheoDot)
                    continue;
                item.ThucNhap = item.DaDuyetDeXuat - item.LuyKeNhapTheoDot;
                item.LuyKeNhapTheoDot = item.DaDuyetDeXuat;
            }
            tL_NhapKho.RefreshDataSource();
            tL_NhapKho.Refresh();

        }
        //private void fcn_Handle_Popup_QLVT_ChuyenThuChiNK(object sender, EventArgs e)
        //{
        //    var node = tL_NhapKho.Selection;
        //    BindingList<DeXuat> DeXuatVL = new BindingList<DeXuat>();
        //    foreach (TreeListNode row in node)
        //    {
        //        string CodeHm = (string)tL_NhapKho.GetRowCellValue(row.ParentNode, "ID");
        //        string code = Guid.NewGuid().ToString();
        //        DeXuatVL.Add(new DeXuat
        //        {
        //            Code = code,
        //            CodeQLVCNVT = row["ID"].ToString(),
        //            GiaTriDotNay = int.Parse(row["ThanhTien"].ToString()),
        //            NoiDungUng = row["TenVatTu"].ToString(),
        //            CongTrinh = CodeHm,
        //            File = "Chi tiết"
        //        });
        //        string dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} (\"CodeDuAn\",\"Code\",\"CodeQLVCNVT\",\"GiaTriDotNay\",\"NoiDungUng\") VALUES ('{slke_ThongTinDuAn.EditValue}','{code}','{row["ID"]}','{row["ThanhTien"]}','{row["TenVatTu"]}')";
        //        DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //    }
        //    Fcn_AddData(DeXuatVL);
        //    //form_ThuChiTamUng_DeXuat.Fcn_AddData(DeXuatVL);
        //    //tL_YeuCauVatTu.SetRowCellValue(row, tL_YeuCauVatTu.Columns["Chon"], true);
        //    tL_NhapKho.Refresh();
        //}
        private void fcn_Handle_Popup_QLVT_ChonVatLieuNK(object sender, EventArgs e)
        {
            var node = tL_NhapKho.Selection;
            foreach (TreeListNode row in node)
                row.CheckState = CheckState.Checked;
            tL_NhapKho.Refresh();
        }

        private void tL_XuatKho_PopupMenuShowing(object sender, DevExpress.XtraTreeList.PopupMenuShowingEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList tL = sender as DevExpress.XtraTreeList.TreeList;
            DevExpress.XtraTreeList.TreeListHitInfo hitInfo = tL.CalcHitInfo(e.Point);
            if (hitInfo.HitInfoType == DevExpress.XtraTreeList.HitInfoType.Cell)
            {
                DXMenuItem menuChon = new DXMenuItem("Chọn Vật Liệu", this.fcn_Handle_Popup_QLVT_ChonVatLieuXK);
                menuChon.Tag = hitInfo.Column;
                e.Menu.Items.Add(menuChon);
                DXMenuItem menuThuChi = new DXMenuItem("Chuyển khối lượng nhập sang xuất", this.fcn_Handle_Popup_QLVT_ChuyenKLNhapSangXuat);
                menuThuChi.Tag = hitInfo.Column;
                e.Menu.Items.Add(menuThuChi);
            }
        }
        private void fcn_Handle_Popup_QLVT_ChuyenKLNhapSangXuat(object sender, EventArgs e)
        {
            List<XuatVatLieu> XVL = tL_XuatKho.DataSource as List<XuatVatLieu>;
            if (XVL == null)
                return;
            List<XuatVatLieu> XVLCondition = XVL.Where(x => x.Chon && x.MaVatTu != "HM" && x.MaVatTu != "CTR").ToList();
            foreach (XuatVatLieu item in XVLCondition)
            {
                if (item.LuyKeNhapTheoDot <= item.LuyKeXuatTheoDot)
                    continue;
                item.ThucXuat = item.LuyKeNhapTheoDot - item.LuyKeXuatTheoDot;
                item.LuyKeXuatTheoDot = item.LuyKeNhapTheoDot;
            }
            tL_XuatKho.RefreshDataSource();
            tL_XuatKho.Refresh();
        }
        //private void fcn_Handle_Popup_QLVT_ChuyenThuChiXK(object sender, EventArgs e)
        //{
        //    var node = tL_XuatKho.Selection;
        //    BindingList<DeXuat> DeXuatVL = new BindingList<DeXuat>();
        //    foreach (TreeListNode row in node)
        //    {
        //        string CodeHm = (string)tL_XuatKho.GetRowCellValue(row.ParentNode, "ID");
        //        string code = Guid.NewGuid().ToString();
        //        DeXuatVL.Add(new DeXuat
        //        {
        //            Code = code,
        //            CodeQLVCYCVT = row["ID"].ToString(),
        //            GiaTriDotNay = int.Parse(row["ThanhTien"].ToString()),
        //            NoiDungUng = row["TenVatTu"].ToString(),
        //            CongTrinh = CodeHm,
        //            File = "Chi tiết"
        //        });
        //        string dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} (\"CodeDuAn\",\"Code\",\"CodeQLVCXVT\",\"GiaTriDotNay\",\"NoiDungUng\") VALUES ('{slke_ThongTinDuAn.EditValue}','{code}','{row["ID"]}','{row["ThanhTien"]}','{row["TenVatTu"]}')";
        //        DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //    }
        //    //form_ThuChiTamUng_DeXuat.Fcn_AddData(DeXuatVL);
        //    Fcn_AddData(DeXuatVL);
        //    tL_YeuCauVatTu.Refresh();
        //}
        private void fcn_Handle_Popup_QLVT_ChonVatLieuXK(object sender, EventArgs e)
        {
            var node = tL_XuatKho.Selection;
            foreach (TreeListNode row in node)
                row.CheckState = CheckState.Checked;
            tL_XuatKho.Refresh();
        }
        private void bt_CapNhatVatTuMacDinh_Click(object sender, EventArgs e)
        {
            if (MessageShower.ShowYesNoQuestion("Số liệu đã nhập cho vật liệu sẽ được tính lại?", "Cảnh báo") == DialogResult.No)
                return;

            WaitFormHelper.ShowWaitForm("Đang cập nhật khối lượng vật tư mặc định theo công tác");

            string dbString = $"SELECT {TDKH.TBL_ChiTietCongTacTheoKy}.*, {TDKH.TBL_DanhMucCongTac}.CodeHangMuc " +
                $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                $"INNER JOIN {TDKH.TBL_DanhMucCongTac} " +
                $"ON {TDKH.TBL_DanhMucCongTac}.Code = {TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac " +
                $"INNER JOIN {MyConstant.TBL_THONGTINHANGMUC} " +
                $"ON {MyConstant.TBL_THONGTINHANGMUC}.Code = {TDKH.TBL_DanhMucCongTac}.CodeHangMuc " +
                $"INNER JOIN {MyConstant.TBL_THONGTINCONGTRINH} " +
                $"ON {MyConstant.TBL_THONGTINCONGTRINH}.Code = {MyConstant.TBL_THONGTINHANGMUC}.CodeCongTrinh " +
                $"WHERE {MyConstant.TBL_THONGTINCONGTRINH}.CodeDuAn = '{slke_ThongTinDuAn.EditValue}'";

            DataTable dtCongTac = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string stringQueryCodeCongTac = string.Join(", ", dtCongTac.AsEnumerable().Select(x => $"'{x["Code"]}'").ToArray());


            dbString = $"SELECT {TDKH.Tbl_HaoPhiVatTu_HangNgay}.* FROM {TDKH.Tbl_HaoPhiVatTu_HangNgay} " +
                $"INNER JOIN {TDKH.Tbl_HaoPhiVatTu} " +
                $"ON {TDKH.Tbl_HaoPhiVatTu}.Code = {TDKH.Tbl_HaoPhiVatTu_HangNgay}.CodeHaoPhiVatTu " +
                $"WHERE {TDKH.Tbl_HaoPhiVatTu}.CodeCongTac IN ({stringQueryCodeCongTac})";
            DataTable dtKLHaoPhiHangNgay = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            string stringQueryAllCodeHaoPhiHangNgay = string.Join(", ", dtKLHaoPhiHangNgay.AsEnumerable().Select(x => $"'{x["Code"]}'").ToArray());

            dbString = $"DELETE FROM {TDKH.Tbl_HaoPhiVatTu_HangNgay} WHERE Code IN ({stringQueryAllCodeHaoPhiHangNgay})";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            string[] arrHangMuc = dtCongTac.AsEnumerable().Select(x => (string)x["CodeHangMuc"]).Distinct().ToArray();

            string condition = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();

            dbString = $"SELECT Code FROM {TDKH.TBL_KHVT_VatTu} cttk WHERE CodeHangMuc IN ({MyFunction.fcn_Array2listQueryCondition(arrHangMuc)}) AND {condition}";


            string[] arrCodeVatTu = DataProvider.InstanceTHDA.ExecuteQuery(dbString).AsEnumerable().Select(x => (string)x["Code"]).ToArray();

            if (arrCodeVatTu.Any())
            {
                dbString = $"DELETE FROM {TDKH.TBL_KHVT_KhoiLuongHangNgay} WHERE CodeVatTu IN ({MyFunction.fcn_Array2listQueryCondition(arrCodeVatTu)})";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }

            List<string> lsCodeHaoPhi = new List<string>();

            dtKLHaoPhiHangNgay.Clear();

            foreach (DataRow drCongTac in dtCongTac.Rows)
            {
                DataTable dtHaoPhi = DinhMucHelper.fcn_GetTblHaoPhiVatTuHienTai(TypeKLHN.CongTac, new string[] { (string)drCongTac["Code"] });

                dbString = $"SELECT * FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE CodeCongTacTheoGiaiDoan = '{drCongTac["Code"]}'";
                DataTable dtHangNgayCongTac = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                foreach (DataRow drHaoPhi in dtHaoPhi.Rows)
                {
                    double HeSoND = double.Parse(drHaoPhi["HeSoNguoiDung"].ToString());
                    double DinhMucND = double.Parse(drHaoPhi["DinhMucNguoiDung"].ToString());

                    drHaoPhi[TDKH.COL_NgayBatDau] = drCongTac[TDKH.COL_NgayBatDau];
                    drHaoPhi[TDKH.COL_NgayBatDauThiCong] = drCongTac[TDKH.COL_NgayBatDauThiCong];
                    drHaoPhi[TDKH.COL_NgayKetThuc] = drCongTac[TDKH.COL_NgayKetThuc];
                    drHaoPhi[TDKH.COL_NgayKetThucThiCong] = drCongTac[TDKH.COL_NgayKetThucThiCong];

                    foreach (DataRow drNgay in dtHangNgayCongTac.Rows)
                    {
                        if (drNgay["KhoiLuongKeHoach"] == DBNull.Value && drNgay["KhoiLuongThiCong"] == DBNull.Value)
                        {
                            continue;
                        }

                        DataRow newRow = dtKLHaoPhiHangNgay.NewRow();
                        dtKLHaoPhiHangNgay.Rows.Add(newRow);

                        newRow["Code"] = Guid.NewGuid().ToString();
                        newRow["CodeHaoPhiVatTu"] = (string)drHaoPhi["Code"];
                        newRow["Ngay"] = (string)drNgay["Ngay"];

                        if (drNgay["KhoiLuongKeHoach"] != DBNull.Value)
                            newRow["KhoiLuongKeHoach"] = Math.Round(double.Parse(drNgay["KhoiLuongKeHoach"].ToString()) * HeSoND * DinhMucND, 4);

                        double? KLTC = null;
                        if (drNgay["KhoiLuongThiCong"] != DBNull.Value)
                            newRow["KhoiLuongThiCong"] = Math.Round(double.Parse(drNgay["KhoiLuongThiCong"].ToString()) * HeSoND * DinhMucND, 4);
                    }
                }
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtHaoPhi, TDKH.Tbl_HaoPhiVatTu);
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtKLHaoPhiHangNgay, TDKH.Tbl_HaoPhiVatTu_HangNgay);

            WaitFormHelper.CloseWaitForm();
            fcn_LoadCongTacDoBoc();
            MessageShower.ShowInformation("Đã cập nhật khối lượng vật liệu mặc định");
        }

        /*private void bt_ChonNgayNhapThiCong_Click(object sender, EventArgs e)
        {
            XtraInputBoxArgs args = new XtraInputBoxArgs();
            args.Caption = "Cài đặt ngày yêu cầu vật tư";
            args.Prompt = "Ngày Yêu Cầu";
            args.DefaultButtonIndex = 0;
            args.Showing += Args_Showing_Begin;
            // initialize a DateEdit editor with custom settings
            DateEdit editor = new DateEdit();
            editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
            editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
            args.Editor = editor;
            // a default DateEdit value
            args.DefaultResponse = DateTime.Now.Date;
            // display an Input Box with the custom editor
            var ngay = XtraInputBox.Show(args).ToString();

            if (ValidateHelper.IsDateTime(ngay))
            {
                string dateString = DateTime.Parse(ngay).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                //IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
                Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;

                int type = Array.IndexOf(TDKH.sheetsName, ws.Name);
                if (type < 2)
                    return;

                var dicDate = DinhMucHelper.CheckDicDateVatLieu(
                    ws.Workbook.DefinedNames.GetDefinedName(TDKH.rangesNgayName[type]),
                    dateString, ws.Range[TDKH.rangesNameData[type]]);

                int indDate = dicDate[dateString];

                ws.SelectedCell = ws.Columns[indDate + 2];
                ws.ScrollTo(ws.SelectedCell);
            }
        }*/

        //private void 
        private void tl_CVHN_BaoCao_CellValueChanged(object sender, DevExpress.XtraTreeList.CellValueChangedEventArgs e)
        {
            KLTTHangNgay crRow = tl_CVHN_BaoCao.GetDataRecordByNode(e.Node) as KLTTHangNgay;
            string date = dtp_KLHangNgay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);

            switch (e.Column.FieldName)
            {
                case "KhoiLuongThiCong":
                case "GhiChu":
                case "LyTrinhCaoDo":
                    string dbString = $"INSERT OR REPLACE INTO {TDKH.TBL_KhoiLuongCongViecHangNgay} " +
         $"(Code, CodeCongViecCha, CodeCongViecCon, CodeCongTacTheoGiaiDoan, KhoiLuongThiCong, Ngay, LyTrinhCaoDo, GhiChu, NhaCungCap) " +
        $"VALUES " +
        $"(@Code, @CodeCongViecCha, @CodeCongViecCon, @CodeCongTacTheoGiaiDoan, @KhoiLuongThiCong, @Ngay, @LyTrinhCaoDo, @GhiChu, @NhaCungCap)";

                    object[] mparams =
                    {
                        crRow.CodeHangNgay,
                        (crRow.CodeCongTacTheoGiaiDoan is null) ? crRow.CodeCha : null,
                        crRow.CodeCongViecCon,
                        crRow.CodeCongTacTheoGiaiDoan,
                        crRow.KhoiLuongThiCong,
                        crRow.Ngay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE),
                        crRow.LyTrinhCaoDo,
                        crRow.GhiChu,
                        crRow.NhaCungCap,
                    };

                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: mparams);
                    DuAnHelper.UpdateStateGiaoViecByKhoiLuongThiCong(new string[] { crRow.CodeCha });
                    break;
                case "KhoiLuongKeHoach":
                    dbString = $"INSERT OR REPLACE INTO {TDKH.TBL_KhoiLuongCongViecHangNgay} " +
                             $"(Code, CodeCongViecCha, CodeCongViecCon, CodeCongTacTheoGiaiDoan,KhoiLuongKeHoachGiaoViec, KhoiLuongThiCong, Ngay, LyTrinhCaoDo, GhiChu, NhaCungCap) " +
                            $"VALUES " +
                            $"(@Code, @CodeCongViecCha, @CodeCongViecCon, @CodeCongTacTheoGiaiDoan,@KhoiLuongKeHoachGiaoViec, @KhoiLuongThiCong, @Ngay, @LyTrinhCaoDo, @GhiChu, @NhaCungCap)";

                    mparams = new object[]
                    {
                        crRow.CodeHangNgay,
                        (crRow.CodeCongTacTheoGiaiDoan is null) ? crRow.CodeCha : null,
                        crRow.CodeCongViecCon,
                        crRow.CodeCongTacTheoGiaiDoan,
                        crRow.KhoiLuongKeHoach,
                        crRow.KhoiLuongThiCong,
                        crRow.Ngay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE),
                        crRow.LyTrinhCaoDo,
                        crRow.GhiChu,
                        crRow.NhaCungCap,
                    };

                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: mparams);
                    break;
                default:
                    break;
            }


            if (e.Node.Level == (int)LevelCongViec.CongViecCha)
            {
                if (e.Column.FieldName == nameof(KLTTHangNgay.DonGiaThiCong))
                {
                    if (crRow.CodeCongTacTheoGiaiDoan is null)
                        MyFunction.CapNhatDonGiaThiCong(TypeKLHN.GiaoViecCha, crRow.CodeCha, date, long.Parse(e.Value.ToString()));
                    else
                        MyFunction.CapNhatDonGiaThiCong(TypeKLHN.CongTac, crRow.CodeCongTacTheoGiaiDoan, date, long.Parse(e.Value.ToString()));

                }
                else if (e.Column.FieldName == nameof(KLTTHangNgay.KhoiLuongThiCong))
                    crRow.IsSumThiCong = false;

                if (e.Column.FieldName.Contains("KhoiLuong"))
                {
                    UpdateChaBaoCaoGiaoViecChung(crRow);
                    if (crRow.CodeCongTacTheoGiaiDoan.HasValue())
                        DuAnHelper.UpdateNBDKTThiCongCongTac(crRow.CodeCongTacTheoGiaiDoan);
                }
            }
            else if (e.Node.Level == (int)LevelCongViec.CongViecCon)
            {
                KLTTHangNgay crRowCha = tl_CVHN_BaoCao.GetDataRecordByNode(e.Node.ParentNode) as KLTTHangNgay;
                //KLTTHangNgay crRow = tl_CVHN_BaoCao.GetDataRecordByNode(e.Node) as KLTTHangNgay;

                if (e.Column.FieldName == nameof(KLTTHangNgay.DonGiaThiCong))
                {
                    MyFunction.CapNhatDonGiaThiCong(TypeKLHN.GiaoViecCon, crRow.CodeCha, date, long.Parse(e.Value.ToString()));
                }
                else if (e.Column.FieldName == nameof(KLTTHangNgay.KhoiLuongThiCong))
                {

                    crRowCha.KhoiLuongThiCong = e.Node.ParentNode.Nodes.Select(x => (KLTTHangNgay)tl_CVHN_BaoCao.GetDataRecordByNode(x)).Where(x => x.KhoiLuongThiCong > 0).Sum(x => x.KhoiLuongThiCong.Value);
                }
                else if (e.Column.FieldName == nameof(KLTTHangNgay.KhoiLuongKeHoach))
                {

                    crRowCha.KhoiLuongThiCong = e.Node.ParentNode.Nodes.Select(x => (KLTTHangNgay)tl_CVHN_BaoCao.GetDataRecordByNode(x)).Where(x => x.KhoiLuongKeHoach.HasValue).Sum(x => x.KhoiLuongKeHoach.Value);
                }

                if (e.Column.FieldName.StartsWith("KhoiLuong"))
                {
                    string dbString = $"INSERT OR REPLACE INTO {TDKH.TBL_KhoiLuongCongViecHangNgay} " +
         $"(Code, CodeCongViecCha, CodeCongViecCon, CodeCongTacTheoGiaiDoan,KhoiLuongKeHoachGiaoViec, KhoiLuongThiCong, Ngay, GhiChu, NhaCungCap) " +
        $"VALUES " +
        $"(@Code, @CodeCongViecCha, @CodeCongViecCon, @CodeCongTacTheoGiaiDoan,@KhoiLuongKeHoachGiaoViec, @KhoiLuongThiCong, @Ngay, @GhiChu, @NhaCungCap)";

                    object[] mparams =
                    {
                        crRowCha.CodeHangNgay,
                        (crRowCha.CodeCongTacTheoGiaiDoan is null) ? crRow.CodeCha : null,
                        (crRowCha.CodeCongTacTheoGiaiDoan is null) ? crRow.CodeCha : null,
                        crRowCha.CodeCongTacTheoGiaiDoan,
                        crRowCha.KhoiLuongKeHoach,
                        crRowCha.KhoiLuongThiCong,
                        crRowCha.Ngay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE),
                        crRowCha.GhiChu,
                        crRowCha.NhaCungCap,
                    };

                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: mparams);


                    if (e.Column.FieldName == "KhoiLuongThiCong")
                        DuAnHelper.UpdateStateTDKHByKhoiLuongThiCong(new string[] { crRowCha.CodeCongTacTheoGiaiDoan });

                    UpdateChaBaoCaoGiaoViecChung(crRowCha);


                }
                tl_CVHN_BaoCao.RefreshDataSource();
            }
        }

        private void UpdateChaBaoCaoGiaoViecChung(KLTTHangNgay crRow)
        {
            fcn_CVHN_LoadTongHopBaoCaoHangNgay2spSheet();
            //Tải lại báo cáo chung
            //var crDate = crRow.Ngay.Value.Date;
            //if (!ce_UseRangeDate.Checked || (crDate >= dtp_CVHN_Start.Value.Date && crDate <= dtp_CVHN_End.Value.Date))
            //{
            //    var bccs = CVHN_BaoCaoChung.DataSource as List<KLTTHangNgay>;
            //    var rowInBc = bccs.SingleOrDefault(x => x.CodeCongViecCha == crRow.CodeCongViecCha && x.Ngay == crRow.Ngay);

            //    if (rowInBc is null)
            //    {
            //        rowInBc = (KLTTHangNgay)crRow.Clone();
            //        rowInBc.ParentCode = rowInBc.CodeCongViecCha;
            //        bccs.Add(rowInBc);
            //    }
            //    rowInBc.KhoiLuongKeHoach = crRow.KhoiLuongKeHoach;
            //    rowInBc.KhoiLuongThiCong = crRow.KhoiLuongThiCong;

            //    var rowCha = bccs.SingleOrDefault(x => x.Code == crRow.CodeCongViecCha);
            //    rowCha.KhoiLuongThiCong = bccs.Where(x => x.ParentCode == crRow.CodeCongViecCha).Sum(x => x.KhoiLuongThiCong);
            //    rowCha.KhoiLuongKeHoach = bccs.Where(x => x.ParentCode == crRow.CodeCongViecCha).Sum(x => x.KhoiLuongKeHoach);
            //    CVHN_BaoCaoChung.RefreshDataSource();
            //}
        }
        private void tl_CVHN_BaoCao_ShowingEditor(object sender, CancelEventArgs e)
        {
            KLTTHangNgay row = tl_CVHN_BaoCao.GetFocusedRow() as KLTTHangNgay;
            string fieldName = tl_CVHN_BaoCao.FocusedColumn.FieldName;
            string[] fieldBothChaCon =
            {
                TDKH.COL_LyTrinhCaoDo,
                TDKH.COL_GhiChu
            };

            string[] colskeHoach =
            {
                "KhoiLuongKeHoach",
                "DonGiaKeHoach",
                "ThanhTienKeHoach"
            };
            if (colskeHoach.Contains(tl_CVHN_BaoCao.FocusedColumn.FieldName) && !row.EnableKeHoach)
            {
                MessageShower.ShowError("Ô nằm ngoài vùng kế hoạch. Không thể chỉnh sửa!");
                e.Cancel = true;
            }

            string[] fieldNamesAfterKLTC =
{
                nameof(KLTTHangNgay.CodesNCCString),
                TDKH.COL_GhiChu,
                TDKH.COL_LyTrinhCaoDo,
            };

            if (fieldNamesAfterKLTC.Contains(fieldName) && row.KhoiLuongThiCong is null)
            {
                MessageShower.ShowWarning("Vui lòng nhập khối lượng thi công trước khi chọn nhà cung cấp");
                e.Cancel = true;
                return;
            }

            var crNode = tl_CVHN_BaoCao.FocusedNode;

            if (crNode.Level == 1 && crNode.HasChildren && !fieldBothChaCon.Contains(fieldName))
            {
                MessageShower.ShowWarning("Công tác đã được chia nhỏ. Vui lòng nhập khối lượng cho các công tác con. Khối lượng sẽ được tổng tự động lên công tác cha");
                e.Cancel = true;
            }

            if (row.Ngay < DateTime.Now.AddDays(-2) && row.TrangThai != EnumTrangThai.DANGCHINHSUA.GetEnumDisplayName())
            {
                MessageShower.ShowInformation("Không thể sửa khối lượng thi công. Vui lòng liên hệ Admin chuyển TRẠNG THÁI về \"Đang chỉnh sửa\" để tiếp tục nhập khối lượng");
                e.Cancel = true;
                return;
            }

        }

        private void tl_CVHN_BaoCao_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {
            DateTime DateSelected = dtp_KLHangNgay.Value.Date;

            string[] colskeHoach =
            {
                "KhoiLuongKeHoach",
                "DonGiaKeHoach",
                "ThanhTienKeHoach"
            };

            if (e.Node.Level == (int)LevelCongViec.CongViecCon)
            {
                KLTTHangNgay rowCha = tl_CVHN_BaoCao.GetDataRecordByNode(e.Node.ParentNode) as KLTTHangNgay;
                KLTTHangNgay row = tl_CVHN_BaoCao.GetDataRecordByNode(e.Node) as KLTTHangNgay;
                if (rowCha.IsSumThiCong.HasValue && !rowCha.IsSumThiCong.Value && e.Column.FieldName != "GhiChu")
                {
                    e.Appearance.ForeColor = MyColor.NotUse;
                }

                if (colskeHoach.Contains(e.Column.FieldName) && !row.EnableKeHoach)
                    e.Appearance.BackColor = MyConstant.color_Disable;
                //else
                //    e.Appearance.BackColor = MyConstant.color_Nomal;

            }
            else if (e.Node.Level == (int)LevelCongViec.CongViecCha)
            {
                KLTTHangNgay row = tl_CVHN_BaoCao.GetDataRecordByNode(e.Node) as KLTTHangNgay;

                if (colskeHoach.Contains(e.Column.FieldName) && !row.EnableKeHoach)
                    e.Appearance.BackColor = MyConstant.color_Disable;
                //else
                //    e.Appearance.BackColor = MyConstant.color_Nomal;
            }
        }

        private void tl_TongHopBaoCao_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {

        }

        private void tl_CVHN_BaoCao_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = MyConstant.color_Row_HangMuc;
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);

            }
            else
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Italic);
            }
        }

        private void tl_TongHopBaoCao_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Italic);

            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            spsheet_TD_KH_LapKeHoach.SaveDocumentAs();
            //fcn_LoadCongTacDoBoc();

        }

        private void rg_LoaiTienDo_SelectedIndexChanged(object sender, EventArgs e)
        {
            fcn_TDKH_loadTienDo();
        }

        private void tl_CongViecDangThucHien_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
            }
            //else if (e.Node.Level == 1)
            //{
            //    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Italic);

            //}
        }
        private void xtraTab_KiemSoat_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = xtraTab_KiemSoat;
            var page = xtraTab_KiemSoat.SelectedTabPage;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;

                return;
            }

            xtraTabControl_TabMain_EnabledChanged(null, null);
            if (page == xtraTab_KiemSoatChung)
            {
                WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
                xtraTab_KiemSoatChung.Controls.Clear();
                Ctrl_KiemSoatChung ctrl = new Ctrl_KiemSoatChung();
                ctrl.Dock = DockStyle.Fill;
                xtraTab_KiemSoatChung.AddControl(ctrl);
                WaitFormHelper.CloseWaitForm();
                ctrl.ctrl_KiemSoatTienDoDuAn_Sb_XemChiTiet += Ctrl_KiemSoatTienDoDuAn_Sb_XemChiTiet_Click_KiemSoatChung;


            }
            else if (page == xtraTab_VLMTCNC)
            {

            }
            else if (page == xtraTab_BaoCaoDongTien)
            {
                //WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
                ctrl_BaoCaoDongTien.Type = TypeBaoCao.DongTien;
                //WaitFormHelper.CloseWaitForm();
            }
            else if (page == xtraTab_KhoiLuong_TienDo)
            {
                //WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
                ctrl_BaoCaoKhoiLuong.Type = TypeBaoCao.KhoiLuong;
                //WaitFormHelper.CloseWaitForm();
            }
            else if (page == xtraTab_BaoCaoLoiNhuan)
            {
                //WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
                //Fcn_UpdateBieuDoDuAn();
                //WaitFormHelper.CloseWaitForm();

            }
            else if (page == xtraTab_BaoCaoHopDong)
            {
                //WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
                //ctrl_BaoCaoDongTienHopDong.LoadDongTien();
                //WaitFormHelper.CloseWaitForm();

            }
            else if (page == xtraTab_KiemSoatTienDo)
            {
                //DialogResult rs=MessageShower.ShowYesNoQuestion("Bạn có muốn cập nhập dữ liệu mới nhất không?");
                //if (rs == DialogResult.No)
                //    return;
                kiemSoatTienDo.Fcn_UpdateKiemSoat();
            }
            else if (page == xtraTab_PATC)
            {
                if (pn_PATC.Controls.Count == 0)
                {
                    XtraForm_PhuongAnTaiChinh uc = new XtraForm_PhuongAnTaiChinh();
                    uc.SetRibbonMinimized(true);
                    uc.Dock = DockStyle.Fill;
                    pn_PATC.AddControl(uc);
                    if (SharedControls.slke_ThongTinDuAn.EditValue != null)
                        uc.LoadData();
                    SharedControls.uc_PATC = uc;
                }
            }
        }
        private void nud_ToanDuAn_ValueChanged(object sender, EventArgs e)
        {
            long newVal = (long)nud_ToanDuAn.Value;

            if (sender != null)
            {
                string dkString = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();
                string dbString = $"UPDATE {TDKH.TBL_KinhPhiPhanBo} cttk SET KinhPhiPhanBoToanDuAn = '{newVal}' WHERE {dkString}";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }

            IWorkbook wb = SharedControls.spsheet_TD_KH_LapKeHoach.Document;
            wb.Calculate();
            wb.Range[TDKH.RANGE_KinhPhiPhanBoToanDuAn].SetValue(newVal);
            //Cập nhật khối lượng vào tỉ trọng tiền vào db.
            Worksheet ws = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            int[] inds = ws.Columns[dic[TDKH.COL_TypeRow]].Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions)
                .Select(x => x.RowIndex).ToArray();

            //List<string> queries = new List<string>();
            //foreach (int ind in inds)
            //{
            //    Row crRow = ws.Rows[ind];
            //    string code = crRow[dic[TDKH.COL_Code]].Value.ToString();
            //    long GiaTri = (long)crRow[dic[TDKH.COL_GiaTri]].Value.NumericValue;
            //    long KinhPhi = (long)crRow[dic[TDKH.COL_KinhPhiDuKien]].Value.NumericValue;
            //    queries.Add($"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET KinhPhiDuKien = '{KinhPhi}', KinhPhiTheoTienDo = '{GiaTri}' WHERE Code = '{code}'");
            //}
            //    DataProvider.InstanceTHDA.ExecuteNonQuery(string.Join(";\r\n", queries));
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            string query = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE {DVTH.ColCodeFK}='{DVTH.Code}'";
            DataTable Dt = DataProvider.InstanceTHDA.ExecuteQuery(query);
            DataTable DTKLHN = Fcn_TestKinhPhi(Dt, DVTH, "KinhPhiPhanBoToanDuAn");
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(DTKLHN, TDKH.TBL_ChiTietCongTacTheoKy);
        }

        //private void nud_VatTu_ValueChanged(object sender, EventArgs e)
        //{
        //    long newVal = (long)(sender as NumericUpDown).Value;
        //    string dkString = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();
        //    string dbString = $"UPDATE {TDKH.TBL_KinhPhiPhanBo} SET KinhPhiPhanBoVatTu = '{newVal}' WHERE {dkString}";
        //    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

        //    IWorkbook wb = SharedControls.spsheet_TD_KH_LapKeHoach.Document;
        //    wb.Range[TDKH.RANGE_KinhPhiPhanBoVatLieu].SetValue(newVal);
        //    wb.Range[TDKH.RANGE_KinhPhiPhanBoNhanCong].SetValue(newVal);
        //    wb.Range[TDKH.RANGE_KinhPhiPhanBoMay].SetValue(newVal);
        //    DinhMucHelper.SaveAllVatTu();

        //}



        private void nud_VatLieu_ValueChanged(object sender, EventArgs e)
        {
            long newVal = (long)(sender as NumericUpDown).Value;
            string dkString = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();
            string dbString = $"UPDATE {TDKH.TBL_KinhPhiPhanBo} cttk SET KinhPhiPhanBoVatLieu = '{newVal}' WHERE {dkString}";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            IWorkbook wb = SharedControls.spsheet_TD_KH_LapKeHoach.Document;
            wb.Range[TDKH.RANGE_KinhPhiPhanBoVatLieu].SetValue(nud_VatLieu.Value);
            wb.Range[TDKH.RANGE_KinhPhiPhanBoNhanCong].SetValue(nud_NhanCong.Value);
            wb.Range[TDKH.RANGE_KinhPhiPhanBoMay].SetValue(nud_MayThiCong.Value);
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            string query = $"SELECT * FROM {TDKH.TBL_KHVT_VatTu} WHERE {DVTH.ColCodeFK}='{DVTH.Code}'";
            DataTable Dt = DataProvider.InstanceTHDA.ExecuteQuery(query);
            DataTable DTKLHN = Fcn_TestKinhPhi(Dt, DVTH, "KinhPhiPhanBoVatLieu");
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(DTKLHN, TDKH.TBL_KHVT_VatTu);
        }

        private void nud_NhanCong_ValueChanged(object sender, EventArgs e)
        {
            long newVal = (long)(sender as NumericUpDown).Value;
            string dkString = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();
            string dbString = $"UPDATE {TDKH.TBL_KinhPhiPhanBo} cttk SET KinhPhiPhanBoNhanCong = '{newVal}' WHERE {dkString}";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            IWorkbook wb = SharedControls.spsheet_TD_KH_LapKeHoach.Document;
            wb.Range[TDKH.RANGE_KinhPhiPhanBoVatLieu].SetValue(nud_VatLieu.Value);
            wb.Range[TDKH.RANGE_KinhPhiPhanBoNhanCong].SetValue(nud_NhanCong.Value);
            wb.Range[TDKH.RANGE_KinhPhiPhanBoMay].SetValue(nud_MayThiCong.Value);
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            string query = $"SELECT * FROM {TDKH.TBL_KHVT_VatTu} WHERE {DVTH.ColCodeFK}='{DVTH.Code}'";
            DataTable Dt = DataProvider.InstanceTHDA.ExecuteQuery(query);
            DataTable DTKLHN = Fcn_TestKinhPhi(Dt, DVTH, "KinhPhiPhanBoNhanCong");
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(DTKLHN, TDKH.TBL_KHVT_VatTu);
        }

        private void nud_MayThiCong_ValueChanged(object sender, EventArgs e)
        {
            long newVal = (long)(sender as NumericUpDown).Value;
            string dkString = TongHopHelper.GetConditionNhaThauToDoiDoBocByGiaiDoan();
            string dbString = $"UPDATE {TDKH.TBL_KinhPhiPhanBo} cttk SET KinhPhiPhanBoMay = '{newVal}' WHERE {dkString}";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

            IWorkbook wb = SharedControls.spsheet_TD_KH_LapKeHoach.Document;
            wb.Range[TDKH.RANGE_KinhPhiPhanBoVatLieu].SetValue(nud_VatLieu.Value);
            wb.Range[TDKH.RANGE_KinhPhiPhanBoNhanCong].SetValue(nud_NhanCong.Value);
            wb.Range[TDKH.RANGE_KinhPhiPhanBoMay].SetValue(nud_MayThiCong.Value);
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            string query = $"SELECT * FROM {TDKH.TBL_KHVT_VatTu} WHERE {DVTH.ColCodeFK}='{DVTH.Code}'";
            DataTable Dt = DataProvider.InstanceTHDA.ExecuteQuery(query);
            DataTable DTKLHN = Fcn_TestKinhPhi(Dt, DVTH, "KinhPhiPhanBoMay");
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(DTKLHN, TDKH.TBL_KHVT_VatTu);
        }

        private void btn_TDKH_LayDauViecTuPhLucLamkeHoach_Click(object sender, EventArgs e)
        {
            spsheet_TD_KH_LapKeHoach.SaveDocumentAs();
        }

        private void panelControl4_Paint(object sender, PaintEventArgs e)
        {

        }

        private void spsheet_TD_KH_LapKeHoach_CellEndEdit(object sender, SpreadsheetCellValidatingEventArgs e)
        {


        }

        private void spsheet_TD_KH_LapKeHoach_Validating(object sender, CancelEventArgs e)
        {

        }

        private async void CVHN_DangThucHien_CustomSelectionChangedAsync(object sender, EventArgs e)
        {
            TreeListNode crNode = CVHN_DangThucHien.Treelist.FocusedNode;
            KLTTHangNgay data = CVHN_DangThucHien.Treelist.GetDataRecordByNode(crNode) as KLTTHangNgay;

            rtb_NoiDungTraoDoi.Text = data?.NoiDungThucHien;

            if (crNode == null)
                return;

            if (crNode.Level == 1 || crNode.Level == 2)
            {
                KLTTHangNgay kLTTHangNgay = CVHN_DangThucHien.Treelist.GetDataRecordByNode(crNode) as KLTTHangNgay;



                //string codeCongViecChar = ()
                string tblCV = (crNode.Level == 1) ? Server.Tbl_GiaoViec_CongViecCha : Server.Tbl_GiaoViec_CongViecCon;
                string tblFile = (crNode.Level == 1) ? Server.Tbl_GiaoViec_FileDinhKem : Server.Tbl_GiaoViec_CongViecCon_FileDinhKem;
                string codeCV = (crNode.Level == 1) ? kLTTHangNgay.CodeCha : kLTTHangNgay.Code;
                string m_path = $@"{BaseFrom.m_tempPath}\{BaseFrom.m_crTempDATH}\Resource\Files\{tblFile}\{codeCV}";
                if (Directory.Exists(m_path))
                    ctrl_XemFileNhieuCuaSo1.setFiles(Directory.GetFiles(m_path), tblFile);
                else
                    ctrl_XemFileNhieuCuaSo1.setFiles(null);


                cbb_State.Text = kLTTHangNgay.TrangThai;

                //ConnextService.groupIndex
                //ManageGroupMenberViewModel gr = new ManageGroupMenberViewModel()
                //{
                //    GroupChatName = kLTTHangNgay.TenCongTac
                //};


                ConnextService.groupIndex = new GeneralGroupChatViewModel()
                {
                    ParentId = codeCV,
                    Name = kLTTHangNgay.TenCongTac,
                    ChatType = ChatTypeEnum.GiaoViecCha
                    //GroupChatName = kLTTHangNgay.TenCongTac

                };
                ConnextService.ManageGroups = new List<GeneralGroupChatViewModel>() { ConnextService.groupIndex };

                var ctac = await CusHttpClient.InstanceCustomer.MGetAsync<Tbl_GiaoViec_CongViecChaViewModel>($"{Server.Tbl_GiaoViec_CongViecCha}/GetById/{codeCV}");

                if (!ctac.MESSAGE_TYPECODE || ctac.Dto is null)
                {
                    XtraMessageBox.Show("Vui lòng đồng bộ công tác lên sever để khởi tạo dữ liệu cho nhóm chát trao đổi công việc");
                    ConnextService.groupIndex = null;

                    uc_ChatBox.contactsView1.btn_Reset.PerformClick();
                    //uc_ChatBox.messagesView1.btn_Reset.PerformClick();

                    return;
                }
                //if (!BaseFrom.RoleDetails.Any())
                //{
                //var lstRoles = await ChatHelper.GetAllRoleByListCodeGiaoViec(ConnextService.ManageGiaoViecs.GroupBy(x => x.CodeCongViecCha).Select(x => x.Key).ToList());
                var lstRoles = await CusHttpClient.InstanceCustomer.MGetAsync<List<UserWithRoleInGiaoViec>>($"{RouteAPI.TongDuAn_GetUserWithRoleInGiaoViec}/{kLTTHangNgay.CodeCha}");
                if (lstRoles.MESSAGE_TYPECODE)
                    BaseFrom.UsersWithRoles = lstRoles.Dto;
                if (!BaseFrom.UsersWithRoles.Any())
                {
                    XtraMessageBox.Show("Công tác này chưa được phân quyền hệ thống cho người dùng. Vui lòng liên hệ với quản lý dự án để phân quyền trước khi sử dụng tính năng chat.");
                    return;
                }
                //}
                if (ConnextService.groupIndex == null)
                {
                    XtraMessageBox.Show("Công tác này chưa được đồng bộ với server!");
                    return;
                    //var lstUsers = BaseFrom.UsersWithRoles;//.FindAll(x=>x.CongViecChaCode == kLTTHangNgay.Code);
                    //var groupChat = new GeneralGroupChatViewModel();
                    //groupChat.CodeCongViecCha = kLTTHangNgay.Code;
                    //groupChat.Name = kLTTHangNgay.TenCongTac;
                    //if (lstUsers.Any())
                    //{
                    //    foreach (var item in lstUsers.GroupBy(x => x.UserId).Select(x => x.Key))
                    //    {
                    //        groupChat.MemberChats.Add(new ManageGroupMemberViewModel()
                    //        {
                    //            CongViecChaCode = groupChat.CodeCongViecCha,
                    //            UserId = item
                    //        });
                    //    }
                    //}

                    //var res = await ChatHelper.AddOrUpdateGroupChat(groupChat);
                    //if (!res)
                    //{
                    //    alertControl.Show(this, "QUẢN LÝ THI CÔNG - THÔNG BÁO", "Tạo nhóm chát không thành công. Vui lòng liên hệ hỗ trợ : 0787 64 65 68", true);
                    //    return;
                    //}
                    //else
                    //{
                    //    InitListManageGroup();
                    //}
                }
                else
                {
                    uc_ChatBox.Parent = navigationPage5;
                    //uc_ChatBox.contactsView1.btn_Reset.PerformClick();
                    //uc_ChatBox.contactsView2.btn_Reset.PerformClick();
                }

                //ConnextService.groupIndex = gr;
                //uc_ChatBox.messagesView1.btn_Reset.PerformClick();
                uc_ChatBox.contactsView1.btn_Reset.PerformClick();



            }

        }

        private void sB_UpdateQLVC_Click(object sender, EventArgs e)
        {
            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            List<InforCT_HM> Infor = MyFunction.InforHMCT(slke_ThongTinDuAn.Properties.DataSource, true);
            Fcn_LoadDataTongHop(dtCT, dtHM, Infor);
            MessageShower.ShowInformation("Cập nhập hoàn tất!", "");
        }

        private void tL_QLVC_TongHop_ShowingEditor(object sender, CancelEventArgs e)
        {
            e.Cancel = true;
        }

        private void tL_QLVC_TongHop_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList treeList = sender as DevExpress.XtraTreeList.TreeList;
            if (treeList.FocusedColumn == e.Column && treeList.FocusedNode == e.Node)
                return;
            if (object.Equals(e.CellValue, (double)0) || (object.Equals(e.CellValue, false) && (e.Node.Level < 2)))
            {
                e.Appearance.FillRectangle(e.Cache, e.Bounds);
                e.Handled = true;
                if (e.Node.Level == 2)
                    e.Appearance.DrawString(e.Cache, "-", e.Bounds);
            }
        }

        private void tL_QLVC_TongHop_NodeCellStyle(object sender, GetCustomNodeCellStyleEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.Green;
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = Color.LightSeaGreen;
            }
        }

        private void gv_DeXuatThuChi_RowStyle(object sender, RowStyleEventArgs e)
        {
            //if (gv_DeXuatThuChi.GetRowCellValue(e.RowHandle, "TrangThai") == null)
            //    return;
            //if ((int)gv_DeXuatThuChi.GetRowCellValue(e.RowHandle, "TrangThai") == 2)
            //    e.Appearance.ForeColor = Color.Red;
        }

        //private void gv_DeXuatThuChi_ShowingEditor(object sender, CancelEventArgs e)
        //{
        //    if (gv_DeXuatThuChi.FocusedColumn.FieldName != "Chon" && gv_DeXuatThuChi.FocusedColumn.FieldName != "File"&& gv_DeXuatThuChi.FocusedColumn.FieldName != "XoaSua")
        //        e.Cancel = true;
        //    else if((gv_DeXuatThuChi.FocusedColumn.FieldName == "Chon"))
        //    {
        //        DeXuat dx=gv_DeXuatThuChi.GetFocusedRow() as DeXuat;
        //        string dbString = $"SELECT \"IsEdit\" FROM {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} WHERE \"Code\"='{dx.Code}'";
        //        DataTable Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //        if (dx.TrangThai > 1 || Dt.Rows[0][0].ToString()=="True")
        //        {
        //            MessageShower.ShowWarning("Nội dung đã gửi duyệt hoặc đang chỉnh sửa!", "Thông báo!");
        //            e.Cancel = true;
        //        }
        //        if (string.IsNullOrEmpty(dx.CongTrinh))
        //        {
        //            DialogResult rs=MessageShower.ShowYesNoQuestion("Đầu việc chưa có công trình, bạn có muốn lấy công trình mặc định không??????");
        //            if (rs == DialogResult.No)
        //            {
        //                e.Cancel = true;
        //                return;
        //            }
        //            dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
        //            Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //            dx.CongTrinh = Dt.Rows[0]["Code"].ToString();
        //            dbString = $"UPDATE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} SET \"CongTrinh\"='{dx.CongTrinh}' WHERE \"Code\"='{dx.Code}' ";
        //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        //        }
        //    }
        //}
        //private void fcn_Handle_Popup_TCTU_ChonCT(object sender, EventArgs e)
        //{
        //    var node = gv_DeXuatThuChi.GetSelectedRows();
        //    gv_DeXuatThuChi.BeginUpdate();
        //    foreach (int item in node)
        //        gv_DeXuatThuChi.SetRowCellValue(item, "Chon", true);
        //    gv_DeXuatThuChi.EndUpdate();
        //}
        //private void fcn_Handle_Popup_TCTU_Edit(object sender, EventArgs e)
        //{
        //    //var node = gv_DeXuatThuChi.GetSelectedRows();
        //    string Code = "", dbstring = "";
        //    BindingList<DeXuat> DX = gc_ThuChiTamUng_DeXuat.DataSource as BindingList<DeXuat>;
        //    BindingList<DeXuat> m_DX = new BindingList<DeXuat>();
        //    //DataTable m_dt = dt_DX.Copy();
        //    //m_dt.Clear();
        //    foreach (DeXuat item in DX)
        //    {
        //        if (!item.Chon)
        //            continue;
        //        item.Chon = false;
        //        Code = item.Code;
        //        dbstring = $"UPDATE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} SET \"IsEdit\"='{true}' WHERE \"Code\"='{Code}' ";
        //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);
        //        m_DX.Add(item);
        //        //m_dt.Rows.Add(item);
        //    }
        //    gc_ThuChiTamUng_DeXuat.Refresh();
        //    //BindingList<DeXuat> DX = DatatableHelper.fcn_DataTable2BindingList<DeXuat>(m_dt);
        //    form_ThuChiTamUng_DeXuat.Fcn_AddData(m_DX);
        //}    
        //private void fcn_Handle_Popup_TCTU_KT(object sender, EventArgs e)
        //{
        //    //var node = gv_DeXuatThuChi.GetSelectedRows();
        //    //string Code = "", dbstring = "";
        //    BindingList<DeXuat> DX = gc_ThuChiTamUng_DeXuat.DataSource as BindingList<DeXuat>;
        //    List<KhoanThu> KT = new List<KhoanThu>();
        //    //BindingList<DeXuat> m_DX = new BindingList<DeXuat>();
        //    //DataTable m_dt = dt_DX.Copy();
        //    //m_dt.Clear();
        //    foreach (DeXuat item in DX)
        //    {
        //        if (!item.Chon)
        //            continue;
        //        item.NguonThuChi = 2;
        //        string codeThu = Guid.NewGuid().ToString();
        //        item.Chon = false;
        //        //item.ChonChiTiet = "Chọn chi tiết";
        //        //Code = item.Code;            
        //        string dbstring = $"UPDATE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} SET \"NguonThuChi\"='{2}' WHERE \"Code\"='{item.Code}' ";
        //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);     
        //        //dbstring = $"DELETE FROM {ThuChiTamUng.TBL_THUCHITAMUNG_KHOANCHI}  WHERE \"CodeDeXuat\"='{item.Code}' ";
        //        //DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);
        //        //KT.Add(new KhoanThu
        //        //{
        //        //    ID = codeThu,
        //        //    CodeDeXuat=item.Code,
        //        //    TrangThai=1,
        //        //    NoiDungThu=item.NoiDungUng,
        //        //    TheoThucHien = item.GiaTriDotNay,
        //        //    CongTrinh = item.CongTrinh,                    
        //        //    ToChucCaNhanNhanChiPhiTamUng = item.ToChucCaNhanNhanChiPhiTamUng
        //        //}) ;
        //        //ctrl_ThuChiTamUng_KhoanChi.DeleteRow(item.Code);
        //        //m_DX.Add(item);
        //        //m_dt.Rows.Add(item);
        //    }
        //    //ctrl_ThuChiTamUng_KhoanThu.Fcn_AddData(KT);
        //    gc_ThuChiTamUng_DeXuat.Refresh();
        //    gc_ThuChiTamUng_DeXuat.RefreshDataSource();
        //    //BindingList<DeXuat> DX = DatatableHelper.fcn_DataTable2BindingList<DeXuat>(m_dt);
        //}
        //private void fcn_Handle_Popup_TCTU_KC(object sender, EventArgs e)
        //{
        //    BindingList<DeXuat> DX = gc_ThuChiTamUng_DeXuat.DataSource as BindingList<DeXuat>;
        //    List<KhoanThu> KT = new List<KhoanThu>();
        //    foreach (DeXuat item in DX)
        //    {
        //        if (!item.Chon)
        //            continue;
        //        item.NguonThuChi = 1;
        //        string codeThu = Guid.NewGuid().ToString();
        //        item.Chon = false;         
        //        string dbstring = $"UPDATE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} SET \"NguonThuChi\"='{1}' WHERE \"Code\"='{item.Code}' ";
        //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);
        //    }
        //    gc_ThuChiTamUng_DeXuat.Refresh();
        //    gc_ThuChiTamUng_DeXuat.RefreshDataSource();
        //}
        //private void gv_DeXuatThuChi_PopupMenuShowing(object sender, DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs e)
        //{
        //    GridView view = sender as GridView;
        //    GridHitInfo hitInfo = view.CalcHitInfo(e.Point);
        //    if (e.MenuType == GridMenuType.Row)
        //    {
        //        //DXMenuItem menuItem = new DXMenuItem("Chọn ", this.fcn_Handle_Popup_TCTU_ChonCT);
        //        //menuItem.Tag = hitInfo.Column;
        //        //e.Menu.Items.Add(menuItem);

        //        DXMenuItem menuItem_Edit = new DXMenuItem("Chỉnh sửa ", this.fcn_Handle_Popup_TCTU_Edit);
        //        menuItem_Edit.Tag = hitInfo.Column;
        //        e.Menu.Items.Add(menuItem_Edit);


        //        DXMenuItem menuItem_KT = new DXMenuItem("Chuyển sang thu ", this.fcn_Handle_Popup_TCTU_KT);
        //        menuItem_KT.Tag = hitInfo.Column;
        //        e.Menu.Items.Add(menuItem_KT);
        //        DXMenuItem menuItem_KC = new DXMenuItem("Chuyển sang chi ", this.fcn_Handle_Popup_TCTU_KC);
        //        menuItem_KC.Tag = hitInfo.Column;
        //        e.Menu.Items.Add(menuItem_KC);
        //    }
        //}

        //private void sB_GuiDuyet_Click(object sender, EventArgs e)
        //{
        //    if (gv_DeXuatThuChi.DataSource == null)
        //        return;
        //    DialogResult rs = MessageShower.ShowYesNoQuestion("Đồng ý gửi duyệt", "Cảnh báo");
        //    if (rs == DialogResult.No)
        //        return;
        //    string dbString = "";
        //    List<DeXuat> DX = new List<DeXuat>(gv_DeXuatThuChi.DataSource as BindingList<DeXuat>).FindAll(x => x.Chon == true);
        //    List<KhoanChi> KC = new List<KhoanChi>();
        //    List<KhoanThu> KT = new List<KhoanThu>();
        //    foreach (DeXuat item in DX)
        //    {
        //        if (item.CongTrinh == null)
        //        {
        //            MessageShower.ShowError($"Vui lòng chọn lại Tên công trình cho Nội dung ứng:{item.NoiDungUng}");
        //            continue;
        //        }
        //        item.TrangThai = 2;
        //        item.Chon = false;
        //        if (item.NguonThuChi == 1)
        //        {
        //            long GiaTriGiaiChi = 0;
        //            string CodeKC = Guid.NewGuid().ToString();
        //            string Code = item.Code;


        //            Dictionary<string, object> dicVals = new Dictionary<string, object>()
        //            {
        //                { "GiaTriTamUngDaDuyet", item.GiaTriDotNay},
        //                { "DateThucNhanUng", DateTime.Now.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)},
        //                { "DateXacNhanDaUng", DateTime.Now.AddDays(30).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)},
        //                { "DateXacNhanDaChi", DateTime.Now.AddDays(30).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)},
        //                { "CodeDeXuat", item.Code},
        //                { "TrangThai", 2},
        //                { "Code", CodeKC},
        //                { "NoiDungUng", item.NoiDungUng},
        //                { "CongTrinh", item.CongTrinh},
        //                { "LoaiKinhPhi", item.LoaiKinhPhi},
        //                { "NguoiLapTamUng", item.NguoiLapTamUng},
        //            };
        //            dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_KHOANCHI} ({string.Join(", ", dicVals.Keys)}) " +
        //                $"VALUES ({string.Join(", ", dicVals.Keys.Select(x => $"@{x}"))})";
        //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: dicVals.Values.ToArray());


        //            KC.Add(new KhoanChi
        //            {
        //                ID = CodeKC,
        //                ParentID = "0",
        //                CodeDeXuat = item.Code,
        //                NoiDungUng = item.NoiDungUng,
        //                GiaTriTamUngDaDuyet = item.GiaTriDotNay,
        //                TrangThai = item.TrangThai,
        //                CongTrinh = item.CongTrinh,
        //                ToChucCaNhanNhanChiPhiTamUng = item.ToChucCaNhanNhanChiPhiTamUng,
        //                LoaiKinhPhi = item.LoaiKinhPhi,
        //                NguoiLapTamUng = item.NguoiLapTamUng,
        //                AddCP = "",
        //                CheckDaChi = false,
        //                CheckDaUng = false,
        //                DateThucNhanUng=DateTime.Now.Date,
        //                DateXacNhanDaChi=DateTime.Now.Date,
        //                DateXacNhanDaUng=DateTime.Now.Date,
        //                File= "Xem File"
        //            });
        //            DataTable Dt = new DataTable();
        //            string tbl = "";
        //            if (item.IsVanChuyen)
        //            {
        //                dbString = $"SELECT *" +
        //                    $"FROM {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCT} " +
        //                    $" WHERE \"CodeCha\"='{Code}'";
        //                Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //                tbl = ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCT;
        //            }
        //            else if (item.IsTDKH)
        //            {
        //                tbl = ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH;
        //                if (item.IsVatLieu)
        //                    dbString = $"SELECT {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.Code,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.NgayBD,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.NgayKT,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.ThanhTien,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.KhoiLuong,{TDKH.TBL_KHVT_VatTu}.VatTu as TenCongViec,{TDKH.TBL_KHVT_VatTu}.MaVatLieu as MaHieu,{TDKH.TBL_KHVT_VatTu}.DonVi " +
        //    $"FROM {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH} " +
        //    $"LEFT JOIN {TDKH.TBL_KHVT_VatTu} " +
        //    $"ON {TDKH.TBL_KHVT_VatTu}.Code={ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.CodeVatTu " +
        //    $" WHERE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.CodeCha='{Code}'";
        //                else
        //                    dbString = $"SELECT {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.Code,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.ThanhTien,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.NgayBD,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.NgayKT,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.KhoiLuong,{TDKH.TBL_DanhMucCongTac}.TenCongTac as TenCongViec,{TDKH.TBL_DanhMucCongTac}.MaHieuCongTac as MaHieu,{TDKH.TBL_DanhMucCongTac}.DonVi " +
        //    $"FROM {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH} " +
        //    $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} " +
        //    $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.Code={ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.CodeCongTac " +
        //    $"LEFT JOIN {TDKH.TBL_DanhMucCongTac} " +
        //    $"ON {TDKH.TBL_DanhMucCongTac}.Code={TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac " +
        //    $" WHERE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTTDKH}.CodeCha='{Code}'";
        //                Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //            }
        //            else if (item.CodeHd != null)
        //            {
        //                dbString = $"SELECT {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD}.Code,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD}.NgayBD,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD}.NgayKT,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD}.ThanhTien,{ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD}.KhoiLuong,{TDKH.TBL_DanhMucCongTac}.TenCongTac as TenCongViec,{TDKH.TBL_DanhMucCongTac}.MaHieuCongTac as MaHieu,{TDKH.TBL_DanhMucCongTac}.DonVi " +
        //                $"FROM {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD} " +
        //                $"LEFT JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
        //                $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code={ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD}.CodePl " +
        //                $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} " +
        //                $"ON {TDKH.TBL_ChiTietCongTacTheoKy}.Code={MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan " +
        //                $"LEFT JOIN {TDKH.TBL_DanhMucCongTac} " +
        //                $"ON {TDKH.TBL_DanhMucCongTac}.Code={TDKH.TBL_ChiTietCongTacTheoKy}.CodeCongTac " +
        //                $" WHERE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATCTHD}.CodeCha='{Code}'";
        //                Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //            }
        //            else
        //            {
        //                dbString = $"SELECT * FROM {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATPL} WHERE \"CodeCha\"='{Code}'";
        //                Dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //                Dt.Columns.Add("ThanhTien", typeof(double));
        //                Dt.Columns["ThanhTien"].Expression = $"[DonGia]*[KhoiLuong]";
        //                tbl = ThuChiTamUng.TBL_THUCHITAMUNG_DEXUATPL;
        //                List<PhuLucThuCong_ChiTiet> PLThuCong = DuAnHelper.ConvertToList<PhuLucThuCong_ChiTiet>(Dt);
        //                GiaTriGiaiChi = PLThuCong.Sum(x => x.ThanhTien);
        //                foreach (PhuLucThuCong_ChiTiet itemChiTiet in PLThuCong)
        //                {
        //                    dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_KHOANCHICT} (\"CodeKC\",\"Code\",\"Ten\",\"DonVi\",\"KhoiLuong\",\"DonGia\") " +
        //                        $"VALUES ('{CodeKC}','{Guid.NewGuid()}', @Ten, @DonVi,'{itemChiTiet.KhoiLuong}','{itemChiTiet.DonGia}')";
        //                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { itemChiTiet.TenCongViec, itemChiTiet.DonVi });
        //                }
        //                goto Label;
        //            }
        //            List<PhuLucThuCong_ChiTiet> PL = DuAnHelper.ConvertToList<PhuLucThuCong_ChiTiet>(Dt);
        //            GiaTriGiaiChi = PL.Sum(x => x.ThanhTien);
        //            foreach (PhuLucThuCong_ChiTiet itemChiTiet in PL)
        //            {
        //                dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_KHOANCHICT} (\"CodeKC\",\"Code\",\"Ten\",\"DonVi\",\"KhoiLuong\",\"ThanhTienChiTiet\",\"ChiTietCoDonGia\") " +
        //                    $"VALUES ('{CodeKC}','{Guid.NewGuid()}', @Ten, @DonVi,'{itemChiTiet.KhoiLuong}','{itemChiTiet.ThanhTien}','{false}')";
        //                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { itemChiTiet.TenCongViec, itemChiTiet.DonVi });
        //            }
        //            KC.Where(x => x.ID == CodeKC).SingleOrDefault().GiaTriGiaiChi = GiaTriGiaiChi;
        //            dbString = $"UPDATE {ThuChiTamUng.TBL_THUCHITAMUNG_KHOANCHI} SET \"GiaTriGiaiChi\"='{GiaTriGiaiChi}' WHERE \"Code\"='{CodeKC}' ";
        //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        //        }
        //        else
        //        {
        //            string codeThu = Guid.NewGuid().ToString();

        //            Dictionary<string, object> dicVals = new Dictionary<string, object>()
        //            {
        //                { "NgayThangThucHien", DateTime.Now.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE) },
        //                { "TrangThai", 2},
        //                { "IsNguonThu", true},
        //                { "ToChucCaNhanNhanChiPhiTamUng", item.ToChucCaNhanNhanChiPhiTamUng},
        //                { "Code", codeThu},
        //                { "CodeDeXuat", item.Code},
        //                { "TheoThucHien", item.GiaTriDotNay},
        //                { "CongTrinh", item.CongTrinh},
        //                { "NoiDungThu", item.NoiDungUng }
        //            };
        //            dbString = $"INSERT INTO {ThuChiTamUng.TBL_THUCHITAMUNG_KHOANTHU} ({string.Join(", ", dicVals.Keys)}) " +
        //                  $"VALUES ({string.Join(", ", dicVals.Keys.Select(x => $"@{x}"))})";
        //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: dicVals.Values.ToArray());
        //            KT.Add(new KhoanThu
        //            {
        //                ID = codeThu,
        //                ParentID=item.CongTrinh,
        //                CodeDeXuat = item.Code,
        //                TrangThai = 2,
        //                NoiDungThu = item.NoiDungUng,
        //                TheoThucHien = item.GiaTriDotNay,
        //                CongTrinh = item.CongTrinh,
        //                CheckDaThu=false,
        //                ToChucCaNhanNhanChiPhiTamUng = item.ToChucCaNhanNhanChiPhiTamUng,
        //                NgayThangThucHien=DateTime.Now.Date
        //            });
        //        }
        //        Label:
        //        dbString = $"UPDATE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} SET \"TrangThai\" = '{2}' WHERE \"Code\" = '{item.Code}'";
        //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
        //    }
        //    if(KC.Count!=0)
        //        ctrl_ThuChiTamUng_KhoanChi.Fcn_Updata(KC);
        //    if (KT.Count != 0)
        //    {
        //        ctrl_ThuChiTamUng_KhoanThu.Fcn_AddData(KT);
        //        //ctrl_ThuChiTamUng_KhoanThu.Fcn_Update();
        //    }
        //        //ctrl_ThuChiTamUng_KhoanThu.Fcn_AddData(KT);
        //    gc_ThuChiTamUng_DeXuat.RefreshDataSource();
        //    gc_ThuChiTamUng_DeXuat.Refresh();
        //    MessageShower.ShowInformation("Gửi duyệt thành công", "");
        //}

        private void form_ThuChiTamUng_DeXuat_Gv_DeXuatThuChi_EditFormHidden(object sender, DevExpress.XtraGrid.Views.Grid.EditFormHiddenEventArgs e)
        {
            BindingList<DeXuat> Dexuatchinh = new BindingList<DeXuat>();
            DeXuat DX = form_ThuChiTamUng_DeXuat.Fcn_UpdateNewList();
            if (DX == null)
                return;
            Dexuatchinh.Add(DX);
            Fcn_AddData(Dexuatchinh);
            //List<KhoanChi> KC = new List<KhoanChi>();
            //KC.Add(new KhoanChi
            //{
            //    ID = DX.CodeKC,
            //    ParentID = "0",
            //    CodeDeXuat = DX.Code,
            //    NoiDungUng = DX.NoiDungUng,
            //    GiaTriTamUngDaDuyet = DX.GiaTriDotNay,
            //    TrangThai = DX.TrangThai,
            //    CongTrinh = DX.CongTrinh,
            //    ToChucCaNhanNhanChiPhiTamUng = DX.ToChucCaNhanNhanChiPhiTamUng,
            //    LoaiKinhPhi = DX.LoaiKinhPhi,
            //    NguoiLapTamUng = DX.NguoiLapTamUng,
            //    AddCP = "",
            //    CheckDaChi = false,
            //    CheckDaUng = false,
            //});
            //ctrl_ThuChiTamUng_KhoanChi.Fcn_Updata(KC);
        }
        //private void Fcn_UpdateTCTU()
        //{
        //    string dbString = $"SELECT * FROM {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}' AND \"TrangThai\"='{1}'";
        //    DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //    if (dt.Rows.Count == 0)
        //    {
        //        gc_ThuChiTamUng_DeXuat.DataSource = null;
        //        return;
        //    }

        //    List<InforCT_HM> Infor = MyFunction.InforHMCT(SharedControls.slke_ThongTinDuAn.Properties.DataSource, false);
        //    rILUE_CongTrinhHM.DataSource = Infor;
        //    rILUE_CongTrinhHM.DropDownRows = Infor.Count;

        //    dbString = $"SELECT *  FROM {ThuChiTamUng.TBL_THUCHITAMUNG_LOAIKINHPHI}";
        //    List<Infor> LoaiKP = new List<Infor>();

        //    foreach (DataRow item in DataProvider.InstanceTHDA.ExecuteQuery(dbString).Rows)
        //        LoaiKP.Add(new Infor
        //        {
        //            Code = item["Code"].ToString(),
        //            Ten = item["Ten"].ToString()
        //        });
        //    dbString = $"SELECT * FROM {DanhSachNhanVienConstant.TBL_CHAMCONG_BANGNHANVIEN}";
        //    List<Infor> TenNV = new List<Infor>();
        //    foreach (DataRow item in DataProvider.InstanceTHDA.ExecuteQuery(dbString).Rows)
        //        TenNV.Add(new Infor
        //        {
        //            Code = item["Code"].ToString(),
        //            Ten = item["TenNhanVien"].ToString(),
        //            Decription = item["MaNhanVien"].ToString()
        //        });
        //    LoaiKP.Add(new Infor
        //    {
        //        Code = "Add",
        //        Ten = "Thêm"
        //    });
        //    dbString = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
        //    DataTable dt_hd = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
        //    List<Infor_HopDong> HD = DuAnHelper.ConvertToList<Infor_HopDong>(dt_hd);
        //    ILUE_TenHopDong.DataSource = HD;
        //    rILUE_LoaiKinhPhi.DataSource = LoaiKP;
        //    //lUE_LoaiKinhPhi.Properties.DataSource = LoaiKP;
        //    rILUE_TenNguoiLap.DataSource = TenNV;
        //    //lUE_TenNguoiLap.Properties.DataSource = TenNV;
        //    rILUE_ToChucCaNhan.DataSource = DuAnHelper.GetCaNhanToChuc();
        //    //lUE_ToChucCaNhan.Properties.DataSource = DuAnHelper.GetCaNhanToChuc();
        //    //gc_ThuChiTamUng_DeXuat.DataSource = DexuatVL;
        //    BindingList<DeXuat> Dexuatchinh = new BindingList<DeXuat>();
        //    Dexuatchinh =new BindingList<DeXuat>(DuAnHelper.ConvertToList<DeXuat>(dt));
        //    Dexuatchinh.ForEach(x => x.XoaSua = "Xem");
        //    //foreach(DeXuat item in Dexuatchinh)
        //    //{
        //    //    if (item.CodeNhaCungCap != null)
        //    //         item.ToChucCaNhanNhanChiPhiTamUng=item.CodeNhaCungCap;
        //    //    else if (item.CodeNhaThau != null)
        //    //         item.ToChucCaNhanNhanChiPhiTamUng=item.CodeNhaThau;
        //    //    else if (item.CodeToDoi != null)
        //    //         item.ToChucCaNhanNhanChiPhiTamUng=item.CodeToDoi;
        //    //    else
        //    //         item.ToChucCaNhanNhanChiPhiTamUng=item.CodeNhaThauPhu;
        //    //}
        //    gc_ThuChiTamUng_DeXuat.DataSource = Dexuatchinh;
        //    //foreach (DataRow row in dt.Rows)
        //    //{
        //    //    DeXuat DX = new DeXuat();


        //    //}

        //}
        private void form_ThuChiTamUng_DeXuat_sb_Qlvc_Click(object sender, EventArgs e)
        {
            BindingList<DeXuat> Dexuatchinh = new BindingList<DeXuat>();
            DeXuat DX = form_ThuChiTamUng_DeXuat.Fcn_UpdateNewList();
            if (DX == null)
                return;
            Dexuatchinh.Add(DX);
            Fcn_AddData(Dexuatchinh);
            //List<KhoanChi> KC = new List<KhoanChi>();
            //KC.Add(new KhoanChi
            //{
            //    ID = DX.CodeKC,
            //    ParentID = "0",
            //    CodeDeXuat = DX.Code,
            //    NoiDungUng = DX.NoiDungUng,
            //    GiaTriTamUngDaDuyet = DX.GiaTriDotNay,
            //    TrangThai = DX.TrangThai,
            //    CongTrinh = DX.CongTrinh,
            //    ToChucCaNhanNhanChiPhiTamUng = DX.ToChucCaNhanNhanChiPhiTamUng,
            //    LoaiKinhPhi = DX.LoaiKinhPhi,
            //    NguoiLapTamUng = DX.NguoiLapTamUng,
            //    AddCP = "",
            //    CheckDaChi = false,
            //    CheckDaUng = false,
            //});
            //ctrl_ThuChiTamUng_KhoanChi.Fcn_Updata(KC);
        }


        private void form_ThuChiTamUng_DeXuat_sb_TaoKeHoach_Click(object sender, EventArgs e)
        {
            BindingList<DeXuat> Dexuatchinh = new BindingList<DeXuat>();
            DeXuat DX = form_ThuChiTamUng_DeXuat.Fcn_UpdateNewList();
            if (DX == null || !DX.IsTDKH)
                return;
            Dexuatchinh.Add(DX);
            Fcn_AddData(Dexuatchinh);
            //List<KhoanChi> KC = new List<KhoanChi>();
            //KC.Add(new KhoanChi
            //{
            //    ID = DX.CodeKC,
            //    ParentID = "0",
            //    CodeDeXuat = DX.Code,
            //    NoiDungUng = DX.NoiDungUng,
            //    GiaTriTamUngDaDuyet = DX.GiaTriDotNay,
            //    TrangThai = DX.TrangThai,
            //    CongTrinh = DX.CongTrinh,
            //    ToChucCaNhanNhanChiPhiTamUng = DX.ToChucCaNhanNhanChiPhiTamUng,
            //    LoaiKinhPhi = DX.LoaiKinhPhi,
            //    NguoiLapTamUng = DX.NguoiLapTamUng,
            //    AddCP = "",
            //    CheckDaChi = false,
            //    CheckDaUng = false,
            //});
            //ctrl_ThuChiTamUng_KhoanChi.Fcn_Updata(KC);
        }

        private void spsheet_ThanhToan_ToDoi_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            Fcn_CellvalueChanged(e.Cell, e.OldValue, spsheet_ThanhToan_ToDoi);
        }

        private void thôngTinPhiênBảnToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Frm_FormBase frm = new Frm_FormBase(TypeUserControl.THONGTINBANQUYEN);
            frm.ShowDialog();
        }

        private void đăngKýSửDụngPhầnMềmNghiệmThuVàNhậtKýToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Frm_FormBase frm = new Frm_FormBase(TypeUserControl.DANGKYBANQUYEN);
            frm.ShowDialog();
        }

        private void đăngKýSửDụngPhầnMềmQuảnLýThiCôngToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Frm_FormBase frm = new Frm_FormBase(TypeUserControl.DANGKYBANQUYEN);
            frm.ShowDialog();
        }

        private async void càiĐặtTàiKhoảnKhóaCứngToolStripMenuItem_Click(object sender, EventArgs e)
        {
            XtraForm_CaiDatKhoaCung form = new XtraForm_CaiDatKhoaCung();
            form.ShowDialog();

            WaitFormHelper.ShowWaitForm("Đang đồng bộ người dùng");
            var response = await UserHelper.SyncUserFromTBTBySerialNo();

            if (!response.MESSAGE_TYPECODE)
            {
                WaitFormHelper.CloseWaitForm();
                MessageShower.ShowError($"Không thể đồng bộ người dùng với sever chủ!");
            }
            WaitFormHelper.CloseWaitForm();
        }

        private void sb_XuatBaoCao_Click(object sender, EventArgs e)
        {
            FormXuatBaoCaoTongHop_FomChinh Fom_XuatTatCaBaoCao = new FormXuatBaoCaoTongHop_FomChinh();
            Fom_XuatTatCaBaoCao.ShowDialog();
        }

        private void gc_ThuChiTamUng_DeXuat_Load(object sender, EventArgs e)
        {
            //Fcn_LoadTCTU();
        }

        private void form_ThuChiTamUng_DeXuat_sb_LayTuHopDong_Click(object sender, EventArgs e)
        {
            BindingList<DeXuat> Dexuatchinh = new BindingList<DeXuat>();
            DeXuat DX = form_ThuChiTamUng_DeXuat.Fcn_UpdateNewList();
            if (DX == null)
                return;
            Dexuatchinh.Add(DX);
            Fcn_AddData(Dexuatchinh);
            //List<KhoanChi> KC = new List<KhoanChi>(); 
            //KC.Add(new KhoanChi
            //{
            //    ID = DX.CodeKC,
            //    ParentID = "0",
            //    CodeDeXuat = DX.Code,
            //    NoiDungUng = DX.NoiDungUng,
            //    GiaTriTamUngDaDuyet = DX.GiaTriDotNay,
            //    TrangThai = DX.TrangThai,
            //    CongTrinh = DX.CongTrinh,
            //    ToChucCaNhanNhanChiPhiTamUng = DX.ToChucCaNhanNhanChiPhiTamUng,
            //    LoaiKinhPhi = DX.LoaiKinhPhi,
            //    NguoiLapTamUng = DX.NguoiLapTamUng,
            //    AddCP = "",
            //    CheckDaChi = false,
            //    CheckDaUng = false,
            //});
            //ctrl_ThuChiTamUng_KhoanChi.Fcn_Updata(KC);
        }

        private void sb_CapNhapAB_Click(object sender, EventArgs e)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            DialogResult rs = MessageShower.ShowYesNoQuestion("Nếu cập nhập thì khối lượng thực hiện kỳ này sẽ được cập nhập theo thi công, Bạn có muốn cập nhập?");
            if (rs == DialogResult.No)
                return;
            WaitFormHelper.ShowWaitForm("Đang cập nhật khối lượng thi công");
            SpreadsheetControl NameSheet = Fcn_Spreadsheet();
            if (NameSheet == spsheet_ThanhToan_NhaCungCap)
            {
                string ngaybatdau = dte_DotbeginAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                string ngayketthuc = dte_DotendAB.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE);
                NameSheet.BeginUpdate();
                IWorkbook workbook = NameSheet.Document;
                Worksheet worksheet = workbook.Worksheets["Thanh toán nhà cung cấp"];
                CellRange Dot1 = worksheet.Range["Dot_1"];
                Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
                string dbString = "";
                DataTable dtKLHN = new DataTable();
                double KLTC = 0;
                List<KLHN> Lst = new List<KLHN>();
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                string CodeCon = "";
                double TyLe = 100;
                double KLHDNhom = 0, KLHDCon = 0;
                double KLVC = 0;
                for (int i = Dot1.TopRowIndex; i <= Dot1.BottomRowIndex; i++)
                {
                    Row Crow = worksheet.Rows[i];
                    string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    if (MaHieu == "HTDot")
                        break;
                    if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                        continue;
                    string DonVi = Crow[Name[TDKH.COL_DonVi]].Value.ToString();
                    string CodeCongTacTheoGiaiDoan = Crow[Name["CodeCongTacTheoGiaiDoan"]].Value.ToString();
                    string Code = Crow[Name["Code"]].Value.ToString();
                    if (Code == "")
                        continue;
                    string TenCongTac = Crow[Name[TDKH.COL_DanhMucCongTac]].Value.ToString();
                    double DonGia = Crow[Name["DonGiaTheoHopDong"]].Value.NumericValue;
                    WaitFormHelper.ShowWaitForm($"Dòng {i}:{MaHieu}_{TenCongTac}");
                    if (CodeCongTacTheoGiaiDoan != "")
                        Lst = MyFunction.Fcn_CalKLKHNew(TypeKLHN.VatLieu, new string[] { CodeCongTacTheoGiaiDoan }, dte_DotbeginAB.DateTime, dte_DotendAB.DateTime, ignoreKLKH: true);
                    else
                        continue;
                    KLTC = KLVC = 0;
                    if (Lst.Count() != 0)
                    {
                        KLTC = (double)Lst.Sum(x => x.KhoiLuongThiCong);
                    }
                    Crow[Name["KhoiLuongHangNgay"]].SetValue(KLTC);

                    dbString = $"SELECT \"Code\" FROM {QLVT.TBL_QLVT_YEUCAUVT}" +
                    $" WHERE \"CodeHd\" = '{cbo_MeNuTenHopDong.SelectedValue}' " +
                    $"AND \"TenVatTu\"=@TenCongTac AND \"MaVatTu\"=@MaHieu " +
                    $"AND \"DonVi\"=@DonVi AND \"DonGiaHienTruong\"='{DonGia}'";
                    DataTable Dt_YeuCau = DataProvider.InstanceTHDA.ExecuteQuery(dbString, parameter: new object[] { TenCongTac, MaHieu, DonVi });
                    if (Dt_YeuCau.Rows.Count != 0)
                    {
                        string lsCodeCongTac = MyFunction.fcn_Array2listQueryCondition(Dt_YeuCau.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                        dbString = $"SELECT \"KhoiLuong\" FROM {QLVT.TBL_QLVT_YEUCAUVTKLHN} WHERE \"CodeYeuCauVatTu\" IN ({lsCodeCongTac}) AND \"Ngay\">='{ngaybatdau}' AND \"Ngay\"<='{ngayketthuc}'";
                        DataTable dt_YeuCauHN = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        foreach (DataRow row in dt_YeuCauHN.Rows)
                            KLVC += double.Parse(row[0].ToString());
                        Crow[Name["KhoiLuongVanChuyen"]].SetValueFromText(KLVC.ToString());

                    }
                    double KLThuCong = Crow[Name["KhoiLuongThuCong"]].Value.NumericValue;

                    worksheet.Calculate();
                    Crow[Name["ThucHienKyNay"]].Formula = $"{Crow[Name["TongHop"]].GetReferenceA1()}";
                    double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;
                    dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT} SET \"ThucHienKyNay\"='{KLTC}',\"IsEdit\" = '{false}'," +
                        $"\"LuyKeDenHetKyNay\"='{LKKN}',\"KhoiLuongVanChuyen\"='{KLVC}',\"KhoiLuongHangNgay\"='{KLTC}' WHERE \"Code\"='{Code}' ";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                }
                NameSheet.EndUpdate();
            }
            else
            {
                NameSheet.BeginUpdate();
                IWorkbook workbook = NameSheet.Document;
                Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
                CellRange Dot1 = worksheet.Range["Dot_1"];
                Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
                //CellRange Cell = worksheet.Range["Dot_1"];
                string dbString = string.Empty; ;
                DataTable dtKLHN = new DataTable();
                //bool CheckAB = NameSheet == spsheet_ThanhToanA_B ? true : false;
                double KLTC = 0;
                List<KLHN> Lst = new List<KLHN>();
                List<KLHN> LstCtacCon = new List<KLHN>();
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                string CodeCon = "";
                double TyLe = 100;
                double KLHDNhom = 0, KLHDCon = 0;
                Dictionary<string, double> dickl = new Dictionary<string, double>();
                dbString = $"SELECT HT.*,PL.CodeCongTacTheoGiaiDoan " +
$"FROM {MyConstant.TBL_hopdongAB_HT} HT " +
$"INNER JOIN {MyConstant.TBL_HopDong_DoBoc} DB " +
$"ON DB.Code = HT.CodeDB " +
$"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} PL " +
$"ON PL.Code = DB.CodePL " +
$" WHERE HT.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' AND PL.CodeCongTacTheoGiaiDoan IS NOT NULL AND PL.CodeNhom IS NULL";
                DataTable dt_CT_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string[] lstcode = dt_CT_DB.AsEnumerable().Select(x => x["CodeCongTacTheoGiaiDoan"].ToString()).Distinct().ToArray();
                List<KLHNBriefViewModel> LKKHDayAll = MyFunction.CalcKLHNBrief(TypeKLHN.CongTac, dte_DotendAB.DateTime.Date, lstcode, dateBD: dte_DotbeginAB.DateTime.Date, dateKT: dte_DotendAB.DateTime.Date);
                foreach (DataRow row in dt_CT_DB.Rows)
                {
                    string Code = row["CodeCongTacTheoGiaiDoan"].ToString();
                    KLHNBriefViewModel LKTC = LKKHDayAll.Where(x => x.Code == Code).FirstOrDefault();
                    dickl.Add(row["Code"].ToString(), (double)LKTC.KLTCInRange);
                    row["SanLuong"] = row["ThucHienKyNay"] = (double)LKTC.KLTCInRange;
                    double.TryParse(row["LuyKeDenHetKyTruoc"].ToString(), out double LKKT);
                    row["LuyKeDenHetKyNay"] = LKKT + (double)LKTC.KLTCInRange;
                }
                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dt_CT_DB, MyConstant.TBL_hopdongAB_HT);
                for (int i = Dot1.TopRowIndex; i <= Dot1.BottomRowIndex; i++)
                {
                    Row Crow = worksheet.Rows[i];
                    string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    string CodeCongTacTheoGiaiDoan = Crow[Name["CodeCongTacTheoGiaiDoan"]].Value.ToString();
                    if (MaHieu == "HTDot")
                        break;
                    string CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                    if (CodeDB == "")
                        continue;
                    string Code = Crow[Name["Code"]].Value.ToString();
                    string TenCongTac = Crow[Name[TDKH.COL_DanhMucCongTac]].Value.ToString();
                    WaitFormHelper.ShowWaitForm($"Dòng {i}:{MaHieu}_{TenCongTac}");
                    dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"IsEdit\" = '{false}' WHERE \"Code\" = '{CodeDB}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    if (MaHieu == "*" /*&& CodeCongTacTheoGiaiDoan != ""*/)
                    {
                        //CheckLai
                        //if (DVTH.IsGiaoThau)
                        //{
                        //    dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy}  WHERE \"CodeNhom\"='{CodeCongTacTheoGiaiDoan}'";
                        //    DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                        //    foreach (DataRow row in dtNhom.Rows)
                        //    {
                        //        LstCtacCon = MyFunction.Fcn_CalKLKHNew(TypeKLHN.CongTac, new string[] { row["Code"].ToString() }, dte_DotbeginAB.DateTime, dte_DotendAB.DateTime, ignoreKLKH: true);
                        //        double KLTCCon = LstCtacCon.Any() ? (double)LstCtacCon.Sum(x => x.KhoiLuongThiCong) : 0;
                        //        KLHDCon = row["KhoiLuongHopDongChiTiet"] != DBNull.Value ? double.Parse(row["KhoiLuongHopDongChiTiet"].ToString()) : 0;
                        //        if (KLHDCon == 0)
                        //            continue;
                        //        double TyLeCon = KLTCCon / KLHDCon;
                        //        if (TyLeCon < TyLe)
                        //        {
                        //            TyLe = TyLeCon;
                        //            CodeCon = row["Code"].ToString();
                        //        }
                        //    }
                        //    if (TyLe == 0)
                        //        continue;
                        //    KLHDNhom = Crow[Name["TheoHopDong"]].Value.NumericValue;
                        //    KLTC = TyLe * KLHDNhom;

                        //}
                        //else
                        //    Lst = MyFunction.Fcn_CalKLKHNew(TypeKLHN.Nhom, new string[] { CodeCongTacTheoGiaiDoan }, dte_DotbeginAB.DateTime, dte_DotendAB.DateTime, ignoreKLKH: true);
                    }
                    else
                    {
                        if (!dickl.Keys.Contains(Code))
                            continue;
                        Crow[Name["ThucHienKyNay"]].SetValue(dickl[Code]);
                        worksheet.Calculate();
                    }
                    //Checklai
                    //    Lst = MyFunction.Fcn_CalKLKHNew(TypeKLHN.CongTac, new string[] { CodeCongTacTheoGiaiDoan }, dte_DotbeginAB.DateTime, dte_DotendAB.DateTime, ignoreKLKH: true);
                    //KLTC = 0;
                    //if (Lst.Count() != 0)
                    //{
                    //    //List<KLHN> LstCheck = Lst.Where(x => x.CodeCha == Dt_HD.Rows[0]["Code"].ToString()).ToList();
                    //    KLTC = (double)Lst.Sum(x => x.KhoiLuongThiCong);
                    //}
                    //Crow[Name["ThucHienKyNay"]].SetValue(KLTC);
                    //worksheet.Calculate();
                    //double LKKN = Crow[Name["LuyKeDenHetKyNay"]].Value.NumericValue;
                    //dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET \"ThucHienKyNay\"='{KLTC}',\"LuyKeDenHetKyNay\"='{LKKN}' WHERE \"Code\"='{Code}' ";
                    //DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                }
                NameSheet.EndUpdate();
                if (workbook.Worksheets.ActiveWorksheet.Name == MyConstant.CONST_SheetName_TTNghiemThu)
                    fcn_ThanhToanNghiemThu(NameSheet);

            }
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }

        //private void repo_ce_PhanTichKeHoach_CheckedChanged(object sender, EventArgs e)
        //{
        //    gv_HaoPhiDinhMuc.CloseEditor();
        //    //DataRow drVL = gv_HaoPhiDinhMuc.GetFocusedDataRow();

        //    //if (bool.Parse(drVL["PhanTichKeHoach"].ToString()))
        //    //{
        //    //    DinhMucHelper.CapNhatVatTuTheoHaoPhiVaoVatTu(drVL["CodeCongTac"] as string, drVL["Code"] as string);
        //    //}
        //    //else
        //    //{
        //    //    DinhMucHelper.BoPhanTichKeHoachVatTu(drVL["Code"] as string, drVL["CodeCongTac"] as string);
        //    //}
        //}

        private void sb_UpdateKeHoach_Click(object sender, EventArgs e)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            SpreadsheetControl NameSheet = Fcn_Spreadsheet();

            WaitFormHelper.ShowWaitForm("Đang cập nhật khối lượng hợp đồng kế hoạch");
            string dbString = "";
            if (NameSheet == spsheet_ThanhToan_NhaCungCap)
            {
                dbString = $"SELECT  {MyConstant.TBL_HopDong_PhuLuc}.Code," +
     $"{MyConstant.TBL_HopDong_PhuLuc}.IsDonGiaKeHoach,{MyConstant.TBL_HopDong_PhuLuc}.DonGia as DonGiaHopDong,{MyConstant.TBL_hopdongNCC_TT}.Code as CodeNCC," +
     $"{MyConstant.TBL_HopDong_PhuLuc}.CodeKHVT,{MyConstant.TBL_HopDong_PhuLuc}.NgayBatDau,{MyConstant.TBL_HopDong_PhuLuc}.NgayKetThuc " +
     $"FROM {MyConstant.TBL_HopDong_PhuLuc} " +
     $"INNER JOIN {MyConstant.TBL_hopdongNCC_TT} " +
     $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_hopdongNCC_TT}.CodePhuLuc " +
     $"INNER JOIN {TDKH.TBL_KHVT_VatTu} " +
     $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodeKHVT = {TDKH.TBL_KHVT_VatTu}.Code " +
     $" WHERE {MyConstant.TBL_hopdongNCC_TT}.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' ";
                DataTable dt_CT_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                double KLHD = 0;
                string[] lsCodeCongTac = dt_CT_DB.AsEnumerable().Select(x => x["CodeKHVT"].ToString()).ToArray();
                var dtKLHN = MyFunction.Fcn_CalKLKHNew(Common.Enums.TypeKLHN.VatLieu, lsCodeCongTac);
                foreach (DataRow row in dt_CT_DB.Rows)
                {
                    if (row["NgayBatDau"] == DBNull.Value)
                        continue;
                    DateTime NBD = DateTime.Parse(row["NgayBatDau"].ToString());
                    DateTime NKT = DateTime.Parse(row["NgayKetThuc"].ToString());
                    var Crow = dtKLHN.Where(x => x.Ngay.Date >= NBD.Date && x.Ngay.Date <= NKT.Date && x.CodeCha == row["CodeKHVT"].ToString()).ToList();
                    KLHD = Crow.Sum(x => x.KhoiLuongKeHoach) ?? 0;
                    dbString = $"UPDATE {MyConstant.TBL_hopdongNCC_TT} SET \"TheoHopDong\" = '{KLHD}' WHERE \"Code\" = '{row["CodeNCC"]}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"KhoiLuong\" = '{KLHD}' WHERE \"Code\" = '{row["Code"]}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
            }
            else
            {
                dbString = $"SELECT  {MyConstant.TBL_HopDong_PhuLuc}.Code,{MyConstant.TBL_HopDong_PhuLuc}.CodeNhom,{MyConstant.TBL_HopDong_DoBoc}.Code as CodeDB," +
              $"{MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan,{MyConstant.TBL_HopDong_PhuLuc}.NgayBatDau" +
              $",{MyConstant.TBL_HopDong_PhuLuc}.NgayKetThuc " +
              $"FROM {MyConstant.TBL_HopDong_PhuLuc} " +
                             $"INNER JOIN {MyConstant.TBL_HopDong_DoBoc} " +
                             $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                             $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
                             $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodePl = {MyConstant.TBL_ThongtinphulucHD}.Code " +
                             $"INNER JOIN {MyConstant.TBL_tonghopdanhsachhopdong} " +
                             $"ON {MyConstant.TBL_ThongtinphulucHD}.CodeHd = {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
                             $" WHERE {MyConstant.TBL_HopDong_DoBoc}.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' AND" +
                             $" {MyConstant.TBL_tonghopdanhsachhopdong}.CodeHopDong='{cbo_MeNuTenHopDong.SelectedValue}' ";
                DataTable dt_CT_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                string[] lsCodeCongTac = dt_CT_DB.AsEnumerable().Select(x => x["CodeCongTacTheoGiaiDoan"].ToString()).ToArray();
                var dtKLHN = MyFunction.Fcn_CalKLKHNew(Common.Enums.TypeKLHN.CongTac, lsCodeCongTac);
                double KLHD = 0;
                foreach (DataRow row in dt_CT_DB.Rows)
                {
                    if (row["NgayBatDau"] == DBNull.Value)
                        continue;
                    DateTime NBD = DateTime.Parse(row["NgayBatDau"].ToString());
                    DateTime NKT = DateTime.Parse(row["NgayKetThuc"].ToString());
                    if (row["CodeNhom"] != DBNull.Value)
                    {
                        var dtNhom = MyFunction.Fcn_CalKLKHNew(Common.Enums.TypeKLHN.Nhom, new string[] { row["CodeNhom"].ToString() }, dateBD: NBD, dateKT: NKT);
                        KLHD = dtNhom.Any() ? (double)dtNhom.Sum(x => x.KhoiLuongKeHoach) : 0;
                    }
                    else
                    {
                        var Crow = dtKLHN.Where(x => x.Ngay.Date >= NBD.Date && x.Ngay.Date <= NKT.Date && x.CodeCha == row["CodeCongTacTheoGiaiDoan"].ToString()).ToList();
                        KLHD = Crow.Sum(x => x.KhoiLuongKeHoach) ?? 0;
                    }
                    dbString = $"UPDATE {MyConstant.TBL_HopDong_DoBoc} SET \"TheoHopDong\" = '{KLHD}' WHERE \"Code\" = '{row["CodeDB"]}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"KhoiLuong\" = '{KLHD}' WHERE \"Code\" = '{row["Code"]}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
                fcn_themdot(cbo_AB_LanThanhToan.Text, false, NameSheet);
                fcn_DobocAB(NameSheet);
            }

            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }

        private void tL_YeuCauVatTu_ShowingEditor(object sender, CancelEventArgs e)
        {
            VatLieu vl = tL_YeuCauVatTu.GetFocusedRow() as VatLieu;
            if (tL_YeuCauVatTu.FocusedColumn.FieldName == "Chon")
            {
                if (vl.HopDongKl == 0 || vl.YeuCauDotNay == 0)
                {
                    MessageShower.ShowWarning("Vui lòng điền đầy đủ khối lượng hợp đồng và yêu cầu đợt này!");
                    e.Cancel = true;

                }
            }
            else if (tL_YeuCauVatTu.FocusedColumn.FieldName != "TenVatTu" && vl.MaVatTu == null)
            {
                e.Cancel = true;
            }
        }

        private void tL_YeuCauVatTu_BeforeFocusNode(object sender, BeforeFocusNodeEventArgs e)
        {
            if (e.Node.Level <= 1)
                e.CanFocus = false;
        }

        private void tL_NhapKho_BeforeFocusNode(object sender, BeforeFocusNodeEventArgs e)
        {
            TreeList tL = sender as TreeList;
            if (e.Node.Level <= 1 || (int)tL.GetRowCellValue(e.Node, "TrangThai") < 2)
                e.CanFocus = false;
        }

        private async void spsheet_TD_KH_LapKeHoach_MouseClick(object sender, MouseEventArgs e)
        {

            Point p = e.Location;
            Cell cell = spsheet_TD_KH_LapKeHoach.GetCellFromPoint(new System.Drawing.PointF((float)p.X, (float)p.Y));
            NavigationPaneState StateNP = np_KhoiLuongHangNgay.State;
            if (cell == null)
            {

                return;
            }
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            ctrl_HaoPhiVatTuTDKH.Clear();//.DataSource = null;
            Worksheet ws = cell.Worksheet;
            SharedControls.ws_VatLieu = ws;
            string colHeading = ws.Range.GetColumnNameByIndex(cell.ColumnIndex);
            int type = Array.IndexOf(TDKH.sheetsName, ws.Name);

            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            if (ws.Name == TDKH.SheetName_DoBocChuan)
            {
                Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(ws.Range[TDKH.RANGE_DoBocChuan]);
                string ColCode = ws.Columns[cell.RightColumnIndex].Heading;
                string TypeRow = ws.Rows[cell.TopRowIndex][dicDoBoc[TDKH.COL_TypeRow]].Value.TextValue;
                string CodeCT = ws.Rows[cell.TopRowIndex][dicDoBoc[TDKH.COL_Code]].Value.TextValue;
                string CodeMTC = ws.Rows[cell.TopRowIndex][dicDoBoc["CodeMuiThiCong"]].Value.TextValue;
                if (ColCode == dicDoBoc["MuiThiCong"] && (TypeRow == MyConstant.TYPEROW_CVCha || TypeRow == MyConstant.TYPEROW_CVCHIA))
                {
                    mtc.Show();
                    var spsheetLoc = spsheet_TD_KH_LapKeHoach.Location;
                    Rectangle rec = spsheet_TD_KH_LapKeHoach.GetCellBounds(cell.TopRowIndex, cell.LeftColumnIndex);
                    mtc.Location = new Point(rec.Left - mtc.Width + spsheetLoc.X, rec.Top + spsheetLoc.Y);
                    mtc.BringToFront();
                    mtc.Fcn_LoadData(CodeMTC, CodeCT);
                }
                else
                    mtc.Hide();
            }
            else
                mtc.Hide();


            Row crRow = ws.Rows[cell.RowIndex];
            string typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
            TypeKLHN typeKLHN = (type < 2) ? TypeKLHN.CongTac : TypeKLHN.VatLieu;

            string codeCT = crRow[dic[TDKH.COL_Code]].Value.ToString();
            Guid guid;
            if (!Guid.TryParse(codeCT, out guid))
            {
                ctrl_HaoPhiVatTuTDKH.Clear();
                ctrl_NhapKLHN.Clear();
                return;
            }
            KeyValuePair<string, string> TenCT_MH = new KeyValuePair<string, string>(crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString(), crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString());
            if (typeRow == MyConstant.TYPEROW_CVCha || typeRow == MyConstant.TYPEROW_CVCHIA)
            {
                ctrl_HaoPhiVatTuTDKH.Clear();//.DataSource = null;

                if (ctrl_HaoPhiVatTuTDKH.Visible)
                {
                    if (type < 2)
                    {
                        if (!Guid.TryParse(codeCT, out guid))
                        {
                            //ctrl_HaoPhiVatTuTDKH.Clear();
                            //ctrl_NhapKLHN.Clear();
                            return;
                        }
                        double KLKH = crRow[dic[TDKH.COL_DBC_KhoiLuongToanBo]].Value.NumericValue;


                        string MHCT = crRow[dic[TDKH.COL_MaHieuCongTac]].Value.ToString();
                        string tenCongTac = crRow[dic[TDKH.COL_DanhMucCongTac]].Value.ToString();

                        string disp = string.Format(FormatString.DispTenCongTac, MHCT, tenCongTac);
                        ctrl_HaoPhiVatTuTDKH.pushData(TypeKLHN.CongTac, codeCT, disp);
                    }
                }
                if (StateNP != NavigationPaneState.Collapsed)
                {
                    if (type > 0)
                    {

                        if (typeKLHN == TypeKLHN.CongTac)
                        {
                            ctrl_NhapKLHN.pushData(StateNP, DVTH, dic, true, typeKLHN, codeCT, TenCT_MH);

                        }
                        else if (typeKLHN == TypeKLHN.VatLieu)
                        {
                            List<string> lsCodeHaoPhi = new List<string>();
                            Dictionary<string, KeyValuePair<string, string>> DicMahieu = new Dictionary<string, KeyValuePair<string, string>>();
                            Column colRowCha = ws.Columns[dic[TDKH.COL_RowCha]];

                            Row[] rows = colRowCha.Search((crRow.Index + 1).ToString(), MyConstant.MySearchOptions).Select(x => ws.Rows[x.RowIndex]).ToArray();

                            foreach (Row row in rows)
                            {
                                DicMahieu.Add(row[dic[TDKH.COL_Code]].Value.ToString(), new KeyValuePair<string, string>(row[dic[TDKH.COL_MaHieuCongTac]].Value.ToString(), row[dic[TDKH.COL_DanhMucCongTac]].Value.ToString()));
                                lsCodeHaoPhi.Add(row[dic[TDKH.COL_Code]].Value.ToString());
                            }
                            ctrl_NhapKLHN.pushData(StateNP, DVTH, dic, true, typeKLHN, codeCT, TenCT_MH, lsCodeHaoPhi.ToArray(), DicMahieu, cell.RowIndex);
                        }
                    }
                }
            }
            else if (typeRow == MyConstant.TYPEROW_CVCON)
            {
                if (typeKLHN == TypeKLHN.VatLieu)
                {
                    ctrl_NhapKLHN.pushData(StateNP, DVTH, dic, true, TypeKLHN.HaoPhiVatTu, codeCT, TenCT_MH);
                }
            }
            else if (typeRow == MyConstant.TYPEROW_Nhom)
            {
                ctrl_NhapKLHN.pushData(StateNP, DVTH, dic, true, TypeKLHN.Nhom, codeCT, TenCT_MH);
            }
            return;
        }
        private void ctrl_BaoCaoTaiChinhDuAn_sb_capNhap_Click(object sender, EventArgs e)
        {
            //WaitFormHelper.ShowWaitForm("Đang cập nhật theo cài đặt, Vui lòng chờ!");
            ////string LoiNhuan = ctrl_BaoCaoTaiChinhDuAn.TextLoiNhuan;

            ////int index = ctrl_BaoCaoTaiChinhDuAn.Index;
            ////bool TrangThai = ctrl_BaoCaoTaiChinhDuAn.TrangThai;
            ////int songay = ctrl_BaoCaoTaiChinhDuAn.SoNgay;
            ////int Legend = ctrl_BaoCaoTaiChinhDuAn.Check;
            ////ctrl_BaoCaoTaiChinhDuAn.Index = index;
            ////ctrl_BaoCaoTaiChinhDuAn.TrangThai = TrangThai;
            ////ctrl_BaoCaoTaiChinhDuAn.SoNgay = songay;
            ////ctrl_BaoCaoTaiChinhDuAn.Check = Legend;
            ////ctrl_BaoCaoTaiChinhDuAn.TextLoiNhuan = LoiNhuan;

            ////ctrl_BaoCaoTaiChinhDuAn.LoadDongTien();
            //WaitFormHelper.CloseWaitForm();
            //MessageShower.ShowInformation("Cập nhập thành công!");
        }

        private void ctrl_BaoCaoTaiChinhDuAn_Load(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
            Fcn_UpdateBieuDoDuAn();
            WaitFormHelper.CloseWaitForm();
        }
        private void Fcn_UpdateBieuDoDuAn()
        {
            ctrl_BaoCaoTaiChinhDuAn.LoadDongTien();
            List<DonViThucHien> DVTH = DuAnHelper.GetDonViThucHiens(ctrl_DonViThucHienDuAnBieuDo);
            ctrl_DonViThucHienDuAnBieuDo.FcnAcceptchecked();
            ctrl_DonViThucHienDuAnBieuDo.EditValue = DVTH.FirstOrDefault()?.CodeFk;
            string dbString = $"SELECT \"Code\",\"Ten\",\"GiaTri\" FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_CongTrinh = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            cbb_BieuDoCongTrinh.DataSource = dt_CongTrinh.AsEnumerable().ToDictionary(x => x["Code"].ToString(), x => x["Ten"].ToString()).ToList();
            cbb_BieuDoCongTrinh.SelectedIndex = 0;
            Fcn_UpdateBieuDo(DVTH.FirstOrDefault());
            Fcn_UpdateBieuDoTyTrong();
        }
        private void Fcn_UpdateBieuDo(DonViThucHien DVTH)
        {
            string dbString = $"SELECT \"Code\",\"Ten\",\"GiaTri\" FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_CongTrinh = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dt_CongTrinh.Clear();
            dt_CongTrinh.Columns.Remove("Code");
            if (cbb_BieuDoCongTrinh.SelectedValue != null)
            {
                dbString = $"SELECT \"Code\" FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeCongTrinh\"='{cbb_BieuDoCongTrinh.SelectedValue}'";
                DataTable dt_HM = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string lstcode = MyFunction.fcn_Array2listQueryCondition(dt_HM.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT * FROM {TDKH.TBL_DanhMucCongTac} WHERE \"CodeHangMuc\" IN ({lstcode})";
                DataTable dtct = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string lstcodeCT = MyFunction.fcn_Array2listQueryCondition(dtct.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeCongTac\" IN ({lstcodeCT}) AND (\"CodeNhaThau\" IS NOT NULL OR \"CodeToDoi\" IS NOT NULL OR \"CodeNhaThauPhu\" IS NOT NULL)";
                DataTable CTTK = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                if (CTTK.Rows.Count == 0)
                {
                    cc_BieuDoDuAn.Series[0].DataSource = dt_CongTrinh;
                    return;
                }
                dbString = $"SELECT * FROM {TDKH.TBL_KHVT_VatTu} WHERE \"CodeHangMuc\" IN ({lstcode}) AND {DVTH.ColCodeFK}='{DVTH.Code}'";
                DataTable VL = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                DataRow[] VatLieu = VL.AsEnumerable().Where(x => x["LoaiVatTu"].ToString() == "Vật liệu").ToArray();
                DataRow[] NC = VL.AsEnumerable().Where(x => x["LoaiVatTu"].ToString() == "Nhân công").ToArray();
                DataRow[] MTC = VL.AsEnumerable().Where(x => x["LoaiVatTu"].ToString() == "Máy thi công").ToArray();
                double ThanhTienVL = VatLieu.AsEnumerable().Sum(x => double.Parse(x["DonGia"].ToString()) * double.Parse(x["KhoiLuongKeHoach"].ToString()));
                double ThanhTienMTC = MTC.AsEnumerable().Sum(x => double.Parse(x["DonGia"].ToString()) * double.Parse(x["KhoiLuongKeHoach"].ToString()));
                double ThanhTienNC = NC.AsEnumerable().Sum(x => double.Parse(x["DonGia"].ToString()) * double.Parse(x["KhoiLuongKeHoach"].ToString()));
                double ThanhTien = ThanhTienVL + ThanhTienNC + ThanhTienMTC;
                double tyleVL = ThanhTien == 0 ? 0 : Math.Round(100 * ThanhTienVL / ThanhTien, 2);
                double tyleMTC = ThanhTien == 0 ? 0 : Math.Round(100 * ThanhTienMTC / ThanhTien, 2);
                double tyleNC = ThanhTien == 0 ? 0 : Math.Round(100 * ThanhTienNC / ThanhTien, 2);
                double tyleCL = 100 - tyleVL - tyleMTC - tyleNC;
                dt_CongTrinh.Rows.Add(new Object[] { "Vật liệu", tyleVL });
                dt_CongTrinh.Rows.Add(new Object[] { "Nhân công", tyleNC });
                dt_CongTrinh.Rows.Add(new Object[] { "Máy thi công", tyleMTC });
                dt_CongTrinh.Rows.Add(new Object[] { "Còn lại", tyleCL });
            }
            cc_BieuDoDuAn.Series[0].DataSource = dt_CongTrinh;
        }
        private void Fcn_UpdateBieuDoTyTrong()
        {
            string dbString = $"SELECT \"Code\",\"Ten\",\"GiaTri\" FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_CongTrinh = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dt_CongTrinh.Clear();
            dt_CongTrinh.Columns.Remove("Code");
            if (cbb_BieuDoCongTrinh.SelectedValue != null)
            {
                dbString = $"SELECT \"Code\" FROM {MyConstant.TBL_THONGTINHANGMUC} WHERE \"CodeCongTrinh\"='{cbb_BieuDoCongTrinh.SelectedValue}'";
                DataTable dt_HM = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string lstcode = MyFunction.fcn_Array2listQueryCondition(dt_HM.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT * FROM {TDKH.TBL_DanhMucCongTac} WHERE \"CodeHangMuc\" IN ({lstcode})";
                DataTable dtct = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                string lstcodeCT = MyFunction.fcn_Array2listQueryCondition(dtct.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE \"CodeCongTac\" IN ({lstcodeCT}) AND (\"CodeNhaThau\" IS NOT NULL OR \"CodeToDoi\" IS NOT NULL OR \"CodeNhaThauPhu\" IS NOT NULL)";
                DataTable CTTK = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                if (CTTK.Rows.Count == 0)
                {
                    cc_BieuDoDuAn.Series[1].DataSource = dt_CongTrinh;
                    return;
                }
                double ThanhTien = CTTK.AsEnumerable().Sum(x => double.Parse(x["DonGia"].ToString()) * double.Parse(x["KhoiLuongToanBo"].ToString()));

                List<DonViThucHien> DVTH = DuAnHelper.GetDonViThucHiens(ctrl_DonViThucHienDuAnBieuDo);
                foreach (DonViThucHien item in DVTH)
                {
                    dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacTheoKy} WHERE {item.ColCodeFK}='{item.Code}'";
                    DataTable CTNT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    double ThanhTienNT = CTNT.AsEnumerable().Sum(x => double.Parse(x["DonGia"].ToString()) * double.Parse(x["KhoiLuongToanBo"].ToString()));
                    double tyle = ThanhTien == 0 ? 0 : Math.Round(100 * ThanhTienNT / ThanhTien, 2);
                    dt_CongTrinh.Rows.Add(new Object[] { item.TenGhep, tyle });
                }

            }
            cc_BieuDoDuAn.Series[1].DataSource = dt_CongTrinh;
        }
        private void ctrl_DonViThucHienDuAnBieuDo_DVTHChanged(object sender, EventArgs e)
        {
            if (ctrl_DonViThucHienDuAnBieuDo.SelectedDVTH is null)
                return;
            Fcn_UpdateBieuDo(ctrl_DonViThucHienDuAnBieuDo.SelectedDVTH);
            //Fcn_UpdateBieuDoTyTrong();
        }

        private void cbb_BieuDoCongTrinh_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ctrl_DonViThucHienDuAnBieuDo.SelectedDVTH is null)
                return;
            Fcn_UpdateBieuDo(ctrl_DonViThucHienDuAnBieuDo.SelectedDVTH);
            Fcn_UpdateBieuDoTyTrong();
        }

        private void ctrl_BaoCaoDongTienHopDong_Load(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
            ctrl_BaoCaoDongTienHopDong.LoadDongTien();
            WaitFormHelper.CloseWaitForm();
        }

        private void ctrl_BaoCaoDongTienHopDong_sb_capNhap_Click(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhật theo cài đặt, Vui lòng chờ!");
            int check = ctrl_BaoCaoDongTienHopDong.Check;
            ctrl_BaoCaoDongTienHopDong.Check = check;
            ctrl_BaoCaoDongTienHopDong.LoadDongTien();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }

        private void ctrl_BaoCaoDongTien_sb_capNhap_Click(object sender, EventArgs e)
        {
            if (ctrl_BaoCaoDongTien.CheckNgay)
                return;
            WaitFormHelper.ShowWaitForm("Đang cập nhật theo cài đặt, Vui lòng chờ!");
            int index = ctrl_BaoCaoDongTien.Index;
            bool TrangThai = ctrl_BaoCaoDongTien.TrangThai;
            int songay = ctrl_BaoCaoDongTien.SoNgay;
            int Legend = ctrl_BaoCaoDongTien.Check;
            ctrl_BaoCaoDongTien.Index = index;
            ctrl_BaoCaoDongTien.TrangThai = TrangThai;
            ctrl_BaoCaoDongTien.SoNgay = songay;
            ctrl_BaoCaoDongTien.Check = Legend;
            ctrl_BaoCaoDongTien.LoadDongTien();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }

        private void ctrl_BaoCaoKhoiLuong_sb_capNhap_Click(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhật theo cài đặt, Vui lòng chờ!");
            ctrl_BaoCaoKhoiLuong.LoadKhoiLuong();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }

        private void ctrl_BaoCaoKhoiLuong_Load(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
            ctrl_BaoCaoKhoiLuong.LoadKhoiLuong();
            WaitFormHelper.CloseWaitForm();
        }

        private void ctrl_BaoCaoDongTien_Load(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
            ctrl_BaoCaoDongTien.LoadDongTien();
            WaitFormHelper.CloseWaitForm();

        }

        private void xrTab_ThuChiTamUng_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
        {
            var tabControl = (XtraTabControl)sender;
            if (BaseFrom.IsSetNullOnChangedTab)
            {
                tabControl.SelectedTabPage = null;

                return;
            }

            xtraTabControl_TabMain_EnabledChanged(null, null);
            if (xrTab_ThuChiTamUng.SelectedTabPage?.Text == "Khoản thu")
                ctrl_ThuChiTamUng_KhoanThu.Fcn_Refresh();
            else if (xrTab_ThuChiTamUng.SelectedTabPage?.Text == "Khoản chi")
                ctrl_ThuChiTamUng_KhoanChi.Fcn_Refresh();
        }

        private void ce_HienThiAll_CheckedChanged(object sender, EventArgs e)
        {
            cbo_LuaChon.Enabled = !ce_HienThiAll.Checked;
            if (ce_HienThiAll.Checked)
            {
                Fcn_LoadAllQLVC();
            }
            else
            {
                if (cbo_LuaChon.SelectedIndex == 0 || cbo_LuaChon.SelectedIndex == 4)
                {
                    fcn_loadYeuCauVT_Thucong_TDKH(true, false, false, "CodeKHVT", "CodeTDKH");
                    fcn_updateDeXuatVatLieu();
                }
                else if (cbo_LuaChon.SelectedIndex == 1)
                {
                    fcn_loadYeuCauVT_Thucong_TDKH(false, false, false, "CodeKHVT", "CodeTDKH");
                    Form_QLVT_LayTuTDKH TDKH = new Form_QLVT_LayTuTDKH();
                    TDKH.LoadData();
                    TDKH.m__TRUYENDATA = new Form_QLVT_LayTuTDKH.DE__TRUYENDATA(Fcn_UpdateQLVT_TDKH);
                    TDKH.ShowDialog();
                }
                else if (cbo_LuaChon.SelectedIndex == 2)
                {
                    fcn_loadYeuCauVT_Thucong_TDKH(false, true, false, "CodeKHVT", "CodeTDKH");
                    Form_QLVT_LayVatLieuHopDong HD = new Form_QLVT_LayVatLieuHopDong();
                    HD.LoadDanhSachHopDong();
                    HD.m__TRUYENDATA = new Form_QLVT_LayVatLieuHopDong.DE__TRUYENDATA(Fcn_UpdateQLVT_HD);
                    HD.ShowDialog();
                }
                else
                {
                    fcn_loadYeuCauVT_Thucong_TDKH(false, false, false, "CodeTDKH", "CodeKHVT");
                    Form_QLVT_LayTuKHVT TDKH = new Form_QLVT_LayTuKHVT();
                    TDKH.m__TRUYENDATA = new Form_QLVT_LayTuKHVT.DE__TRUYENDATA(Fcn_UpdateQLVT_KHVT);
                    TDKH.ShowDialog();
                }
            }
        }

        private void tL_NhapKho_ShowingEditor(object sender, CancelEventArgs e)
        {
            NhapVatLieu vl = tL_NhapKho.GetFocusedRow() as NhapVatLieu;
            if (tL_NhapKho.FocusedColumn.FieldName == "Chon")
            {
                if (vl.ThucNhap == 0)
                {
                    MessageShower.ShowWarning("Vui lòng điền đầy đủ khối lượng thực nhập!");
                    e.Cancel = true;

                }
            }
            else if (tL_NhapKho.FocusedColumn.FieldName == "IsXuat")
            {
                if (vl.IsXuat == true && vl.TrangThai == 3)
                {
                    MessageShower.ShowWarning("Không được thay đổi lựa chọn!");
                    e.Cancel = true;

                }
            }
        }

        private void rICE_NhapKhiYeuCau_CheckedChanged(object sender, EventArgs e)
        {
            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn nhập kho ko qua yêu cầu không?");
            if (rs == DialogResult.Yes)
            {
                VatLieu Vl = tL_YeuCauVatTu.GetFocusedRow() as VatLieu;
                Vl.TrangThai = 2;

            }
        }

        private void tL_XuatKho_ShowingEditor(object sender, CancelEventArgs e)
        {
            XuatVatLieu XVL = tL_XuatKho.GetFocusedRow() as XuatVatLieu;
            if (XVL is null)
                return;
            if (XVL.IsXuat)
            {
                MessageShower.ShowWarning("Vật liệu được xuất tự động,Không được thay đổi dữ liệu!");
                e.Cancel = true;
            }
            if (tL_XuatKho.FocusedColumn.FieldName == "TenKhoNhap" && XVL.TrangThai == 2)
            {
                MessageShower.ShowInformation("Vật liệu đã xuất kho, Bạn không thể đổi lại Tên kho xuất");
                e.Cancel = true;
            }
        }

        private void ctrl_ThuChiTamUng_KhoanChi_Load(object sender, EventArgs e)
        {
            //ctrl_ThuChiTamUng_KhoanChi.Fcn_Load();
        }

        private void ctrl_ThuChiTamUng_KhoanThu_Load(object sender, EventArgs e)
        {
            //ctrl_ThuChiTamUng_KhoanThu.Fcn_Update();
        }

        private void ctrl_DonViThucHienGiaoViec_DVTHChanged(object sender, EventArgs e)
        {
            //xtraTabControl_GiaoViec_SelectedPageChanged(null, null);
            XtraTabPage crPage = xtraTabControl_GiaoViec.SelectedTabPage;
            SetMinMaxDateRangeNgayBaoCaoGiaoViec();
            if (crPage == xtraTabKeHoachGiaoViec)
            {
                rg_GV_DauViec_SelectedIndexChanged(null, null);
            }
            else if (crPage == xtraTabThucHienDuAn)
            {
                fcn_LoadThucHienDuAn();
            }
            else if (crPage == xtraTabBaoCaoCongViecHangNgay)
            {
                fcn_LoadBaoCaoCVHangNgay();
            }

        }

        private void cbt_Noti_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
            badge_Noti.Properties.Text = $"{BaseFrom.count_noti++}";
        }

        private void rIBE_XoaSua_Click(object sender, EventArgs e)
        {
            //if (rIBE_XoaSua.TextEditStyle == "Xóa")
            //{

            //}
        }

        //private void rIBE_XoaSua_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        //{
        //    string Code = "", dbstring = "";
        //    DeXuat DX = gv_DeXuatThuChi.GetFocusedRow() as DeXuat;
        //    if(DX.TrangThai==2)
        //    {
        //        MessageShower.ShowWarning("Nội dung đã gửi duyệt, Bạn không có quyền chỉnh sửa hay xóa, Nội dung sẽ được ẩn đi!");
        //        gv_DeXuatThuChi.DeleteSelectedRows();
        //        return;
        //    }    
        //    if (e.Button.Caption == "Xóa")
        //    {
        //        DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn xóa nội dung này không?");
        //        if (rs == DialogResult.Yes)
        //        {
        //            Code =(string)gv_DeXuatThuChi.GetRowCellValue(gv_DeXuatThuChi.FocusedRowHandle,"Code");
        //            dbstring = $"DELETE FROM {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} WHERE \"Code\"='{Code}' ";
        //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);
        //            gv_DeXuatThuChi.DeleteSelectedRows();
        //        }
        //    }
        //    else
        //    {
        //        DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn sửa nội dung này không?");

        //        if (rs == DialogResult.Yes)
        //        {
        //            DeXuat item = gv_DeXuatThuChi.GetFocusedRow() as DeXuat;
        //            BindingList<DeXuat> m_DX = new BindingList<DeXuat>();
        //            item.Chon = false;
        //            Code = item.Code;
        //            dbstring = $"UPDATE {ThuChiTamUng.TBL_THUCHITAMUNG_DEXUAT} SET \"IsEdit\"='{true}' WHERE \"Code\"='{Code}' ";
        //            DataProvider.InstanceTHDA.ExecuteNonQuery(dbstring);
        //            m_DX.Add(item);
        //            gc_ThuChiTamUng_DeXuat.Refresh();
        //            form_ThuChiTamUng_DeXuat.Fcn_AddData(m_DX);
        //        }

        //    }
        //}

        private void customPopupContainerEdit_noti_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void customPopupContainerEdit_noti_Popup(object sender, EventArgs e)
        {
            badge_Noti.Visible = false;
        }

        private async void customPopupContainerEdit_noti_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            var notis = SharedControls.uc_noti.DataSource as BindingList<NotificationViewModel>;
            if (notis is null)
                return;

            var array = notis.Where(x => x.State == NotificationStateEnum.NEW).ToArray();
            //var array = newNotis.ToArray();
            array.ForEach(x => x.State = NotificationStateEnum.READINPOPUP);

            string route = $"{RouteAPI.Notification_CONTROLLER}/{RouteAPI.SUFFIX_UpdateMulti}";
            var response = await CusHttpClient.InstanceCustomer.MPostAsJsonAsync<bool>(route, array);
            BaseFrom.count_noti = 0;
            badge_Noti.Properties.Text = $"{BaseFrom.count_noti}";
            SharedControls.uc_noti.RefreshDataSource();
        }

        private void ce_CongTacNgoaiKeHoach_CheckedChanged(object sender, EventArgs e)
        {
            fcn_LoadBaoCaoGiaoViec1Day();

        }

        private void ce_UseRangeDate_CheckedChanged(object sender, EventArgs e)
        {
            LoadLaiBaoCaoGiaoViec();
        }

        private void bt_reloadBaoCaoGiaoViec_Click(object sender, EventArgs e)
        {
            LoadLaiBaoCaoGiaoViec();
        }
        private void LoadLaiBaoCaoGiaoViec()
        {
            pn_rangeNgay.Visible = ce_UseRangeDate.Checked;

            SetMinMaxDateRangeNgayBaoCaoGiaoViec();
            fcn_CVHN_LoadTongHopBaoCaoHangNgay2spSheet();
        }

        private void slke_ThongTinDuAn_EditValueChanging(object sender, DevExpress.XtraEditors.Controls.ChangingEventArgs e)
        {

            if (slke_ThongTinDuAn.Properties.GetRowByKeyValue(e.NewValue) is null && e.NewValue != null)
            {
                e.NewValue = null;
                return;
            }

            if (e.NewValue?.ToString() == "Manage")
            {
                e.Cancel = true;
                Xtraform_ThongTinDuAnOffline form = new Xtraform_ThongTinDuAnOffline();
                form.ShowDialog();
                TongHopHelper.fcn_updateCbbThongTinDuAnCongTrinh();
            }


        }
        private void slke_ThongTinDuAn_EditValueChanged(object sender, EventArgs e)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null && slke_ThongTinDuAn.EditValue != null)
            {
                slke_ThongTinDuAn.EditValue = null;
                return;
            }

            if (DA is null)
            {
                SetEnableByPermission(false);
                TongHopHelper.SetControlsByPermission(false);
                return;
            }


            SharedControls.lb_ThongBaoBanQuyen.Text = FormNoti.ValidProject;

            string codeDAHienTai = slke_ThongTinDuAn.EditValue.ToString();
            var allPermission = BaseFrom.allPermission;
            if (!BaseFrom.IsFullAccess
                && !allPermission.HaveInitProjectPermission
                && !allPermission.AllProject.Contains(codeDAHienTai))
            {
                MessageShower.ShowError("Bạn không có quyền trong dự án đã chọn. Vui lòng liên hệ admin quản lý khóa!");
                slke_ThongTinDuAn.EditValue = null;
                return;
            }

            SetEnableByPermission(true);

            MSETTING.Default.DuAnHienTai = DA.Code;
            MSETTING.Default.Save();

            nud_SoNgayTuDongLayCongTac.Value = DA.SoNgayLayCongTacTuDong;

            ce_LayCongTacTuDong.CheckedChanged -= ce_LayCongTacTuDong_CheckedChanged;
            ce_LayCongTacTuDong.Checked = DA.IsLayCongTacTuDong ?? false;


            ce_LayCongTacTuDong.CheckedChanged += ce_LayCongTacTuDong_CheckedChanged;

            fcn_updateListCbb();

            //if (ce_LayCongTacTuDong.Checked)
            //    fcn_LayCongTacTuDong();
            fcn_GV_CapNhatHangMucCongViec();

            fcn_updateSheetThongTinChinh();
            fcn_updateThanhPhanThamGia();
            fcn_UpdateCboSoLanPhatSinh();
            Fcn_LoadDataQLVC();
            //LoadSheetTDKH();
            //InitListManageGroup();
            Fcn_InsertHeSoChamCong(DA.Code, true);
            List<DonViThucHien> DVTH = DuAnHelper.GetDonViThucHiens();
            DVTH.Remove(DVTH.Where(x => x.IsGiaoThau == true).FirstOrDefault());
            ctrl_DonViThucHienDuAnTienDo.DataSource = DVTH;
            _CheckTrangThai = false;
            if (pn_PATC.Controls.Count > 0)
            {

                var ctrl = pn_PATC.Controls[0] as XtraForm_PhuongAnTaiChinh;
                ctrl.LoadData();
            }
            TongHopHelper.SetControlsByPermission(false);
        }
        private void Fcn_LoadTCTU()
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu phần Thu Chi Tạm ứng", "Vui Lòng chờ!");
            ctrl_ThuChiTamUng_KhoanThu.Fcn_Update();
            form_ThuChiTamUng_DeXuat.Fcn_UpdateTCTU(this.Icon);
            ctrl_ThuChiTamUng_KhoanChi.Fcn_Load();
            WaitFormHelper.CloseWaitForm();
        }
        private void Tbl_ThongTinDuAnViewModelBindingSource_ListChanged(object sender, ListChangedEventArgs e)
        {
            //slke_ThongTinDuAn.EditValue = null;
            //slke_ThongTinDuAn.Enabled = true;
            //if (Tbl_ThongTinDuAnViewModelBindingSource.DataSource != null)
            //{
            //    xtraTabControl_TabMain.SelectedTabPage = null;
            //}
        }

        private void sb_xuatthongtinduan_Click(object sender, EventArgs e)
        {
            XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
            string PathSave = "";
            if (Xtra.ShowDialog() == DialogResult.OK)
            {
                PathSave = Xtra.SelectedPath;
            }
            else
                return;
            Workbook wb = spsheet_Thongtinchinh.Document.Clone();
            WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu phân khai");
            if (spsheet_Thongtinchinh.Document.Worksheets.ActiveWorksheet.Name != "Khối lượng phân khai")
            {
                fcn_updatenhathau_todoi("Khối lượng phân khai");
                Fcn_LoadPhanKhaiNew();
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu máy thi công");
            fcn_updatenhathau_todoi_ncc("Máy thi công");
            WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu nhân công");
            fcn_updatenhathau_todoi_ncc("Nhân công");
            WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu vật liệu");
            fcn_updatenhathau_todoi_ncc("Vật liệu");
            WaitFormHelper.CloseWaitForm();
            string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
            wb = spsheet_Thongtinchinh.Document.Clone();
            string TenDuAn = Regex.Replace(slke_ThongTinDuAn.Text, $@"(\-|\,|\\|\.|\+|\""|\;|\:)+", string.Empty);
            wb.SaveDocument(Path.Combine(PathSave, $"Khối lượng phân khai_{TenDuAn}_{time}.xlsx"), DocumentFormat.Xlsx);
            DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Khối lượng phân khai_{Regex.Replace(slke_ThongTinDuAn.Text, @"[^a-zA-Z0-9" + "]+", string.Empty)}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dialogResult == DialogResult.Yes)
            {
                Process.Start(Path.Combine(PathSave, $"Khối lượng phân khai_{TenDuAn}_{time}.xlsx"));
            }
        }

        private void sb_XuatBaoCaoDuAn_Click(object sender, EventArgs e)
        {
            tL_XuatKho.Columns["Chon"].Visible = false;
            tL_XuatKho.ShowRibbonPrintPreview();
            tL_XuatKho.Columns["Chon"].Visible = true;
        }

        private void sb_VatLieuBaoCao_Click(object sender, EventArgs e)
        {
            XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
            string PathSave = "";
            if (Xtra.ShowDialog() == DialogResult.OK)
            {
                PathSave = Xtra.SelectedPath;
            }
            else
                return;
            WaitFormHelper.ShowWaitForm("Đang xuất dữ liệu?Vui lòng chờ !!!!");
            tL_YeuCauVatTu.ForceInitialize();
            tL_NhapKho.ForceInitialize();
            tL_XuatKho.ForceInitialize();
            tL_ChuyenKho.ForceInitialize();
            tL_QLVC.ForceInitialize();
            tL_QLVC_TongHop.ForceInitialize();
            compositeLink.CreatePageForEachLink();
            XlsxExportOptions advOptions = new XlsxExportOptions();
            advOptions.ExportMode = XlsxExportMode.SingleFilePageByPage;
            string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
            string TenDuAn = Regex.Replace(slke_ThongTinDuAn.Text, $@"(\-|\,|\\|\.|\+|\""|\;|\:)+", string.Empty);
            compositeLink.ExportToXlsx(Path.Combine(PathSave, $"Quản lý vận chuyển vật tư_{TenDuAn}_{time}.xlsx"), advOptions);
            SpreadsheetControl Spread = new SpreadsheetControl();
            Spread.LoadDocument(Path.Combine(PathSave, $"Quản lý vận chuyển vật tư_{TenDuAn}_{time}.xlsx"), DocumentFormat.Xlsx);
            IWorkbook wb = Spread.Document;
            wb.Worksheets[0].Name = "Đề xuất vật tư";
            wb.Worksheets[1].Name = "Nhập kho";
            wb.Worksheets[2].Name = "Xuât kho";
            wb.Worksheets[3].Name = "Chuyển kho";
            wb.Worksheets[4].Name = "Quản lý vận chuyển";
            wb.Worksheets[5].Name = "Thông tin kho";
            wb.Worksheets[0].ActiveView.ShowZeroValues = false;
            wb.Worksheets[1].ActiveView.ShowZeroValues = false;
            wb.Worksheets[2].ActiveView.ShowZeroValues = false;
            wb.Worksheets[3].ActiveView.ShowZeroValues = false;
            wb.Worksheets[4].ActiveView.ShowZeroValues = false;
            wb.Worksheets[5].ActiveView.ShowZeroValues = false;
            wb.SaveDocument(Path.Combine(PathSave, $"Quản lý vận chuyển vật tư_{TenDuAn}_{time}.xlsx"), DocumentFormat.Xlsx);
            WaitFormHelper.CloseWaitForm();
            DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Quản lý vận chuyển vật tư_{TenDuAn}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dialogResult == DialogResult.Yes)
            {
                Process.Start(Path.Combine(PathSave, $"Quản lý vận chuyển vật tư_{TenDuAn}_{time}.xlsx"));
            }
        }

        private void sb_NhapKhoExport_Click(object sender, EventArgs e)
        {
            //tL_NhapKho.Columns["Chon"].Visible = false;
            tL_NhapKho.ShowRibbonPrintPreview();
            tL_NhapKho.Columns["Chon"].Visible = true;
        }

        private void sb_XuatKhoExport_Click(object sender, EventArgs e)
        {
            //tL_XuatKho.Columns["Chon"].Visible = false;
            tL_XuatKho.ShowRibbonPrintPreview();
            tL_XuatKho.Columns["Chon"].Visible = true;
        }

        private void sb_ChuyenKhoExport_Click(object sender, EventArgs e)
        {
            tL_ChuyenKho.ShowRibbonPrintPreview();
        }

        private void sb_TongHopExport_Click(object sender, EventArgs e)
        {
            tL_QLVC_TongHop.ShowRibbonPrintPreview();
        }

        private void sb_QLVCExport_Click(object sender, EventArgs e)
        {
            tL_QLVC.ShowRibbonPrintPreview();
        }

        //private void sb_DeXuatExport_Click(object sender, EventArgs e)
        //{
        //    XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
        //    string PathSave = "";
        //    if (Xtra.ShowDialog() == DialogResult.OK)
        //    {
        //        PathSave = Xtra.SelectedPath;
        //    }
        //    else
        //        return;
        //    WaitFormHelper.ShowWaitForm("Đang xuất dữ liệu?Vui lòng chờ !!!!");
        //    TreeList KC = ctrl_ThuChiTamUng_KhoanChi.Fcn_LoadTreeList();
        //    TreeList KT = ctrl_ThuChiTamUng_KhoanThu.Fcn_LoadTreeList();
        //    PrintingSystem ps = new PrintingSystem();
        //    PrintableComponentLink linkDeXuat = new PrintableComponentLink(ps);
        //    linkDeXuat.Component = gc_ThuChiTamUng_DeXuat;
        //    PrintableComponentLink linkKhoanChi = new PrintableComponentLink(ps);
        //    linkKhoanChi.Component =KC;
        //    PrintableComponentLink linkKhoanThu = new PrintableComponentLink(ps);
        //    linkKhoanThu.Component = KT;
        //    CompositeLink compositeLink = new CompositeLink(ps);
        //    compositeLink.Links.AddRange(new object[] { linkDeXuat,linkKhoanChi,linkKhoanThu });
        //    gc_ThuChiTamUng_DeXuat.ForceInitialize();
        //    KC.ForceInitialize();
        //    KT.ForceInitialize();
        //    compositeLink.CreatePageForEachLink();
        //    XlsxExportOptions advOptions = new XlsxExportOptions();
        //    advOptions.ExportMode = XlsxExportMode.SingleFilePageByPage;
        //    string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
        //    compositeLink.ExportToXlsx(Path.Combine(PathSave, $"Thu chi tạm ứng_{SharedControls.slke_ThongTinDuAn.Text}_{time}.xlsx"), advOptions);
        //    SpreadsheetControl Spread = new SpreadsheetControl();
        //    Spread.LoadDocument(Path.Combine(PathSave, $"Thu chi tạm ứng_{SharedControls.slke_ThongTinDuAn.Text}_{time}.xlsx"), DocumentFormat.Xlsx);
        //    IWorkbook wb = Spread.Document;
        //    wb.Worksheets[0].Name = "Đề xuất thu chi";
        //    wb.Worksheets[1].Name = "Khoản chi";
        //    wb.Worksheets[2].Name = "Khoản thu";
        //    wb.Worksheets[0].ActiveView.ShowZeroValues = false;
        //    wb.Worksheets[1].ActiveView.ShowZeroValues = false;
        //    wb.Worksheets[2].ActiveView.ShowZeroValues = false;
        //    wb.SaveDocument(Path.Combine(PathSave, $"Thu chi tạm ứng_{SharedControls.slke_ThongTinDuAn.Text}_{time}.xlsx"), DocumentFormat.Xlsx);
        //    WaitFormHelper.CloseWaitForm();
        //    DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Thu chi tạm ứng_{SharedControls.slke_ThongTinDuAn.Text}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        //    if (dialogResult == DialogResult.Yes)
        //    {
        //        Process.Start(Path.Combine(PathSave, $"Thu chi tạm ứng_{SharedControls.slke_ThongTinDuAn.Text}_{time}.xlsx"));
        //    }
        //}

        private void sb_KhoanChiExport_Click(object sender, EventArgs e)
        {
            ctrl_ThuChiTamUng_KhoanChi.Fcn_Export();
        }

        private void sb_KhoanThuExport_Click(object sender, EventArgs e)
        {
            ctrl_ThuChiTamUng_KhoanThu.Fcn_Export();
        }

        private void gv_DanhSachDACT_PrintInitialize(object sender, DevExpress.XtraGrid.Views.Base.PrintInitializeEventArgs e)
        {
            PrintingSystemBase pb = e.PrintingSystem as PrintingSystemBase;
            pb.PageSettings.Landscape = true;
        }

        /// <summary>
        /// Gửi duyệt công tác
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private async void btn_GuiDuyet_Click(object sender, EventArgs e)
        {
            if (ConnextService.groupIndex == null)
            {
                MessageShower.ShowInformation("Vui lòng chọn 1 công tác cần gửi duyệt");
                return;
            }
            List<GiaoViecExtensionViewModel> lstTrangThais;

            string dbString = $"SELECT * FROM {Server.Tbl_GiaoViec_CongViecCha} WHERE CodeCongViecCha = '{ConnextService.groupIndex.CongViecChaCode}'";
            Tbl_GiaoViec_CongViecChaViewModel cvc = DataProvider.InstanceTHDA.ExecuteQueryModel<Tbl_GiaoViec_CongViecChaViewModel>(dbString).SingleOrDefault();
            if (cvc is null)
            {
                MessageShower.ShowError("Vui lòng chọn công tác để gửi duyệt");
                return;
            }


            var result = await CusHttpClient.InstanceCustomer.MPostAsJsonAsync<Tbl_GiaoViec_CongViecChaViewModel>(RouteAPI.ApprovalGiaoViec_SendApprovalRequest, cvc);
            if (result.MESSAGE_TYPECODE)
            {
                MessageShower.ShowInformation("Đã gửi duyệt công tác");



            }
            else
            {
                MessageShower.ShowWarning($"Lỗi gửi duyệt công tác: {result.MESSAGE_CONTENT}");
            }
            if (result.Dto != null)
            {
                var cvCha = (new List<Tbl_GiaoViec_CongViecChaViewModel>() { result.Dto }).fcn_ObjToDataTable();
                DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(cvCha, Server.Tbl_GiaoViec_CongViecCha, isCompareTime: false);

                KLTTHangNgay kLTTHangNgay = CVHN_DangThucHien.Treelist.GetFocusedRow() as KLTTHangNgay;
                kLTTHangNgay.TrangThai = cbb_State.Text = result.Dto.TrangThai;
                CVHN_DangThucHien.RefreshDataSource();
            }
        }

        private void gridView_Duyet_DoubleClick(object sender, EventArgs e)
        {
            // var congViecIndex = gridView_Duyet.FocusedRowObject as GiaoViecViewModel;
            // if (congViecIndex == null) return;
            ///* congViecIndex.ListUserViews = BaseFrom.usersInView;// .RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_VIEW).Select(x => x.UserId).ToList();
            // congViecIndex.ListUserDuyets = BaseFrom.usersInApprove.Concat(BaseFrom.usersInAdmin).ToList(); //.RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_APPROVE).Select(x => x.UserId).ToList();
            // congViecIndex.ListUserThiCongs = BaseFrom.usersInEdit;//.RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_EDIT).Select(x => x.UserId).ToList();*/
            // ApproveWork frm = new ApproveWork(congViecIndex);
            // if (!CheckOpened(frm.Name))
            // {
            //     frm.sendState = new ApproveWork.SendStateDuyet(MapStateDuyet);
            //     frm.ShowDialog();
            // }
        }


        // Check open form
        private bool CheckOpened(string name)
        {
            FormCollection fc = Application.OpenForms;

            foreach (Form frm in fc)
            {
                if (frm.Name == name)
                {
                    return true;
                }
            }
            return false;
        }

        private void gridView_GuiDuyet_DoubleClick(object sender, EventArgs e)
        {
            ////var congViecIndex = gridView_GuiDuyet.FocusedRowObject as GiaoViecViewModel;
            ////if (congViecIndex == null) return;


            //////congViecIndex.ListUserViews = BaseFrom.usersInView;// RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_VIEW).Select(x => x.UserId).ToList();
            //////congViecIndex.ListUserDuyets = BaseFrom.usersInApprove;// RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_APPROVE).Select(x => x.UserId).ToList();
            //////congViecIndex.ListUserThiCongs = BaseFrom.usersInAdmin.Concat(BaseFrom.usersInEdit).ToList();// RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_EDIT).Select(x => x.UserId).ToList();
            ////FrmGuiDuyet frm = new FrmGuiDuyet(congViecIndex);
            ////if (!CheckOpened(frm.Name))
            ////{
            ////    frm.ShowDialog();
            ////}
        }

        private void gridView_DaDuyet_DoubleClick(object sender, EventArgs e)
        {
            //var congViecIndex = gridView_DaDuyet.FocusedRowObject as GiaoViecViewModel;
            //if (congViecIndex == null) return;
            ////congViecIndex.ListUserViews = BaseFrom.usersInView;// RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_VIEW).Select(x => x.UserId).ToList();
            ////congViecIndex.ListUserDuyets = BaseFrom.usersInApprove;// RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_APPROVE).Select(x => x.UserId).ToList();
            ////congViecIndex.ListUserThiCongs = BaseFrom.usersInAdmin.Concat(BaseFrom.usersInEdit).ToList();// RoleDetails.FindAll(x => x.CongViecChaCode == congViecIndex.CodeCongViecCha && x.CommandId == CommonConstants.COMMAND_EDIT).Select(x => x.UserId).ToList();
            //ThongTinDaDuyet frm = new ThongTinDaDuyet(congViecIndex);
            //if (!CheckOpened(frm.Name))
            //{
            //    frm.ShowDialog();
            //}
        }

        private void btn_CongTac_Click(object sender, EventArgs e)
        {
            BusinessTableView frm = new BusinessTableView();
            frm.ShowDialog();
        }
        private void Fcn_LoadPhanKhaiNew()
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu");
            Worksheet ws = spsheet_Thongtinchinh.Document.Worksheets[MyConstant.CONST_SheetName_KLPK];
            CellRange RangeData = ws.Range[MyConstant.TBL_QUYETTHONGTIN];
            spsheet_Thongtinchinh.CellValueChanged -= spsheet_Thongtinchinh_CellValueChanged;
            RangeData.ClearContents();
            spsheet_Thongtinchinh.BeginUpdate();
            string dbString = $"SELECT COALESCE(cttk.DonVi, dmct.DonVi) AS DonVi,nct.Ten as TenNhom,nct.DonVi as DonViNhom,nct.GhiChuBoSungJson as GhiChuBoSungJsonNhom,nct.DonGia as DonGiaNhom," +
              $"nct.KhoiLuongKeHoach as KhoiLuongNhom," +
              $"hm.TenPhanTuyen as TenTuyen,hm.CodePhanTuyen as CodePhanTuyen," +
                $" hm.Code as CodeHangMuc,hm.Ten as TenHangMuc,ctrinh.Code as CodeCongTrinh,ctrinh.Ten as TenCongTrinh," +
                $"COALESCE(cttktp.DonVi, dmct.DonVi) AS DonViTP," +
                $"COALESCE(cttktd.DonVi, dmct.DonVi) AS DonViTD, COALESCE(cttk.TenCongTac, dmct.TenCongTac) AS TenCongTac," +
                $"COALESCE(cttk.MaHieuCongTac, dmct.MaHieuCongTac) AS MaHieuCongTac,dmct.GhiChuBoSungJson,dmct.ThanhTienDocVao,cttk.GhiChu,nct.GhiChu as GhiChuNhom," +
                $"cttktp.KhoiLuongToanBo as KhoiLuongThauPhu," +
                $"cttktp.DonGiaThiCong as DonGiaThauPhu," +
                $"cttktd.KhoiLuongToanBo as KhoiLuongToDoi,cttktd.DonGiaThiCong as DonGiaToDoi," +
                $"cttktp.CodeNhaThauPhu as CodeTP,cttktd.CodeToDoi as CodeTD, \r\n" +
                $"hm.CodeCongTrinh, \r\n" +
                $"ctrinh.CodeDuAn, \r\n" +
                $"nt.Ten AS TenNhaThau, \r\n" +
                $"tdtc.Ten AS TenToDoi, \r\n" +
                $"ntp.Ten AS TenNhaThauPhu,ddtdCT.Ten as TenDDCT,ddtdNhom.Ten as TenDDNhom,ddtdTuyen.Ten as TenDDTuyen,cttk.* \r\n" +
                $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk\r\n" +
                $"INNER JOIN {TDKH.TBL_DanhMucCongTac} dmct\r\n" +
                $"ON cttk.CodeCongTac = dmct.Code \r\n" +
                $"LEFT JOIN {TDKH.Tbl_TenDienDaiTuDo} ddtdCT\r\n" +
                $"ON dmct.CodeDienDai = ddtdCT.Code \r\n" +
                $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttktp\r\n" +
                $"ON cttk.CodeCongTac = cttktp.CodeCongTac AND cttktp.CodeNhaThauPhu IS NOT NULL\r\n" +
                $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttktd\r\n" +
                $"ON cttk.CodeCongTac = cttktd.CodeCongTac AND cttktd.CodeToDoi IS NOT NULL\r\n" +
                $"LEFT JOIN {TDKH.TBL_NhomCongTac} nct\r\n" +
                $"ON cttk.CodeNhom = nct.Code \r\n" +
                $"LEFT JOIN {TDKH.Tbl_TenDienDaiTuDo} ddtdNhom\r\n" +
                $"ON nct.CodeDienDai = ddtdNhom.Code \r\n" +
                //$"LEFT JOIN {TDKH.Tbl_PhanTuyen} Tuyen\r\n" +
                //$"ON dmct.CodePhanTuyen = Tuyen.Code \r\n" +
                $"INNER JOIN {MyConstant.view_HangMucWithPhanTuyen} hm\r\n" +
                 //$"ON (dmct.CodeHangMuc = hm.Code \r\n" +
                 //$"AND dmct.CodePhanTuyen = hm.CodePhanTuyen) OR dmct.CodeHangMuc = hm.Code \r\n" +

                 $"ON (hm.Code = dmct.CodeHangMuc AND ((dmct.CodePhanTuyen IS NOT NULL AND hm.CodePhanTuyen = dmct.CodePhanTuyen) " +
                 $"OR (dmct.CodePhanTuyen IS NULL AND hm.CodePhanTuyen IS NULL)))\r\n" +
                $"LEFT JOIN {TDKH.Tbl_TenDienDaiTuDo} ddtdTuyen\r\n" +
                $"ON hm.CodeDienDai = ddtdTuyen.Code \r\n" +
                $"INNER JOIN {MyConstant.TBL_THONGTINCONGTRINH} ctrinh\r\n" +
                $"ON hm.CodeCongTrinh = ctrinh.Code \r\n" +
                $"INNER JOIN {MyConstant.TBL_THONGTINDUAN} da\r\n" +
                $"ON ctrinh.CodeDuAn = da.Code \r\n" +
                $"LEFT JOIN {MyConstant.TBL_THONGTINNHATHAU} nt\r\n" +
                $"ON cttk.CodeNhaThau = nt.Code \r\n" +
                $"LEFT JOIN {MyConstant.TBL_THONGTINTODOITHICONG} tdtc\r\n" +
                $"ON cttktd.CodeToDoi = tdtc.Code \r\n" +
                $"LEFT JOIN {MyConstant.TBL_THONGTINNHATHAUPHU} ntp\r\n" +
                $"ON cttktp.CodeNhaThauPhu = ntp.Code \r\n" +
                $"WHERE cttk.CodeGiaiDoan = '{SharedControls.cbb_DBKH_ChonDot.SelectedValue}' \r\n" +
                $"AND cttk.CodeNhaThau IS NOT NULL " +
                //$"GROUP BY hm.Code, hm.CodePhanTuyen, cttk.Code \r\n" +
                $"ORDER BY ctrinh.SortId ASC, hm.SortId ASC, cttk.SortIdGoc ASC\r\n";
            DataTable dtCongTacTheoKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dbString = $"SELECT cttk.*,NHOM.Ten as TenNhom,NHOM.DonVi as DonViNhom,NHOM.CodeNhomGiaoThau,NHOM.DonGia AS DonGiaNhom,NHOM.KhoiLuongKeHoach AS KhoiLuongKeHoachNhom" +
                $" FROM {TDKH.TBL_NhomCongTac} NHOM " +
                $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk ON cttk.CodeNhom=NHOM.Code AND cttk.CodeNhaThau IS NULL" +
                $" WHERE NHOM.CodeNhomGiaoThau IS NOT NULL";
            DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dtCongTacTheoKy.AddIndPhanTuyenNhom();
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            DataTable dtData = new DataTable();
            List<string> colsSum = new List<string>();
            foreach (var item in Name)
            {
                //if(item.Key== "NgayBatDau"||item.Key== "NgayKetThuc")
                //    dtData.Columns.Add(item.Key, typeof(DateTime));
                //else
                dtData.Columns.Add(item.Key, typeof(object));
                if (item.Key.Contains("TT_"))
                    colsSum.Add(item.Key);
            }
            colsSum.Add("ThanhTienDuThau");
            colsSum.Add("ThanhTienNhom");
            if (RangeData.RowCount > 4)
            {
                ws.Rows.Remove(RangeData.TopRowIndex + 1, RangeData.RowCount - 4);
            }
            bool SumNhom = false;
            string prefixFormula = MyConstant.PrefixFormula;
            var grCongTrinh = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["CodeCongTrinh"].ToString());
            int RowTong = RangeData.TopRowIndex + 1;
            var crRowInd = RangeData.TopRowIndex + 1;
            DataRow Tong = dtData.NewRow();
            Tong["TenCongTac"] = "TỔNG";
            dtData.Rows.Add(Tong);
            List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource) as List<DonViThucHien>;
            DonViThucHien GiaoThau = DVTH.Where(x => x.IsGiaoThau).FirstOrDefault();
            List<DonViThucHien> NhanThau = DVTH.Where(x => !x.IsGiaoThau).ToList();
            string cotdonvi = string.Empty;
            string cotnhathau = string.Empty;
            string cotdongianhathau = string.Empty;
            string thanhtiennhathau = string.Empty;
            string cotdonviGT = $"DV_{GiaoThau.Code}";
            string cotnhathauGT = $"KL_{GiaoThau.Code}";
            string cotdongianhathauGT = $"DG_{GiaoThau.Code}";
            string thanhtiennhathauGT = $"TT_{GiaoThau.Code}";
            long stt = 1;
            string Fomular = string.Empty, FomularThucTe = string.Empty, FomularKL = string.Empty;
            int fstInd = RangeData.TopRowIndex;
            string forGiaTri = string.Empty;
            foreach (var Ctrinh in grCongTrinh)
            {
                DataRow newRowCtrinh = dtData.NewRow();
                dtData.Rows.Add(newRowCtrinh);
                var fstCtr = Ctrinh.FirstOrDefault();
                newRowCtrinh[TDKH.COL_DanhMucCongTac] = $"{fstCtr["TenCongTrinh"]}".ToUpper();
                newRowCtrinh[TDKH.COL_TypeRow] = MyConstant.TYPEROW_CongTrinh;
                newRowCtrinh[TDKH.COL_RowCha] = $"{prefixFormula}ROW(A{RowTong})";
                newRowCtrinh[TDKH.COL_Code] = Ctrinh.Key;
                newRowCtrinh[TDKH.COL_MaHieuCongTac] = MyConstant.CONST_TYPE_CONGTRINH;
                var crRowCtrInd = crRowInd = RangeData.TopRowIndex + dtData.Rows.Count;
                var grHangMuc = Ctrinh.GroupBy(x => x["CodeHangMuc"].ToString());
                foreach (var HM in grHangMuc)
                {
                    DataRow newRowHM = dtData.NewRow();
                    dtData.Rows.Add(newRowHM);
                    var fstHM = HM.First();
                    newRowHM[TDKH.COL_DanhMucCongTac] = $"{fstHM["TenHangMuc"]}".ToUpper();
                    newRowHM[TDKH.COL_MaHieuCongTac] = MyConstant.CONST_TYPE_HANGMUC;
                    newRowHM[TDKH.COL_TypeRow] = MyConstant.TYPEROW_HangMuc;
                    newRowHM[TDKH.COL_RowCha] = $"{prefixFormula}ROW(A{crRowCtrInd})";
                    newRowHM[TDKH.COL_Code] = HM.Key;
                    var crRowHMInd = crRowInd = RangeData.TopRowIndex + dtData.Rows.Count;
                    var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"])
                      .OrderBy(x => x.Key);
                    foreach (var Tuyen in grPhanTuyen)
                    {
                        var fstTuyen = Tuyen.First();
                        string crCodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : $"{fstTuyen["CodePhanTuyen"]}";
                        int? crRowPTInd = null;
                        string codePT = fstTuyen["CodePhanTuyen"].ToString();
                        DataRow newRowPT = null;
                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                        {
                            if (fstTuyen["TenDDTuyen"] != DBNull.Value)
                            {
                                DataRow newRowDD = dtData.NewRow();
                                dtData.Rows.Add(newRowDD);
                                //crRowPTInd = crRowInd = RangeData.TopRowIndex + dtData.Rows.Count;
                                newRowDD[TDKH.COL_DanhMucCongTac] = $"{fstTuyen["TenDDTuyen"]}";
                                newRowDD[TDKH.COL_TypeRow] = MyConstant.TYPEROW_GOP;
                                //newRowDD[TDKH.COL_RowCha] = $"{prefixFormula}ROW(A{crRowHMInd})";
                            }
                            newRowPT = dtData.NewRow();
                            dtData.Rows.Add(newRowPT);
                            crRowPTInd = crRowInd = RangeData.TopRowIndex + dtData.Rows.Count;
                            newRowPT[TDKH.COL_DanhMucCongTac] = $"{fstTuyen["TenTuyen"]}".ToUpper();
                            newRowPT[TDKH.COL_MaHieuCongTac] = MyConstant.CONST_TYPE_PhanTuyen;
                            newRowPT[TDKH.COL_TypeRow] = MyConstant.TYPEROW_PhanTuyen;
                            newRowPT[TDKH.COL_RowCha] = $"{prefixFormula}ROW(A{crRowHMInd})";
                        }
                        var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"])
          .OrderBy(x => x.Key);
                        foreach (var NhomTuyen in grTuyenNhom)
                        {
                            var fstNhom = NhomTuyen.First();
                            string crCodeNhom = (fstNhom["CodeNhom"] == DBNull.Value) ? null : $"{fstNhom["CodeNhom"]}";
                            SumNhom = false;
                            DataRow drNhom = null;
                            DataRow newRowNhom = null;
                            int? crRowNhomInd = null;
                            if (fstNhom["CodeNhom"] != DBNull.Value)
                            {
                                if (fstNhom["TenDDNhom"] != DBNull.Value)
                                {
                                    DataRow newRowDD = dtData.NewRow();
                                    dtData.Rows.Add(newRowDD);
                                    newRowDD[TDKH.COL_DanhMucCongTac] = $"{fstNhom["TenDDNhom"]}";
                                    newRowDD[TDKH.COL_TypeRow] = MyConstant.TYPEROW_GOP;
                                }
                                newRowNhom = dtData.NewRow();
                                dtData.Rows.Add(newRowNhom);
                                crRowNhomInd = crRowInd = RangeData.TopRowIndex + dtData.Rows.Count;

                                newRowNhom[TDKH.COL_DanhMucCongTac] = fstNhom["TenNhom"].ToString().ToUpper();
                                newRowNhom[TDKH.COL_Code] = crCodeNhom;
                                newRowNhom[TDKH.COL_MaHieuCongTac] = MyConstant.CONST_TYPE_NHOM;
                                newRowNhom[TDKH.COL_RowCha] = $"{prefixFormula}ROW(A{(crRowPTInd ?? crRowHMInd)})";
                                newRowNhom[TDKH.COL_TypeRow] = MyConstant.TYPEROW_Nhom;
                                if (fstNhom["GhiChuBoSungJsonNhom"] != DBNull.Value)
                                {
                                    var GhiChuBoSungJson = JsonConvert.DeserializeObject<TDKH_GhiChuBoSungJson>(fstNhom["GhiChuBoSungJsonNhom"].ToString());
                                    newRowNhom[TDKH.COL_STTDocVao] = GhiChuBoSungJson.STT;
                                    newRowNhom[TDKH.COL_STTND] = GhiChuBoSungJson.STTND;
                                }
                                if (fstNhom["KhoiLuongNhom"] != DBNull.Value)
                                {
                                    if (dtNhom.Rows.Count > 0)
                                    {
                                        foreach (var item in NhanThau)
                                        {
                                            DataRow[] DataNhom = dtNhom.AsEnumerable().Where(x => x["CodeNhomGiaoThau"].ToString() == fstNhom["CodeNhom"].ToString()
                                            && x[item.ColCodeFK].ToString() == item.Code).ToArray();
                                            if (DataNhom.Any())
                                            {
                                                newRowNhom[$"KL_{item.Code}"] = DataNhom.FirstOrDefault()["KhoiLuongKeHoachNhom"];
                                                newRowNhom[$"DG_{item.Code}"] = DataNhom.FirstOrDefault()["DonGiaNhom"];
                                                newRowNhom[$"DV_{item.Code}"] = DataNhom.FirstOrDefault()["KhoiLuongKeHoachNhom"];
                                                newRowNhom[$"TT_{item.Code}"] = $"{MyConstant.PrefixFormula}({Name[$"KL_{item.Code}"]}{crRowInd}*{Name[$"DG_{item.Code}"]}{crRowInd})";
                                            }
                                        }

                                    }
                                    SumNhom = true;
                                    newRowNhom[TDKH.COL_DonVi] = fstNhom["DonViNhom"];
                                    newRowNhom["KhoiLuongDuThau"] = fstNhom["KhoiLuongNhom"];
                                    newRowNhom["DonGiaDuThau"] = fstNhom["DonGiaNhom"];
                                    newRowNhom["ThanhTienDuThau"] = $"{MyConstant.PrefixFormula}({Name["KhoiLuongDuThau"]}{crRowInd}*{Name["DonGiaDuThau"]}{crRowInd})";
                                    newRowNhom[cotnhathauGT] = fstNhom["KhoiLuongNhom"];
                                    newRowNhom[cotdongianhathauGT] = fstNhom["DonGiaNhom"];
                                    newRowNhom[cotdonviGT] = fstNhom["DonViNhom"];
                                    newRowNhom[thanhtiennhathauGT] = $"{MyConstant.PrefixFormula}({Name[cotnhathauGT]}{crRowInd}*{Name[cotdongianhathauGT]}{crRowInd})";


                                }

                            }
                            var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"].ToString());
                            foreach (var CongTac in grCongTacTuyen)
                            {
                                var FirstCT = CongTac.FirstOrDefault();
                                if (FirstCT["TenDDCT"] != DBNull.Value)
                                {
                                    DataRow newRowDD = dtData.NewRow();
                                    dtData.Rows.Add(newRowDD);
                                    newRowDD[TDKH.COL_DanhMucCongTac] = $"{FirstCT["TenDDCT"]}";
                                    newRowDD[TDKH.COL_TypeRow] = MyConstant.TYPEROW_GOP;
                                }
                                DataRow newRowCTac = dtData.NewRow();
                                dtData.Rows.Add(newRowCTac);
                                var crrowIndCt = crRowInd = RangeData.TopRowIndex + dtData.Rows.Count;
                                WaitFormHelper.ShowWaitForm($"{crRowInd}.{FirstCT["MaHieuCongTac"]}_{FirstCT["TenCongTac"]}");
                                newRowCTac[TDKH.COL_STT] = stt++;
                                newRowCTac[TDKH.COL_Code] = CongTac.Key;
                                newRowCTac["CodeNhom"] = crCodeNhom;
                                newRowCTac[TDKH.COL_RowCha] = $"{prefixFormula}ROW(A{(crRowNhomInd ?? crRowPTInd ?? crRowHMInd)})";
                                newRowCTac[TDKH.COL_TypeRow] = MyConstant.TYPEROW_CVCha;
                                newRowCTac[TDKH.COL_MaHieuCongTac] = FirstCT["MaHieuCongTac"];
                                newRowCTac[TDKH.COL_DanhMucCongTac] = FirstCT["TenCongTac"];
                                newRowCTac[TDKH.COL_GhiChu] = FirstCT["GhiChu"];
                                newRowCTac[TDKH.COL_NgayBatDau] = $"{MyConstant.PrefixDate}{FirstCT["NgayBatDau"]}";
                                newRowCTac[TDKH.COL_NgayKetThuc] = $"{MyConstant.PrefixDate}{FirstCT["NgayKetThuc"]}";
                                newRowCTac["CodeCongTac"] = FirstCT["CodeCongTac"];
                                newRowCTac["DonVi"] = newRowCTac[cotdonviGT] = FirstCT["DonVi"];
                                newRowCTac["KhoiLuongDuThau"] = newRowCTac[cotnhathauGT] = FirstCT["KhoiLuongToanBo"];
                                newRowCTac["DonGiaDuThau"] = FirstCT["DonGia"];
                                newRowCTac["ThanhTienDocVao"] = FirstCT["ThanhTienDocVao"];
                                newRowCTac["ThanhTienDuThau"] = $"{prefixFormula}({Name["KhoiLuongDuThau"]}{crRowInd}*{Name["DonGiaDuThau"]}{crRowInd})";
                                newRowCTac["DonGiaDuThau"] = FirstCT["DonGia"];
                                newRowCTac[cotdongianhathauGT] = FirstCT["DonGia"];
                                newRowCTac[thanhtiennhathauGT] = $"{prefixFormula}({Name[cotnhathauGT]}{crRowInd}*{Name[cotdongianhathauGT]}{crRowInd})";
                                if (FirstCT["GhiChuBoSungJson"] != DBNull.Value)
                                {
                                    var GhiChuBoSungJson = JsonConvert.DeserializeObject<TDKH_GhiChuBoSungJson>(FirstCT["GhiChuBoSungJson"].ToString());
                                    newRowCTac[TDKH.COL_STTDocVao] = GhiChuBoSungJson.STT;
                                    newRowCTac[TDKH.COL_STTND] = GhiChuBoSungJson.STTND;
                                }
                                var grNhaThauPhu = CongTac.Where(x => x["CodeTP"] != DBNull.Value).GroupBy(x => x["CodeTP"].ToString());
                                Fomular = string.Empty;
                                foreach (var tp in grNhaThauPhu)
                                {
                                    cotdonvi = $"DV_{tp.Key}";
                                    cotnhathau = $"KL_{tp.Key}";
                                    cotdongianhathau = $"DG_{tp.Key}";
                                    thanhtiennhathau = $"TT_{tp.Key}";
                                    newRowCTac[cotdonvi] = tp.FirstOrDefault()["DonViTP"];
                                    newRowCTac[cotnhathau] = tp.FirstOrDefault()["KhoiLuongThauPhu"];
                                    newRowCTac[cotdongianhathau] = tp.FirstOrDefault()["DonGiaThauPhu"];
                                    newRowCTac[thanhtiennhathau] = $"{prefixFormula}({Name[cotnhathau]}{crRowInd}*{Name[cotdongianhathau]}{crRowInd})"; ;
                                    Fomular += $"+{Name[cotnhathau]}{crRowInd}";
                                }
                                var grToDoi = CongTac.Where(x => x["CodeTD"] != DBNull.Value).GroupBy(x => x["CodeTD"].ToString());
                                foreach (var tp in grToDoi)
                                {
                                    cotdonvi = $"DV_{tp.Key}";
                                    cotnhathau = $"KL_{tp.Key}";
                                    cotdongianhathau = $"DG_{tp.Key}";
                                    thanhtiennhathau = $"TT_{tp.Key}";
                                    newRowCTac[cotdonvi] = tp.FirstOrDefault()["DonViTD"];
                                    newRowCTac[cotnhathau] = tp.FirstOrDefault()["KhoiLuongToDoi"];
                                    newRowCTac[cotdongianhathau] = tp.FirstOrDefault()["DonGiaToDoi"];
                                    newRowCTac[thanhtiennhathau] = $"{prefixFormula}({Name[cotnhathau]}{crRowInd}*{Name[cotdongianhathau]}{crRowInd})"; ;
                                    Fomular += $"+{Name[cotnhathau]}{crRowInd}";
                                }
                                if (!string.IsNullOrEmpty(Fomular))
                                    newRowCTac["KhoiLuongThucTe"] = $"{prefixFormula}{Fomular}";
                            }
                            if (!SumNhom && newRowNhom != null)
                            {
                                foreach (string col in colsSum)
                                {
                                    forGiaTri = TDKHHelper.GetFormulaSumChild((crRowNhomInd ?? 0), crRowInd - 1, Name[col], Name[TDKH.COL_RowCha]);
                                    newRowNhom[col] = $"{MyConstant.PrefixFormula}{forGiaTri}";
                                }
                            }
                        }
                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                        {
                            DataRow newRowHTPT = dtData.NewRow();
                            dtData.Rows.Add(newRowHTPT);
                            newRowHTPT[TDKH.COL_TypeRow] = MyConstant.TYPEROW_HTPhanTuyen;
                            newRowHTPT[TDKH.COL_RowCha] = $"{prefixFormula}ROW(A{crRowPTInd})";
                            newRowHTPT[TDKH.COL_MaHieuCongTac] = MyConstant.CONST_TYPE_HoanThanhPhanTuyen;
                            newRowHTPT[TDKH.COL_DanhMucCongTac] = $"Hoàn thành {Tuyen.FirstOrDefault()["TenTuyen"]}".ToUpper();
                            foreach (string col in colsSum)
                            {
                                forGiaTri = TDKHHelper.GetFormulaSumChild((crRowPTInd ?? 0), crRowInd - 1, Name[col], Name[TDKH.COL_RowCha]);
                                newRowPT[col] = $"{MyConstant.PrefixFormula}{forGiaTri}";
                            }
                        }
                    }
                    foreach (string col in colsSum)
                    {
                        forGiaTri = TDKHHelper.GetFormulaSumChild(crRowHMInd, crRowInd, Name[col], Name[TDKH.COL_RowCha]);
                        newRowHM[col] = $"{MyConstant.PrefixFormula}{forGiaTri}";
                    }
                }
                foreach (string col in colsSum)
                {
                    forGiaTri = TDKHHelper.GetFormulaSumChild(crRowCtrInd, crRowInd, Name[col], Name[TDKH.COL_RowCha]);
                    newRowCtrinh[col] = $"{MyConstant.PrefixFormula}{forGiaTri}";
                }
            }
            crRowInd = RangeData.TopRowIndex + dtData.Rows.Count;
            foreach (string col in colsSum)
            {
                forGiaTri = TDKHHelper.GetFormulaSumChild(fstInd, crRowInd, Name[col], Name[TDKH.COL_RowCha]);
                Tong[col] = $"{MyConstant.PrefixFormula}{forGiaTri}";
            }
            int numRow = dtData.Rows.Count;
            ws.Rows.Insert(RangeData.TopRowIndex + 1, numRow + 1, RowFormatMode.FormatAsNext);
            ws.Import(dtData, false, fstInd, 0);
            ws.Columns[Name[TDKH.COL_DanhMucCongTac]].Alignment.WrapText = true;
            RangeData = ws.Range[MyConstant.TBL_QUYETTHONGTIN];
            SpreadsheetHelper.ReplaceAllFormulaAfterImport(RangeData);
            SpreadsheetHelper.FormatRowsInRange(RangeData, Name[TDKH.COL_TypeRow], Name[TDKH.COL_RowCha],
            Name[TDKH.COL_Code], colMaCongTac: Name[TDKH.COL_MaHieuCongTac]);
            spsheet_Thongtinchinh.EndUpdate();
            spsheet_Thongtinchinh.Document.History.Clear();
            spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
            WaitFormHelper.CloseWaitForm();
        }
        private void Fcn_LoadCongTacPhanKhai(string Namesheet)
        {
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
                return;
            Worksheet ws = spsheet_Thongtinchinh.Document.Worksheets[Namesheet];
            CellRange RangeData = ws.Range[MyConstant.TBL_QUYETTHONGTIN];
            spsheet_Thongtinchinh.CellValueChanged -= spsheet_Thongtinchinh_CellValueChanged;
            RangeData.ClearContents();
            spsheet_Thongtinchinh.BeginUpdate();
            string dbString = $"SELECT COALESCE(cttk.DonVi, dmct.DonVi) AS DonVi,nct.Ten as TenNhom,nct.DonVi as DonViNhom,nct.GhiChuBoSungJson as GhiChuBoSungJsonNhom,nct.DonGia as DonGiaNhom," +
                $"nct.KhoiLuongKeHoach as KhoiLuongNhom," +
                $"hm.TenPhanTuyen as TenTuyen,hm.CodePhanTuyen as CodePhanTuyen," +
                  $" hm.Code as CodeHangMuc,hm.Ten as TenHangMuc,ctrinh.Code as CodeCongTrinh,ctrinh.Ten as TenCongTrinh," +
                  $"COALESCE(cttktp.DonVi, dmct.DonVi) AS DonViTP," +
                  $"COALESCE(cttktd.DonVi, dmct.DonVi) AS DonViTD, COALESCE(cttk.TenCongTac, dmct.TenCongTac) AS TenCongTac," +
                  $"COALESCE(cttk.MaHieuCongTac, dmct.MaHieuCongTac) AS MaHieuCongTac,dmct.GhiChuBoSungJson,cttk.GhiChu,nct.GhiChu as GhiChuNhom," +
                  $"cttktp.KhoiLuongToanBo as KhoiLuongThauPhu," +
                  $"cttktp.DonGiaThiCong as DonGiaThauPhu," +
                  $"cttktd.KhoiLuongToanBo as KhoiLuongToDoi,cttktd.DonGiaThiCong as DonGiaToDoi," +
                  $"cttktp.CodeNhaThauPhu as CodeTP,cttktd.CodeToDoi as CodeTD, \r\n" +
                  $"hm.CodeCongTrinh, \r\n" +
                  $"ctrinh.CodeDuAn, \r\n" +
                  $"nt.Ten AS TenNhaThau, \r\n" +
                  $"tdtc.Ten AS TenToDoi, \r\n" +
                  $"ntp.Ten AS TenNhaThauPhu,cttk.* \r\n" +
                  $"FROM {TDKH.TBL_ChiTietCongTacTheoKy} cttk\r\n" +
                  $"INNER JOIN {TDKH.TBL_DanhMucCongTac} dmct\r\n" +
                  $"ON cttk.CodeCongTac = dmct.Code \r\n" +
                  $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttktp\r\n" +
                  $"ON cttk.CodeCongTac = cttktp.CodeCongTac AND cttktp.CodeNhaThauPhu IS NOT NULL\r\n" +
                  $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttktd\r\n" +
                  $"ON cttk.CodeCongTac = cttktd.CodeCongTac AND cttktd.CodeToDoi IS NOT NULL\r\n" +
                  $"LEFT JOIN {TDKH.TBL_NhomCongTac} nct\r\n" +
                  $"ON cttk.CodeNhom = nct.Code \r\n" +
                  //$"LEFT JOIN {TDKH.Tbl_PhanTuyen} Tuyen\r\n" +
                  //$"ON dmct.CodePhanTuyen = Tuyen.Code \r\n" +
                  $"INNER JOIN {MyConstant.view_HangMucWithPhanTuyen} hm\r\n" +
                   //$"ON (dmct.CodeHangMuc = hm.Code \r\n" +
                   //$"AND dmct.CodePhanTuyen = hm.CodePhanTuyen) OR dmct.CodeHangMuc = hm.Code \r\n" +

                   $"ON (hm.Code = dmct.CodeHangMuc AND ((dmct.CodePhanTuyen IS NOT NULL AND hm.CodePhanTuyen = dmct.CodePhanTuyen) " +
                   $"OR (dmct.CodePhanTuyen IS NULL AND hm.CodePhanTuyen IS NULL)))\r\n" +
                  $"INNER JOIN {MyConstant.TBL_THONGTINCONGTRINH} ctrinh\r\n" +
                  $"ON hm.CodeCongTrinh = ctrinh.Code \r\n" +
                  $"INNER JOIN {MyConstant.TBL_THONGTINDUAN} da\r\n" +
                  $"ON ctrinh.CodeDuAn = da.Code \r\n" +
                  $"LEFT JOIN {MyConstant.TBL_THONGTINNHATHAU} nt\r\n" +
                  $"ON cttk.CodeNhaThau = nt.Code \r\n" +
                  $"LEFT JOIN {MyConstant.TBL_THONGTINTODOITHICONG} tdtc\r\n" +
                  $"ON cttktd.CodeToDoi = tdtc.Code \r\n" +
                  $"LEFT JOIN {MyConstant.TBL_THONGTINNHATHAUPHU} ntp\r\n" +
                  $"ON cttktp.CodeNhaThauPhu = ntp.Code \r\n" +
                  $"WHERE cttk.CodeGiaiDoan = '{SharedControls.cbb_DBKH_ChonDot.SelectedValue}' \r\n" +
                  $"AND cttk.CodeNhaThau IS NOT NULL " +
                  //$"GROUP BY hm.Code, hm.CodePhanTuyen, cttk.Code \r\n" +
                  $"ORDER BY ctrinh.SortId ASC, hm.SortId ASC, cttk.SortId ASC\r\n";
            DataTable dtCongTacTheoKy = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dbString = $"SELECT cttk.*,NHOM.Ten as TenNhom,NHOM.DonVi as DonViNhom,NHOM.CodeNhomGiaoThau,NHOM.DonGia AS DonGiaNhom,NHOM.KhoiLuongKeHoach AS KhoiLuongKeHoachNhom" +
                $" FROM {TDKH.TBL_NhomCongTac} NHOM " +
                $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk ON cttk.CodeNhom=NHOM.Code AND cttk.CodeNhaThau IS NULL" +
                $" WHERE NHOM.CodeNhomGiaoThau IS NOT NULL";
            DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dtCongTacTheoKy.AddIndPhanTuyenNhom();
            if (RangeData.RowCount - 1 <= dtCongTacTheoKy.Rows.Count)
                ws.Rows.Insert(RangeData.BottomRowIndex,
                 dtCongTacTheoKy.Rows.Count, RowFormatMode.FormatAsPrevious);
            int crRowInd = RangeData.TopRowIndex + 1;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            string Mahieu = "", TenCT = "";
            int RowHM = 0, RowTuyen = 0, RowNhom = 0, RowCongTrinh = 0;
            long stt = 1;
            string Fomular = "", FomularThucTe = "", FomularKL = "";
            List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource) as List<DonViThucHien>;
            DonViThucHien GiaoThau = DVTH.Where(x => x.IsGiaoThau).FirstOrDefault();
            List<DonViThucHien> NhanThau = DVTH.Where(x => !x.IsGiaoThau).ToList();
            string cotdonvi = string.Empty;
            string cotnhathau = string.Empty;
            string cotdongianhathau = string.Empty;
            string thanhtiennhathau = string.Empty;
            string cotdonviGT = $"DV_{GiaoThau.Code}";
            string cotnhathauGT = $"KL_{GiaoThau.Code}";
            string cotdongianhathauGT = $"DG_{GiaoThau.Code}";
            string thanhtiennhathauGT = $"TT_{GiaoThau.Code}";

            List<int> IndexHM = new List<int>();
            var grCongTrinh = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["CodeCongTrinh"].ToString());
            string FomularNhom = string.Empty;
            bool SumNhom = false;
            foreach (var Ctrinh in grCongTrinh)
            {
                IndexHM.Clear();
                Row crRowWs = ws.Rows[crRowInd++];
                ws.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                RowCongTrinh = crRowInd;
                var First = Ctrinh.FirstOrDefault();
                crRowWs.Font.Bold = true;
                crRowWs.Font.Color = MyConstant.color_Row_CongTrinh;
                crRowWs[Name[TDKH.COL_Code]].SetValueFromText(Ctrinh.Key);
                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_CONGTRINH);
                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(First["TenCongTrinh"].ToString().ToUpper());

                var grHangMuc = Ctrinh.GroupBy(x => x["CodeHangMuc"].ToString());
                foreach (var HM in grHangMuc)
                {
                    crRowWs = ws.Rows[crRowInd++];
                    ws.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                    RowHM = crRowInd;
                    IndexHM.Add(RowHM);
                    crRowWs.Font.Bold = true;
                    crRowWs.Font.Color = MyConstant.color_Row_HangMuc;
                    crRowWs[Name[TDKH.COL_Code]].SetValueFromText(HM.Key);
                    crRowWs[Name[TDKH.COL_RowCha]].SetValue(RowCongTrinh);
                    crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HANGMUC);
                    crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(HM.FirstOrDefault()["TenHangMuc"].ToString().ToUpper());

                    var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"])
                        .OrderBy(x => x.Key);
                    foreach (var Tuyen in grPhanTuyen)
                    {
                        var fstTuyen = Tuyen.First();
                        string crCodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : $"{fstTuyen["CodePhanTuyen"]}";
                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                        {
                            crRowWs = ws.Rows[crRowInd++];
                            ws.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                            crRowWs.Font.Bold = true;
                            RowTuyen = crRowInd;
                            crRowWs.Font.Color = MyConstant.color_Row_PhanTuyen;
                            crRowWs[Name[TDKH.COL_Code]].SetValueFromText(crCodeTuyen);
                            crRowWs[Name[TDKH.COL_RowCha]].SetValue(RowHM);
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_PhanTuyen);
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(fstTuyen["TenTuyen"].ToString().ToUpper());
                        }
                        var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"])
                                 .OrderBy(x => x.Key);

                        foreach (var NhomTuyen in grTuyenNhom)
                        {
                            var fstNhom = NhomTuyen.First();

                            string crCodeNhom = (fstNhom["CodeNhom"] == DBNull.Value) ? null : $"{fstNhom["CodeNhom"]}";
                            SumNhom = false;
                            if (fstNhom["CodeNhom"] != DBNull.Value)
                            {
                                crRowWs = ws.Rows[crRowInd++];
                                ws.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                                crRowWs.Font.Bold = true;
                                RowNhom = crRowInd;
                                crRowWs.Font.Color = MyConstant.color_Row_NhomCongTac;
                                crRowWs[Name[TDKH.COL_Code]].SetValueFromText(crCodeNhom);
                                crRowWs[Name[TDKH.COL_RowCha]].SetValue(RowTuyen);
                                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_NHOM);
                                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(fstNhom["TenNhom"].ToString().ToUpper());
                                crRowWs[Name["GhiChu"]].SetValue(fstNhom["GhiChuNhom"].ToString().ToUpper());
                                if (fstNhom["GhiChuBoSungJsonNhom"] != DBNull.Value)
                                {
                                    var GhiChuBoSungJson = JsonConvert.DeserializeObject<TDKH_GhiChuBoSungJson>(fstNhom["GhiChuBoSungJsonNhom"].ToString());
                                    crRowWs[Name[TDKH.COL_STTDocVao]].SetValueFromText(GhiChuBoSungJson.STT);
                                    crRowWs[Name[TDKH.COL_STTND]].SetValueFromText(GhiChuBoSungJson.STTND);
                                }
                                if (fstNhom["DonViNhom"] != DBNull.Value)
                                {
                                    if (dtNhom.Rows.Count > 0)
                                    {
                                        foreach (var item in NhanThau)
                                        {
                                            DataRow[] DataNhom = dtNhom.AsEnumerable().Where(x => x["CodeNhomGiaoThau"].ToString() == fstNhom["CodeNhom"].ToString()
                                            && x[item.ColCodeFK].ToString() == item.Code).ToArray();
                                            if (DataNhom.Any())
                                            {
                                                crRowWs[Name[$"KL_{item.Code}"]].SetValue(DataNhom.FirstOrDefault()["KhoiLuongKeHoachNhom"]);
                                                crRowWs[Name[$"DG_{item.Code}"]].SetValue(DataNhom.FirstOrDefault()["DonGiaNhom"]);
                                                crRowWs[Name[$"DV_{item.Code}"]].SetValue(DataNhom.FirstOrDefault()["DonViNhom"]);
                                                crRowWs[Name[$"TT_{item.Code}"]].Formula = $"({Name[$"KL_{item.Code}"]}{crRowInd}*{Name[$"DG_{item.Code}"]}{crRowInd})";
                                            }
                                        }

                                    }
                                    SumNhom = true;
                                    crRowWs[Name["CodeHM"]].SetValue(1);
                                    crRowWs[Name[TDKH.COL_DonVi]].SetValue(fstNhom["DonViNhom"]);
                                    crRowWs[Name["KhoiLuongDuThau"]].SetValue(fstNhom["KhoiLuongNhom"]);
                                    crRowWs[Name["DonGiaDuThau"]].SetValue(fstNhom["DonGiaNhom"]);
                                    //crRowWs[Name["DonGiaThucHien"]].SetValue(fstNhom["DonGiaNhom"]);
                                    crRowWs[Name["ThanhTienDuThau"]].Formula = $"({Name["KhoiLuongDuThau"]}{crRowInd}*{Name["DonGiaDuThau"]}{crRowInd})";
                                    //crRowWs[Name["ThanhTienThucTe"]].Formula = $"({Name["KhoiLuongThucTe"]}{crRowInd}*{Name["DonGiaThucHien"]}{crRowInd})";

                                    crRowWs[Name[cotnhathauGT]].SetValue(fstNhom["KhoiLuongNhom"]);
                                    crRowWs[Name[cotdongianhathauGT]].SetValue(fstNhom["DonGiaNhom"]);
                                    crRowWs[Name[cotdonviGT]].SetValue(fstNhom["DonViNhom"]);
                                    crRowWs[Name[thanhtiennhathauGT]].Formula = $"({Name[cotnhathauGT]}{crRowInd}*{Name[cotdongianhathauGT]}{crRowInd})";
                                }

                            }
                            var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"].ToString());
                            if (SumNhom)
                            {
                                crRowWs[Name["ThanhTienNhom"]].Formula = $"=SUM({Name["ThanhTienDuThau"]}{crRowInd + 1}:{Name["ThanhTienDuThau"]}{crRowInd + grCongTacTuyen.Count()})";
                                crRowWs[Name["DonGiaNhom"]].Formula = $"={Name["ThanhTienNhom"]}{crRowInd}/{Name["KhoiLuongDuThau"]}{crRowInd}";
                                crRowWs[Name["ChenhGia"]].Formula = $"={Name["ThanhTienNhom"]}{crRowInd}-{Name["ThanhTienDuThau"]}{crRowInd}";

                            }
                            foreach (var CongTac in grCongTacTuyen)
                            {
                                int RowCha = crCodeNhom != null ? RowNhom : crCodeTuyen != null ? RowTuyen : RowHM;
                                var FirstCT = CongTac.FirstOrDefault();
                                WaitFormHelper.ShowWaitForm($"{crRowInd}.{FirstCT["MaHieuCongTac"]}_{FirstCT["TenCongTac"]}");
                                crRowWs = ws.Rows[crRowInd++];
                                crRowWs.Font.Color = crCodeNhom is null ? Color.Black : MyConstant.color_Row_NhomCongTac;
                                crRowWs.Font.Bold = false;
                                crRowWs[Name[TDKH.COL_RowCha]].SetValue(RowCha);
                                crRowWs[Name[TDKH.COL_STT]].SetValue(stt++);
                                crRowWs[Name[TDKH.COL_Code]].SetValueFromText(CongTac.Key);
                                crRowWs[Name["CodeNhom"]].SetValueFromText(crCodeNhom);
                                if (fstNhom["KhoiLuongNhom"] != DBNull.Value)
                                    crRowWs[Name["CodeHM"]].SetValue(0);
                                else
                                    crRowWs[Name["CodeHM"]].SetValue(1);
                                crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(FirstCT["MaHieuCongTac"]);
                                crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue(FirstCT["TenCongTac"]);
                                crRowWs[Name["GhiChu"]].SetValue(FirstCT["GhiChu"]);
                                crRowWs[Name[TDKH.COL_NgayBatDau]].SetValue(DateTime.Parse(FirstCT["NgayBatDau"].ToString()).ToShortDateString());
                                crRowWs[Name[TDKH.COL_NgayKetThuc]].SetValue(DateTime.Parse(FirstCT["NgayKetThuc"].ToString()).ToShortDateString());
                                crRowWs[Name["CodeCongTac"]].SetValue(FirstCT["CodeCongTac"]);
                                crRowWs[Name[TDKH.COL_DonVi]].SetValue(FirstCT["DonVi"]);
                                crRowWs[Name["KhoiLuongDuThau"]].SetValue(FirstCT["KhoiLuongToanBo"]);
                                crRowWs[Name["DonGiaDuThau"]].SetValue(FirstCT["DonGia"]);
                                //crRowWs[Name["DonGiaThucHien"]].SetValue(FirstCT["DonGia"]);
                                crRowWs[Name["ThanhTienDuThau"]].Formula = $"({Name["KhoiLuongDuThau"]}{crRowInd}*{Name["DonGiaDuThau"]}{crRowInd})";
                                //crRowWs[Name["ThanhTienThucTe"]].Formula = $"({Name["KhoiLuongThucTe"]}{crRowInd}*{Name["DonGiaThucHien"]}{crRowInd})";

                                crRowWs[Name[cotnhathauGT]].SetValue(FirstCT["KhoiLuongToanBo"]);
                                crRowWs[Name[cotdongianhathauGT]].SetValue(FirstCT["DonGiaDuThau"]);
                                crRowWs[Name[cotdonviGT]].SetValue(FirstCT["DonVi"]);
                                crRowWs[Name[thanhtiennhathauGT]].Formula = $"({Name[cotnhathauGT]}{crRowInd}*{Name[cotdongianhathauGT]}{crRowInd})";
                                if (FirstCT["GhiChuBoSungJson"] != DBNull.Value)
                                {
                                    var GhiChuBoSungJson = JsonConvert.DeserializeObject<TDKH_GhiChuBoSungJson>(FirstCT["GhiChuBoSungJson"].ToString());
                                    crRowWs[Name[TDKH.COL_STTDocVao]].SetValueFromText(GhiChuBoSungJson.STT);
                                    crRowWs[Name[TDKH.COL_STTND]].SetValueFromText(GhiChuBoSungJson.STTND);
                                }
                                var grNhaThauPhu = CongTac.Where(x => x["CodeTP"] != DBNull.Value).GroupBy(x => x["CodeTP"].ToString());
                                Fomular = "";
                                foreach (var tp in grNhaThauPhu)
                                {
                                    cotdonvi = $"DV_{tp.Key}";
                                    cotnhathau = $"KL_{tp.Key}";
                                    cotdongianhathau = $"DG_{tp.Key}";
                                    thanhtiennhathau = $"TT_{tp.Key}";
                                    crRowWs[Name[cotdonvi]].SetValue(tp.FirstOrDefault()["DonViTP"]);
                                    crRowWs[Name[cotnhathau]].SetValue(tp.FirstOrDefault()["KhoiLuongThauPhu"]);
                                    crRowWs[Name[cotdongianhathau]].SetValue(tp.FirstOrDefault()["DonGiaThauPhu"]);
                                    crRowWs[Name[thanhtiennhathau]].Formula = $"({Name[cotnhathau]}{crRowInd}*{Name[cotdongianhathau]}{crRowInd})";
                                    Fomular += $"+{Name[cotnhathau]}{crRowInd}";
                                }
                                var grToDoi = CongTac.Where(x => x["CodeTD"] != DBNull.Value).GroupBy(x => x["CodeTD"].ToString());
                                foreach (var tp in grToDoi)
                                {
                                    cotdonvi = $"DV_{tp.Key}";
                                    cotnhathau = $"KL_{tp.Key}";
                                    cotdongianhathau = $"DG_{tp.Key}";
                                    thanhtiennhathau = $"TT_{tp.Key}";
                                    crRowWs[Name[cotdonvi]].SetValue(tp.FirstOrDefault()["DonViTD"]);
                                    crRowWs[Name[cotnhathau]].SetValue(tp.FirstOrDefault()["KhoiLuongToDoi"]);
                                    crRowWs[Name[cotdongianhathau]].SetValue(tp.FirstOrDefault()["DonGiaToDoi"]);
                                    crRowWs[Name[thanhtiennhathau]].Formula = $"({Name[cotnhathau]}{crRowInd}*{Name[cotdongianhathau]}{crRowInd})";
                                    Fomular += $"+{Name[cotnhathau]}{crRowInd}";
                                }
                                crRowWs[Name["KhoiLuongThucTe"]].Formula = Fomular;
                            }
                        }
                        if (fstTuyen["CodePhanTuyen"] != DBNull.Value)
                        {
                            crRowWs = ws.Rows[crRowInd++];
                            ws.Rows.Insert(crRowInd, 1, RowFormatMode.FormatAsNext);
                            crRowWs.Font.Bold = true;
                            crRowWs.Font.Color = MyConstant.color_Row_PhanTuyen;
                            crRowWs[Name[TDKH.COL_MaHieuCongTac]].SetValue(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            crRowWs[Name[TDKH.COL_DanhMucCongTac]].SetValue($"Hoàn thành {Tuyen.FirstOrDefault()["TenTuyen"]}".ToUpper());
                        }
                    }
                    ws.Rows[RowHM - 1][Name["ThanhTienDuThau"]].Formula = $"=SUMIF({Name["CodeHM"]}{RowHM + 1}:{Name["CodeHM"]}{crRowInd};1;{Name["ThanhTienDuThau"]}{RowHM + 1}:{Name["ThanhTienDuThau"]}{crRowInd})";
                    ws.Rows[RowHM - 1][Name[thanhtiennhathauGT]].Formula = $"=SUMIF({Name["CodeHM"]}{RowHM + 1}:{Name["CodeHM"]}{crRowInd};1;{Name[thanhtiennhathauGT]}{RowHM + 1}:{Name[thanhtiennhathauGT]}{crRowInd})";
                    //ws.Rows[RowHM - 1][Name["ThanhTienThucTe"]].Formula = $"=SUMIF({Name["CodeHM"]}{RowHM + 1}:{Name["CodeHM"]}{crRowInd};1;{Name["ThanhTienThucTe"]}{RowHM+1}:{Name["ThanhTienThucTe"]}{crRowInd})";
                    //ws.Rows[RowHM - 1][Name["KhoiLuongThucTe"]].Formula = $"=SUMIF({Name["CodeHM"]}{RowHM + 1}:{Name["CodeHM"]}{crRowInd};1;{Name["KhoiLuongThucTe"]}{RowHM+1}:{Name["KhoiLuongThucTe"]}{crRowInd})";

                    foreach (DonViThucHien item in DVTH.Where(x => !x.IsGiaoThau))
                        ws.Rows[RowHM - 1][Name[$"TT_{item.Code}"]].Formula = $"=SUMIF({Name["CodeHM"]}{RowHM + 1}:{Name["CodeHM"]}{crRowInd};1;{Name[$"TT_{item.Code}"]}{RowHM + 1}:{Name[$"TT_{item.Code}"]}{crRowInd})";
                }
                Fomular = "";
                IndexHM.ForEach(x => { Fomular += $"+{Name["ThanhTienDuThau"]}{x}"; /*FomularThucTe += $"+{Name["ThanhTienThucTe"]}{x}";*//* FomularKL += $"+{Name["KhoiLuongThucTe"]}{x}";*/});
                ws.Rows[RowCongTrinh - 1][Name["ThanhTienDuThau"]].Formula = Fomular;
                //ws.Rows[RowCongTrinh - 1][Name["ThanhTienThucTe"]].Formula = FomularThucTe;
                //ws.Rows[RowCongTrinh - 1][Name["KhoiLuongThucTe"]].Formula = FomularKL;
                foreach (DonViThucHien item in DVTH)
                {
                    string NewFomula = Fomular.Replace($"{Name["ThanhTienDuThau"]}", $"{Name[$"TT_{item.Code}"]}");
                    ws.Rows[RowCongTrinh - 1][Name[$"TT_{item.Code}"]].Formula = NewFomula;
                }

            }


            spsheet_Thongtinchinh.EndUpdate();
            spsheet_Thongtinchinh.CellValueChanged += spsheet_Thongtinchinh_CellValueChanged;
            WaitFormHelper.CloseWaitForm();
        }
        #endregion
        private void fcn_handle_txtBoxTimKiemVatLieuThuCongKHVT_TextChange(object sender, EventArgs e)
        {
            TextBox tb = sender as TextBox;
            if (tb.Text.Length < 2)
                return;
            string strFull = MyFunction.fcn_RemoveAccents(tb.Text);
            List<string> strLs = strFull.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();
            DataTable dt = null;
            string queryStr = "";
            string str;
            string NameCot;
            if (m_ctrlVatlieuThuCong.m_NameCot == "TenVatTu")
            {
                string condition = "";
                NameCot = "\"VatTu_KhongDau\"";
                queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} WHERE ";

                if (strLs.Count == 1)
                {
                    str = strLs[0];
                    //dt.DefaultView.RowFilter = $"[TenVatlieu] LIKE '%{str}%'";
                    queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} WHERE ({NameCot} LIKE '%{str}%' AND \"LoaiVatTu\"='{"Vật liệu"}')";
                }
                else
                {
                    //queryStr = $"[TenVatlieu] LIKE";
                    //for (int i = 1; i < m_lsDauDM.Count; i++)
                    //    queryStr += $",'{m_lsDauDM[i]}'";
                    //queryStr += ")) ";
                    /*string strSearch = "";*/
                    foreach (string strSearch in strLs)
                    {
                        condition += $" AND {NameCot} LIKE '%{strSearch}%'";
                    }
                    queryStr += condition.Remove(0, 4);
                    queryStr += $"AND \"LoaiVatTu\"='{"Vật liệu"}'";
                    //dt.DefaultView.RowFilter += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE
                }
                //dt.DefaultView.RowFilter = queryStr;
                //dt = DataProvider.InstanceTBT.ExecuteQuery(queryStr);
            }
            else if ((m_ctrlVatlieuThuCong.m_NameCot == "MaVatTu"))
            {
                NameCot = "\"MaVatLieu\"";
                if (strLs.Count == 1)
                {
                    str = strLs[0];
                    queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} WHERE ({NameCot} LIKE '%{str}%' AND \"LoaiVatTu\"='{"Vật liệu"}')";
                }
                else
                {
                    queryStr = $"SELECT * FROM {MyConstant.TBL_TBT_VATTU} WHERE ";
                    //for (int i = 1; i < m_lsDauDM.Count; i++)
                    //    queryStr += $",'{m_lsDauDM[i]}'";
                    //queryStr += ")) ";
                    /*string strSearch = "";*/
                    string condition = "";
                    foreach (string strSearch in strLs)
                    {
                        condition += $" AND '{NameCot}' LIKE '%{strSearch}%'";
                    }
                    queryStr += condition.Remove(0, 4);//Xóa bỏ chữ AND sau WHERE
                    queryStr += $"AND \"LoaiVatTu\"='{"Vật liệu"}'";
                }
            }
            else
                return;
            dt = DataProvider.InstanceTBT.ExecuteQuery(queryStr);

            //queryStr = $"SELECT * FROM {MyConstant.TBL_TDKH_KHVT_VatTu}";
            m_ctrlVatlieuThuCong.Visible = true;
            m_ctrlVatlieuThuCong.Show();
            m_ctrlVatlieuThuCong.Parent = tb.Parent.Parent.Parent;
            //m_ctrlTKDM.PointToScreen(tb.PointToScreen(Point.Empty));

            m_ctrlVatlieuThuCong.Location = new Point(tb.Parent.Location.X + tb.Width, tb.Parent.Parent.Location.Y + 25);
            m_ctrlVatlieuThuCong.Size = new Size(tb.Parent.Parent.Width - (tb.Parent.Location.X + tb.Width), tb.Parent.Parent.Height - 50);
            //sz.Height = tb.Parent.Height;
            //sz.Width = tb.Parent.Width - (10 + tb.Parent.mopenFileDialogation.X + tb.Width)
            //m_ctrlTKDM.
            m_ctrlVatlieuThuCong.BringToFront();
            m_ctrlVatlieuThuCong.fcn_loadVatLieu(dt);
            //m_ctrlVatlieu.Hide();
        }
        private void spsheet_KeHachVatTu_CellBeginEdit(object sender, SpreadsheetCellCancelEventArgs e)
        {
            Worksheet ws = spsheet_KeHachVatTu.Document.Worksheets.ActiveWorksheet;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETDICWS]);
            CellRange range = ws.Range[QLVT.TBL_QLVT_KHVT];
            string colHeading = ws.Columns[e.Cell.ColumnIndex].Heading;
            if (!range.Contains(e.Cell))
                return;
            if (colHeading == Name["MaVatTu"])
            {
                string Code = ws.Rows[e.RowIndex][Name["Code"]].Value.ToString();
                if (e.Value.ToString().ToUpper() == MyConstant.CONST_TYPE_CONGTRINH)
                {
                    if (Code != "")
                        e.Cancel = true;
                }
                else if (e.Value.ToString().ToUpper() == MyConstant.CONST_TYPE_HANGMUC)
                {
                    if (Code != "")
                        e.Cancel = true;
                }
                else
                {
                    if (!ce_goiythucong.Checked)
                    {
                        return;
                    }
                    string CodeHM = "";
                    for (int ind = e.RowIndex - 1; ind >= range.TopRowIndex; ind--)
                    {
                        Row crRowLoop = ws.Rows[ind];
                        string code = crRowLoop[Name[MyConstant.COL_KHVT_CodeCT]].Value.ToString();
                        string MaVatLieu = crRowLoop[e.ColumnIndex].Value.ToString();
                        if (code == "")
                            continue;
                        else if (code != "")
                        {
                            if (MaVatLieu == MyConstant.CONST_TYPE_HANGMUC)
                            {
                                CodeHM = code;
                                break;
                            }
                            else
                                continue;
                        }
                    }
                    m_ctrlVatlieuThuCong.fcn_LoadCot("MaVatTu", CodeHM);
                    BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                    {
                        TextBox tb = FindTextBox(ss.Controls);
                        if (tb != null)
                        {
                            tb.TextChanged += fcn_handle_txtBoxTimKiemVatLieuThuCongKHVT_TextChange;
                        }
                    }), sender as SpreadsheetControl);
                }


            }
            else if (colHeading == Name["TenVatTu"])
            {
                string MaVatLieu = ws.Rows[e.RowIndex][Name["MaVatTu"]].Value.ToString();
                if (MaVatLieu == MyConstant.CONST_TYPE_CONGTRINH)
                {
                    return;
                }
                else if (MaVatLieu == MyConstant.CONST_TYPE_HANGMUC)
                {
                    return;
                }
                else
                {
                    if (!ce_goiythucong.Checked)
                    {
                        return;
                    }
                    string CodeHM = "";
                    for (int ind = e.RowIndex - 1; ind > range.TopRowIndex; ind--)
                    {
                        Row crRowLoop = ws.Rows[ind];
                        string code = crRowLoop[Name[MyConstant.COL_KHVT_CodeCT]].Value.ToString();
                        MaVatLieu = crRowLoop[Name["MaVatTu"]].Value.ToString();
                        if (code == "")
                            continue;
                        else if (code != "")
                        {
                            if (MaVatLieu == MyConstant.CONST_TYPE_HANGMUC)
                            {
                                CodeHM = code;
                                break;
                            }
                            else
                                continue;
                        }
                    }
                    m_ctrlVatlieuThuCong.fcn_LoadCot("TenVatTu", CodeHM);
                    BeginInvoke(new Action<SpreadsheetControl>((ss) =>
                    {
                        TextBox tb = FindTextBox(ss.Controls);
                        if (tb != null)
                        {
                            tb.TextChanged += fcn_handle_txtBoxTimKiemVatLieuThuCongKHVT_TextChange;
                        }
                    }), sender as SpreadsheetControl);
                }
            }
            else
            {
                string NewVal = ws.Rows[e.RowIndex][Name["MaVatTu"]].Value.TextValue;
                if (NewVal == MyConstant.CONST_TYPE_CONGTRINH || NewVal == MyConstant.CONST_TYPE_HANGMUC)
                    e.Cancel = true;
            }
        }

        private void spsheet_KeHachVatTu_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            Worksheet ws = spsheet_KeHachVatTu.Document.Worksheets.ActiveWorksheet;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETDICWS]);
            string Code = ws.Rows[e.RowIndex][Name["Code"]].Value.ToString();
            string colHeading = ws.Rows[0][e.ColumnIndex].Value.TextValue;
            string Header = ws.Columns[e.ColumnIndex].Heading;
            CellRange Range = ws.Range[QLVT.TBL_QLVT_KHVT];
            string dbString = "";
            if (e.RowIndex == Range.BottomRowIndex - 1)
            {
                ws.Rows.Insert(e.RowIndex + 1, 1, RowFormatMode.FormatAsPrevious);
                ws.Rows[e.RowIndex + 1].Visible = true;
            }
            if (Header == Name["MaVatTu"])
            {
                if (e.Value.ToString().ToUpper() == MyConstant.CONST_TYPE_HANGMUC)
                {
                    string CodeCT = "";
                    double RowCha = 0;
                    for (int ind = e.RowIndex - 1; ind >= 0; ind--)
                    {
                        Row crRowLoop = ws.Rows[ind];
                        string code = crRowLoop[Name[MyConstant.COL_KHVT_CodeCT]].Value.ToString();
                        string MaVatLieu = crRowLoop[e.ColumnIndex].Value.ToString();
                        if (code == "")
                            continue;
                        else if (code != "")
                        {
                            if (MaVatLieu == MyConstant.CONST_TYPE_CONGTRINH)
                            {
                                CodeCT = code;
                                RowCha = ind + 1;
                                break;
                            }
                            else
                                continue;
                        }
                    }
                    string CodeHM = Guid.NewGuid().ToString();
                    ws.Rows[e.RowIndex].Font.Color = MyConstant.color_Row_HangMuc;
                    ws.Rows[e.RowIndex].Font.Bold = true;
                    ws.Rows[e.RowIndex][e.ColumnIndex].SetValueFromText(e.Value.ToString().ToUpper());
                    ws.Rows[e.RowIndex][Name["TenVatTu"]].SetValueFromText("Hạng mục mới");
                    ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_RowCha]].SetValue(RowCha);
                    ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_CodeCT]].SetValueFromText(CodeHM);
                    dbString = $"INSERT INTO {QLVT.TBL_QLVT_KHVT_HangMuc} (\"Code\",\"Ten\",\"CodeCongTrinh\") VALUES ('{CodeHM}','{"Hạng mục mới"}','{CodeCT}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    m_ctrlVatlieuThuCong.Hide();
                }
                else if (e.Value.ToString().ToUpper() == MyConstant.CONST_TYPE_CONGTRINH)
                {
                    ws.Rows.Insert(e.RowIndex + 1, 1, RowFormatMode.FormatAsPrevious);
                    ws.Rows[e.RowIndex + 1].Visible = true;

                    string CodeCongTrinh = Guid.NewGuid().ToString();
                    ws.Rows[e.RowIndex].Font.Color = MyConstant.color_Row_CongTrinh;
                    ws.Rows[e.RowIndex].Font.Bold = true;
                    ws.Rows[e.RowIndex][e.ColumnIndex].SetValueFromText(e.Value.ToString().ToUpper());
                    ws.Rows[e.RowIndex][Name["TenVatTu"]].SetValueFromText("Công trình mới");
                    ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_CodeCT]].SetValueFromText(CodeCongTrinh);
                    dbString = $"INSERT INTO {QLVT.TBL_QLVT_KHVT_CongTrinh} (\"Code\",\"Ten\",\"CodeDuAn\") VALUES ('{CodeCongTrinh}','{"Công trình mới"}','{slke_ThongTinDuAn.EditValue}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                    string CodeHM = Guid.NewGuid().ToString();
                    ws.Rows[e.RowIndex + 1].Font.Color = MyConstant.color_Row_HangMuc;
                    ws.Rows[e.RowIndex + 1].Font.Bold = true;
                    ws.Rows[e.RowIndex + 1][e.ColumnIndex].SetValueFromText("HM");
                    ws.Rows[e.RowIndex + 1][Name["TenVatTu"]].SetValueFromText("Hạng mục mới");
                    ws.Rows[e.RowIndex + 1][Name[MyConstant.COL_KHVT_RowCha]].SetValue(e.RowIndex + 1);
                    ws.Rows[e.RowIndex + 1][Name[MyConstant.COL_KHVT_CodeCT]].SetValueFromText(CodeHM);
                    dbString = $"INSERT INTO {QLVT.TBL_QLVT_KHVT_HangMuc} (\"Code\",\"Ten\",\"CodeCongTrinh\") VALUES ('{CodeHM}','{"Hạng mục mới"}','{CodeCongTrinh}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    m_ctrlVatlieuThuCong.Hide();
                }
                else
                {
                    colHeading = "MaVatLieu";
                    if (Code == "")
                    {
                        double STT = 1, RowCha = 0;
                        string CodeHM = "";
                        Row Rowcopy = ws.Rows[2];
                        for (int ind = e.RowIndex - 1; ind >= 0; ind--)
                        {
                            Row crRowLoop = ws.Rows[ind];
                            string code = crRowLoop[Name[MyConstant.COL_KHVT_CodeCT]].Value.ToString();
                            string MaVatLieu = crRowLoop[e.ColumnIndex].Value.ToString();
                            if (code == "")
                                continue;
                            else if (code != "")
                            {
                                if (MaVatLieu == MyConstant.CONST_TYPE_HANGMUC)
                                {
                                    RowCha = ind + 1;
                                    CodeHM = code;
                                    break;
                                }
                                else
                                {
                                    STT = crRowLoop[Name[MyConstant.COL_KHVT_STT]].Value.NumericValue + 1;
                                }
                            }
                        }
                        string CodeVL = Guid.NewGuid().ToString();
                        ws.Rows[e.RowIndex].CopyFrom(Rowcopy, PasteSpecial.All);
                        ws.Rows[e.RowIndex].Visible = true;
                        ws.Rows[e.RowIndex][e.ColumnIndex].SetValue(e.Value);
                        ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_RowCha]].SetValue(RowCha);
                        ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_STT]].SetValue(STT);
                        ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_CodeCT]].SetValue(CodeVL);
                        dbString = $"INSERT INTO {QLVT.TBL_QLVT_KHVT} (\"CodeHangMuc\",\"Code\",'{colHeading}') VALUES ('{CodeHM}','{CodeVL}',@NewValue)";


                    }
                    else
                        dbString = $"UPDATE {QLVT.TBL_QLVT_KHVT} SET {colHeading}= @NewValue WHERE \"Code\" = '{Code}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });



                }
            }
            else
            {
                string MaHieu = ws.Rows[e.RowIndex][Name["MaVatTu"]].Value.ToString();
                if (MaHieu == MyConstant.CONST_TYPE_HANGMUC)
                {
                    dbString = $"UPDATE {QLVT.TBL_QLVT_KHVT_HangMuc} SET \"Ten\"= @NewValue WHERE \"Code\" = '{Code}'";
                }
                else if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH)
                {
                    dbString = $"UPDATE {QLVT.TBL_QLVT_KHVT_CongTrinh} SET \"Ten\"= @NewValue WHERE \"Code\" = '{Code}'";
                }
                else
                {
                    colHeading = colHeading == "TenVatTu" ? "VatTu" : colHeading;
                    if (Code == "")
                    {
                        double STT = 1, RowCha = 0;
                        string CodeHM = "";
                        Row Rowcopy = ws.Rows[2];
                        for (int ind = e.RowIndex - 1; ind >= 0; ind--)
                        {
                            Row crRowLoop = ws.Rows[ind];
                            string code = crRowLoop[Name[MyConstant.COL_KHVT_CodeCT]].Value.ToString();
                            string MaVatLieu = crRowLoop[Name["MaVatTu"]].Value.ToString();
                            if (code == "")
                                continue;
                            else if (code != "")
                            {
                                if (MaVatLieu == MyConstant.CONST_TYPE_HANGMUC)
                                {
                                    RowCha = ind + 1;
                                    CodeHM = code;
                                    break;
                                }
                                else
                                {
                                    STT = crRowLoop[Name[MyConstant.COL_KHVT_STT]].Value.NumericValue + 1;
                                }
                            }
                        }
                        string CodeVL = Guid.NewGuid().ToString();
                        string Value = e.Value.ToString();
                        ws.Rows[e.RowIndex].CopyFrom(Rowcopy, PasteSpecial.All);
                        ws.Rows[e.RowIndex].Visible = true;
                        ws.Rows[e.RowIndex][e.ColumnIndex].SetValueFromText(Value);
                        ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_RowCha]].SetValue(RowCha);
                        ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_STT]].SetValue(STT);
                        ws.Rows[e.RowIndex][Name[MyConstant.COL_KHVT_CodeCT]].SetValue(CodeVL);
                        dbString = $"INSERT INTO {QLVT.TBL_QLVT_KHVT} (\"CodeHangMuc\",\"Code\",'{colHeading}') VALUES ('{CodeHM}','{CodeVL}',@NewValue)";
                    }
                    else
                        dbString = $"UPDATE {QLVT.TBL_QLVT_KHVT} SET {colHeading}= @NewValue WHERE \"Code\" = '{Code}'";
                }
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { e.Value });
            }
        }
        private void Fcn_ReadNghiemThu()
        {
            OpenFileDialog openFileDialog = SharedControls.openFileDialog;
            openFileDialog.DefaultExt = "xls";
            openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
            openFileDialog.Title = "Chọn file Excel";
            DialogResult rs = openFileDialog.ShowDialog();
            if (rs == DialogResult.OK)
            {
                SpreadsheetControl Spread = new SpreadsheetControl();
                Spread.LoadDocument(openFileDialog.FileName);
                if (!Spread.Document.Worksheets.Select(x => x.Name).ToList().Contains(MyConstant.CONST_SheetName_TTNghiemThu))
                {
                    MessageShower.ShowError("Mẫu đọc vào không phải mẫu Thanh toán hợp đồng của hệ thống, Vui lòng chọn lại Mẫu khác!!!!");
                    return;
                }
                Worksheet ws = Spread.Document.Worksheets[MyConstant.CONST_SheetName_TTNghiemThu];
                string range = $"Dot_1";
                if (!ws.DefinedNames.Contains(range))
                {
                    MessageShower.ShowError("Mẫu đọc vào đã được chỉnh sửa, Vui lòng chọn lại Mẫu khác!!!!");
                    return;
                }
                //rs = MessageShower.ShowYesNoQuestion("Bạn có muốn đọc lại KHỐI LƯỢNG THANH TOÁN không?????");
                //bool TT = rs == DialogResult.Yes ? true : false;
                WaitFormHelper.ShowWaitForm("Đang đọc dữ liệu vào!!!!!", "Vui Lòng chờ!");
                CellRange RangeDot = ws.Range[range];
                Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeDot);
                string dbString = string.Empty;
                Spread.BeginUpdate();
                for (int i = RangeDot.TopRowIndex; i <= RangeDot.BottomRowIndex; i++)
                {
                    Row Crow = ws.Rows[i];
                    if (!Crow.Visible)
                        continue;
                    if (!Guid.TryParse(Crow[Name[TDKH.COL_Code]].Value.ToString(), out Guid id))
                        continue;
                    string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC
                        || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.TYPEROW_HTPhanTuyen)
                        continue;
                    string TenCongTac = Crow[Name["TenCongTac"]].Value.ToString();
                    WaitFormHelper.ShowWaitForm($"{i}.{MaHieu}_{TenCongTac}");
                    double KLLKKT = 0, KLNghiemThu = 0, LKKN = 0, SanLuong = 0, KhoiLuongThanhToan = 0;
                    double? DangDo = null;
                    KLLKKT = Crow[Name["LuyKeDenHetKyTruoc"]].Value.NumericValue;
                    KLNghiemThu = Crow[Name["KyNayHopDongNghiemThu"]].Value.NumericValue;
                    SanLuong = Crow[Name["SanLuong"]].Value.NumericValue;
                    if (!string.IsNullOrEmpty(Crow[Name["SanLuong"]].Formula))
                    {
                        DangDo = Crow[Name["DangDo"]].Value.NumericValue;
                    }
                    dbString = $"UPDATE {MyConstant.TBL_hopdongAB_HT} SET LuyKeDenHetKyTruoc=@LuyKeDenHetKyTruoc," +
$"KyNayHopDongNghiemThu=@KyNayHopDongNghiemThu,SanLuong=@SanLuong,DangDo=@DangDo" +
$" WHERE \"Code\"='{id}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { KLLKKT, KLNghiemThu, SanLuong, DangDo });
                }
                Spread.EndUpdate();
                MessageShower.ShowInformation("Đọc File Thanh toán thành công!!!!");
                fcn_DobocAB(Fcn_Spreadsheet());

            }
        }
        private void Args_Showing_XuatDocFileHD(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Appearance.FontStyleDelta = FontStyle.Bold;
            e.Form.Appearance.FontSizeDelta = 2;
            foreach (var control in e.Form.Controls)
            {
                SimpleButton button = control as SimpleButton;
                if (button != null)
                {
                    button.ImageOptions.SvgImageSize = new Size(16, 16);
                    // button.Height = 25;
                    switch (button.DialogResult.ToString())
                    {
                        case ("OK"):
                            button.ImageOptions.SvgImage = svgImageCollection1[7];
                            button.Text = "Xuất File";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {

                                Dictionary<XtraTabPage, SpreadsheetControl> Lst = new Dictionary<XtraTabPage, SpreadsheetControl>()
            {
                {xtraTab_ThanhToanAB,spsheet_ThanhToanA_B },
                {xtraTab_ThanhToanNhaCC,spsheet_ThanhToan_NhaCungCap },
                {xtraTab_ThanhToanToDoi,spsheet_ThanhToan_ToDoi },
                {xtraTab_ThanhToanBB,spsheet_ThanhToanB_B },
                {xtraTab_TuThucHien,spsheet_TuThucHien }
            };
                                XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
                                string PathSave = "";
                                if (Xtra.ShowDialog() == DialogResult.OK)
                                {
                                    PathSave = Xtra.SelectedPath;
                                }
                                else
                                    return;
                                SpreadsheetControl Name = Lst[xtraTabControl_HopDongThanhToan.SelectedTabPage];
                                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                                string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
                                if (Name == spsheet_ThanhToan_NhaCungCap)
                                {
                                    fcn_ThanhToanTHNCC(spsheet_ThanhToan_NhaCungCap);
                                }
                                else
                                {
                                    Name.Document.Worksheets["Thanh toán KL phát sinh"].Visible = true;
                                    fcn_ThanhToanPS(Name, false, false);
                                    Name.Document.Worksheets["Khối lượng nghiệm thu"].Visible = true;
                                    Name.Document.Worksheets["Thanh toán thông thường"].Visible = true;
                                    Name.Document.Worksheets["Tổng hợp các kỳ thanh toán"].Visible = true;
                                    Name.Document.Worksheets["Bảng đề nghị thanh toán"].Visible = true;
                                    fcn_ThanhToanTT(Name);
                                    SharedControls._CheckTrangThaiThongThuong = true;
                                    fcn_ThanhToanNghiemThu(Name);
                                    //SharedControls._CheckTrangThaiNghiemThu = true;
                                    Fcn_UpdateHaoPhi(Name);
                                    fcn_ThanhToanTH(Name);
                                }
                                Workbook wb = Name.Document.Clone();
                                string TenDuAn = Regex.Replace(slke_ThongTinDuAn.Text, $@"(\-|\,|\\|\.|\+|\""|\;|\:)+", string.Empty);
                                wb.SaveDocument(Path.Combine(PathSave, $"Thanh toán công trình(Vật tư)_{TenDuAn}_{DVTH.Ten}_{cbo_AB_LanThanhToan.Text}_{time}.xlsx"), DocumentFormat.Xlsx);
                                DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Thanh toán công trình(Vật tư)_{TenDuAn}_{DVTH.Ten}_{cbo_AB_LanThanhToan.Text}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                if (dialogResult == DialogResult.Yes)
                                {
                                    Process.Start(Path.Combine(PathSave, $"Thanh toán công trình(Vật tư)_{TenDuAn}_{DVTH.Ten}_{cbo_AB_LanThanhToan.Text}_{time}.xlsx"));
                                }
                            };
                            break;
                        case ("Yes"):
                            button.ImageOptions.SvgImage = svgImageCollection1[5];
                            button.Text = "Đọc Sheet Khối lượng nghiệm thu";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                Fcn_ReadNghiemThu();
                            };
                            break;
                        default:
                            button.ImageOptions.SvgImage = svgImageCollection1[3];
                            button.Text = "Thoát";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) => { e.Form.Close(); };
                            break;
                    }
                }
            }
        }
        private void sb_HopDongAB_Click(object sender, EventArgs e)
        {
            XtraMessageBoxArgs args = new XtraMessageBoxArgs();
            args.Caption = "Lựa chọn thao tác";
            args.Buttons = new DialogResult[] { DialogResult.OK, DialogResult.Yes, DialogResult.Cancel };
            args.Showing += Args_Showing_XuatDocFileHD;
            DevExpress.XtraEditors.XtraMessageBox.Show(args);
        }

        private void bt_XemTongThe_Click(object sender, EventArgs e)
        {
            XtraForm_XemGiaoViecTongThe form = new XtraForm_XemGiaoViecTongThe();
            form.ShowDialog();
        }

        private void bt_TinhLaiAll_Click(object sender, EventArgs e)
        {
            TDKHHelper.GetCodeCongTrinhHangMuc(out string codeHM, out string codeCT);
            IEnumerable<string> codesHM = null, codesCT = null;

            WaitFormHelper.ShowWaitForm("Đang tính lại toàn bộ khối lượng kế hoạch");
            var cons = new List<string>();
            if (codeHM.HasValue())
            {
                codesHM = new string[] { codeHM };
            }

            if (codeCT.HasValue())
                codesCT = new string[] { codeCT };

            TDKHHelper.CapNhatAllVatTuHaoPhi(CodesHangMuc: codesHM, CodesCongTrinh: codesCT);

            string dbString = $"SELECT * FROM {Server.Tbl_TDKH_NhomCongTac} n\r\n" +
                $"LEFT JOIN {MyConstant.view_HangMucWithPhanTuyen} hmpt\r\n" +
                $"ON n.CodePhanTuyen = hmpt.CodePhanTuyen OR n.CodeHangMuc = hmpt.Code\r\n" +
                ((codesHM?.Any() == true) ? $"WHERE hmpt.Code IN ({MyFunction.fcn_Array2listQueryCondition(codesHM)})" : "");

            WaitFormHelper.CloseWaitForm();



        }
        /// <summary>
        /// Cập nhập dữ liệu Kinh Phí Dự Kiến
        /// </summary>
        /// <param name="Dt"></Dữ liệu ChiTietCTTheoGiaiDoan>
        /// <param name="DVTH"></param>
        /// <param name="_All"></param>
        private DataTable Fcn_TestKinhPhi(DataTable Dt, DonViThucHien DVTH = null, string ColColum = null, bool _All = false)
        {
            string dbString = "";
            if (_All)
            {
                List<DonViThucHien> lst = DuAnHelper.GetDonViThucHiens();
                foreach (DonViThucHien item in lst)
                {
                    DataRow[] CrowCT = Dt.AsEnumerable().Where(x => x[item.ColCodeFK].ToString() == item.Code).ToArray();
                    dbString = $"SELECT * FROM {TDKH.TBL_KinhPhiPhanBo}  WHERE {DVTH.ColCodeFK}='{DVTH.Code}'";
                    DataTable Dt_KinhPhi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    if (!CrowCT.Any() || Dt_KinhPhi.Rows.Count == 0)
                        continue;
                    double KinhPhiPhanBo = double.Parse(Dt_KinhPhi.Rows[0][ColColum].ToString());
                    double KinhPhiTienDo = CrowCT.AsEnumerable().Where(x => x["KinhPhiTheoTienDo"] != DBNull.Value).Sum(x => double.Parse(x["KinhPhiTheoTienDo"].ToString()));
                    foreach (var row in CrowCT)
                    {
                        double CrKinhPhiTienDo = double.Parse(row["KinhPhiTheoTienDo"].ToString());
                        double CrKinhPhiDuKien = Math.Round(CrKinhPhiTienDo * KinhPhiPhanBo / KinhPhiTienDo);
                        row["KinhPhiDuKien"] = CrKinhPhiDuKien;
                    }
                }
            }
            else
            {
                dbString = $"SELECT * FROM {TDKH.TBL_KinhPhiPhanBo}  WHERE {DVTH.ColCodeFK}='{DVTH.Code}'";
                DataTable Dt_KinhPhi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                if (Dt_KinhPhi.Rows.Count == 0 || Dt.Rows.Count == 0)
                    return Dt;
                double KinhPhiPhanBo = double.Parse(Dt_KinhPhi.Rows[0][ColColum].ToString());
                double KinhPhiTienDo = Dt.AsEnumerable().Where(x => x["KinhPhiTheoTienDo"] != DBNull.Value).Sum(x => double.Parse(x["KinhPhiTheoTienDo"].ToString()));
                foreach (DataRow row in Dt.Rows)
                {
                    double CrKinhPhiTienDo = double.Parse(row["KinhPhiTheoTienDo"].ToString());

                    double CrKinhPhiDuKien = (CrKinhPhiTienDo == 0) ? 0 : Math.Round(CrKinhPhiTienDo * KinhPhiPhanBo / KinhPhiTienDo);
                    row["KinhPhiDuKien"] = CrKinhPhiDuKien;
                }
            }
            return Dt;
        }
        private void simpleButton2_Click_1(object sender, EventArgs e)
        {
            DuAnHelper.DeleteDataRows(TDKH.TBL_KHVT_VatTu);
        }

        private void gc_Tiendo_CustomTaskDisplayText(object sender, CustomTaskDisplayTextEventArgs e)
        {
            if (cbo_HienThiTienDo.SelectedIndex == 0 && cbo_LoaiTienDo.SelectedIndex == 0 && SharedControls.IsNgay)
            {
                if (e.Node.GetValue("UID").ToString().Contains("_KeHoach"))
                {
                    //e.RightText =e.TaskInfo.FinishDate.Date.AddDays(-1).ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET);
                    e.LeftText = e.TaskInfo.StartDate.Date.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET);
                }
            }
        }

        private void spsheet_TD_KH_LapKeHoach_DocumentLoaded(object sender, EventArgs e)
        {
            //foreach (var ws in spsheet_TD_KH_LapKeHoach.Document.Worksheets)
            //{
            //    ws.IgnoredErrors.Add(ws.Range["A:AA"], IgnoredErrorType.All);
            //}
        }

        TDKHPastingViewModel TDKHPasting = new TDKHPastingViewModel();

        private void spsheet_TD_KH_LapKeHoach_ClipboardDataPasting(object sender, EventArgs e)
        {
            TDKHPasting.IsPasting = true;
            TDKHPasting.Codes.Clear();// = new List<string>();


        }

        private void spsheet_TD_KH_LapKeHoach_CopiedRangePasting(object sender, CopiedRangePastingEventArgs e)
        {
            TDKHPasting.IsPasting = true;
            TDKHPasting.Codes.Clear();// = new List<string>();

        }

        private void spsheet_TD_KH_LapKeHoach_CopiedRangePasted(object sender, CopiedRangePastedEventArgs e)
        {
            //isPastingTDKH = false;
            var tarGetRange = e.TargetRange;
            Worksheet ws = tarGetRange.Worksheet;
            TDKHPasting.LastCell = tarGetRange.Last();
            if (ws.Name == TDKH.SheetName_DoBocChuan)
            {
                var dicDoBoc = MyFunction.fcn_getDicOfColumn(ws.Range[TDKH.RANGE_DoBocChuan]);
                var dicChanged = MyFunction.fcn_getDicOfColumn(tarGetRange);
                if (dicChanged.Any(x => x.Key == TDKH.COL_DBC_KhoiLuongToanBo
                    || x.Key.Contains("_")))
                {
                    List<string> codesCTGoc = new List<string>();
                    for (int i = tarGetRange.TopRowIndex; i <= tarGetRange.BottomRowIndex; i++)
                    {
                        string code = ws.Rows[i][dicDoBoc[TDKH.COL_Code]].Value.ToString();
                        if (!string.IsNullOrEmpty(code))
                            codesCTGoc.Add(code);
                    }
                    if (!codesCTGoc.Any())
                        return;

                    if (dicChanged.Any(x => x.Key == TDKH.COL_DBC_KhoiLuongToanBo))
                    {
                        TDKHPasting.Codes.AddRange(codesCTGoc);
                    }

                    if (dicChanged.Any(x => x.Key.Contains("_")))
                    {
                        string dbString = $"SELECT CodeCongTac FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                            $"WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(codesCTGoc)})";

                        string[] lsCodeDMCT = DataProvider.InstanceTHDA.ExecuteQuery(dbString)
                            .AsEnumerable().Select(x => x[0].ToString()).ToArray();

                        var codesPS = dicChanged.Where(x => x.Key.Contains("_")).Select(x => x.Key.Split('_').First()).ToArray();

                        dbString = $"SELECT Code FROM {TDKH.TBL_ChiTietCongTacTheoKy} " +
                            $"WHERE CodeCongTac IN ({MyFunction.fcn_Array2listQueryCondition(codesCTGoc)}) " +
                            $"AND CodePhatSinh IN ({MyFunction.fcn_Array2listQueryCondition(codesPS)})";

                        DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        TDKHPasting.Codes.AddRange(dt.AsEnumerable().Select(x => x[0].ToString()));
                    }


                }
            }

        }

        private void spsheet_TD_KH_LapKeHoach_ClipboardDataPasted(object sender, ClipboardDataPastedEventArgs e)
        {
            //isPastingTDKH = false;
            var ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            TDKHPasting.LastCell = ws.Range[e.TargetRange].Last();
        }

        private void bt_GiaoNhiemVu_Click(object sender, EventArgs e)
        {
            KanbanBoard form = new KanbanBoard();
            form.ShowDialog();
        }

        private void bt_XetDuyet_Click(object sender, EventArgs e)
        {
            XtraForm_ApprovalProcesscs form = new XtraForm_ApprovalProcesscs();
            form.ShowDialog();
        }

        private void sb_SettingThanhToan_Click(object sender, EventArgs e)
        {
            Form_CaiDatDotHopDong HD = new Form_CaiDatDotHopDong();
            HD.Fcn_Update(cbo_MeNuTenHopDong.SelectedValue.ToString(), cbo_AB_LanThanhToan.SelectedValue.ToString());
            HD.ShowDialog();
            WaitFormHelper.ShowWaitForm("Đang phân tích lại thanh toán", "Vui Lòng chờ!");
            ce_ThanhToan.CheckedChanged -= ce_ThanhToan_CheckedChanged;
            ce_ThanhToan.Checked = true;
            ce_ThanhToan.CheckedChanged += ce_ThanhToan_CheckedChanged;
            //fcn_ThanhToanHT(spsheet_ThanhToanA_B, false, true);
            Fcn_UpDateCaiDatThanhToan();
            WaitFormHelper.CloseWaitForm();
        }
        private void Fcn_UpDateCaiDatThanhToan()
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            spsheet_ThanhToanA_B.BeginUpdate();
            IWorkbook workbook = spsheet_ThanhToanA_B.Document;
            Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
            CellRange Dot1 = worksheet.Range["Dot_1"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            string MaHieu = "", CodeDB = "", CodeCongTac = "";
            //Fcn_TaoCotNhaThauPhuToDoi(MyConstant.CONST_SheetName_TTKLHT, true, 12, 13, 14);
            for (int i = Dot1.TopRowIndex; i <= Dot1.BottomRowIndex; i++)
            {
                Row Crow = worksheet.Rows[i];
                MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == "HTDot")
                    break;
                CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                if (CodeDB == "")
                    continue;
                string DbString = $"SELECT cttk.CodeCongTac FROM Tbl_HopDong_DoBoc DB LEFT JOIN Tbl_hopdongAB_HT HTAB ON DB.Code = HTAB.CodeDB " +
                    $"LEFT JOIN Tbl_HopDong_DotHopDong DOTHD ON DOTHD.Code = HTAB.CodeDot " +
                    $"LEFT JOIN Tbl_HopDong_PhuLucHD PLHD ON PLHD.Code = DB.CodePL " +
                    $"LEFT JOIN Tbl_TDKH_ChiTietCongTacTheoGiaiDoan cttk ON PLHD.CodeCongTacTheoGiaiDoan = cttk.Code WHERE DB.Code='{CodeDB}' ";
                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(DbString);
                //Crow.CopyFrom(worksheet.Rows[15], PasteSpecial.Formulas);
                Fcn_UpdateHDConTT(dt.Rows[0][0].ToString(), i, worksheet, Name);
            }
            spsheet_ThanhToanA_B.EndUpdate();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }
        private void dtp_KLHangNgay_ValueChanged(object sender, EventArgs e)
        {
            fcn_LoadBaoCaoGiaoViec1Day();
        }

        private void tl_CVHN_BaoCao_DataSourceChanged(object sender, EventArgs e)
        {
            tl_KhoiLuongHaoPhi.DataSource = null;
            tl_CVHN_BaoCao.ExpandAll();

            colDonGiaKeHoach.Visible = BaseFrom.IsShowDonGiaKeHoach;

            colDonGiaKeHoach.Visible = BaseFrom.IsShowKhoiLuongKeHoach;

            if (!BaseFrom.IsShowKhoiLuongKeHoach || !BaseFrom.IsShowDonGiaKeHoach)
                col_KhoiLuongKeHoach.Visible = false;

            if (!BaseFrom.allPermission.HaveInitProjectPermission)
                bandGiaoViecKeHoach.Visible = false;

        }

        private void tl_CVHN_BaoCao_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            var crNode = e.Node;
            var crKLHN = tl_CVHN_BaoCao.GetDataRecordByNode(crNode) as KLTTHangNgay;
            var selectedDate = dtp_KLHangNgay.Value.Date;
            if (e.Node.Level == 1 || e.Node.Level == 2)
            {
                string code = crKLHN.Code;
                string[] codesCha = new string[] { code };

                var dtMain = DinhMucHelper.fcn_GetTblHaoPhiVatTuHienTai((e.Node.Level == 1) ? TypeKLHN.GiaoViecCha : TypeKLHN.GiaoViecCon, codesCha);
                var hangNgays = MyFunction.Fcn_CalKLKHModel((e.Node.Level == 1) ? TypeKLHN.HaoPhiGiaoViecCha : TypeKLHN.HaoPhiGiaoViecCon, dtMain.AsEnumerable().Select(x => x["Code"].ToString()), selectedDate, selectedDate);

                dtMain.Columns["MaVatLieu"].ColumnName = "MaCongTac";
                dtMain.Columns["TenCongTac"].ColumnName = "TenCongTacGoc";
                dtMain.Columns["VatTu"].ColumnName = "TenCongTac";

                var lsVatTu = dtMain.fcn_DataTable2List<KLTTHangNgay>();
                var crDate = dtp_KLHangNgay.Value;
                foreach (var vt in lsVatTu)
                {
                    var hn = hangNgays.SingleOrDefault(x => x.CodeCha == vt.Code);
                    vt.ParentCode = vt.LoaiVatTu;
                    vt.CodeCha = vt.Code;
                    vt.Code = hn?.Code ?? Guid.NewGuid().ToString();
                    vt.Ngay = (hn?.Ngay) ?? crDate;
                    vt.KhoiLuongKeHoach = hn?.KhoiLuongKeHoach;
                    vt.KhoiLuongThiCong = hn?.KhoiLuongThiCong;
                    vt.ThanhTienThiCongCustom = hn?.ThanhTienThiCongCustom;
                    vt.DonGiaKeHoach = hn?.DonGiaKeHoach;
                    vt.DonGiaThiCong = hn?.DonGiaThiCong;
                    vt.NhaCungCap = hn?.NhaCungCap;
                }
                string[] loaiVL = new string[]
                {
                    "Vật liệu",
                    "Nhân công",
                    "Máy thi công",
                };
                lsVatTu.AddRange(loaiVL.Select(x => new KLTTHangNgay() { Code = x, TenCongTac = x }));

                BandKeHoach.Visible = crKLHN.EnableKeHoach;

                var nccs = DuAnHelper.GetAllNhaCungCapOfCurrentPrj();
                var dicNCC = nccs.ToDictionary(x => x.Code, x => x.Ten);

                foreach (var vt in lsVatTu)
                {
                    var AllCrNCC = MyFunction.TryGetObjFromJson<NhaCungCapHangNgayViewModel>(crKLHN.NhaCungCap);
                    var AllCrCodeNCC = AllCrNCC.Select(x => x.Code);
                    vt.CodesNCCString = string.Join(", ", AllCrCodeNCC);
                }

                foreach (var data in lsVatTu.ToArray())
                {
                    var lsCon = DuAnHelper.GetNCCDetail(data, dicNCC);
                    lsVatTu.AddRange(lsCon);
                }

                rpcbb_VatTu_NCC.DataSource = nccs;
                tl_KhoiLuongHaoPhi.DataSource = lsVatTu;
            }
            else
                tl_KhoiLuongHaoPhi.DataSource = null;
        }

        private void tl_KhoiLuongHaoPhi_DataSourceChanged(object sender, EventArgs e)
        {
            tl_KhoiLuongHaoPhi.ExpandAll();

            col_HNDonGiaKeHoach.Visible = BaseFrom.IsShowDonGiaKeHoach;

            colVTGV_KLKH.Visible = BaseFrom.IsShowKhoiLuongKeHoach;

            if (!BaseFrom.IsShowKhoiLuongKeHoach || !BaseFrom.IsShowDonGiaKeHoach)
                col_HNThanhTienKeHoach.Visible = false;

            if (!BaseFrom.allPermission.HaveInitProjectPermission)
                BandKeHoach.Visible = false;
        }

        private void tl_KhoiLuongHaoPhi_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                e.Appearance.ForeColor = MyConstant.color_Row_HangMuc;
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);

            }
            else
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Italic);
            }
        }

        private void tl_KhoiLuongHaoPhi_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            var crNode = e.Node;
            var crRow = tl_KhoiLuongHaoPhi.GetDataRecordByNode(crNode) as KLTTHangNgay;
            string fieldName = e.Column.FieldName;
            var all = tl_KhoiLuongHaoPhi.DataSource as List<KLTTHangNgay>;
            if (crNode.Level == 1)
            {
                if (fieldName == nameof(KLTTHangNgay.CodesNCCString))
                {
                    DuAnHelper.updateNCC(rpcbb_VatTu_NCC, crRow);
                }

                if (fieldName == "DonGiaThiCong")
                {
                    MyFunction.CapNhatDonGiaThiCong(TypeKLHN.HaoPhiVatTu, crRow.CodeCha, crRow.Ngay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE), long.Parse(e.Value.ToString()));
                }
                if (fieldName.StartsWith("KhoiLuong") || fieldName == nameof(KLTTHangNgay.CodesNCCString))
                {
                    string dbString = $"INSERT OR REPLACE INTO {TDKH.Tbl_HaoPhiVatTu_HangNgay} " +
                             $"(Code, CodeHaoPhiVatTu, CodeCongViecCon, KhoiLuongKeHoachGiaoViec, KhoiLuongThiCong, Ngay, GhiChu, NhaCungCap) " +
                            $"VALUES " +
                            $"(@Code, @CodeHaoPhiVatTu, @CodeCongViecCon, @KhoiLuongKeHoachGiaoViec, @KhoiLuongThiCong, @Ngay, @GhiChu, @NhaCungCap)";

                    object[] mparams =
                    {
                        crRow.Code,
                        crRow.CodeCha,
                        crRow.CodeCongViecCon,
                        crRow.KhoiLuongKeHoach,
                        crRow.KhoiLuongThiCong,
                        crRow.Ngay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE),
                        crRow.GhiChu,
                        crRow.NhaCungCap,
                    };

                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: mparams);
                    if (fieldName == nameof(KLTTHangNgay.CodesNCCString))
                    {
                        //var all = tl_KhoiLuongHaoPhi.DataSource as List<KLTTHangNgay>;
                        all.RemoveAll(x => x.ParentCode == crRow.Code);

                        var lsCon = DuAnHelper.GetNCCDetail(crRow);
                        all.AddRange(lsCon);
                        tl_KhoiLuongHaoPhi.RefreshDataSource();
                        tl_KhoiLuongHaoPhi.FocusedNode.Expand();
                    }
                }

            }
            else if (crNode.Level == 2)
            {
                string col;
                switch (fieldName)
                {
                    case "KhoiLuongThiCong":
                        col = "KhoiLuong";
                        break;
                    case "DonGiaThiCong":
                        col = "DonGia";
                        break;
                    default:
                        return;
                }

                var crCha = tl_KhoiLuongHaoPhi.GetDataRecordByNode(crNode.ParentNode) as KLTTHangNgay;
                var allCrNCCs = MyFunction.TryGetObjFromJson<NhaCungCapHangNgayViewModel>(crCha.NhaCungCap);

                var val = e.Value;
                if (fieldName == "KhoiLuongThiCong")
                {
                    double KLnew = double.Parse(val.ToString());
                    var sumKLCon = all.Where(x => x.ParentCode == crRow.ParentCode && !x.IsNCCConLai).Sum(x => x.KhoiLuongThiCong) ?? 0;
                    var KLCha = all.Single(x => x.Code == crRow.ParentCode).KhoiLuongThiCong ?? 0;
                    if (sumKLCon > KLCha)
                    {
                        MessageShower.ShowWarning("Khối lượng bạn nhập quá lớn so với Khối lượng tổng nên sẽ bị giảm về tối đa có thể!");
                        KLnew -= (sumKLCon - KLCha);
                    }
                    allCrNCCs.Single(x => x.Code == crRow.CodeNhaCungCap).KhoiLuong = KLnew;
                }
                else
                    allCrNCCs.Single(x => x.Code == crRow.CodeNhaCungCap).DonGia = long.Parse(val.ToString());

                string jsonNCC = JsonConvert.SerializeObject(allCrNCCs);

                crCha.NhaCungCap = jsonNCC;

                //dbString = $"UPDATE {_tblHangNgay} SET NhaCungCap = JSON_SET(NhaCungCap, '$.{col}', '{KLnew}') WHERE Code = '{row.ParentCode}'";
                string dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu_HangNgay} SET NhaCungCap = @NhaCungCap WHERE Code = '{crRow.ParentCode}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { jsonNCC });

                all.RemoveAll(x => x.ParentCode == crRow.ParentCode);
                var lsCon = DuAnHelper.GetNCCDetail(crCha);
                all.AddRange(lsCon);
                tl_KhoiLuongHaoPhi.RefreshDataSource();
                tl_KhoiLuongHaoPhi.FocusedNode.Expand();
            }
        }

        private void rpcbb_VatTu_NCC_EditValueChanged(object sender, EventArgs e)
        {
            tl_KhoiLuongHaoPhi.CloseEditor();
        }

        private void tl_KhoiLuongHaoPhi_ShowingEditor(object sender, CancelEventArgs e)
        {
            KLTTHangNgay KLHN = tl_KhoiLuongHaoPhi.GetFocusedRow() as KLTTHangNgay;
            string fieldName = tl_KhoiLuongHaoPhi.FocusedColumn.FieldName;
            var node = tl_KhoiLuongHaoPhi.FocusedNode;

            if (node.Level == 1)
            {
                if (fieldName == nameof(KLTTHangNgay.CodesNCCString) && KLHN.KhoiLuongThiCong is null)
                {
                    MessageShower.ShowWarning("Vui lòng nhập khối lượng thi công trước khi chọn nhà cung cấp");
                    e.Cancel = true;
                    return;
                }
            }
            else if (node.Level == 2)
            {
                if (KLHN.IsNCCConLai)
                {
                    MessageShower.ShowWarning("Đây là dòng tính tự động, không được chỉnh sửa");
                    e.Cancel = true;
                    return;
                }
                if (fieldName != "KhoiLuongThiCong" && fieldName != "DonGiaThiCong")
                {
                    MessageShower.ShowError("Chỉ có thể thay đổi khối lượng và đơn giá thi công của nhà cung cấp");
                    e.Cancel = true;
                }
            }
        }

        private void ce_ThanhToan_CheckedChanged(object sender, EventArgs e)
        {
            if (cbo_MeNuTenHopDong.SelectedValue == null)
            {
                MessageShower.ShowError("Vui lòng tạo hợp đồng chính !");
                ce_ThanhToan.Checked = false;
                return;
            }
            if (ce_ThanhToan.Checked)
            {
                MessageShower.ShowInformation("Khối lượng thanh toán đợt này của công tác trong HỢP ĐỒNG CON của " +
    "HỢP ĐÔNG HIỆN TẠI sẽ được lấy làm giá trị thanh toán đợt này !!!!!!!!!!!");
                sb_CapNhapAB.Enabled = false;
                Form_CaiDatDotHopDong HD = new Form_CaiDatDotHopDong();
                HD.Fcn_Update(cbo_MeNuTenHopDong.SelectedValue.ToString(), cbo_AB_LanThanhToan.SelectedValue.ToString());
                HD.ShowDialog();
                WaitFormHelper.ShowWaitForm("Đang phân tích lại thanh toán", "Vui Lòng chờ!");
                Fcn_UpDateCaiDatThanhToan();
                WaitFormHelper.CloseWaitForm();
            }
            else
            {
                sb_CapNhapAB.Enabled = true;
                fcn_DobocAB(spsheet_ThanhToanA_B);
                //WaitFormHelper.ShowWaitForm("Đang phân tích lại thanh toán", "Vui Lòng chờ!");
                //string dbString = $"SELECT {MyConstant.TBL_hopdongAB_HT}.* " +
                //    $"FROM {MyConstant.TBL_hopdongAB_HT} " +
                //    $"INNER JOIN {MyConstant.TBL_HopDong_DotHopDong} " +
                //    $"ON {MyConstant.TBL_HopDong_DotHopDong}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDot " +
                //        $"INNER JOIN {MyConstant.TBL_HopDong_DoBoc} " +
                //        $"ON {MyConstant.TBL_HopDong_DoBoc}.Code = {MyConstant.TBL_hopdongAB_HT}.CodeDB " +
                //        $"LEFT JOIN {MyConstant.TBL_hopdongAB_PS} " +
                //        $"ON {MyConstant.TBL_HopDong_DoBoc}.Code = {MyConstant.TBL_hopdongAB_PS}.CodeDB " +
                //        $"INNER JOIN {MyConstant.TBL_HopDong_PhuLuc} " +
                //        $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                //        $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
                //        $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodePl = {MyConstant.TBL_ThongtinphulucHD}.Code " +
                //        $"INNER JOIN {MyConstant.TBL_tonghopdanhsachhopdong} " +
                //        $"ON {MyConstant.TBL_ThongtinphulucHD}.CodeHd = {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
                //        $" WHERE {MyConstant.TBL_HopDong_DoBoc}.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' ";
                //DataTable Dt_HT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                //spsheet_ThanhToanA_B.BeginUpdate();
                //IWorkbook workbook = spsheet_ThanhToanA_B.Document;
                //Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
                //CellRange Dot1 = worksheet.Range["Dot_1"];
                //Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
                //string MaHieu = "", CodeDB = "", CodeCongTac = "";
                //Fcn_TaoCotNhaThauPhuToDoi(MyConstant.CONST_SheetName_TTKLHT, true, 12, 13, 14);
                //for (int i = Dot1.TopRowIndex; i <= Dot1.BottomRowIndex; i++)
                //{
                //    Row Crow = worksheet.Rows[i];
                //    MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                //    if (MaHieu == "HTDot")
                //        break;
                //    CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                //    if (CodeDB == "")
                //        continue;
                //    CodeCongTac = Crow[Name["Code"]].Value.ToString();
                //    DataRow Row = Dt_HT.AsEnumerable().Where(x => x["Code"].ToString() == CodeCongTac).FirstOrDefault();
                //    Crow[Name["ThucHienKyNay"]].SetValue(Row["ThucHienKyNay"]);
                //}
                //spsheet_ThanhToanA_B.EndUpdate();
                //WaitFormHelper.CloseWaitForm();
            }
        }

        private void np_KhoiLuongHangNgay_StateChanged(object sender, StateChangedEventArgs e)
        {
            NavigationPaneState NewState = e.State;
            NavigationPaneState OldState = e.OldState;
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            if (OldState == NavigationPaneState.Collapsed && NewState == NavigationPaneState.Default)
                ctrl_NhapKLHN.pushData(NewState, DVTH, null, false, TypeKLHN.HaoPhiVatTu, "", onlyLoadData: true);

        }

        private void btn_Filter_Click(object sender, EventArgs e)
        {
            Worksheet ws = SharedControls.spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            if (ws.Name != TDKH.SheetName_DoBocChuan)
            {
                MessageShower.ShowError("Vui lòng chọn đúng sheet \"đo bóc chuẩn\" để xắp xếp");
                //this.Close();
                return;
            }
            Frm_Sort frm = new Frm_Sort();
            frm.senData = new Frm_Sort.SenData(MapCustumSort);
            frm.ShowDialog();
        }

        private void MapCustumSort(DialogResult dialog)
        {

        }

        private void ctrl_VatLieuNCMTC_Load(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
            ctrl_VatLieuNCMTC.Fcn_LoadDVTH();
            ctrl_VatLieuNCMTC.Fcn_Update();
            WaitFormHelper.CloseWaitForm();
        }

        private void slke_BaoCaoGiaoViec_Ctrinh_EditValueChanged(object sender, EventArgs e)
        {
            var crDuAn = slke_BaoCaoGiaoViec_Ctrinh.GetSelectedDataRow() as ThongTinDuAnExtensionViewModel;

            txt_ThoiTietSang.Enabled = txt_ThoiTietChieu.Enabled = txt_ThoiTietToi.Enabled
                = (crDuAn != null);

            if (crDuAn != null)
            {
                var crDate = dtp_KLHangNgay.Value.Date;
                string dbString = $"SELECT * FROM {Server.Tbl_ThoiTiet} tt " +
                    $"WHERE tt.CodeDuAn = '{crDuAn.Code}' " +
                    $"AND tt.Ngay = '{crDate}'";

                Tbl_ThoiTietViewModel tts = DataProvider.InstanceTHDA.ExecuteQueryModel<Tbl_ThoiTietViewModel>(dbString).SingleOrDefault();

                if (tts is null)
                {
                    tts = new Tbl_ThoiTietViewModel()
                    {
                        Code = Guid.NewGuid().ToString(),
                        Ngay = crDate,
                        CodeDuAn = crDuAn.Code,
                    };
                }
                tblThoiTietViewModelBindingSource.DataSource = tts;
            }
        }

        private void txt_ThoiTietSang_SelectedValueChanged(object sender, EventArgs e)
        {
            var tt = tblThoiTietViewModelBindingSource.DataSource as Tbl_ThoiTietViewModel;
            string newValSang = txt_ThoiTietSang.EditValue as string;
            string newValChieu = txt_ThoiTietChieu.EditValue as string;
            string newValToi = txt_ThoiTietToi.EditValue as string;
            string dbString = $"INSERT OR REPLACE INTO {Server.Tbl_ThoiTiet} " +
                $"(Code, CodeDuAn, Ngay, Sang, Chieu, Toi) VALUES " +
                $"(@Code, @CodeDuAn, @Ngay, @Sang, @Chieu, @Toi)";

            object[] mParams =
            {
                tt.Code,
                tt.CodeDuAn,
                tt.Ngay.ToCustomString() ,
                newValSang.HasValue() ? newValSang : null,
                newValChieu.HasValue() ? newValChieu : null,
                newValToi.HasValue() ? newValToi : null
            };

            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: mParams);
        }

        private void reposHangNgay_FileDinhKem_Click(object sender, EventArgs e)
        {
            var crNode = tl_CVHN_BaoCao.FocusedNode;
            var KLHN = tl_CVHN_BaoCao.GetDataRecordByNode(crNode) as KLTTHangNgay;
            FileManageTypeEnum type;
            string code;
            string TblFile;
            switch (crNode.Level)
            {
                case 1:

                    type = FileManageTypeEnum.CONGVIECCHA;
                    code = KLHN.CodeCha;
                    TblFile = GiaoViec.TBL_FileDinhKem;
                    break;
                case 2:
                    type = FileManageTypeEnum.CongViecCon;
                    code = KLHN.CodeCha;
                    TblFile = GiaoViec.TBL_CongViecCon_FileDinhKem;

                    break;
                default:
                    return;
            }

            FormLuaChon form = new FormLuaChon(code, type, KLHN.TenCongTac, dtp_KLHangNgay.Value);
            form.ShowDialog();
            string dbString = $"SELECT COUNT(*) FROM {TblFile} WHERE CodeParent = '{code}' " +
                $"AND Ngay = '{dtp_KLHangNgay.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'";
            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            KLHN.FileCount = int.Parse(dt.Rows[0][0].ToString());
            tl_CVHN_BaoCao.RefreshDataSource();
        }

        private void spsheet_TD_KH_LapKeHoach_KeyDown(object sender, KeyEventArgs e)
        {
            Worksheet ws = spsheet_TD_KH_LapKeHoach.Document.Worksheets.ActiveWorksheet;
            if (e.KeyCode == Keys.Delete)
            {
                var allPermission = BaseFrom.allPermission;

                bool isAdmin = allPermission.HaveInitProjectPermission
    || allPermission.AllContractorThatUserIsAdmin.Contains(ctrl_DonViThucHienDuAnTDKH.SelectedDVTH?.Code)
    || allPermission.AllContractorThatUserIsAdmin.Contains(slke_ThongTinDuAn.EditValue as string);

                if (!isAdmin
    && !allPermission.TabsInCreate.Contains(nameof(xtraTab_KeHoach)))
                {
                    MessageShower.ShowError("Bạn có quyền xóa công tác, vui lòng liên hệ Admin!");
                    e.Handled = false;
                    return;
                }

                Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
                //var wsKHKP = ws.Workbook.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
                var indsRowSelected = ws.Selection.Select(x => x.RowIndex).Distinct().OrderByDescending(x => x).ToArray();
                var indsColSelected = ws.Selection.Select(x => x.ColumnIndex).Distinct().ToArray();
                int indColCode = ws.Range.GetColumnIndexByName(dic[TDKH.COL_Code]);

                if (indsColSelected.Contains(indColCode))
                {
                    e.Handled = true;

                    if (MessageShower.ShowYesNoQuestion("Bạn có muốn xóa các dữ liệu đã chọn?") != DialogResult.Yes)
                        return;

                    ws.Workbook.BeginUpdate();
                    List<string> codesCha = new List<string>();
                    List<string> codesCon = new List<string>();
                    List<string> codesNhomDienGiai = new List<string>();
                    List<string> codesNhomCongTac = new List<string>();
                    List<string> codesPhanDoan = new List<string>();

                    foreach (int i in indsRowSelected)
                    {
                        string typeRow = ws.Rows[i][dic[TDKH.COL_TypeRow]].Value.ToString();
                        string code = ws.Rows[i][dic[TDKH.COL_Code]].Value.ToString();
                        if (typeRow == MyConstant.TYPEROW_CVCha)
                        {
                            codesCha.Add(code);
                        }
                        else if (typeRow == MyConstant.TYPEROW_NhomDienGiai)
                        {
                            codesNhomDienGiai.Add(code);

                        }
                        else if (typeRow == MyConstant.TYPEROW_Nhom)
                        {
                            codesNhomCongTac.Add(code);
                        }
                        else if (typeRow == MyConstant.TYPEROW_CVCON)
                        {
                            codesCon.Add(code);
                            //ws.Rows.Remove(i);
                        }
                        else if (typeRow == MyConstant.TYPEROW_PhanTuyen)
                        {
                            codesPhanDoan.Add(code);
                        }
                        else if (!typeRow.HasValue())
                        {
                            ws.Rows.Remove(i);
                        }

                    }

                    if (!isAdmin)
                    {
                        codesCha = codesCha.Where(x => allPermission.TabsInDelete.Contains(x)).ToList();

                    }
                    if (codesCha.Any())
                    {
                        DuAnHelper.DeleteDataRows(TDKH.TBL_ChiTietCongTacTheoKy, codesCha);
                    }
                    if (codesCon.Any())
                    {
                        DuAnHelper.DeleteDataRows(TDKH.TBL_ChiTietCongTacCon, codesCon);
                    }
                    if (codesNhomDienGiai.Any())
                    {
                        DuAnHelper.DeleteDataRows(TDKH.TBL_NhomDienGiai, codesNhomDienGiai);
                    }
                    if (codesNhomCongTac.Any())
                    {
                        DuAnHelper.DeleteDataRows(TDKH.TBL_NhomCongTac, codesNhomCongTac);
                    }

                    if (codesPhanDoan.Any())
                    {
                        string dbString = $"SELECT CodeHangMuc FROM {TDKH.Tbl_PhanTuyen} WHERE Code IN ({MyFunction.fcn_Array2listQueryCondition(codesPhanDoan)})";
                        DataTable dthp = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        var codesHM = dthp.AsEnumerable().Select(x => x["CodeHangMuc"].ToString()).Distinct();


                        DuAnHelper.DeleteDataRows(TDKH.Tbl_PhanTuyen, codesPhanDoan);
                        TDKHHelper.CapNhatAllVatTuHaoPhi(CodesHangMuc: codesHM);
                    }

                    TDKHHelper.DongBoDuLieuTDKH();
                    ws.Workbook.EndUpdate();
                    if (codesNhomCongTac.Any() || codesCha.Any() || codesNhomDienGiai.Any() || codesCon.Any() || codesPhanDoan.Any())
                        TDKHHelper.LoadCongTacDoBoc();

                    //spsheet_TD_KH_LapKeHoach.CellValueChanged += spsheet_TD_KH_LapKeHoach_CellValueChanged;

                }

            }
        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_KeyDown(object sender, KeyEventArgs e)
        {
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.Document.Worksheets.ActiveWorksheet;
            if (e.KeyCode == Keys.Delete || e.KeyCode == Keys.F8)
            {
                //if (ws.Name == Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;)
                //{
                var indsRowSelected = ws.Selection.Select(x => x.RowIndex).Distinct().OrderByDescending(x => x).ToArray();
                var indsColSelected = ws.Selection.Select(x => x.ColumnIndex).Distinct().ToArray();
                var range = ws.Range[MyConstant.Range_KeHoach];
                var dic = MyFunction.fcn_getDicOfColumn(range);
                int indColCode = ws.Range.GetColumnIndexByName(dic[GiaoViec.COL_CodeCT]);

                if (indsColSelected.Contains(indColCode))
                {
                    e.Handled = true;

                    if (MessageShower.ShowYesNoQuestion("Bạn có muốn xóa các dữ liệu đã chọn?") != DialogResult.Yes)
                        return;

                    ws.Workbook.BeginUpdate();
                    List<string> codesCha = new List<string>();
                    List<string> codesCon = new List<string>();
                    List<string> codesNhomDienGiai = new List<string>();
                    List<string> codesNhomCongTac = new List<string>();

                    foreach (int i in indsRowSelected)
                    {
                        string typeRow = ws.Rows[i][dic[GiaoViec.COL_TypeRow]].Value.ToString();
                        string code = ws.Rows[i][dic[GiaoViec.COL_CodeCT]].Value.ToString();
                        if (typeRow == MyConstant.TYPEROW_CVCha)
                        {
                            codesCha.Add(code);
                        }
                        else if (typeRow == MyConstant.TYPEROW_CVCON)
                        {
                            codesCon.Add(code);
                        }
                        else if (typeRow == MyConstant.TYPEROW_Nhom)
                        {
                            codesNhomCongTac.Add(code);
                        }
                        else if (typeRow == MyConstant.TYPEROW_NhomDienGiai)
                        {
                            codesNhomDienGiai.Add(code);
                        }
                    }

                    if (codesNhomDienGiai.Any())
                    {
                        DuAnHelper.DeleteDataRows(GiaoViec.TBL_NhomCongTacCha, codesNhomCongTac);
                    }
                    if (codesCha.Any())
                    {
                        DuAnHelper.DeleteDataRows(GiaoViec.TBL_CONGVIECCHA, codesCha);
                    }

                    if (codesNhomDienGiai.Any())
                    {
                        DuAnHelper.DeleteDataRows(GiaoViec.TBL_NhomCongTacCon, codesNhomDienGiai);
                    }
                    if (codesCon.Any())
                    {
                        DuAnHelper.DeleteDataRows(GiaoViec.TBL_CONGVIECCON, codesCon);
                    }

                    //TDKHHelper.DongBoDuLieuTDKH();
                    ws.Workbook.EndUpdate();

                    if (codesNhomCongTac.Any() || codesCha.Any() || codesNhomDienGiai.Any() || codesCon.Any())
                        fcn_GV_CapNhatHangMucCongViec(false);
                    //spsheet_TD_KH_LapKeHoach.CellValueChanged += spsheet_TD_KH_LapKeHoach_CellValueChanged;

                }
                //}
            }
        }

        private void bt_TDKH_refresh_Click(object sender, EventArgs e)
        {
            LoadSheetTDKH();
        }

        private void bt_GV_Refresh_Click(object sender, EventArgs e)
        {
            fcn_GV_CapNhatHangMucCongViec(false);
        }

        private void reposBt_Xoa_Click(object sender, EventArgs e)
        {
            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn xóa dữ liệu này?");
            if (rs == DialogResult.No)
                return;
            KLTTHangNgay row = tl_CVHN_BaoCao.GetFocusedRow() as KLTTHangNgay;
            string dbString = "";

            dbString = $"UPDATE {TDKH.TBL_KhoiLuongCongViecHangNgay} SET KhoiLuongThiCong = NULL, KhoiLuongKeHoachGiaoViec = NULL WHERE Code = '{row.Code}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            row.KhoiLuongKeHoach = row.KhoiLuongThiCong = null;

            dbString = $"DELETE FROM {TDKH.TBL_KhoiLuongCongViecHangNgay} WHERE " +
                $"KhoiLuongThiCong IS NULL AND KhoiLuongKeHoach IS NULL AND KhoiLuongKeHoachGiaoViec IS NULL";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            fcn_LoadBaoCaoGiaoViec1Day();
            //tl_CVHN_BaoCao.RefreshDataSource();
        }

        private void repos_bt_Xoa_Click(object sender, EventArgs e)
        {
            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn xóa dữ liệu này?");
            if (rs == DialogResult.No)
                return;
            KLTTHangNgay row = tl_KhoiLuongHaoPhi.GetFocusedRow() as KLTTHangNgay;
            string dbString = "";

            dbString = $"UPDATE {TDKH.Tbl_HaoPhiVatTu_HangNgay} SET KhoiLuongThiCong = NULL, KhoiLuongKeHoachGiaoViec = NULL WHERE Code = '{row.Code}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            row.KhoiLuongKeHoach = row.KhoiLuongThiCong = null;

            dbString = $"DELETE FROM {TDKH.Tbl_HaoPhiVatTu_HangNgay} WHERE " +
                $"KhoiLuongThiCong IS NULL AND KhoiLuongKeHoach IS NULL AND KhoiLuongKeHoachGiaoViec IS NULL";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            DuAnHelper.UpdateStateGiaoViecByKhoiLuongThiCong(new string[] { row.CodeCha });
            tl_CVHN_BaoCao_FocusedNodeChanged(null, null);
            //tl_KhoiLuongHaoPhi.RefreshDataSource();
        }

        private void cb_TDKH_SelectALl_CheckedChanged(object sender, EventArgs e)
        {
            //Worksheet ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;

            //Dictionary<string, string> dic;

            //switch (ws.Name)
            //{
            //    case TDKH.SheetName_DoBocChuan:
            //        dic = MyFunction.fcn_getDicOfColumn(ws.Range[TDKH.RANGE_DoBocChuan]);
            //        break;
            //    case TDKH.SheetName_KeHoachKinhPhi:
            //        dic = dic_All;
            //        break;
            //    default:
            //        return;
            //}
            //spsheet_TD_KH_LapKeHoach.BeginUpdate();
            //Row[] rows = ws.Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions)
            //                .Select(x => ws.Rows[x.RowIndex]).ToArray();

            //foreach (Row row in rows)
            //{
            //    row[TDKH.COL_Chon].SetValue(cb_TDKH_SelectALl.Checked);
            //}
            //spsheet_TD_KH_LapKeHoach.EndUpdate();

        }

        private void cb_GV_CheckAll_CheckedChanged(object sender, EventArgs e)
        {
            Worksheet ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;

            var dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            spsheet_GV_KH_ChiTietCacHMCongViec.BeginUpdate();
            Row[] rows = ws.Search(MyConstant.TYPEROW_CVCha, MyConstant.MySearchOptions)
                            .Select(x => ws.Rows[x.RowIndex]).ToArray();

            foreach (Row row in rows)
            {
                //row[TDKH.COL_Chon].SetValue(cb_TDKH_SelectALl.Checked);
            }
            spsheet_GV_KH_ChiTietCacHMCongViec.EndUpdate();
        }

        private void bt_GiaoViec_CapNhatTrangThai_Click(object sender, EventArgs e)
        {
            DuAnHelper.UpdateStateGiaoViecByKhoiLuongThiCong();
        }

        private void navigationPane12_Click(object sender, EventArgs e)
        {

        }

        private void PhanMemQuanLyThiCong360_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.S)
                lưuToolStripMenuItem.PerformClick();
        }

        private void OpenBackup(string file)
        {
            if (BaseFrom.THDAChanged)
            {
                var dr = MessageShower.ShowYesNoQuestion("Dự án hiện tại có thay đổi, bạn có muốn lưu lại trước khi mở file không?");
                if (dr == DialogResult.Yes)
                {
                    //goto BeginSave;
                }
                else if (dr == DialogResult.No)
                {
                    BaseFrom.THDAChanged = false;
                    //goto BeginCreate;
                }
                else
                {
                    return;
                }
            }
            //BeginSave:
            //fcn_saveDA(false);

            //BeginCreate:
            /*            if (!TaoMoiTongDuAn())
                        {
                            MessageShower.ShowWarning("Đã hủy thao tác tải về!");
                        }*/

            if (!fcn_openDAwithPath(file))
            {
                MessageShower.ShowError("Không thể mở file!");
                TaoMoiTongDuAn();
                return;
            }

            File.Delete(file);
            MSETTING.Default.PathHienTai = "";
            MSETTING.Default.Save();
        }

        private void cácDựÁnChưaĐượcLưuLạiToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openFormUnsavedFile(false);
        }

        private DialogResult openFormUnsavedFile(bool isFstTime = false)
        {
            XtraForm_NotYetSaveProject form = new XtraForm_NotYetSaveProject(isFstTime);
            form.OpenBackup = new XtraForm_NotYetSaveProject.DE_OPENBACKUP(OpenBackup);
            return form.ShowDialog();
        }

        private void tl_CVHN_BaoCao_PopupMenuShowing(object sender, DevExpress.XtraTreeList.PopupMenuShowingEventArgs e)
        {
            if (tl_CVHN_BaoCao.DataSource is null)
                return;

            var crNode = tl_CVHN_BaoCao.FocusedNode;
            if (e.MenuType == TreeListMenuType.Node && crNode.Level >= 1)
            {
                e.Menu.Items.Add(new DXMenuItem("Lấy thi công theo khối lượng kế hoạch", fcn_handle_LayTheoKhoiLuongKeHoach));
                e.Menu.Items.Add(new DXMenuItem("Lấy toàn bộ khối lượng thi công còn thiếu", fcn_handle_LayKhoiLuongThiCongConThieu));
            }
        }

        private void fcn_handle_LayTheoKhoiLuongKeHoach(object sender, EventArgs e)
        {
            var crNode = tl_CVHN_BaoCao.FocusedNode;
            crNode.SetValue("KhoiLuongThiCong", crNode.GetValue("KhoiLuongKeHoach"));
        }

        private void fcn_handle_LayKhoiLuongThiCongConThieu(object sender, EventArgs e)
        {
            var crNode = tl_CVHN_BaoCao.FocusedNode;
            KLTTHangNgay row = tl_CVHN_BaoCao.GetDataRecordByNode(crNode) as KLTTHangNgay;

            string dbString = $"SELECT cha.KhoiLuongKeHoach, TOTAL(KhoiLuongThiCong) AS KhoiLuongDaThiCong " +
                $"FROM {GiaoViec.TBL_CONGVIECCHA} cha " +
                $"LEFT JOIN {TDKH.TBL_ChiTietCongTacTheoKy} cttk " +
                $"ON cha.CodeCongTacTheoGiaiDoan = cttk.Code " +
                $"LEFT JOIN {TDKH.TBL_KhoiLuongCongViecHangNgay} hn " +
                $"ON hn.CodeCongViecCha = cha.CodeCongViecCha OR hn.CodeCongTacTheoGiaiDoan = cttk.Code " +
                $"AND hn.Ngay != '{row.NgayString}' " +
                $"WHERE cha.CodeCongViecCha = '{row.CodeCha}'";

            DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            DataRow dr = dt.Rows[0];
            double KhoiLuongKeHoach = double.Parse(dr["KhoiLuongKeHoach"].ToString());
            double KhoiLuongDaThiCong = double.Parse(dr["KhoiLuongDaThiCong"].ToString());

            double kltc = Math.Max(KhoiLuongKeHoach - KhoiLuongDaThiCong, 0);
            crNode.SetValue("KhoiLuongThiCong", kltc);
        }

        private void tl_CVHN_BaoCao_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right)
            {
                TreeList treeList = sender as TreeList;
                TreeListHitInfo info = treeList.CalcHitInfo(e.Location);
                if (info.Node != null)
                {
                    treeList.FocusedNode = info.Node;
                }
            }
        }

        private void ToolStripTEPTIN_Click(object sender, EventArgs e)
        {

        }

        private void CheckAnHienCongTacVatTu(object sender, EventArgs e)
        {

        }

        private void sb_CapNhapDuLieuVC_Click(object sender, EventArgs e)
        {
            Fcn_LoadDataQLVC();
        }

        //private void rEHL_FileDinhKem_Click(object sender, EventArgs e)
        //{
        //    DeXuat KC = gv_DeXuatThuChi.GetFocusedRow() as DeXuat;
        //    //if (KC.ParentID != "0")
        //    //    return;
        //    FormLuaChon luachon = new FormLuaChon(KC.Code, FileManageTypeEnum.THUCHITAMUNG_DeXuat, KC.NoiDungUng);
        //    luachon.ShowDialog();
        //}



        private void PhanMemQuanLyThiCong360_Click(object sender, EventArgs e)
        {
            //if (SharedControls.ce_Mode.Checked)
            //{
            //    if (!BaseFrom.IsFullAccess)
            //    {
            //        MessageShower.ShowWarning("Bạn đang ở chế độ dùng bản quyền nhưng không có đăng ký bản quyền!\r\n" +
            //            "Vui lòng ĐĂNG KÝ BẢN QUYỀN để tiếp tục sử dụng hoặc chuyển sang chế độ TÀI KHOẢN và đăng nhập tài khoản đã được phân quyền!");
            //    }
            //}
            //else
            //{
            //    if (BaseFrom.IsValidAccount)
            //    {

            //    }
            //    else
            //    {

            //    }
            //}
        }

        private void xtraTabControl_TabMain_EnabledChanged(object sender, EventArgs e)
        {
            if (!xtraTabControl_TabMain.Enabled || xtraTabControl_TabMain.SelectedTabPage is null)
            {
                pn_ThongBao.Visible = true;
                xtraTabControl_TabMain.Dock = DockStyle.Bottom;
                xtraTabControl_TabMain.Size = new Size(xtraTabControl_TabMain.Size.Width, 25);
            }
            else
            {
                var tab = xtraTabControl_TabMain.SelectedTabPage;
                XtraTabControl subTabControl = tab.Controls.OfType<XtraTabControl>().FirstOrDefault();

                if (subTabControl != null && subTabControl.SelectedTabPage is null)
                {
                    pn_ThongBao.Visible = true;
                    xtraTabControl_TabMain.Dock = DockStyle.Bottom;
                    xtraTabControl_TabMain.Size = new Size(xtraTabControl_TabMain.Size.Width, 50);
                }
                else
                {
                    pn_ThongBao.Visible = false;
                    xtraTabControl_TabMain.Dock = DockStyle.Fill;
                }
            }
        }

        protected override void WndProc(ref System.Windows.Forms.Message m)
        {
            if (m.Msg == WM_QUERYENDSESSION)
            {
                systemShutdown = true;
            }
            switch (m.WParam.ToInt32())
            {
                case DBT_DEVICEARRIVAL:
                    if (ce_Mode.Checked)
                        checkLicense(true);
                    break;
            }
            base.WndProc(ref m);
        }

        private void spsheet_ThanhToanA_B_ActiveSheetChanged(object sender, ActiveSheetChangedEventArgs e)
        {
            SpreadsheetControl Name = sender as SpreadsheetControl;
            if (e.NewActiveSheetName == "Tổng hợp các kỳ thanh toán")
            {
                if (Name != spsheet_ThanhToan_NhaCungCap)
                {
                    if (SharedControls._CheckTrangThaiThongThuongTH)
                        return;
                    fcn_ThanhToanTH(Name);
                    SharedControls._CheckTrangThaiThongThuongTH = true;
                }
                else
                    fcn_ThanhToanTHNCC(spsheet_ThanhToan_NhaCungCap);

            }
            else if (e.NewActiveSheetName == "Thanh toán thông thường")
            {
                if (SharedControls._CheckTrangThaiThongThuong)
                    return;
                fcn_ThanhToanTT(Name);
                SharedControls._CheckTrangThaiThongThuong = true;
            }
            else if (e.NewActiveSheetName == "Thanh toán KL hoàn thành")
            {
                //if (_CheckTrangThaiHD)
                //    return;
                //fcn_ThanhToanHT(Name, false, false);
                Name.Document.Worksheets["Thanh toán KL phát sinh"].Visible = true;
                //_CheckTrangThaiHD = true;
                return;
            }
            else if (e.NewActiveSheetName == "Thanh toán KL phát sinh")
            {
                fcn_ThanhToanPS(Name, false, false);
                Name.Document.Worksheets["Khối lượng nghiệm thu"].Visible = true;
                Name.Document.Worksheets["Thanh toán thông thường"].Visible = true;
                Name.Document.Worksheets["Tổng hợp các kỳ thanh toán"].Visible = true;
                Name.Document.Worksheets["Bảng đề nghị thanh toán"].Visible = true;
            }
            else if (e.NewActiveSheetName == "Khối lượng nghiệm thu")
            {
                //if (SharedControls._CheckTrangThaiNghiemThu)
                //    return;
                fcn_ThanhToanNghiemThu(Name);
                //SharedControls._CheckTrangThaiNghiemThu = true;
            }
            else if (e.NewActiveSheetName == "Tổng hợp VL-NC-MTC")
            {
                Fcn_UpdateHaoPhi(Name);
            }
            else if (e.NewActiveSheetName == "Tổng hợp VT A cấp")
            {
                Fcn_UpDateVatLieuACap(Name);
            }
            else if (e.NewActiveSheetName == "Bảng đề nghị thanh toán")
            {
                if (SharedControls._CheckTrangThaiDeNghi)
                    return;
                Fcn_UpdateBangDeNghi(Name);
                SharedControls._CheckTrangThaiDeNghi = true;
            }

        }
        private void ctrl_VatLieuNCMTC_sb_capNhap_Click(object sender, EventArgs e)
        {
            if (ctrl_VatLieuNCMTC.CheckNgay)
                return;
            WaitFormHelper.ShowWaitForm("Đang cập nhập dữ liệu", "Vui Lòng chờ!");
            ctrl_VatLieuNCMTC.Fcn_LoadDVTH();
            ctrl_VatLieuNCMTC.Fcn_Update();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }

        private void sb_CapNhapTCTU_Click(object sender, EventArgs e)
        {
            Fcn_LoadTCTU();
        }

        private void StripCongTrinhMau_Click(object sender, EventArgs e)
        {
            Process.Start("https://drive.google.com/drive/folders/1kBmUYnqZCX4yDAmYrBKco4qKD37YcJTQ?usp=drive_link");
        }

        private void tảiFileQLTCMẫuToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://drive.google.com/drive/folders/1ZT7bm4dYE3iWVrSKHFWgpt7562DqMa9C?usp=sharing");
        }

        private void repobt_Xoa_Click(object sender, EventArgs e)
        {


        }

        private void searchLookUpEdit1View_MouseDown(object sender, MouseEventArgs e)
        {
            var da = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;

            if (MessageShower.ShowYesNoQuestion($"Dự án {da.TenDuAn} và toàn bộ dữ liệu liên quan sẽ bị xóa! Bạn chắc chứ?") == DialogResult.Yes)
            {
                DuAnHelper.DeleteDataRows(Server.Tbl_ThongTinDuAn, new string[] { da.Code });
                slke_ThongTinDuAn_EditValueChanged(null, null);
            }
        }

        private void slke_DAs_Bindingsource_ListChanged(object sender, ListChangedEventArgs e)
        {
            //var das = slke_DAs_Bindingsource.DataSource as List<Tbl_ThongTinDuAnViewModel>;
            //if (das is null)
            //    return;
            //slke_DAs_Bindingsource.ListChanged -= slke_DAs_Bindingsource_ListChanged;


            //das.Add(new Tbl_ThongTinDuAnViewModel()
            //{
            //    Code = "Manage",
            //    TenDuAn = "***QUẢN LÝ DANH SÁCH***"
            //});

            //slke_DAs_Bindingsource.ListChanged += slke_DAs_Bindingsource_ListChanged;
        }

        private void searchLookUpEdit1View_DataSourceChanged(object sender, EventArgs e)
        {
            slke_ThongTinDuAn.Enabled = true;

            var das = searchLookUpEdit1View.DataSource as List<Tbl_ThongTinDuAnViewModel>;
            if (das is null)
                return;


            //das.Add(new Tbl_ThongTinDuAnViewModel()
            //{
            //    Code = "Manage",
            //    TenDuAn = "***QUẢN LÝ DANH SÁCH***"
            //});

        }

        private void bt_ImportDonGiaVatTu_Click(object sender, EventArgs e)
        {
            XtraForm_ImportDonGiaVatTu form = new XtraForm_ImportDonGiaVatTu();
            if (form.ShowDialog() == DialogResult.OK)
                LoadSheetTDKH();


        }

        private void kiểmTraWaitformToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var dic = WaitFormHelper.GetDic();
            MessageShower.ShowInformation(string.Join("\r\n", dic.Keys.ToArray()));
        }

        private void đóngToànBộMànHìnhChờToolStripMenuItem_Click(object sender, EventArgs e)
        {
            WaitFormHelper.ForceCloseWaitFormAndClearDic();
        }

        private void cb_TDKH_KH_HaoPhi_CheckedChanged(object sender, EventArgs e)
        {
            AnHien_TDKH_KH_HaoPhi.Visible = cb_TDKH_KH_HaoPhi.Checked;
        }

        private void thôngTinTổngHợpDựÁnOnlineToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DevForm_ThongTinDuAn devForm = new DevForm_ThongTinDuAn();
            devForm.ShowDialog();
        }

        private void tL_YeuCauVatTu_BeforeCheckNode(object sender, CheckNodeEventArgs e)
        {
            if (e.Node.Level == 2)
            {
                int loc = 1;
            }
        }

        private void spsheet_GV_KH_ChiTietCacHMCongViec_DocumentLoaded(object sender, EventArgs e)
        {
            var ws = spsheet_GV_KH_ChiTietCacHMCongViec.ActiveWorksheet;
            var dic = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.Range_KeHoach]);

            if (!BaseFrom.IsShowDonGiaKeHoach)
            {
                ws.Columns[dic[GiaoViec.COL_DonGiaKeHoach]].Visible = false;
            }

            if (!BaseFrom.IsShowKhoiLuongKeHoach)
            {
                ws.Columns[dic[GiaoViec.COL_DonGiaKeHoach]].Visible = false;
            }
        }

        private void tl_CVHN_BaoCao_Load(object sender, EventArgs e)
        {



        }
        private void Fcn_UpdateBangDeNghi(SpreadsheetControl NameSheet)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhật bảng đề nghị");
            NameSheet.BeginUpdate();
            IWorkbook workbook = NameSheet.Document;
            Worksheet ws = workbook.Worksheets["Bảng đề nghị thanh toán"];
            CellRange RangeData = ws.Range["RangeData"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            string dbString = $"SELECT * FROM {MyConstant.TBL_HopDong_DeNghiThanhToan} WHERE \"CodeDot\"='{cbo_AB_LanThanhToan.SelectedValue}' ";
            List<DeNghiThanhToan> DeNghi = DataProvider.InstanceTHDA.ExecuteQueryModel<DeNghiThanhToan>(dbString);
            var GroupCha = DeNghi.GroupBy(x => x.IndexCha);
            Row Crow;
            int STTLast = 3;
            foreach (var itemCha in GroupCha)
            {
                //var FirstCha = itemCha.FirstOrDefault();
                //Crow = ws.Rows[FirstCha.IndexCT-1];
                //if (FirstCha.IsCoDinh)
                //{
                //    Crow[Name["Code"]].SetValueFromText(FirstCha.Code);
                //    Crow[Name["TenCongTac"]].SetValueFromText(FirstCha.TenCongTac);
                //    Crow[Name["DonVi"]].SetValueFromText(FirstCha.DonVi);
                //    Crow[Name["GhiChu"]].SetValueFromText(FirstCha.GhiChu);
                //    if (FirstCha.SetLuyKeKyTruoc)
                //        Crow[Name["LuyKeKyTruoc"]].SetValue(FirstCha.S1);
                //    else
                //        Crow[Name["LuyKeKyTruoc"]].Formula = FirstCha.LuyKeKyTruoc;  
                //    if (FirstCha.SetKyNay)
                //        Crow[Name["KyNay"]].SetValue(FirstCha.S2);
                //    else
                //        Crow[Name["KyNay"]].Formula = FirstCha.KyNay;     
                //    if (FirstCha.SetLuyKeKyNay)
                //        Crow[Name["LuyKeKyNay"]].SetValue(FirstCha.S3);
                //    else
                //        Crow[Name["LuyKeKyNay"]].Formula = FirstCha.LuyKeKyNay;
                //}
                //else
                //{
                //    if (FirstCha.LoaiCT == 1)
                //    {

                //    }
                //    else
                //    {

                //    }
                //}

                foreach (var itemCon in itemCha)
                {
                    Crow = ws.Rows[itemCon.IndexCT - 1];
                    if (itemCon.IsCoDinh)
                    {


                    }
                    else
                    {
                        if (itemCon.LoaiCT == 1)
                        {
                            ws.Rows.Insert(itemCon.IndexCT - 1, 1, RowFormatMode.FormatAsPrevious);
                            Crow.CopyFrom(ws.Rows[itemCon.IndexCT], PasteSpecial.All);
                            Crow.Visible = true;
                            Crow[Name["Stt"]].Formula = $"ROMAN({STTLast++})";
                            Crow[Name["IndexCha"]].SetValue(itemCon.IndexCT);
                        }
                        else
                        {
                            ws.Rows.Insert(itemCon.IndexCT - 1, 1, RowFormatMode.FormatAsPrevious);
                            Crow.CopyFrom(ws.Rows[itemCon.IndexCT], PasteSpecial.All);
                            Crow.Visible = true;
                            double STT = ws.Rows[itemCon.IndexCT - 2][Name["Stt"]].Value.NumericValue + 1;
                            Crow[Name["Stt"]].SetValue(STT);
                        }

                    }
                    Crow[Name["Code"]].SetValueFromText(itemCon.Code);
                    Crow[Name["TenCongTac"]].SetValueFromText(itemCon.TenCongTac);
                    Crow[Name["DonVi"]].SetValueFromText(itemCon.DonVi);
                    Crow[Name["GhiChu"]].SetValueFromText(itemCon.GhiChu);
                    if (itemCon.SetLuyKeKyTruoc)
                        Crow[Name["LuyKeKyTruoc"]].SetValue(itemCon.S1);
                    else
                        Crow[Name["LuyKeKyTruoc"]].Formula = itemCon.LuyKeKyTruoc;
                    if (itemCon.SetKyNay)
                        Crow[Name["KyNay"]].SetValue(itemCon.S2);
                    else
                        Crow[Name["KyNay"]].Formula = itemCon.KyNay;
                    if (itemCon.SetLuyKeKyNay)
                        Crow[Name["LuyKeKyNay"]].SetValue(itemCon.S3);
                    else
                        Crow[Name["LuyKeKyNay"]].Formula = itemCon.LuyKeKyNay;
                }
            }
            RangeData = ws.Range["RangeData"];
            Crow = ws.Rows[RangeData.BottomRowIndex];
            Crow[Name["Stt"]].Formula = $"ROMAN({STTLast})";
            //Crow[Name["IndexCha"]].SetValue(RangeData.BottomRowIndex+1);
            NameSheet.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void Fcn_UpDateVatLieuACap(SpreadsheetControl NameSheet)
        {
            string dbString = "";
            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn cập nhập Tổng hợp VT A cấp,Nếu cập nhập các giá trị cập nhập sẽ không được tính vào hợp đồng khác và dữ liệu cũ sẽ được xóa???? ");
            if (rs == DialogResult.Yes)
            {
                try
                {
                    XtraInputBoxArgs args = new XtraInputBoxArgs();
                    args.Caption = "Cài đặt ngày bắt đầu";
                    args.Prompt = "Ngày bắt đầu";
                    args.DefaultButtonIndex = 0;
                    args.Showing += Args_Showing_Begin;
                    DateEdit editor = new DateEdit();
                    editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
                    editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
                    args.Editor = editor;
                    args.DefaultResponse = DateTime.Now.Date;
                    var NBD = XtraInputBox.Show(args).ToString();

                    args.Caption = "Cài đặt ngày kết thúc";
                    args.Prompt = "Ngày kết thúc";
                    args.DefaultButtonIndex = 0;
                    args.Showing += Args_Showing_Begin;
                    editor.Properties.CalendarView = DevExpress.XtraEditors.Repository.CalendarView.TouchUI;
                    editor.Properties.Mask.EditMask = MyConstant.CONST_DATE_FORMAT_SPSHEET;
                    args.Editor = editor;
                    args.DefaultResponse = DateTime.Now.Date;
                    var Nkt = XtraInputBox.Show(args).ToString();
                    DateTime DateBD = DateTime.Parse(NBD);
                    DateTime DateKT = DateTime.Parse(Nkt);
                    WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu mới!!!");
                    dbString = $"SELECT * FROM Tbl_HopDong_TongHopACap WHERE \"CodeDot\"='{cbo_AB_LanThanhToan.SelectedValue}' ";
                    DataTable TongHop = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    string lstCode = MyFunction.fcn_Array2listQueryCondition(TongHop.AsEnumerable().Select(x => x["Code"].ToString()).ToArray());
                    dbString = $"DELETE FROM Tbl_HopDong_TongHopACap WHERE \"Code\" IN ({lstCode})";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                    dbString = $"SELECT XVTHN.*,XVT.GhiChu,XVT.CodeDeXuat,YCVT.HopDongKl,YCVT.DonGiaHienTruong FROM Tbl_QLVT_XuatVatTu_KhoiLuongHangNgay XVTHN" +
                        $" LEFT JOIN Tbl_QLVT_XuatVatTu XVT ON XVT.Code=XVTHN.CodeCha " +
                        $"LEFT JOIN Tbl_QLVT_YeuCauVatTu YCVT ON YCVT.Code=XVT.CodeDeXuat WHERE (XVTHN.ACapB='True' OR XVTHN.ACapB==1)" +
                        $" AND YCVT.DonViThucHien='{DVTH.Code}' " +
                        $"AND XVTHN.Ngay>='{DateBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' AND XVTHN.Ngay<='{DateKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' ";

                    DataTable dt_VT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    var GroupYeuCau = dt_VT.AsEnumerable().GroupBy(x => x["CodeDeXuat"].ToString());
                    double KLHD = 0, KhoiLuongThucHienTrongKy = 0;
                    long GiaTriHD = 0, GiaTriThucNhan = 0;
                    foreach (var CrowYeuCau in GroupYeuCau)
                    {
                        var First = CrowYeuCau.FirstOrDefault();
                        KLHD = First["HopDongKl"] != DBNull.Value ? double.Parse(First["HopDongKl"].ToString()) : 0;
                        GiaTriHD = First["HopDongKl"] != DBNull.Value && First["DonGiaHienTruong"] !=
                            DBNull.Value ? (long)double.Parse(First["HopDongKl"].ToString()) * (long)double.Parse(First["HopDongKl"].ToString()) : 0;

                        KhoiLuongThucHienTrongKy = CrowYeuCau.Sum(x => double.Parse(x["KhoiLuong"].ToString()));
                        GiaTriThucNhan = (long)CrowYeuCau.Sum(x => double.Parse(x["DonGia"].ToString()) * double.Parse(x["KhoiLuong"].ToString()));
                        dbString = $"INSERT INTO Tbl_HopDong_TongHopACap (\"Code\",\"CodeDot\",\"CodeYeuCauVatTu\"," +
                            $"\"KhoiLuongThucHienTrongKy\",\"GiaTriThucNhan\",\"GhiChu\",\"NgayBatDau\",\"NgayKetThuc\",\"KhoiLuongHopDong\",\"GiaTriHD\") " +
                            $"VALUES ('{Guid.NewGuid()}', '{cbo_AB_LanThanhToan.SelectedValue}', '{CrowYeuCau.Key}', " +
                            $"'{KhoiLuongThucHienTrongKy}','{GiaTriThucNhan}','{First["GhiChu"]}','{DateBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'," +
                            $"'{DateKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}','{KLHD}','{GiaTriHD}')";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                    }
                }
                catch
                {
                    goto Label;
                }

            }
            Label:
            NameSheet.CellValueChanged -= spsheet_ThanhToanA_B_CellValueChanged;
            WaitFormHelper.ShowWaitForm("Đang cập nhật hao phí hợp đồng");
            NameSheet.BeginUpdate();
            IWorkbook workbook = NameSheet.Document;
            Worksheet ws = workbook.Worksheets["Tổng hợp VT A cấp"];
            CellRange RangeData = ws.Range["RangeDataVTACap"];
            RangeData.ClearContents();
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            dbString = $"SELECT * FROM view_VatLieuACapB WHERE \"CodeDot\"='{cbo_AB_LanThanhToan.SelectedValue}' ";
            List<TongHopVatTuACapB> vatTus = DataProvider.InstanceTHDA.ExecuteQueryModel<TongHopVatTuACapB>(dbString);
            int RowIndex = RangeData.TopRowIndex;
            Row cRow = ws.Rows[RowIndex];
            int STT = 1;
            if (RangeData.RowCount <= vatTus.Count())
                ws.Rows.Insert(RangeData.TopRowIndex + 1, vatTus.Count() * 2, RowFormatMode.FormatAsNext);
            var CrCongTrinh = vatTus.GroupBy(x => new { x.CodeCongTrinh, x.TenCongTrinh });
            if (vatTus.Any())
            {
                DateTime Min = vatTus.Min(x => x.NgayBatDau) ?? DateTime.Now;
                DateTime Max = vatTus.Max(x => x.NgayKetThuc) ?? DateTime.Now;
                ws.Rows[1]["A"].SetValueFromText($"BẢNG TỔNG HỢP GIÁ TRỊ A CẤP TỪ" +
                    $" NGÀY {Min.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET)} ĐẾN NGÀY {Max.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET)}");
            }
            foreach (var ctrinh in CrCongTrinh)
            {
                cRow = ws.Rows[RowIndex++];
                cRow.Font.Color = MyConstant.color_Row_CongTrinh;
                cRow.Font.Bold = true;
                ws.Rows.Insert(RowIndex + 1, 1, RowFormatMode.FormatAsPrevious);
                cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(MyConstant.TYPEROW_CongTrinh);
                cRow[Name[TDKH.COL_VatTu]].SetValueFromText(ctrinh.Key.TenCongTrinh);
                var HangMuc = ctrinh.GroupBy(x => new { x.CodeHangMuc, x.TenHangMuc });
                foreach (var HM in HangMuc)
                {
                    cRow = ws.Rows[RowIndex++];
                    cRow.Font.Color = MyConstant.color_Row_HangMuc;
                    cRow.Font.Bold = true;
                    ws.Rows.Insert(RowIndex + 1, 1, RowFormatMode.FormatAsPrevious);
                    cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(MyConstant.TYPEROW_HangMuc);
                    cRow[Name[TDKH.COL_VatTu]].SetValueFromText(HM.Key.TenHangMuc);
                    var PhanTuyen = HM.GroupBy(x => x.CodePhanTuyen);
                    foreach (var Tuyen in PhanTuyen)
                    {
                        if (Tuyen.Key != null)
                        {
                            cRow = ws.Rows[RowIndex++];
                            cRow.Font.Color = MyConstant.color_Row_PhanTuyen;
                            cRow.Font.Bold = true;
                            ws.Rows.Insert(RowIndex + 1, 1, RowFormatMode.FormatAsPrevious);
                            cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(MyConstant.TYPEROW_PhanTuyen);
                            cRow[Name[TDKH.COL_VatTu]].SetValueFromText(Tuyen.FirstOrDefault().TenTuyen);
                        }
                        var GroupNguon = Tuyen.GroupBy(x => x.Nguon);
                        foreach (var Nguon in GroupNguon)
                        {
                            var VatTu = Nguon.GroupBy(x => x.Code);
                            foreach (var VT in VatTu)
                            {
                                cRow = ws.Rows[RowIndex++];
                                cRow.Font.Color = Color.Black;
                                cRow.Font.Bold = false;
                                cRow[Name[TDKH.COL_STT]].SetValue(STT++);
                                cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(VT.FirstOrDefault().MaVatTu);
                                cRow[Name[TDKH.COL_VatTu]].SetValueFromText(VT.FirstOrDefault().TenVatTu);
                                cRow[Name[TDKH.COL_DonVi]].SetValueFromText(VT.FirstOrDefault().DonVi);
                                cRow[Name["KhoiLuongHopDong"]].SetValue(VT.FirstOrDefault().KhoiLuongHopDong);
                                cRow[Name["KhoiLuongThucHienTrongKy"]].SetValue(VT.FirstOrDefault().KhoiLuongThucHienTrongKy);
                                cRow[Name["GiaTriHD"]].SetValue(VT.FirstOrDefault().GiaTriHD);
                                cRow[Name["GiaTriThucNhan"]].SetValue(VT.FirstOrDefault().GiaTriThucNhan);
                                cRow[Name["NguonPhatSinh"]].SetValueFromText(Nguon.Key);
                                cRow[Name["GhiChu"]].SetValueFromText(VT.FirstOrDefault().GhiChu);
                                cRow[Name["Code"]].SetValueFromText(VT.FirstOrDefault().Code);
                            }
                        }
                        if (Tuyen.Key != null)
                        {
                            cRow = ws.Rows[RowIndex++];
                            cRow.Font.Color = MyConstant.color_Row_PhanTuyen;
                            cRow.Font.Bold = true;
                            ws.Rows.Insert(RowIndex + 1, 1, RowFormatMode.FormatAsPrevious);
                            cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(MyConstant.TYPEROW_HTPhanTuyen);
                            cRow[Name[TDKH.COL_VatTu]].SetValueFromText($"HT{Tuyen.FirstOrDefault().TenTuyen}");
                        }
                    }

                }
            }
            ws.Calculate();
            NameSheet.EndUpdate();
            NameSheet.CellValueChanged += spsheet_ThanhToanA_B_CellValueChanged;
            WaitFormHelper.CloseWaitForm();

        }
        private void Fcn_UpdateHaoPhi(SpreadsheetControl NameSheet)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhật hao phí hợp đồng");
            NameSheet.CellValueChanged -= spsheet_ThanhToanA_B_CellValueChanged;
            NameSheet.BeginUpdate();
            IWorkbook workbook = NameSheet.Document;
            Worksheet ws = workbook.Worksheets["Tổng hợp VL-NC-MTC"];
            CellRange Dot1 = ws.Range["Dot_1"];
            Dot1.ClearContents();
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
            string dbString = $"SELECT * FROM view_HaoPhiHopDong WHERE \"CodeDot\"='{cbo_AB_LanThanhToan.SelectedValue}' ";
            List<HPVTExtensionViewModel> vatTus = DataProvider.InstanceTHDA.ExecuteQueryModel<HPVTExtensionViewModel>(dbString);
            if (vatTus.Count() == 0)
                goto Label;
            var CrLoaiVatLieu = vatTus.GroupBy(x => x.LoaiVatTu);
            int RowIndex = 3;
            Row cRow = ws.Rows[RowIndex];
            int STT = 1;
            Row Copy = ws.Rows[3];
            int RowFormu = 0;
            if (Dot1.RowCount <= vatTus.Count())
                ws.Rows.Insert(Dot1.TopRowIndex + 1, vatTus.Count() * 2, RowFormatMode.FormatAsPrevious);
            foreach (var LoaiVT in CrLoaiVatLieu)
            {
                if (LoaiVT.Key is null)
                    continue;
                RowIndex++;
                cRow = ws.Rows[RowIndex++];
                cRow.Font.Color = Color.Red;
                cRow.Font.Bold = true;
                ws.Rows.Insert(RowIndex, 1, RowFormatMode.FormatAsPrevious);
                cRow[Name[TDKH.COL_VatTu]].Alignment.Horizontal = SpreadsheetHorizontalAlignment.Center;
                cRow[Name[TDKH.COL_VatTu]].Alignment.Vertical = SpreadsheetVerticalAlignment.Center;
                cRow[Name[TDKH.COL_VatTu]].SetValueFromText(LoaiVT.Key.ToUpper());
                var CrCongTrinh = LoaiVT.GroupBy(x => x.CodeCongTrinh);
                foreach (var ctrinh in CrCongTrinh)
                {
                    cRow = ws.Rows[RowIndex++];
                    cRow.Font.Color = MyConstant.color_Row_CongTrinh;
                    cRow.Font.Bold = true;
                    ws.Rows.Insert(RowIndex, 1, RowFormatMode.FormatAsPrevious);
                    cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(MyConstant.TYPEROW_CongTrinh);
                    cRow[Name[TDKH.COL_VatTu]].SetValueFromText(ctrinh.FirstOrDefault().TenCongTrinh);
                    var HangMuc = ctrinh.GroupBy(x => x.CodeHangMuc);
                    foreach (var HM in HangMuc)
                    {
                        cRow = ws.Rows[RowIndex++];
                        cRow.Font.Color = MyConstant.color_Row_HangMuc;
                        cRow.Font.Bold = true;
                        ws.Rows.Insert(RowIndex, 1, RowFormatMode.FormatAsPrevious);
                        cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(MyConstant.TYPEROW_HangMuc);
                        cRow[Name[TDKH.COL_VatTu]].SetValueFromText(HM.FirstOrDefault().TenHangMuc);
                        var VatLieu = HM.GroupBy(x => new { x.VatTu, x.MaVatLieu, x.DonGia, x.DonGiaThiCong, x.DonVi });
                        foreach (var VL in VatLieu)
                        {
                            cRow = ws.Rows[RowIndex++];
                            RowFormu = RowIndex;
                            cRow.Font.Color = Color.Black;
                            cRow.Font.Bold = false;
                            //ws.Rows.Insert(RowIndex, 1, RowFormatMode.FormatAsPrevious);
                            cRow.CopyFrom(Copy, PasteSpecial.Formulas);
                            cRow.Visible = true;
                            cRow[Name[TDKH.COL_STT]].SetValue(STT++);
                            cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(VL.Key.MaVatLieu);
                            cRow[Name[TDKH.COL_VatTu]].SetValueFromText(VL.Key.VatTu);
                            cRow[Name[TDKH.COL_DonVi]].SetValueFromText(VL.Key.DonVi);
                            cRow[Name["DonGiaHopDong"]].SetValue(VL.Key.DonGia);
                            cRow[Name["DonGiaThiCong"]].SetValue(VL.Key.DonGiaThiCong);
                            foreach (var Congtac in VL)
                            {
                                cRow = ws.Rows[RowIndex++];
                                cRow.Font.Color = Color.Blue;
                                cRow.Font.Bold = false;
                                //ws.Rows.Insert(RowIndex, 1, RowFormatMode.FormatAsPrevious);
                                cRow.CopyFrom(Copy, PasteSpecial.Formulas);
                                cRow.Visible = false;
                                cRow[Name[TDKH.COL_MaVatLieu]].SetValueFromText(Congtac.MaHieuCongTac);
                                cRow[Name[TDKH.COL_VatTu]].SetValueFromText(Congtac.TenCongTac);
                                cRow[Name["DonGiaHopDong"]].SetValue(VL.Key.DonGia);
                                cRow[Name["KhoiLuongHopDong"]].SetValue(Congtac.KhoiLuongHopDong);
                                cRow[Name["KhoiLuongThanhToan"]].SetValue(Congtac.KhoiLuongThiCong);
                                cRow[Name["NgayBatDau"]].SetValue(Congtac.NgayBatDau);
                                cRow[Name["NgayKetThuc"]].SetValue(Congtac.NgayKetThuc);
                                cRow[Name["DonGiaThiCong"]].SetValue(VL.Key.DonGiaThiCong);
                                cRow[Name[TDKH.COL_TypeRow]].SetValueFromText(MyConstant.TYPEROW_CVCON);
                            }
                            ws.Rows[RowFormu - 1][Name["KhoiLuongHopDong"]].Formula = $"=SUM({ws.Rows[RowFormu][Name["KhoiLuongHopDong"]].GetReferenceA1()}:{ws.Rows[RowFormu - 1 + VL.Count()][Name["KhoiLuongHopDong"]].GetReferenceA1()})";
                            ws.Rows[RowFormu - 1][Name["KhoiLuongThanhToan"]].Formula = $"=SUM({ws.Rows[RowFormu][Name["KhoiLuongThanhToan"]].GetReferenceA1()}:{ws.Rows[RowFormu - 1 + VL.Count()][Name["KhoiLuongThanhToan"]].GetReferenceA1()})";
                            ws.Rows[RowFormu - 1][Name["TTHD"]].Formula = $"=SUM({ws.Rows[RowFormu][Name["TTHD"]].GetReferenceA1()}:{ws.Rows[RowFormu - 1 + VL.Count()][Name["TTHD"]].GetReferenceA1()})";
                            ws.Rows[RowFormu - 1][Name["TTDN"]].Formula = $"=SUM({ws.Rows[RowFormu][Name["TTDN"]].GetReferenceA1()}:{ws.Rows[RowFormu - 1 + VL.Count()][Name["TTDN"]].GetReferenceA1()})";
                            ws.Rows[RowFormu - 1][Name["NgayBatDau"]].Formula = $"=MIN({ws.Rows[RowFormu][Name["NgayBatDau"]].GetReferenceA1()}:{ws.Rows[RowFormu - 1 + VL.Count()][Name["NgayBatDau"]].GetReferenceA1()})";
                            ws.Rows[RowFormu - 1][Name["NgayKetThuc"]].Formula = $"=MAX({ws.Rows[RowFormu][Name["NgayKetThuc"]].GetReferenceA1()}:{ws.Rows[RowFormu - 1 + VL.Count()][Name["NgayKetThuc"]].GetReferenceA1()})";
                        }
                    }
                }
            }
            Label:
            NameSheet.EndUpdate();
            NameSheet.CellValueChanged += spsheet_ThanhToanA_B_CellValueChanged;
            WaitFormHelper.CloseWaitForm();
        }
        private void sb_CapNhapDonGia_Click(object sender, EventArgs e)
        {
            if (cbo_MeNuTenHopDong.DataSource == null)
            {
                MessageShower.ShowError("Vui lòng chọn tên hợp đồng muốn cập nhập!");
                return;
            }
            WaitFormHelper.ShowWaitForm("Đang cập nhật đơn giá hợp đồng");
            SpreadsheetControl NameSheet = Fcn_Spreadsheet();
            string dbString = "";
            if (NameSheet == spsheet_ThanhToan_NhaCungCap)
            {
                dbString = $"SELECT  {MyConstant.TBL_HopDong_PhuLuc}.Code," +
   $"{MyConstant.TBL_HopDong_PhuLuc}.IsDonGiaKeHoach,{MyConstant.TBL_HopDong_PhuLuc}.DonGia as DonGiaHopDong,{MyConstant.TBL_hopdongNCC_TT}.Code as CodeNCC," +
   $"{MyConstant.TBL_HopDong_PhuLuc}.CodeKHVT,{TDKH.TBL_KHVT_VatTu}.DonGia,{TDKH.TBL_KHVT_VatTu}.DonGiaThiCong " +
   $"FROM {MyConstant.TBL_HopDong_PhuLuc} " +
   $"INNER JOIN {MyConstant.TBL_hopdongNCC_TT} " +
   $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_hopdongNCC_TT}.CodePhuLuc " +
   $"INNER JOIN {TDKH.TBL_KHVT_VatTu} " +
   $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodeKHVT = {TDKH.TBL_KHVT_VatTu}.Code " +
   $" WHERE {MyConstant.TBL_hopdongNCC_TT}.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' ";
                DataTable dt_CT_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                NameSheet.BeginUpdate();
                IWorkbook workbook = NameSheet.Document;
                Worksheet worksheet = workbook.Worksheets["Thanh toán nhà cung cấp"];
                CellRange Dot1 = worksheet.Range["Dot_1"];
                Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
                DataTable dtKLHN = new DataTable();
                double KLTC = 0;
                List<KLHN> Lst = new List<KLHN>();
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                string CodeCon = "";
                double TyLe = 100;
                double KLHDNhom = 0, KLHDCon = 0;
                double KLVC = 0;
                for (int i = Dot1.TopRowIndex; i <= Dot1.BottomRowIndex; i++)
                {
                    Row Crow = worksheet.Rows[i];
                    string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    if (MaHieu == "HTDot")
                        break;
                    if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.CONST_TYPE_PhanTuyen)
                        continue;
                    string DonVi = Crow[Name[TDKH.COL_DonVi]].Value.ToString();
                    string CodeCongTacTheoGiaiDoan = Crow[Name["CodeCongTacTheoGiaiDoan"]].Value.ToString();
                    string Code = Crow[Name["Code"]].Value.ToString();
                    if (Code == "")
                        continue;
                    string TenCongTac = Crow[Name[TDKH.COL_DanhMucCongTac]].Value.ToString();
                    WaitFormHelper.ShowWaitForm($"Dòng {i}:{MaHieu}_{TenCongTac}");
                    DataRow row = dt_CT_DB.AsEnumerable().Where(x => x["CodeNCC"].ToString() == Code).ToArray().FirstOrDefault();
                    if (bool.Parse(row["IsDonGiaKeHoach"].ToString()))
                    {
                        if (row["DonGia"] == row["DonGiaHopDong"])
                            continue;
                        Crow[Name["DonGiaTheoHopDong"]].SetValue(row["DonGia"]);
                        dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"DonGia\" = '{row["DonGia"]}' WHERE \"Code\" = '{row["Code"]}'";
                    }
                    else
                    {
                        if (row["DonGiaThiCong"] == row["DonGiaHopDong"])
                            continue;
                        Crow[Name["DonGiaTheoHopDong"]].SetValue(row["DonGiaThiCong"]);
                        dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"DonGia\" = '{row["DonGiaThiCong"]}' WHERE \"Code\" = '{row["Code"]}'";
                    }

                }
                NameSheet.EndUpdate();
            }
            else
            {
                DialogResult drs = MessageShower.ShowYesNoCancelQuestionWithCustomText("Lựa chọn Đơn giá cập nhập", "", yesString: "Đơn giá Giao Thầu", Nostring: "Đơn giá Nhận thầu");
                string DonGiaUpdate = drs == DialogResult.Yes ? "DonGia" : "DonGiaThiCong";
                dbString = $"SELECT  {MyConstant.TBL_HopDong_PhuLuc}.Code,{MyConstant.TBL_hopdongAB_HT}.Code AS CodeHT," +
    $"{MyConstant.TBL_HopDong_PhuLuc}.IsDonGiaKeHoach,{MyConstant.TBL_HopDong_PhuLuc}.DonGia as DonGiaHopDong," +
    $"{MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan,{TDKH.TBL_ChiTietCongTacTheoKy}.DonGia,{TDKH.TBL_ChiTietCongTacTheoKy}.DonGiaThiCong " +
    $"FROM {MyConstant.TBL_HopDong_PhuLuc} " +
                   $"INNER JOIN {MyConstant.TBL_hopdongAB_HT} " +
                   $"ON {MyConstant.TBL_hopdongAB_HT}.CodeDB = {MyConstant.TBL_HopDong_DoBoc}.Code " +
                   $"INNER JOIN {MyConstant.TBL_HopDong_DoBoc} " +
                   $"ON {MyConstant.TBL_HopDong_PhuLuc}.Code = {MyConstant.TBL_HopDong_DoBoc}.CodePL " +
                   $"INNER JOIN {MyConstant.TBL_ThongtinphulucHD} " +
                   $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodePl = {MyConstant.TBL_ThongtinphulucHD}.Code " +
                   $"INNER JOIN {MyConstant.TBL_tonghopdanhsachhopdong} " +
                   $"ON {MyConstant.TBL_ThongtinphulucHD}.CodeHd = {MyConstant.TBL_tonghopdanhsachhopdong}.Code " +
                   $"INNER JOIN {TDKH.TBL_ChiTietCongTacTheoKy} " +
                   $"ON {MyConstant.TBL_HopDong_PhuLuc}.CodeCongTacTheoGiaiDoan = {TDKH.TBL_ChiTietCongTacTheoKy}.Code " +
                   $" WHERE {MyConstant.TBL_HopDong_DoBoc}.CodeDot='{cbo_AB_LanThanhToan.SelectedValue}' AND {MyConstant.TBL_tonghopdanhsachhopdong}.CodeHopDong='{cbo_MeNuTenHopDong.SelectedValue}' " +
                   $"AND {TDKH.TBL_ChiTietCongTacTheoKy}.CodeGiaiDoan='{cbb_DBKH_ChonDot.SelectedValue}'";
                DataTable dt_CT_DB = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                NameSheet.BeginUpdate();
                IWorkbook workbook = NameSheet.Document;
                Worksheet worksheet = workbook.Worksheets["Thanh toán KL hoàn thành"];
                CellRange Dot1 = worksheet.Range["Dot_1"];
                Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(Dot1);
                CellRange Cell = worksheet.Range["Dot_1"];
                for (int i = Cell.TopRowIndex; i <= Cell.BottomRowIndex; i++)
                {
                    Row Crow = worksheet.Rows[i];
                    string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    if (MaHieu == "HTDot")
                        break;
                    string CodeDB = Crow[Name["CodeDB"]].Value.ToString();
                    if (CodeDB == "")
                        continue;
                    string Code = Crow[Name["Code"]].Value.ToString();
                    string CodeCongTacTheoGiaiDoan = Crow[Name["CodeCongTacTheoGiaiDoan"]].Value.ToString();
                    if (MaHieu == "*")
                    {
                        dbString = $"SELECT  {MyConstant.TBL_HopDong_PhuLuc}.Code, " +
                            $"{MyConstant.TBL_HopDong_PhuLuc}.IsDonGiaKeHoach,{MyConstant.TBL_HopDong_PhuLuc}.DonGia as DonGiaHopDong," +
                            $"{TDKH.TBL_NhomCongTac}.DonGia," +
                            $"{TDKH.TBL_NhomCongTac}.DonGiaThiCong " +
                            $"FROM {MyConstant.TBL_HopDong_PhuLuc} " +
                            $"LEFT JOIN {TDKH.TBL_NhomCongTac} ON {TDKH.TBL_NhomCongTac}.Code={MyConstant.TBL_HopDong_PhuLuc}.CodeNhom " +
                            $"WHERE {TDKH.TBL_NhomCongTac}.Code='{CodeCongTacTheoGiaiDoan}'";
                        DataTable Nhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        DataRow CrowNhom = Nhom.AsEnumerable().FirstOrDefault();
                        if (bool.Parse(CrowNhom["IsDonGiaKeHoach"].ToString()))
                        {
                            if (CrowNhom["DonGia"] == CrowNhom["DonGiaHopDong"])
                                continue;
                            Crow[Name["DonGiaTheoHopDong"]].SetValue(CrowNhom["DonGia"]);
                            dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"DonGia\" = '{CrowNhom["DonGia"]}' WHERE \"Code\" = '{CrowNhom["Code"]}'";
                        }
                        else
                        {
                            if (CrowNhom["DonGiaThiCong"] == CrowNhom["DonGiaHopDong"])
                                continue;
                            Crow[Name["DonGiaTheoHopDong"]].SetValue(CrowNhom["DonGiaThiCong"]);
                            dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"DonGia\" = '{CrowNhom["DonGiaThiCong"]}' WHERE \"Code\" = '{CrowNhom["Code"]}'";
                        }
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        continue;
                    }
                    DataRow row = dt_CT_DB.AsEnumerable().Where(x => x["CodeHT"].ToString() == Code).ToArray().FirstOrDefault();
                    dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"DonGia\" = '{row[DonGiaUpdate]}' WHERE \"Code\" = '{row["Code"]}'";
                    //if (bool.Parse(row["IsDonGiaKeHoach"].ToString()))
                    //{
                    //    if (row["DonGia"] == row["DonGiaHopDong"])
                    //        continue;
                    //    //Crow[Name["DonGiaTheoHopDong"]].SetValue(row["DonGia"]);
                    //    dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"DonGia\" = '{row["DonGia"]}' WHERE \"Code\" = '{row["Code"]}'";
                    //}
                    //else
                    //{
                    //    if (row["DonGiaThiCong"] == row["DonGiaHopDong"])
                    //        continue;
                    //    //Crow[Name["DonGiaTheoHopDong"]].SetValue(row["DonGiaThiCong"]);
                    //    dbString = $"UPDATE {MyConstant.TBL_HopDong_PhuLuc} SET \"DonGia\" = '{row["DonGiaThiCong"]}' WHERE \"Code\" = '{row["Code"]}'";
                    //}
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }

                NameSheet.EndUpdate();
                fcn_ThanhToanPS(NameSheet, false, false);
            }
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công!");
        }

        private void sb_DocQLVC_Click(object sender, EventArgs e)
        {
            //FormKeHoachVatTu KHVT = new FormKeHoachVatTu(slke_ThongTinDuAn.EditValue.ToString(), cbb_DBKH_ChonDot.SelectedValue.ToString());
            //KHVT._TruyenDataTuExcel = new FormKeHoachVatTu.DE_TruyenDataDocFileExcel(fcn_UpdateQLVT_KHVT);
            //KHVT.ShowDialog();
            var DA = slke_ThongTinDuAn.GetSelectedDataRow() as Tbl_ThongTinDuAnViewModel;
            if (DA is null)
            {
                MessageShower.ShowWarning("Vui lòng chọn dự án hoặc tạo dự án mới để đọc excel vào!");
                return;
            }
            openFileDialog.DefaultExt = "xls";
            openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
            openFileDialog.Title = "Chọn file Excel";
            DialogResult rs = openFileDialog.ShowDialog();
            if (rs == DialogResult.OK)
            {
                Form_ImportExcel_KHVT Import = new Form_ImportExcel_KHVT();
                Import.filePath = openFileDialog.FileName;
                Import._TruyenDataTuExcel = new Form_ImportExcel_KHVT.DE_TruyenDataDocFileExcel(fcn_UpdateQLVT_KHVT);
                Import.ShowDialog();
            }
        }

        private void càiĐặtDựÁnFileMềmOFFLINEToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Xtraform_ThongTinDuAnOffline form = new Xtraform_ThongTinDuAnOffline();
            form.ShowDialog();
            TongHopHelper.fcn_updateCbbThongTinDuAnCongTrinh();
        }

        private void ce_LocTheoNgay_CheckedChanged(object sender, EventArgs e)
        {
            var ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;

            lcg_Loc.Enabled = lc_LocTheoNgay.Visible = ce_LocTheoNgay.Checked;
            if (ws.Name == TDKH.SheetName_KeHoachKinhPhi)
            {

                if (ce_LocTheoNgay.Checked)
                {
                    TDKHHelper.LoadGiaiDoanKinhPhiTienDo();
                }
                else
                {
                    TDKHHelper.LoadCongKinhPhiTienDo();
                }
            }
            else if (ws.Name == TDKH.SheetName_TongHopHaoPhi)
            {
                if (ce_LocTheoNgay.Checked)
                {
                    TDKHHelper.LoadGiaiDoanVatTu();
                }
                else
                {
                    TDKHHelper.LoadTongHopVatTuKeHoachBrief();
                }
            }
        }



        private void bt_LocLai_Click(object sender, EventArgs e)
        {
            var ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            TDKHHelper.GetCodeCongTrinhHangMuc(out string codeHM, out string codeCT);
            var lsSheetVatTu = new string[]
            {
                TDKH.SheetName_VatLieu,
                TDKH.SheetName_NhanCong,
                TDKH.SheetName_MayThiCong,
                TDKH.SheetName_TongHopHaoPhi

            };

            if (lsSheetVatTu.Contains(ws.Name))
            {
                TDKHHelper.LoadGiaiDoanVatTu();
            }
            else if (ws.Name == TDKH.SheetName_KeHoachKinhPhi)
            {
                TDKHHelper.LoadGiaiDoanKinhPhiTienDo();
            }


            var range = ws.Range[TDKH.RANGE_KeHoach];
            //var dic = TDKH.dic_TongHopKinhPhiTDKH;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            ws.Workbook.BeginUpdate();


            for (int i = range.TopRowIndex + 1; i <= range.BottomRowIndex; i++)
            {
                var crRow = ws.Rows[i];
                var dateBD = crRow[dic[TDKH.COL_NgayBatDau]].Value.DateTimeValue;
                var dateKT = crRow[dic[TDKH.COL_NgayKetThuc]].Value.DateTimeValue;

                var dateBDTC = crRow[dic[TDKH.COL_NgayBatDauThiCong]].Value.DateTimeValue;
                var dateKTTC = crRow[dic[TDKH.COL_NgayKetThucThiCong]].Value.DateTimeValue;

                var typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();


                //if (typeRow == MyConstant.TYPEROW_CVCha && !MSETTING.Default.CongTacInNhomVisible)
                //{
                //    crRow.Visible = false;

                //}
                //else
                //{
                ce_NgoaiKeHoach_CheckedChanged(null, null);
                //if ((dateKT < de_Loc_TuNgay.DateTime || dateBD > de_Loc_DenNgay.DateTime)
                //                    && (dateKTTC < de_Loc_TuNgay.DateTime || dateBDTC > de_Loc_DenNgay.DateTime))
                //{
                //    if (!ce_NgoaiKeHoach.Checked)
                //        crRow.Visible = false;
                //    else
                //    {

                //        crRow.Visible = true;
                //    }
                //}
                //else
                //{
                //    crRow[TDKH.COL_Chon].SetValue(true);
                //    crRow.Visible = true;
                //}
                //}
            }

            ws.Workbook.EndUpdate();

            try
            {
                ////          wb.History.IsEnabled = true;

            }
            catch (Exception) { }

        }



        private void LoadTongHopVatTuKeHoach(string codeCT, string codeHM)
        {
            if (!ce_LocTheoNgay.Checked)
            {
                TDKHHelper.LoadFullTongHopVatTu(codeCT, codeHM);
                lb_HienTai.Text = "Không lọc";
            }
            else
            {
                if (de_Loc_TuNgay.EditValue is null || de_Loc_DenNgay.EditValue is null)
                {
                    MessageShower.ShowWarning("Vui lòng nhập đầy đủ ngày bắt đầu và kết thúc");
                    return;
                }
                TDKHHelper.LoadFullTongHopVatTu(codeCT, codeHM, de_Loc_TuNgay.EditValue as DateTime?, de_Loc_DenNgay.DateTime as DateTime?);

                lb_HienTai.Text = $"Từ ngày {de_Loc_TuNgay.DateTime.ToShortDateString()} đến ngày {de_Loc_DenNgay.DateTime.ToShortDateString()}";
            }
        }

        private void bt_XuatBaoCaoTongHopVatTu_Click(object sender, EventArgs e)
        {
            saveFileDialog.Filter = "Execl files (*.xlsx)|*.xlsx";
            saveFileDialog.FileName = $"Báo cáo chi tiết hao phí - {DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss")}.xlsx";
            saveFileDialog.FilterIndex = 0;
            saveFileDialog.RestoreDirectory = true;
            saveFileDialog.CreatePrompt = true;
            saveFileDialog.Title = "Xuất chi tiết hao phí";
            var crDVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;

            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                Workbook wb = new Workbook();
                var ws = wb.Worksheets[0];
                ws.Name = $"{crDVTH.Ten.Substring(0, Math.Min(30, crDVTH.Ten.Length))}";

                ws.CopyFrom(spsheet_TD_KH_LapKeHoach.ActiveWorksheet);
                Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

                var range = ws.GetUsedRange();
                //for (int i = range.RightColumnIndex; i >= 0; i--)
                //{
                //    if (!ws.Columns[i].Visible)
                //        ws.Columns.Remove(i);
                //}
                if (dic.ContainsKey(TDKH.COL_KHVT_Search))
                    ws.Columns.Remove(dic[TDKH.COL_KHVT_Search]);
                ws.Columns.Remove(dic[TDKH.COL_Code]);

                wb.SaveDocument(saveFileDialog.FileName, DocumentFormat.Xlsx);
                wb.Dispose();
                DialogResult dialogResult = MessageShower.ShowYesNoQuestion("File lưu thành công. Bạn có muốn mở file luôn hay không ???", "Thông báo");
                if (dialogResult == DialogResult.Yes)
                {
                    System.Diagnostics.Process.Start(saveFileDialog.FileName);
                }
            }
        }
        private void bt_XuatBaoCaoChiPhi_Click(object sender, EventArgs e)
        {
            FormMainHelper.XuatBaoCaoChiPhi_Click();
        }
        private void fcn_Handle_Popup_QLVT_LuuDinhMucNguoiDung_KHVT(object sender, EventArgs e)
        {
            Worksheet ws = spsheet_KeHachVatTu.Document.Worksheets.ActiveWorksheet;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETDICWS]);
            CellRange Range = ws.SelectedCell;
            string MaHieu = ws.Rows[Range.TopRowIndex][Name[MyConstant.COL_KHVT_MaVatTu]].Value.ToString();
            string Code = ws.Rows[Range.TopRowIndex][Name[MyConstant.COL_KHVT_CodeCT]].Value.ToString();
            if (MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_CONGTRINH || Code == "")
                return;
            string Ten = ws.Rows[Range.TopRowIndex][Name[MyConstant.COL_KHVT_TenVatTu]].Value.ToString();
            string Donvi = ws.Rows[Range.TopRowIndex][Name[MyConstant.COL_KHVT_DonVi]].Value.ToString();
            MaHieu = MaHieu == "" ? "TT" : $"{MaHieu}_TT";
            ws.Rows[Range.TopRowIndex][Name[MyConstant.COL_KHVT_MaVatTu]].SetValueFromText(MaHieu);
            ws.Rows[Range.TopRowIndex].Font.Color = Color.Red;
            string dbString = $"INSERT INTO {MyConstant.TBL_TBT_VATTU} (\"Id\",\"MaVatLieu\", \"VatTu\", \"VatTu_KhongDau\", \"DonVi\", \"LoaiVatTu\") VALUES " +
                                $"('{Guid.NewGuid()}', @MaVatLieu, @VatTu, @TenKhongDau, @DonVi, 'Vật liệu')";
            DataProvider.InstanceTBT.ExecuteNonQuery(dbString, parameter: new object[] { MaHieu, Ten, MyFunction.fcn_RemoveAccents(Ten), Donvi });

            dbString = $"UPDATE  {QLVT.TBL_QLVT_KHVT} SET \"MaVatLieu\" = @MaVatLieu WHERE \"Code\"='{Code}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { MaHieu });

        }
        private void spsheet_KeHachVatTu_PopupMenuShowing(object sender, DevExpress.XtraSpreadsheet.PopupMenuShowingEventArgs e)
        {
            Worksheet ws = spsheet_KeHachVatTu.Document.Worksheets.ActiveWorksheet;
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range[MyConstant.TBL_QUYETDICWS]);
            SpreadsheetMenuItem myItem2 = new SpreadsheetMenuItem("Lưu công tác người dùng", new EventHandler(fcn_Handle_Popup_QLVT_LuuDinhMucNguoiDung_KHVT));
            e.Menu.Items.Add(myItem2);
        }

        private void rIHP_FileDinhKemYeuCau_Click(object sender, EventArgs e)
        {
            VatLieu VL = tL_YeuCauVatTu.GetFocusedRow() as VatLieu;
            if (VL.ParentID == "0" || VL == null)
                return;
            FormLuaChon luachon = new FormLuaChon(VL.ID, FileManageTypeEnum.QLVC_YeuCauVatTu, $"{VL.TenVatTu}_Đề xuất");
            luachon.ShowDialog();
        }

        private void gc_Tiendo_CustomDrawTimescaleColumn(object sender, CustomDrawTimescaleColumnEventArgs e)
        {
            GanttTimescaleColumn column = e.Column;
            if (column.StartDate <= DateTime.Now && column.FinishDate >= DateTime.Now)
            {
                e.DrawBackground();
                float x = (float)e.GetPosition(DateTime.Now);
                float width = 4;
                RectangleF deadLineRect = new RectangleF(x, column.Bounds.Y, width, column.Bounds.Height);
                e.Cache.FillRectangle(DXSkinColors.FillColors.Danger, deadLineRect);
                e.DrawHeader();
                e.Handled = true;
            }

        }

        private void rIHP_FileDinhKem_NhapVL_Click(object sender, EventArgs e)
        {
            NhapVatLieu VL = tL_NhapKho.GetFocusedRow() as NhapVatLieu;
            if (VL.ParentID == "0" || VL == null)
                return;
            FormLuaChon luachon = new FormLuaChon(VL.ID, FileManageTypeEnum.QLVC_NhapKho, $"{VL.TenVatTu}_Nhập kho");
            luachon.ShowDialog();
        }

        private void rIHP_FileDinhKem_XuatKho_Click(object sender, EventArgs e)
        {
            XuatVatLieu VL = tL_XuatKho.GetFocusedRow() as XuatVatLieu;
            if (VL.ParentID == "0" || VL == null)
                return;
            FormLuaChon luachon = new FormLuaChon(VL.ID, FileManageTypeEnum.QLVC_XuatKho, $"{VL.TenVatTu}_Xuất kho");
            luachon.ShowDialog();
        }

        private void rIHP_FileDinhKem_QLVC_Click(object sender, EventArgs e)
        {
            QLVC VL = tL_QLVC.GetFocusedRow() as QLVC;
            if (VL.ParentID == "0" || VL == null)
                return;
            FormLuaChon luachon = new FormLuaChon(VL.ID, FileManageTypeEnum.QLVC_QuanLyVanChuyen, $"{VL.TenVatTu}_Quản lý vận chuyển");
            luachon.ShowDialog();
        }

        private void navigationPane1_SelectedPageChanged(object sender, SelectedPageChangedEventArgs e)
        {
            //if (navigationPane1.SelectedPage == np_BieuDoTaiChinh)
            //{
            //    WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu");
            //    DataTable dtCT, dtHM, dtCongTacTheoKy = null;
            //    List<KLHN> dtHangNgay = new List<KLHN>();
            //    bool isCongTac = cbo_LoaiTienDo.SelectedIndex==0;
            //    string loaiVatTu = (isCongTac) ? null :cbo_HienThiTienDo.Text;
            //    DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            //    DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            //    if (DVTH.Table == MyConstant.TBL_THONGTINNHATHAU)
            //    {
            //        DinhMucHelper.fcn_CTacTheoKyNew(loaiVatTu, out DataTable dtCongTacTheoKy_New, out List<KLHN> dtHangNgay_New, true);
            //        dtHangNgay = dtHangNgay_New;
            //    }
            //    else
            //    {
            //        DinhMucHelper.fcn_CTacTheoKyNew(loaiVatTu, out DataTable dtCongTacTheoKy_New, out List<KLHN> dtHangNgay_New, false);
            //        dtHangNgay = dtHangNgay_New;
            //    }
            //    #region Vẽ biểu đồ tài chính
            //    ctrl_ChartKhoiLuongThanhTien.PushData(dtHangNgay,DVTH.IsGiaoThau);
            //    #endregion
            //    WaitFormHelper.CloseWaitForm();
            //}
            //else if (navigationPane1.SelectedPage == np_NhanCong)
            //    LoadBieuDoNhanCong();
        }

        private void btn_CaiDatNgayNghi_Click(object sender, EventArgs e)
        {
            DataTable dtCongTacTheoKy;
            TDKHHelper.fcn_TDKH_CTacTheoKy(out dtCongTacTheoKy);
            Form_TDKH_CaiDatNgayNghi form = new Form_TDKH_CaiDatNgayNghi(dtCongTacTheoKy);
            form.ShowDialog();
            WaitFormHelper.ShowWaitForm("Đang cập nhập lại dữ liệu");
            fcn_UpdateNgayNghi();
            WaitFormHelper.CloseWaitForm();
        }

        private void sb_XuatFile_Click(object sender, EventArgs e)
        {
            XtraMessageBoxArgs args = new XtraMessageBoxArgs();
            args.Caption = "Lựa chọn loại File muốn xuất";
            args.Buttons = new DialogResult[] { DialogResult.OK, DialogResult.Yes, DialogResult.Cancel };
            args.Showing += Args_Showing_XuatFile;
            DevExpress.XtraEditors.XtraMessageBox.Show(args);
        }
        private void Args_Showing_XuatFile(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Appearance.FontStyleDelta = FontStyle.Bold;
            e.Form.Appearance.FontSizeDelta = 2;
            foreach (var control in e.Form.Controls)
            {
                SimpleButton button = control as SimpleButton;
                if (button != null)
                {
                    button.ImageOptions.SvgImageSize = new Size(16, 16);
                    // button.Height = 25;
                    switch (button.DialogResult.ToString())
                    {
                        case ("OK"):
                            button.ImageOptions.SvgImage = svgImageCollection1[8];
                            button.Text = "File PDF";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                PreviewPrintableComponent(gc_Tiendo, gc_Tiendo.LookAndFeel);
                            };
                            break;
                        case ("Yes"):
                            button.ImageOptions.SvgImage = svgImageCollection1[7];
                            button.Text = "File Excel";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                if (cbo_HienThiTienDo.SelectedIndex == 0 && cbo_LoaiTienDo.SelectedIndex == 0)
                                    Fcn_ExportToExcelTienDo();
                                else
                                {
                                    MessageShower.ShowError("Vui lòng chọn chế độ Công tác và Kế hoạch để Xuât File");
                                    return;
                                }
                            };
                            break;
                        default:
                            button.ImageOptions.SvgImage = svgImageCollection1[5];
                            button.Text = "Thoát";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) => { e.Form.Close(); };
                            break;
                    }
                }
            }
        }
        private void PreviewPrintableComponent(IPrintable component, UserLookAndFeel lookAndFeel)
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
            PrintableComponentLink link = new PrintableComponentLink()
            {
                PrintingSystemBase = new PrintingSystemBase(),
                Component = component,
                Landscape = true,
                PaperKind = PaperKind.A3,
                Margins = new System.Drawing.Printing.Margins(20, 20, 20, 20),
            };
            link.CreateReportHeaderArea += link_CreateReportHeaderArea;
            link.PrintingSystemBase.Document.AutoFitToPagesWidth = 1;
            WaitFormHelper.CloseWaitForm();
            link.ShowRibbonPreview(lookAndFeel);
        }
        private void link_CreateReportHeaderArea(object sender, CreateAreaEventArgs e)
        {
            string Db_String = $"SELECT * FROM {MyConstant.TBL_THONGTINDUAN} WHERE \"Code\"='{slke_ThongTinDuAn.EditValue}'";

            List<Tbl_ThongTinDuAnViewModel> lst = DataProvider.InstanceTHDA.ExecuteQueryModel<Tbl_ThongTinDuAnViewModel>(Db_String);

            if (lst.Count() == 0)
                return;
            string reportHeader = $"Dự án: {slke_ThongTinDuAn.Text} {Environment.NewLine}Địa chỉ: {lst.FirstOrDefault().DiaChi}";
            e.Graph.StringFormat = new BrickStringFormat(StringAlignment.Near);
            e.Graph.Font = new Font("Times New Roman", 14, FontStyle.Bold);
            RectangleF rec = new RectangleF(0, 0, e.Graph.ClientPageSize.Width, 50);
            e.Graph.DrawString(reportHeader, Color.Black, rec, BorderSide.None);

            reportHeader = $"Thời gian: Từ {De_BeginTienDo.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET)} đến {De_EndTienDO.DateTime.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET)} ";
            e.Graph.StringFormat = new BrickStringFormat(StringAlignment.Far);
            e.Graph.Font = new Font("Times New Roman", 14, FontStyle.Regular);
            RectangleF recnew = new RectangleF(0, 55, e.Graph.ClientPageSize.Width, 50);
            e.Graph.DrawString(reportHeader.ToUpper(), Color.Black, recnew, BorderSide.None);

        }

        private void sb_CapNhap_Click(object sender, EventArgs e)
        {
            if (ctrl_DonViThucHienDuAnTienDo.Enabled)
            {
                DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn cập nhập so sánh theo ngày Cài đặt???????");
                if (rs == DialogResult.Yes)
                {
                    fcn_TDKH_loadTienDo(De_BeginTienDo.DateTime, De_EndTienDO.DateTime, false);
                }
                else
                    fcn_TDKH_loadTienDo();
            }
            else
                fcn_TDKH_loadTienDo(De_BeginTienDo.DateTime, De_EndTienDO.DateTime, false);
            if (navigationPane1.SelectedPage == np_BieuDoTaiChinh)
            {
                WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu tài chính");
                DataTable dtCT, dtHM, dtCongTacTheoKy = null;
                List<KLHN> dtHangNgay = new List<KLHN>();
                bool isCongTac = cbo_LoaiTienDo.SelectedIndex == 0;
                string loaiVatTu = (isCongTac) ? null : cbo_HienThiTienDo.Text;
                DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                if (DVTH.Table == MyConstant.TBL_THONGTINNHATHAU)
                {
                    DinhMucHelper.fcn_CTacTheoKyNew(loaiVatTu, out DataTable dtCongTacTheoKy_New, out List<KLHN> dtHangNgay_New, true);
                    dtHangNgay = dtHangNgay_New;
                }
                else
                {
                    DinhMucHelper.fcn_CTacTheoKyNew(loaiVatTu, out DataTable dtCongTacTheoKy_New, out List<KLHN> dtHangNgay_New, false);
                    dtHangNgay = dtHangNgay_New;
                }
                #region Vẽ biểu đồ tài chính
                ctrl_ChartKhoiLuongThanhTien.PushData(dtHangNgay, DVTH.IsGiaoThau);
                #endregion
                WaitFormHelper.CloseWaitForm();
            }
            else if (navigationPane1.SelectedPage == np_NhanCong)
            {
                WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu nhân công");
                LoadBieuDoNhanCong();
                WaitFormHelper.CloseWaitForm();
            }
        }

        private void giớiThiệuGiaoDiệnPhầnMềmQuảnLýThiCôngXâyDựng360ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/0xmfQIA4e_k");
        }

        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/5DwbwPNKXfI");

        }

        private void mởDựÁnCũĐãTồnTạiHoặcTừNgườiKhácGửiFilePhầnMềmToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/TZ_gD3JvECg");

        }

        private void cậpNhậtChiaSẻDựÁnOnlineVớiTàiKhoảnĐượcNhậnDựÁnQuaTàiKhoảnPhụToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/evbSWXuzSw0");

        }

        private void đọcFileTạoPhụLụcThầuChínhTừFileExcelDựThầuHoặcBOQNgoàiVàoPhầnMềmToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/krm1f0QTPZ8");

        }

        private void lậpKếHoạchVàTiếnĐộThầuChínhToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/sJnRXhehqNQ");

        }

        private void tạoVàCàiĐặtHợpĐồngHĐNhậnChoThầuChínhToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/kBWidaEpUBQ");

        }

        private void tạoThôngTinNhậnThầuThầuPhụTổĐộiToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/MbBoheZkpdw");

        }

        private void chiếtTínhLạiGiáThầuPhụXâyDựngLạiGiáThầuPhụTừChiTiếtHaoPhíCủaThầuChínhPhùHợpNhấtToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/f-luj2Kal0c");

        }

        private void điềuChỉnhGiáGiaoThầuVàKiểmTraLạiGiáVậtLiệuToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/qytoIqfk8Os");

        }

        private void lậpKếHoạchChiTiếtTựĐộngTạiBảngGiaoViệcToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/4xyNewTeycI");

        }

        private void thựcHiệnDựÁnVàXétDuyệtCôngTácThiCôngToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/bhP_o0EuPs4");

        }

        private void báoCáoKhốiLượngHàngNgàyTạiGiaoViệcVàTạiKếHoạchTiếnĐộToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/wTZ6pADfOow");

        }

        private void thựcHiệnĐềXuấtKhốiLượngVàĐềXuấtVậtTưToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/4g-UKe8eR-w");

        }

        private void nhậpVàXuấtKhoVậtLiệuToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/JGchgXcIYKs");

        }

        private void làmViệcVớiBảngQuảnLýVậnChuyểnToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/n2hpUQEos4A");

        }

        private void hướngDẫnBảngThanhToán3a3cVàNhàCungCấpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/_wkDgxwY4CY");

        }

        private void làmViệcVớiBảngKiểmSoátChungToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/IPrJh5zKPW0");

        }

        private void làmViệcVớiBảngBáoCáoLợiNhuậnToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/vC3nHkDpkZ0");

        }

        private void làmViệcVớiBảngBáoCáoGiảiNgânHợpĐồngToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/vC3nHkDpkZ0");

        }

        private void làmViệcVớiBảngKiểmSoátTiếnĐộToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/6TNp-DvOABo");

        }

        private void hướngDẫnXuấtBáoCáoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/IMUP1gJ_jIo");

        }

        private void TamUngThuChi_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/PSZyKj8YjX8a");
        }

        private void bảnInHướngDẫnSửDụngToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                var saveFileDialog = SharedControls.saveFileDialog;

                saveFileDialog.DefaultExt = "pdf";
                saveFileDialog.Filter = "pdf (*.pdf)|*.pdf";
                saveFileDialog.AddExtension = false;
                //Directory.Move("Hướng dẫn sử dụng phần mềm Quản Lý Thi Công Xây Dựng 360 bản 2023.pdf", saveFileDialog.FileName);
                //saveFileDialog.namer
                saveFileDialog.FileName = $@"Hướng dẫn sử dụng phần mềm Quản Lý Thi Công Xây Dựng 360 bản 2023.pdf";
                //saveFileDialog.fileKC
                if (saveFileDialog.ShowDialog() != DialogResult.Cancel)
                {
                    if (File.Exists(saveFileDialog.FileName))
                        File.Delete(saveFileDialog.FileName);
                    File.Copy($@"{BaseFrom.m_templatePath}\Hướng dẫn sử dụng phần mềm Quản Lý Thi Công Xây Dựng 360 bản 2023.pdf", saveFileDialog.FileName);
                    Process.Start("explorer.exe", saveFileDialog.FileName);
                }
            }
            catch (Exception ex)
            {
                MessageShower.ShowError("Lỗi tải File mẫu");
            }

            //m_crFileDA = saveFileDialog.FileName;
            //filename = Path.GetFileNameWithoutExtension(m_crFileDA);
            //BaseFrom.m_crTempDATH = filename;
            //DataProvider.InstanceTHDA.changePath($@"{BaseFrom.m_tempPath}\{filename}\{MyConstant.CONST_DbFromPathDA}");
        }

        private void cbo_LoaiTienDo_SelectedIndexChanged(object sender, EventArgs e)
        {
            fcn_TDKH_loadTienDo();
        }

        private void cbo_HienThiTienDo_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbo_HienThiTienDo.Text.Contains("So sánh"))
            {
                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;
                if (!DVTH.IsGiaoThau)
                {
                    MessageShower.ShowWarning("Bạn đang ở Đơn vị nhận thầu, để xem được chế độ so sánh Vui lòng chọn lại Đon vị Giao thầu!!!!!!");
                    cbo_HienThiTienDo.Text = "Tất cả";
                    goto Label;
                }
                //List<DonViThucHien> DVTH = DuAnHelper.GetDonViThucHiens();
                //if (DVTH is null)
                //{
                //    return;
                //}
                //DVTH.Remove(DVTH.Where(x => x.IsGiaoThau == true).FirstOrDefault());
                //ctrl_DonViThucHienDuAnTienDo.DataSource = DVTH;
                ctrl_DonViThucHienDuAnTienDo.Fcn_Setting();
                ctrl_DonViThucHienDuAnTienDo.Enabled = true;
            }
            else
            {
                ctrl_DonViThucHienDuAnTienDo.Enabled = false;
            }
            Label:
            fcn_TDKH_loadTienDo();
        }
        private void Fcn_LoadChiTiet(bool ChiTiet = true, IEnumerable<string> LoaiVatTu = null)
        {
            WaitFormHelper.ShowWaitForm("Đang phân tích chi tiết");
            gc_Tiendo.BeginUpdate();
            List<TaskDataItem> tasks = gc_Tiendo.DataSource as List<TaskDataItem>;
            foreach (var item in tasks)
            {
                if (!item.UID.Contains("KeHoach"))
                    continue;
                item.Description = ChiTiet ? DinhMucHelper.getDescriptionGanttChartCongtac(item.FinishDate, item.UID.Replace("_KeHoach", ""),
                            double.Parse(item.KhoiLuongHD), LoaiVatTu) : "";
            }
            if (LoaiVatTu is null)
                SharedControls.IsNgay = false;
            else if (!LoaiVatTu.Contains("Vật liệu"))
                SharedControls.IsNgay = true;
            else
                SharedControls.IsNgay = false;
            gc_Tiendo.DataSource = tasks;
            gc_Tiendo.RefreshDataSource();
            gc_Tiendo.Refresh();
            gc_Tiendo.EndUpdate();
            WaitFormHelper.CloseWaitForm();
        }
        private void cbo_HienHaoPhi_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbo_LoaiTienDo.SelectedIndex > 0)
                return;
            if (cbo_HienHaoPhi.SelectedIndex == 0)
            {
                SharedControls.IsNgay = false;
                Fcn_LoadChiTiet(false);
                return;
            }
            Fcn_LoadChiTiet(LoaiVatTu: MyConstant.DIC_LOAIVL[cbo_HienHaoPhi.SelectedIndex]);
        }

        private void gc_Tiendo_TreeListPopupMenuShowing(object sender, DevExpress.XtraTreeList.PopupMenuShowingEventArgs e)
        {
            if (e.HitInfo.InRow || e.HitInfo.InColumn)
            {
                e.Menu.Items.Add(new DXMenuItem("Hiện cột ghi chú", HienCotGhiChu));
                e.Menu.Items.Add(new DXMenuItem("Ẩn cột ghi chú", AnCotGhiChu));
                e.Menu.Items.Add(new DXMenuItem("Hiện ngày nghỉ", HienNgayNghi));
                e.Menu.Items.Add(new DXMenuItem("Xuât File Execl", XuatFile));
                e.Menu.Items.Add(new DXMenuItem("Hiện chế độ mở rộng thu hẹp", XuatFile));
            }
        }
        private void HienCotGhiChu(object sender, EventArgs e)
        {
            if (cbo_HienThiTienDo.SelectedIndex == 0 && cbo_LoaiTienDo.SelectedIndex == 0)
                gc_Tiendo.Columns["GhiChu"].Visible = true;
            else
            {
                MessageShower.ShowError("Vui lòng chọn chế độ Công tác và Kế hoạch để hiện cột Chú thích");
                return;
            }
        }
        private void AnCotGhiChu(object sender, EventArgs e)
        {
            gc_Tiendo.Columns["GhiChu"].Visible = false;
        }
        private void XuatFile(object sender, EventArgs e)
        {
            //List<TaskDataItem> task = gc_Tiendo.DataSource as List<TaskDataItem>;
            //FormTestXuatTienDo TienDo = new FormTestXuatTienDo();
            //TienDo.tasks = task;
            //TienDo.ShowDialog();
            if (cbo_HienThiTienDo.SelectedIndex == 0 && cbo_LoaiTienDo.SelectedIndex == 0)
                Fcn_ExportToExcelTienDo();
            else
            {
                MessageShower.ShowError("Vui lòng chọn chế độ Công tác và Kế hoạch để Xuât File");
                return;
            }
        }
        private void HienNgayNghi(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập lại ngày nghỉ");
            fcn_UpdateNgayNghi();
            WaitFormHelper.CloseWaitForm();
        }

        private void ce_TienDoCachHienThi_CheckedChanged(object sender, EventArgs e)
        {
            fcn_TDKH_loadTienDo();
        }
        private void Fcn_ExportToExcelTienDo()
        {
            string PathSave = "";
            XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
            if (Xtra.ShowDialog() == DialogResult.OK)
            {
                PathSave = Xtra.SelectedPath;
            }
            else
                return;
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu công tác");
            string m_Path = Path.Combine(BaseFrom.m_path, "Template", "FileExcel", "TienDo.xlsx");
            SpreadsheetControl Spread = new SpreadsheetControl();
            Spread.LoadDocument(m_Path);
            Worksheet ws = Spread.Document.Worksheets[0];
            List<TaskDataItem> tasks = gc_Tiendo.DataSource as List<TaskDataItem>;
            CellRange CongTac = ws.Range["Data_CongTac"];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(CongTac);
            var DuAn = tasks.Where(x => x.TaskType == TDKH.TYPE_TaskTienDo_DuAn).ToList();
            int InDexCT = 6;
            int stt = 1;
            Spread.Document.History.IsEnabled = false;
            Spread.BeginUpdate();
            CellRange Copy = ws.Range["4:6"];
            DateTime Max = tasks.Where(x => x.FinishDate.HasValue).Max(x => x.FinishDate.Value);
            DateTime Min = tasks.Where(x => x.FinishDate.HasValue).Min(x => x.StartDate.Value);
            double SoCot = (Max.Date - Min.Date).TotalDays;
            ws.Columns.Insert(CongTac.RightColumnIndex + 2, (int)SoCot, ColumnFormatMode.FormatAsPrevious);
            int colum = 9;
            ws.Rows[0]["J"].SetValueFromText($"TIẾN ĐỘ THI CÔNG TỪ {Min.ToShortDateString()} ĐẾN {Max.ToShortDateString()}");
            for (DateTime i = Min; i <= Max; i = i.AddDays(1))
            {
                ws.Rows[1][colum].SetValue(i);
                ws.Rows[214][colum++].SetValue(i);
            }
            ws.MergeCells(ws.Range[$"J1:{ws.Columns[CongTac.RightColumnIndex + (int)SoCot + 1].Heading}1"]);
            int SubMin = 0;
            CellRange RangeFil, RangeDecrip;
            int Type = 0;
            string TenNhom = "", TenTuyen = "";
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            foreach (var item in tasks)
            {
                Type = item.TaskType;
                Row CrowCT = ws.Rows[InDexCT];
                switch (Type)
                {
                    case TDKH.TYPE_TaskTienDo_DuAn:
                        CrowCT = ws.Rows[InDexCT++];
                        CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                        CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("DA");
                        CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                        CrowCT.Font.Bold = true;
                        CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                        CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                        SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                        RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                        RangeFil.FillColor = Color.Black;
                        break;
                    case TDKH.TYPE_TaskTienDo_CongTrinh:
                        if (TenTuyen != "")
                        {
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = Color.Red;
                            CrowCT.Visible = false;
                            TenTuyen = "";
                        }
                        else if (TenNhom != "")
                        {
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenNhom}".ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Visible = false;
                            CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                            TenNhom = "";
                        }
                        CrowCT = ws.Rows[InDexCT++];
                        ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                        CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                        CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("CTR");
                        CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                        CrowCT.Font.Bold = true;
                        CrowCT.Font.Color = MyConstant.color_Row_CongTrinh;
                        CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                        CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                        SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                        RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                        RangeFil.FillColor = MyConstant.color_Row_CongTrinh;
                        break;


                    case TDKH.TYPE_TaskTienDo_HangMuc:
                        if (TenTuyen != "")
                        {
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                            CrowCT.Visible = false;
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = Color.Red;
                            TenTuyen = "";
                        }
                        else if (TenNhom != "")
                        {
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenNhom}".ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Visible = false;
                            CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                            TenNhom = "";
                        }
                        CrowCT = ws.Rows[InDexCT++];
                        ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                        CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                        CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                        CrowCT.Font.Bold = true;
                        CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                        CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                        SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                        RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                        if (item.UID.Contains("_MuiTC"))
                        {
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("*MTC");
                            CrowCT.Font.Color = MyConstant.color_Row_MuiTC;
                            RangeFil.FillColor = MyConstant.color_Row_MuiTC;
                        }
                        else
                        {
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HM");
                            CrowCT.Font.Color = MyConstant.color_Row_HangMuc;
                            RangeFil.FillColor = MyConstant.color_Row_HangMuc;
                        }
                        break;

                    case TDKH.TYPE_TaskTienDo_NhaThau:
                        if (item.UID.Contains("_HM"))
                        {
                            if (TenTuyen != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                                CrowCT.Visible = false;
                                CrowCT.Font.Bold = true;
                                CrowCT.Font.Color = Color.Red;
                                TenTuyen = "";
                            }
                            else if (TenNhom != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenNhom}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Visible = false;
                                CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                TenNhom = "";
                            }
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HM");
                            CrowCT.Font.Color = MyConstant.color_Row_HangMuc;
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                            RangeFil.FillColor = MyConstant.color_Row_HangMuc;
                        }
                        else
                        {
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("DVTH");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                            CrowCT.Font.Bold = true;
                        }
                        break;
                    case TDKH.TYPE_TaskTienDo_Tuyen_New:
                        if (item.UID.Contains("_CodeTuyen"))
                        {
                            if (TenTuyen != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Font.Color = Color.Red;
                                CrowCT.Visible = false;
                                TenTuyen = "";
                            }
                            TenTuyen = item.Name;
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("*T");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = Color.Red;
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                            RangeFil.FillColor = Color.Red;

                        }
                        else if (item.UID.Contains("_NhaThau"))
                        {
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("DVTH");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                            CrowCT.Font.Bold = true;
                        }
                        else if (item.UID.Contains("_CodeNhom"))
                        {
                            if (TenTuyen != "")
                            {
                                if (TenNhom != "")
                                {
                                    CrowCT = ws.Rows[InDexCT++];
                                    ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                    CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                    CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenNhom}".ToUpper());
                                    CrowCT.Font.Bold = true;
                                    CrowCT.Visible = false;
                                    CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                    TenNhom = "";
                                }
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Font.Color = Color.Red;
                                CrowCT.Visible = false;
                                TenTuyen = "";
                            }
                            else if (TenNhom != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenNhom}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Visible = false;
                                CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                TenNhom = "";
                            }
                            TenNhom = item.Name;
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("*");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                            RangeFil.FillColor = MyConstant.color_Row_NhomCongTac;
                        }
                        else if (item.UID.Contains("_KeHoach"))
                        {
                            if (TenTuyen != "")
                            {
                                if (TenNhom != "")
                                {
                                    CrowCT = ws.Rows[InDexCT++];
                                    ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                    CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                    CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenNhom}".ToUpper());
                                    CrowCT.Font.Bold = true;
                                    CrowCT.Visible = false;
                                    CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                    TenNhom = "";
                                }
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Font.Color = Color.Red;
                                CrowCT.Visible = false;
                                TenTuyen = "";
                            }
                            else if (TenNhom != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenNhom}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Visible = false;
                                CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                TenNhom = "";
                            }
                            ////công việc không thuộc tuyến
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 3, RowFormatMode.FormatAsNext);
                            CrowCT.CopyFrom(Copy, PasteSpecial.All);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValue(stt++);
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.DonVi].SetValue(item.DonVi);
                            CrowCT[(int)MyConstant.LsTongHopEnum.KLHD].SetValue(item.KhoiLuongHD);
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name);
                            CrowCT[(int)MyConstant.LsTongHopEnum.GhiChu].SetValueFromText(item.GhiChu);
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT + 1}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT + 1}"];
                            RangeFil.FillColor = Color.Blue;
                            ws.Rows[InDexCT - 1][10 + SubMin + item.SoNgay].SetValue(item.Description);
                            if (SharedControls.IsNgay)
                                ws.Rows[InDexCT - 1][9 + SubMin].SetValue(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET));
                            //RangeDecrip = ws.Range[$"{ws.Columns[10 + SubMin + item.SoNgay].Heading}{InDexCT}:{ws.Columns[colum].Heading}{InDexCT + 2}"];
                            //ws.MergeCells(RangeDecrip);
                            InDexCT = InDexCT + 2;
                        }
                        break;
                    case TDKH.TYPE_TaskTienDo_NhomThuocTuyen:
                        if (item.UID.Contains("_CodeTuyen"))
                        {
                            if (TenTuyen != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Font.Color = Color.Red;
                                CrowCT.Visible = false;
                                TenTuyen = "";
                            }
                            TenTuyen = item.Name;
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("*T");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = Color.Red;
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                            RangeFil.FillColor = Color.Red;

                        }
                        else if (item.UID.Contains("_CodeNhom"))
                        {
                            if (TenTuyen != "")
                            {
                                if (TenNhom != "")
                                {
                                    CrowCT = ws.Rows[InDexCT++];
                                    ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                    CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                    CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenNhom}".ToUpper());
                                    CrowCT.Font.Bold = true;
                                    CrowCT.Visible = false;
                                    CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                    TenNhom = "";
                                }
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Font.Color = Color.Red;
                                CrowCT.Visible = false;
                                TenTuyen = "";
                            }
                            else if (TenNhom != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {item.Name}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Visible = false;
                                CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                TenNhom = "";
                            }
                            TenNhom = item.Name;
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("*");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                            RangeFil.FillColor = MyConstant.color_Row_NhomCongTac;
                        }
                        else
                        {
                            if (TenNhom != "" && !item.ParentUID.Contains("_CodeNhom"))
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {item.Name}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Visible = false;
                                CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                TenNhom = "";
                            }
                            ///Công việc thuộc tuyến hoặc công tác thuộc nhóm(nhóm ko thuộc tuyến)
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 3, RowFormatMode.FormatAsNext);
                            CrowCT.CopyFrom(Copy, PasteSpecial.All);
                            if (item.ParentUID.Contains("_CodeNhom"))
                            {
                                CrowCT.Font.Italic = true;
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].Alignment.Indent = 2;
                            }
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValue(stt++);
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.DonVi].SetValue(item.DonVi);
                            CrowCT[(int)MyConstant.LsTongHopEnum.KLHD].SetValue(item.KhoiLuongHD);
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name);
                            CrowCT[(int)MyConstant.LsTongHopEnum.GhiChu].SetValueFromText(item.GhiChu);
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT + 1}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT + 1}"];
                            RangeFil.FillColor = Color.Blue;
                            ws.Rows[InDexCT - 1][10 + SubMin + item.SoNgay].SetValue(item.Description);
                            if (SharedControls.IsNgay)
                                ws.Rows[InDexCT - 1][9 + SubMin].SetValue(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET));
                            //RangeDecrip = ws.Range[$"{ws.Columns[10 + SubMin + item.SoNgay].Heading}{InDexCT}:{ws.Columns[colum].Heading}{InDexCT + 2}"];
                            //ws.MergeCells(RangeDecrip);
                            InDexCT = InDexCT + 2;
                        }

                        break;
                    case TDKH.TYPE_TaskTienDo_CongViecThuocNhomTrongTuyen:
                    case TDKH.TYPE_TaskTienDo_CongViecThuocNhomTrongTuyen + 1:
                        if (item.UID.Contains("_KeHoach"))
                        {
                            ///công việc thuộc nhóm trong tuyến
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 3, RowFormatMode.FormatAsNext);
                            CrowCT.CopyFrom(Copy, PasteSpecial.All);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValue(stt++);
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.DonVi].SetValue(item.DonVi);
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].Alignment.Indent = 2;
                            CrowCT.Font.Italic = true;
                            CrowCT[(int)MyConstant.LsTongHopEnum.KLHD].SetValue(item.KhoiLuongHD);
                            //CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name);
                            CrowCT[(int)MyConstant.LsTongHopEnum.GhiChu].SetValueFromText(item.GhiChu);
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT + 1}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT + 1}"];
                            RangeFil.FillColor = Color.Blue;
                            ws.Rows[InDexCT - 1][10 + SubMin + item.SoNgay].SetValue(item.Description);
                            if (SharedControls.IsNgay)
                                ws.Rows[InDexCT - 1][9 + SubMin].SetValue(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SPSHEET));
                            //RangeDecrip = ws.Range[$"{ws.Columns[10 + SubMin + item.SoNgay].Heading}{InDexCT}:{ws.Columns[colum].Heading}{InDexCT + 2}"];
                            //ws.MergeCells(RangeDecrip);
                            InDexCT = InDexCT + 2;
                        }
                        else if (item.UID.Contains("_CodeNhom"))
                        {
                            if (TenNhom != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HT*");
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {item.Name}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Visible = false;
                                CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                                TenNhom = "";
                            }
                            TenNhom = item.Name;
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(item.StartDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(item.FinishDate.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                            CrowCT[(int)MyConstant.LsTongHopEnum.SoNgay].Formula = $"={CrowCT[(int)MyConstant.LsTongHopEnum.NKT].GetReferenceA1()}-{CrowCT[(int)MyConstant.LsTongHopEnum.NBD].GetReferenceA1()}+1";
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("*");
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(item.Name.ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = MyConstant.color_Row_NhomCongTac;
                            SubMin = (int)(item.StartDate.Value.Date - Min.Date).TotalDays;
                            RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT}:{ws.Columns[9 + SubMin + item.SoNgay].Heading}{InDexCT}"];
                            RangeFil.FillColor = MyConstant.color_Row_NhomCongTac;
                        }
                        break;
                    default:
                        break;
                }
            }
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu Máy thi công");
            Fcn_UpdateVatLieu("Máy thi công", "Data_MayThiCong", ws, Copy, Min, Max);
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu Vật liệu");
            Fcn_UpdateVatLieu("Vật liệu", "Data_VatLieu", ws, Copy, Min, Max);
            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu Nhân công");
            Fcn_UpdateVatLieu("Nhân công", "Data_NhanCong", ws, Copy, Min, Max);

            Copy.Select(x => x.RowIndex).ForEach(x => ws.Rows[x].Visible = false);
            CellRange Visible = ws.Range[$"A{ws.Range["Data_CongTac"].BottomRowIndex - 2}:A{ws.Range["Data_CongTac"].BottomRowIndex + 1}"];
            Visible.Select(x => x.RowIndex).ForEach(x => ws.Rows[x].Visible = false);
            //ws.Rows.Remove(2, 4);
            //ws.Rows.Remove(ws.Range["Data_CongTac"].BottomRowIndex - 3, 4);
            Spread.EndUpdate();
            Spread.Document.History.IsEnabled = true;
            string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
            string TenDuAn = Regex.Replace(slke_ThongTinDuAn.Text, $@"(\-|\,|\\|\.|\+|\""|\;|\:)+", string.Empty);
            Spread.SaveDocument(Path.Combine(PathSave, $"Tiến độ_{TenDuAn}_{DVTH.Ten}_{time}.xlsx"), DocumentFormat.Xlsx);
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Xuất File thành công!");
            DialogResult dialogResult = XtraMessageBox.Show($"Tiến độ_{TenDuAn}_{DVTH.Ten}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dialogResult == DialogResult.Yes)
            {
                Process.Start(Path.Combine(PathSave, $"Tiến độ_{TenDuAn}_{DVTH.Ten}_{time}.xlsx"));
            }
        }

        private void Fcn_UpdateVatLieu(string LoaiVL, string Range, Worksheet ws, CellRange RangCopy, DateTime Min, DateTime Max)
        {
            CellRange VatLieu = ws.Range[Range];
            if (LoaiVL == "Nhân công")
            {
                Dictionary<DateTime, int> dic = LoadBieuDoNhanCong();
                if (!dic.Any())
                    return;
                int maxNC = dic.Values.Max();
                int duNC = maxNC % 40;
                maxNC += (40 - duNC);
                int buocNhanCong = maxNC / 40;
                int m = 0;
                for (int k = 40; k >= 1; k--)
                {
                    ws.Rows[VatLieu.TopRowIndex + 1 + (m * 5)][7].Value = buocNhanCong * k;
                    m++;
                }
                int maxNhom = (Max.Date - Min.Date).Days;
                for (int i = 0; i <= maxNhom; i++)
                {
                    DateTime Value = Min.AddDays(i).Date;
                    if (!dic.Keys.Contains(Value))
                        continue;
                    int sttEnd = dic[Value];
                    if (sttEnd < 1) continue;
                    int duIndexColumnNC = sttEnd % buocNhanCong;
                    int nguyenIndexColumnNC = sttEnd / buocNhanCong;
                    if (duIndexColumnNC > 0) nguyenIndexColumnNC++;
                    Cell start = ws.Rows[VatLieu.BottomRowIndex - (nguyenIndexColumnNC * 5)][9 + i];
                    Cell end = ws.Rows[VatLieu.BottomRowIndex - 1][9 + i];
                    CellRange range = ws.Range[$"{start.GetReferenceA1()}:{end.GetReferenceA1()}"];
                    range.FillColor = Color.Red;

                    start = ws.Rows[VatLieu.BottomRowIndex - (nguyenIndexColumnNC * 5) - 1][9 + i];
                    ws.Rows[VatLieu.BottomRowIndex - (nguyenIndexColumnNC * 5) - 1][9 + i].SetValue(sttEnd);
                    end = ws.Rows[VatLieu.BottomRowIndex - (nguyenIndexColumnNC * 5) - 6][9 + i];
                    range = ws.Range[$"{start.GetReferenceA1()}:{end.GetReferenceA1()}"];
                    ws.MergeCells(range);
                }
                return;
            }
            DataTable dtCongTacTheoKy = null, dtDependency = null;
            List<KLHN> dtTheoNgay;
            int SubMin = 0;
            CellRange RangeFil;
            DinhMucHelper.fcn_CTac(LoaiVL, out dtCongTacTheoKy, out dtDependency, out dtTheoNgay, false, false);
            int stt = 1;
            int InDexCT = VatLieu.TopRowIndex;
            DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;

            Row CrowCT = ws.Rows[InDexCT++];
            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("DA");
            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(slke_ThongTinDuAn.Text.ToUpper());
            CrowCT.Font.Bold = true;
            var grCongTrinh = dtCongTacTheoKy.AsEnumerable().GroupBy(x => x["CodeCongTrinh"].ToString());
            DateTime? dateBDKH, dateKTKH;
            int SoNgay = 0;
            string CodeTuyen = "", TenTuyen = "";
            foreach (var Ctrinh in grCongTrinh)
            {
                if (TenTuyen != "")
                {
                    CrowCT = ws.Rows[InDexCT++];
                    ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                    CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                    CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                    CrowCT.Font.Bold = true;
                    CrowCT.Font.Color = Color.Red;
                    TenTuyen = "";
                }
                CrowCT = ws.Rows[InDexCT++];
                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("CTR");
                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(Ctrinh.First()["TenCongTrinh"].ToString().ToUpper());
                CrowCT.Font.Bold = true;
                CrowCT.Font.Color = MyConstant.color_Row_CongTrinh;
                var grMuiThiCong = Ctrinh.GroupBy(x => x["CodeMuiThiCong"]).OrderByDescending(x => x.Key.ToString());
                foreach (var mtc in grMuiThiCong)
                {
                    if (!string.IsNullOrEmpty(mtc.Key.ToString()))
                    {
                        if (TenTuyen != "")
                        {
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = Color.Red;
                            TenTuyen = "";
                        }
                        CrowCT = ws.Rows[InDexCT++];
                        ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                        CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("*MTC");
                        CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(mtc.First()["TenMuiThiCong"].ToString().ToUpper());
                        CrowCT.Font.Bold = true;
                        CrowCT.Font.Color = MyConstant.color_Row_MuiTC;
                    }
                    var grHangMuc = mtc.GroupBy(x => x["CodeHangMuc"].ToString());
                    foreach (var HM in grHangMuc)
                    {
                        if (TenTuyen != "")
                        {
                            CrowCT = ws.Rows[InDexCT++];
                            ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                            CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                            CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                            CrowCT.Font.Bold = true;
                            CrowCT.Font.Color = Color.Red;
                            TenTuyen = "";
                        }
                        CrowCT = ws.Rows[InDexCT++];
                        ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                        CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("HM");
                        CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(HM.First()["TenHangMuc"].ToString().ToUpper());
                        CrowCT.Font.Bold = true;
                        CrowCT.Font.Color = MyConstant.color_Row_HangMuc;

                        CrowCT = ws.Rows[InDexCT++];
                        ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                        CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("DVTH");
                        CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(DVTH.Ten.ToUpper());
                        CrowCT.Font.Bold = true;
                        var grPhanTuyen = HM.GroupBy(x => (int)x["IndPT"])
               .OrderBy(x => x.Key);
                        foreach (var Tuyen in grPhanTuyen)
                        {
                            var fstTuyen = Tuyen.First();
                            CodeTuyen = (fstTuyen["CodePhanTuyen"] == DBNull.Value) ? null : $"{fstTuyen["CodePhanTuyen"]}_CodeTuyen";
                            if (TenTuyen != "")
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText(MyConstant.CONST_TYPE_HoanThanhPhanTuyen);
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText($"HOÀN THÀNH {TenTuyen}".ToUpper());
                                CrowCT.Font.Bold = true;
                                CrowCT.Font.Color = Color.Red;
                                TenTuyen = "";
                            }
                            if (CodeTuyen != null)
                            {
                                CrowCT = ws.Rows[InDexCT++];
                                TenTuyen = Tuyen.First()["TenTuyen"].ToString().ToUpper();
                                ws.Rows.Insert(InDexCT, 1, RowFormatMode.FormatAsNext);
                                CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValueFromText("*T");
                                CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(TenTuyen);
                                CrowCT.Font.Bold = true;
                                CrowCT.Font.Color = Color.Red;
                            }
                            var grTuyenNhom = Tuyen.GroupBy(x => (int)x["IndNhom"]).OrderBy(x => x.Key);
                            foreach (var NhomTuyen in grTuyenNhom)
                            {
                                var grCongTacTuyen = NhomTuyen.GroupBy(x => x["Code"]);
                                foreach (var CongTac in grCongTacTuyen)
                                {
                                    dateBDKH = (DateTime.TryParse(CongTac.First()["NgayBatDau"].ToString(), out DateTime dateBD) ? (DateTime?)dateBD : null);
                                    dateKTKH = (DateTime.TryParse(CongTac.First()["NgayKetThuc"].ToString(), out DateTime dateKT) ? (DateTime?)(dateKT.Date) : null);
                                    if (dateBDKH is null || dateKTKH is null)
                                        continue;
                                    dateBDKH = dateBDKH.Value.Date < Min ? Min : dateBDKH;
                                    dateKTKH = dateKTKH.Value.Date > Max ? Max : dateKTKH;
                                    SoNgay = (dateKTKH.Value.Date - dateBDKH.Value.Date).Days;
                                    CrowCT = ws.Rows[InDexCT++];
                                    ws.Rows.Insert(InDexCT, 3, RowFormatMode.FormatAsNext);
                                    CrowCT.CopyFrom(RangCopy, PasteSpecial.All);
                                    CrowCT[(int)MyConstant.LsTongHopEnum.STT].SetValue(stt++);
                                    CrowCT[(int)MyConstant.LsTongHopEnum.NBD].SetValueFromText(dateBDKH.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                                    CrowCT[(int)MyConstant.LsTongHopEnum.NKT].SetValueFromText(dateKTKH.Value.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE));
                                    CrowCT[(int)MyConstant.LsTongHopEnum.DonVi].SetValue(CongTac.First()["DonVi"].ToString());
                                    CrowCT[(int)MyConstant.LsTongHopEnum.KLHD].SetValue(CongTac.First()["KhoiLuongToanBo"].ToString());
                                    CrowCT[(int)MyConstant.LsTongHopEnum.Ten].SetValueFromText(CongTac.First()["TenCongTac"].ToString());
                                    SubMin = (int)(dateBDKH.Value.Date - Min.Date).TotalDays;
                                    RangeFil = ws.Range[$"{ws.Columns[9 + SubMin].Heading}{InDexCT + 1}:{ws.Columns[9 + SubMin + SoNgay].Heading}{InDexCT + 1}"];
                                    RangeFil.FillColor = MyConstant.DIC_Color[LoaiVL];
                                    InDexCT = InDexCT + 2;
                                }


                            }
                        }

                    }

                }
            }
            CellRange Visible = ws.Range[$"A{ws.Range[Range].BottomRowIndex - 2}:A{ws.Range[Range].BottomRowIndex + 1}"];
            Visible.Select(x => x.RowIndex).ForEach(x => ws.Rows[x].Visible = false);
        }

        private void rg_LoaiMau_SelectedIndexChanged(object sender, EventArgs e)
        {
            //fcn_CapNhatDauViec();
        }

        private void bt_DocMauDuAn_Click(object sender, EventArgs e)
        {

            XtraForm_ImportMauDuAn form = new XtraForm_ImportMauDuAn();
            if (form.ShowDialog() == DialogResult.OK)
            {
                fcn_CapNhatDauViec();
            }
        }

        private void cbb_DauViecLon_DataSourceChanged(object sender, EventArgs e)
        {

        }

        private void bt_taiLai_Click(object sender, EventArgs e)
        {
            string dbString = $"SELECT * FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} WHERE CodeDuAn = '{slke_ThongTinDuAn.EditValue}' " +
                $"AND CodeCongViecCha IS NOT NULL AND NgayBatDauThiCong IS NOT NULL AND NgayKetThucThiCong IS NOT NULL " +
                $"ORDER BY SortId ";

            var dt = DataProvider.InstanceTHDA.ExecuteQueryModel<CongViecChaChartViewModel>(dbString);

            var grsDVL = dt.GroupBy(x => x.CodeDVL);
            List<BarChartViewModel> source = new List<BarChartViewModel>();
            foreach (var grDVL in grsDVL)
            {
                var grsDVN = grDVL.GroupBy(x => x.CodeDVN);

                source.Add(new BarChartViewModel()
                {
                    TenCongViec = "**" + grDVL.First().DVL.ToUpper(),
                    Progress = 100,
                    ParentUID = "0",
                    UID = grDVL.Key,
                    TaskType = 0

                });
                foreach (var grDVN in grsDVN)
                {
                    source.Add(new BarChartViewModel()
                    {
                        TenCongViec = "++" + grDVN.First().DVN,
                        Progress = 100,
                        ParentUID = grDVL.Key,
                        UID = grDVN.Key,
                        TaskType = 1

                    });

                    foreach (var ctac in grDVN)
                    {
                        if (!ctac.NgayBatDauThiCong.HasValue || !ctac.NgayKetThucThiCong.HasValue)
                            continue;
                        source.Add(new BarChartViewModel()
                        {
                            TenCongViec = ctac.TenCongViec,
                            Progress = ctac.TyLe * 100,
                            ParentUID = grDVN.Key,
                            UID = Guid.NewGuid().ToString(),
                            NgayBatDauThiCong = ctac.NgayBatDauThiCong.Value.AddHours(1),
                            NgayKetThucThiCong = ctac.NgayKetThucThiCong.Value.AddHours(23),
                            TaskType = 2,
                            Description = ctac.NguoiThucHien is null ? $"{ctac.TyLe * 100}%" : (ctac.NguoiThucHien.ToString() == "" ? $"{ctac.TyLe * 100}%" : $"{ctac.TyLe * 100}% [{ctac.NguoiThucHien}]")
                        });
                    }
                }
            }
            for (int i = 1; i >= 0; i--)
            {
                source.Where(x => x.TaskType == i).ForEach(y =>
                {
                    y.NgayBatDauThiCong = source.Where(z => z.ParentUID == y.UID).Min(t => t.NgayBatDauThiCong);
                    y.NgayKetThucThiCong = source.Where(z => z.ParentUID == y.UID).Max(t => t.NgayKetThucThiCong);
                    y.Progress = Math.Round(source.Where(z => z.ParentUID == y.UID).Sum(t => t.Progress) / (source.Where(z => z.ParentUID == y.UID).Count()));
                });
            }
            gc_GiaoViec.DataSource = source;
            gc_GiaoViec.RefreshDataSource();
            gc_GiaoViec.Refresh();
            gc_GiaoViec.ExpandAll();

        }

        private void gc_GiaoViec_NodeCellStyle(object sender, GetCustomNodeCellStyleEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
            }
            else
            {
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Italic);
            }
        }

        private void gc_GiaoViec_CustomDrawTask(object sender, CustomDrawTaskEventArgs e)
        {
            if (e.Node.Level == 0)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ProgressColor = Color.Green;

            }
            else if (e.Node.Level == 1)
            {
                e.Appearance.BackColor = Color.Blue;
                e.Appearance.ProgressColor = Color.Blue;
            }
            else
            {
                e.Appearance.BackColor = Color.Orange;
                e.Appearance.ProgressColor = Color.Orange;
            }
        }

        private void gc_GiaoViec_CustomTaskProgress(object sender, CustomTaskProgressEventArgs e)
        {

            //if (e.Node.Level == 0)
            //    e.Appearance.BackColor = Color.Green;
            //else if (e.Node.Level == 1)
            //    e.Appearance.BackColor = Color.Yellow;
            //else if (e.Node.Level == 2)
            //    e.Appearance.BackColor = Color.Orange;
        }

        private void gc_GiaoViec_CustomDrawTimescaleColumn(object sender, CustomDrawTimescaleColumnEventArgs e)
        {
            GanttTimescaleColumn column = e.Column;
            if (column.StartDate <= DateTime.Now && column.FinishDate >= DateTime.Now)
            {
                e.DrawBackground();
                float x = (float)e.GetPosition(DateTime.Now);
                float width = 4;
                RectangleF deadLineRect = new RectangleF(x, column.Bounds.Y, width, column.Bounds.Height);
                e.Cache.FillRectangle(DXSkinColors.FillColors.Danger, deadLineRect);
                e.DrawHeader();
                e.Handled = true;
            }
        }

        private void gc_GiaoViec_TaskProgressModified(object sender, TaskProgressModifiedEventArgs e)
        {
            string UID = e.ProcessedNode.GetValue("UID").ToString();
        }

        private void XuatFile_GiaoViec_Click(object sender, EventArgs e)
        {
            try
            {
                PreviewPrintableComponent(gc_GiaoViec, gc_GiaoViec.LookAndFeel);
            }
            catch (Exception ex)
            {
                MessageShower.ShowError(ex.Message);
            }
        }

        private void ce_AnHienChiTiet_CheckedChanged(object sender, EventArgs e)
        {
            if (ce_AnHienChiTiet.Checked)
            {
                WaitFormHelper.ShowWaitForm("Đang phân tích chi tiết");
                gc_Tiendo.BeginUpdate();
                List<BarChartViewModel> tasks = gc_GiaoViec.DataSource as List<BarChartViewModel>;
                foreach (var item in tasks)
                {
                    if (item.TaskType < 2)
                        continue;
                    item.Description = $"{item.Progress}%[{item.NguoiThucHien}]";
                }
                gc_GiaoViec.DataSource = tasks;
                gc_GiaoViec.RefreshDataSource();
                gc_GiaoViec.Refresh();
                gc_GiaoViec.EndUpdate();
                WaitFormHelper.CloseWaitForm();
            }
            else
            {
                WaitFormHelper.ShowWaitForm("Đang phân tích chi tiết");
                gc_Tiendo.BeginUpdate();
                List<BarChartViewModel> tasks = gc_GiaoViec.DataSource as List<BarChartViewModel>;
                foreach (var item in tasks)
                {
                    if (item.TaskType < 2)
                        continue;
                    item.Description = "";
                }
                gc_GiaoViec.DataSource = tasks;
                gc_GiaoViec.RefreshDataSource();
                gc_GiaoViec.Refresh();
                gc_GiaoViec.EndUpdate();
                WaitFormHelper.CloseWaitForm();
            }
        }

        private void tl_GiaoViecDuAn_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {

            var crId = e.Node.GetValue("Id").ToString();
            if (e.Node.Level == 1)
            {
                fcn_LoadGiaoViecDuAn();
            }
        }

        private void tl_GiaoViecDuAn_RowClick(object sender, DevExpress.XtraTreeList.RowClickEventArgs e)
        {
            ////var crId = e.Node.GetValue("Id").ToString();
            //CongViecChaChartViewModel cv = tl_GiaoViecDuAn.GetDataRecordByNode(e.Node) as CongViecChaChartViewModel;
            //if (cv.Id.StartsWith("AddDVL"))
            //{

            //    string DV = XtraInputBox.Show("Nhập tên tiêu đề mới", "Nhập tên tiêu đề", "");
            //    if (DV != null)
            //    {
            //        string Code = Guid.NewGuid().ToString();
            //        string dbString = $"INSERT INTO {GiaoViec.TBL_DAUVIECLON} (\"Code\",\"DauViec\", \"CodeDuAn\", LoaiMau) " +
            //            $"VALUES ('{Code}', '{DV}', '{slke_ThongTinDuAn.EditValue}', 'NguoiDung')";
            //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //    }
            //    fcn_CapNhatDauViec();

            //    return;

            //}
            //else if (cv.Id.StartsWith("AddDVN"))
            //{
            //    string DV = XtraInputBox.Show("Nhập tên tiêu đề mới", "Nhập tên tiêu đề", "");
            //    if (DV != null)
            //    {
            //        string Code = Guid.NewGuid().ToString();
            //        string dbString = $"INSERT INTO {GiaoViec.TBL_DAUVIECNho} (\"Code\",\"DauViec\", \"CodeDauViecLon\") " +
            //            $"VALUES ('{Code}', '{DV}', '{cv.CodeDVL}')";
            //        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            //    }
            //    fcn_CapNhatDauViec();
            //    return;
            //}
        }

        private void btRepo_Xoa_Click(object sender, EventArgs e)
        {
            var crNode = tl_GiaoViecDuAn.FocusedNode;
            var crId = crNode.GetValue("Id").ToString();
            if (crId.StartsWith("AddDVL") || crId.StartsWith("AddDVN"))
                return;


            if (crNode.Level == 0)
            {
                CongViecChaChartViewModel cv = tl_GiaoViecDuAn.GetDataRecordByNode(crNode) as CongViecChaChartViewModel;
                var dr = MessageShower.ShowYesNoQuestion($"Bạn có muốn xóa Tiêu đề \"{cv.DVL}\" Và các dữ liệu liên quan?");

                if (dr == DialogResult.Yes)
                {
                    if (DuAnHelper.DeleteDataRows(GiaoViec.TBL_DauViecLon, new string[] { cv.CodeDVL }))
                    {
                        MessageShower.ShowInformation("Đã xóa!");
                        fcn_CapNhatDauViec();
                        fcn_LoadGiaoViecDuAn();
                    }
                }
            }

            else if (crNode.Level == 1)
            {
                CongViecChaChartViewModel cv = tl_GiaoViecDuAn.GetDataRecordByNode(crNode) as CongViecChaChartViewModel;
                var dr = MessageShower.ShowYesNoQuestion($"Bạn có muốn xóa Mẫu \"{cv.DVN}\" Và các dữ liệu liên quan?");

                if (dr == DialogResult.Yes)
                {
                    if (DuAnHelper.DeleteDataRows(GiaoViec.TBL_DauViecNho, new string[] { cv.CodeDVN }))
                    {
                        MessageShower.ShowInformation("Đã xóa!");
                        fcn_CapNhatDauViec();
                        fcn_LoadGiaoViecDuAn();
                    }
                }
            }
        }

        private void tl_GiaoViecDuAn_NodeCellStyle(object sender, GetCustomNodeCellStyleEventArgs e)
        {
            TreeList treeList = sender as TreeList;
            var crCode = e.Node.GetValue("Id").ToString();

            if (e.Node.HasChildren)
            {
                e.Appearance.ForeColor = Color.Blue;
                e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
            }
            if (crCode.StartsWith("AddDVL") || crCode.StartsWith("AddDVN"))
            {
                e.Appearance.BackColor = Color.LightYellow;
            }
        }
        private void tl_GiaoViecDuAn_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {

            //var crCode = e.Node.GetValue("Id").ToString();

            //if (crCode.StartsWith("AddDVL") || crCode.StartsWith("AddDVN"))
            //{
            //    e.Appearance.BackColor = Color.LightYellow;
            //}

            //if (e.Node.Level == 0 && e.Column.FieldName == "Xoa" && (crCode.StartsWith("AddDVL") || crCode.StartsWith("AddDVN")))
            //{
            //    e.Appearance.FillRectangle(e.Cache, e.Bounds);
            //    e.Handled = true;
            //}

        }

        private void tl_GiaoViecDuAn_RowCellClick(object sender, DevExpress.XtraTreeList.RowCellClickEventArgs e)
        {

        }

        private void tl_GiaoViecDuAn_DataSourceChanged(object sender, EventArgs e)
        {
            tl_GiaoViecDuAn.ExpandAll();
            spsheet_GV_KH_ChiTietCacHMCongViec.Enabled = false;


        }



        private void tl_GiaoViecDuAn_MouseClick(object sender, MouseEventArgs e)
        {
            var node = tl_GiaoViecDuAn.CalcHitInfo(new Point(e.X, e.Y)).Node;

            var cv = tl_GiaoViecDuAn.GetDataRecordByNode(node) as CongViecChaChartViewModel;
            //var cvs = tl_GiaoViecDuAn.DataSource
            if (cv is null)
                return;

            if (e.Button == MouseButtons.Right)
            {
                tl_GiaoViecDuAn.FocusedNode = node;
            }

            if (cv.Id.StartsWith("AddDVL"))
            {

                string DV = XtraInputBox.Show("Nhập tên tiêu đề mới", "Nhập tên tiêu đề", "");
                if (DV != null)
                {
                    string Code = Guid.NewGuid().ToString();
                    string dbString = $"INSERT INTO {GiaoViec.TBL_DauViecLon} (\"Code\",\"DauViec\", \"CodeDuAn\", LoaiMau, SortId) " +
                        $"VALUES ('{Code}', @DauViec, '{slke_ThongTinDuAn.EditValue}', 'NguoiDung', '{cv.SortIdDVL}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { DV });
                }
                fcn_CapNhatDauViec();

                return;

            }
            else if (cv.Id.StartsWith("AddDVN"))
            {
                string DV = XtraInputBox.Show("Nhập tên tiêu đề mới", "Nhập tên tiêu đề", "");
                if (DV != null)
                {


                    string Code = Guid.NewGuid().ToString();
                    string dbString = $"INSERT INTO {GiaoViec.TBL_DauViecNho} (\"Code\",\"DauViec\", \"CodeDauViecLon\", SortId) " +
                        $"VALUES ('{Code}', @DauViec, '{cv.CodeDVL}', '{cv.SortIdDVN}')";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { DV });
                }
                fcn_CapNhatDauViec();
                return;
            }
        }

        private void bt_XuatMau_Click(object sender, EventArgs e)
        {
            //string dbString = $"SELECT * FROM {GiaoViec.TBL_DAUVIECLON} WHERE CodeDuAn = $\"{slke_ThongTinDuAn.EditValue}\"";
            //Data

        }

        private void tl_GiaoViecDuAn_CellValueChanging(object sender, CellValueChangedEventArgs e)
        {



        }

        private void tl_GiaoViecDuAn_ShowingEditor(object sender, CancelEventArgs e)
        {
            string id = tl_GiaoViecDuAn.FocusedNode.GetValue("Id") as string;
            if (id.StartsWith("AddDVL") || id.StartsWith("AddDVN"))
                e.Cancel = true;

        }

        private void tl_GiaoViecDuAn_ValidatingEditor(object sender, DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs e)
        {
            var newVal = e.Value.ToString();
            var crNode = tl_GiaoViecDuAn.FocusedNode;
            var oldValue = crNode.GetValue("TenCongViec");
            if (crNode.Level == 0)
            {
                DialogResult dr = MessageShower.ShowYesNoQuestion($"Bạn có muốn đổi tên tiêu đề \"{oldValue}\" thành \"{newVal}\" không?");
                if (dr != DialogResult.Yes)
                {
                    e.Value = oldValue;


                }
                else
                {
                    string dbString = $"UPDATE {GiaoViec.TBL_DauViecLon} SET DauViec = @DauViec WHERE Code = '{crNode.GetValue("CodeDVL")}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newVal });
                }
            }
            else if (crNode.Level == 1)
            {
                DialogResult dr = MessageShower.ShowYesNoQuestion($"Bạn có muốn đổi tên mẫu \"{oldValue}\" thành \"{newVal}\" không?");
                if (dr != DialogResult.Yes)
                {
                    e.Value = oldValue;
                    //tl_GiaoViecDuAn.CloseEditor();
                }
                else
                {
                    string dbString = $"UPDATE {GiaoViec.TBL_DauViecNho} SET DauViec = @DauViec WHERE Code = '{crNode.GetValue("CodeDVN")}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { newVal });

                }
            }
        }

        private void tl_GiaoViecDuAn_PopupMenuShowing(object sender, DevExpress.XtraTreeList.PopupMenuShowingEventArgs e)
        {
            var crNode = tl_GiaoViecDuAn.FocusedNode;
            if (e.MenuType == DevExpress.XtraTreeList.Menu.TreeListMenuType.Node && (crNode.Level == 1 || crNode.Level == 0)
                && !crNode.GetValue("Id").ToString().StartsWith("Add"))
            {

                e.Menu.Items.Add(new DXMenuItem("Dời ngày thi công lên thêm", fcn_handle_DoiNgayALL));
                e.Menu.Items.Add(new DXMenuItem("Dời ngày bắt đầu lên thêm", fcn_handle_DoiNgayBatDau));
                e.Menu.Items.Add(new DXMenuItem("Dời ngày kết thúc lên thêm", fcn_handle_DoiNgayKetThuc));
            }
        }

        private void fcn_handle_DoiNgayALL(object sender, EventArgs args)
        {
            var rs = DevExpress.XtraEditors.XtraInputBox.Show("Nhập số ngày bạn muốn thêm (-: Lùi ngày, +: Thêm ngày)", "Nhập số lần thi công", "1");
            int offsetDate = 0;
            if (rs != String.Empty)
            {
                if (int.TryParse(rs, out offsetDate))
                {
                    if (offsetDate == 0)
                    {
                        MessageShower.ShowInformation("Vui lòng nhập số khác 0");
                        return;
                    }
                }
                else
                {
                    MessageShower.ShowInformation("Vui lòng nhập số nguyên");
                    return;
                }
            }
            else
            {
                MessageShower.ShowInformation("Đã hủy thao tác");
                return;
            }

            if (MessageShower.ShowYesNoQuestion($"Bạn có chắc chắn muốn dời ngày thêm {offsetDate} Ngày") != DialogResult.Yes)
                return;

            var crNode = tl_GiaoViecDuAn.FocusedNode;
            var row = tl_GiaoViecDuAn.GetFocusedRow() as CongViecChaChartViewModel;

            string dbString;
            if (crNode.Level == 0)
            {
                dbString = $"SELECT * " +
                    $"FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} WHERE CodeDVL = '{row.CodeDVL}' AND (NgayBatDauThiCong IS NOT NULL OR NgayKetThucThiCong IS NOT NULL)";
            }
            else if (crNode.Level == 1)
            {
                dbString = $"SELECT * " +
                    $"FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} WHERE CodeDVN = '{row.CodeDVN}' AND (NgayBatDauThiCong IS NOT NULL OR NgayKetThucThiCong IS NOT NULL)";
            }
            else return;
            List<CongViecChaChartViewModel> chas = DataProvider.InstanceTHDA.ExecuteQueryModel<CongViecChaChartViewModel>(dbString);

            WaitFormHelper.ShowWaitForm("Đang cập nhật");
            List<string> updates = new List<string>();

            foreach (var cha in chas)
            {
                List<string> sets = new List<string>();
                if (cha.NgayBatDauThiCong.HasValue)
                {
                    sets.Add($"NgayBatDauThiCong = '{cha.NgayBatDauThiCong.Value.AddDays(offsetDate).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'");
                }

                if (cha.NgayKetThucThiCong.HasValue)
                {
                    sets.Add($"NgayKetThucThiCong = '{cha.NgayKetThucThiCong.Value.AddDays(offsetDate).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'");
                }

                dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET {string.Join(", ", sets)} WHERE CodeCongViecCha = '{cha.CodeCongViecCha}'";
                updates.Add(dbString);
            }

            if (updates.Any())
            {
                DataProvider.InstanceTHDA.ExecuteNonQuery(string.Join(";\r\n", updates));
            }
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Đã cập nhật!");
            fcn_LoadGiaoViecDuAn();

        }


        private void fcn_handle_DoiNgayBatDau(object sender, EventArgs args)
        {
            var rs = DevExpress.XtraEditors.XtraInputBox.Show("Nhập số ngày bắt đầu bạn muốn thêm (-: Lùi ngày, +: Thêm ngày)", "Nhập số lần thi công", "1");
            int offsetDate = 0;
            if (rs != String.Empty)
            {
                if (int.TryParse(rs, out offsetDate))
                {
                    if (offsetDate == 0)
                    {
                        MessageShower.ShowInformation("Vui lòng nhập số khác 0");
                        return;
                    }
                }
                else
                {
                    MessageShower.ShowInformation("Vui lòng nhập số nguyên");
                    return;
                }
            }
            else
            {
                MessageShower.ShowInformation("Đã hủy thao tác");
                return;
            }

            if (MessageShower.ShowYesNoQuestion($"Bạn có chắc chắn muốn dời ngày bắt đầu thêm {offsetDate} Ngày") != DialogResult.Yes)
                return;

            var crNode = tl_GiaoViecDuAn.FocusedNode;
            var row = tl_GiaoViecDuAn.GetFocusedRow() as CongViecChaChartViewModel;

            string dbString;
            if (crNode.Level == 0)
            {
                dbString = $"SELECT * " +
                    $"FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} WHERE CodeDVL = '{row.CodeDVL}' AND (NgayBatDauThiCong IS NOT NULL)";
            }
            else if (crNode.Level == 1)
            {
                dbString = $"SELECT * " +
                    $"FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} WHERE CodeDVN = '{row.CodeDVN}' AND (NgayBatDauThiCong IS NOT NULL)";
            }
            else return;
            List<CongViecChaChartViewModel> chas = DataProvider.InstanceTHDA.ExecuteQueryModel<CongViecChaChartViewModel>(dbString);

            WaitFormHelper.ShowWaitForm("Đang cập nhật");
            List<string> updates = new List<string>();

            foreach (var cha in chas)
            {
                //List<string> sets = new List<string>();
                //if (cha.NgayBatDauThiCong.HasValue)
                //{
                //    sets.Add($"NgayBatDauThiCong = '{cha.NgayBatDauThiCong.Value.AddDays(offsetDate)}'");
                //}

                dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET NgayBatDauThiCong = '{cha.NgayBatDauThiCong.Value.AddDays(offsetDate).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE CodeCongViecCha = '{cha.CodeCongViecCha}'";
                updates.Add(dbString);
            }

            if (updates.Any())
            {
                DataProvider.InstanceTHDA.ExecuteNonQuery(string.Join(";\r\n", updates));
            }
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Đã cập nhật!");
            fcn_LoadGiaoViecDuAn();

        }

        private void fcn_handle_DoiNgayKetThuc(object sender, EventArgs args)
        {
            var rs = DevExpress.XtraEditors.XtraInputBox.Show("Nhập số ngày kết thúc bạn muốn thêm (-: Lùi ngày, +: Thêm ngày)", "Nhập số lần thi công", "1");
            int offsetDate = 0;
            if (rs != String.Empty)
            {
                if (int.TryParse(rs, out offsetDate))
                {
                    if (offsetDate == 0)
                    {
                        MessageShower.ShowInformation("Vui lòng nhập số khác 0");
                        return;
                    }
                }
                else
                {
                    MessageShower.ShowInformation("Vui lòng nhập số nguyên");
                    return;
                }
            }
            else
            {
                MessageShower.ShowInformation("Đã hủy thao tác");
                return;
            }

            if (MessageShower.ShowYesNoQuestion($"Bạn có chắc chắn muốn dời ngày thêm {offsetDate} Ngày") != DialogResult.Yes)
                return;

            var crNode = tl_GiaoViecDuAn.FocusedNode;
            var row = tl_GiaoViecDuAn.GetFocusedRow() as CongViecChaChartViewModel;

            string dbString;
            if (crNode.Level == 0)
            {
                dbString = $"SELECT * " +
                    $"FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} WHERE CodeDVL = '{row.CodeDVL}' AND (NgayKetThucThiCong IS NOT NULL)";
            }
            else if (crNode.Level == 1)
            {
                dbString = $"SELECT * " +
                    $"FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} WHERE CodeDVN = '{row.CodeDVN}' AND (NgayKetThucThiCong IS NOT NULL)";
            }
            else return;
            List<CongViecChaChartViewModel> chas = DataProvider.InstanceTHDA.ExecuteQueryModel<CongViecChaChartViewModel>(dbString);

            WaitFormHelper.ShowWaitForm("Đang cập nhật");
            List<string> updates = new List<string>();

            foreach (var cha in chas)
            {
                //List<string> sets = new List<string>();

                //if (cha.NgayKetThucThiCong.HasValue)
                //{
                //    sets.Add($"NgayKetThucThiCong = '{cha.NgayKetThucThiCong.Value.AddDays(offsetDate)}'");
                //}

                dbString = $"UPDATE {GiaoViec.TBL_CONGVIECCHA} SET NgayKetThucThiCong = '{cha.NgayKetThucThiCong.Value.AddDays(offsetDate).ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE CodeCongViecCha = '{cha.CodeCongViecCha}'";
                updates.Add(dbString);
            }

            if (updates.Any())
            {
                DataProvider.InstanceTHDA.ExecuteNonQuery(string.Join(";\r\n", updates));
            }
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Đã cập nhật!");
            fcn_LoadGiaoViecDuAn();

        }

        private void XuatKeHoachTaiChinhToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.youtube.com/watch?v=_Z7ISSVTuP0");
        }

        private void PhapLyQuanLyDuAnToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.youtube.com/watch?v=AMYfXty1wIU");
        }

        private void PhanTangPhanTuyenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.youtube.com/watch?v=57Y_7Eu-lp8");
        }

        private void spsheet_Thongtinchinh_CellBeginEdit(object sender, SpreadsheetCellCancelEventArgs e)
        {
            var ws = spsheet_Thongtinchinh.ActiveWorksheet;
            var sheetName = spsheet_Thongtinchinh.ActiveWorksheet.Name;
            if (sheetName == "Khối lượng phân khai")
            {
                //Worksheet ws = spsheet_Thongtinchinh.ActiveWorksheet;
                CellRange RangeData = ws.Range[MyConstant.TBL_QUYETTHONGTIN];
                if (!RangeData.Contains(e.Cell))
                {
                    e.Cancel = true;
                }
                Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
                string MaHieu = ws.Rows[e.RowIndex][Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC || MaHieu == MyConstant.CONST_TYPE_NHOM
                    || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.TYPEROW_HTPhanTuyen)
                    e.Cancel = true;
                bool Code = ws.Rows[e.RowIndex][Name[TDKH.COL_Code]].Value.IsEmpty;
                if (Code)
                    e.Cancel = true;


            }
            else if (sheetName == "Thông tin Dự án - Công trình" && ws.Range.GetColumnNameByIndex(e.ColumnIndex) == MyConstant.COL_DONVITRUCTHUOC)
            {
                e.Cancel = true;

                foreach (var rangeName in MyConstant.RANGES_DonViThucHienNCC)
                {
                    if (!ws.Range[rangeName].Contains(e.Cell))
                        continue;

                    bool val = (e.Cell.Value == true) ? false : true;
                    e.Cell.SetValue(val);

                    int valint = val ? 1 : 0;
                    string codeCT = ws.Rows[e.RowIndex][MyConstant.COL_CODE].Value.ToString();

                    string dbString = $"UPDATE {rangeName} SET DonViTrucThuoc = '{valint}' WHERE Code = '{codeCT}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);

                }


                return;
            }
        }

        private void gc_Tiendo_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
            //if (e.Column.FieldName != "STT")
            //    return;
            //if (object.Equals(e.CellValue,(long)0))
            //{
            //    e.Appearance.FillRectangle(e.Cache, e.Bounds);
            //    e.Handled = true;

            //}
        }

        private void bt_xuatGVDA_Click(object sender, EventArgs e)
        {
            saveFileDialog.Filter = "Execl files (*.xlsx)|*.xlsx";
            saveFileDialog.FileName = $"Giao việc dự án - {DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss")}.xlsx";
            saveFileDialog.FilterIndex = 0;
            saveFileDialog.RestoreDirectory = true;
            saveFileDialog.CreatePrompt = true;
            saveFileDialog.Title = "Xuất giao việc dự án";
            var crDVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH;

            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {

                WaitFormHelper.ShowWaitForm("Đang xuất file");

                string dbString = $"SELECT * " +
                    $"FROM {GiaoViec.view_ThongTinGiaoViecDuAnAll} cha\r\n" +
                        $"ORDER BY SortIdDVL, SortIdDVN, SortId";
                DataTable dt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                DataTable dtData = DataTableCreateHelper.GiaoViecDuAn();

                Workbook wb = new Workbook();
                FileHelper.fcn_spSheetStreamDocument(wb, $@"{BaseFrom.m_templatePath}\FileExcel\13.bKeHoachGiaoViecDuAn.xlsx");
                var ws = wb.Worksheets[0];
                var range = ws.Range["DanhSachCongViec"];

                var grsDvl = dt.AsEnumerable().GroupBy(x => x["CodeDVL"].ToString());
                var dic = MyFunction.fcn_getDicOfColumn(range);
                var crRowInd = range.TopRowIndex;
                var crRowTongInd = range.TopRowIndex;

                var fstRow = dtData.NewRow();
                dtData.Rows.Add(fstRow);
                fstRow[GiaoViec.COL_STT] = "Dự án";
                fstRow[GiaoViec.COL_TenCongViec] = slke_ThongTinDuAn.Text;
                //fstRow[GiaoViec.COL_TypeRow] = MyConstant.TYPEROW_CongTrinh;
                foreach (var grDvl in grsDvl)
                {
                    var newDvl = dtData.NewRow();
                    int crRowDVLInd = ++crRowInd;
                    dtData.Rows.Add(newDvl);
                    var fst_DauViec = grDvl.First();

                    newDvl[GiaoViec.COL_STT] = "*";
                    newDvl[GiaoViec.COL_TenCongViec] = fst_DauViec["DVL"];
                    newDvl[GiaoViec.COL_TypeRow] = MyConstant.TYPEROW_CongTrinh;
                    newDvl[GiaoViec.COL_RowCha] = crRowTongInd + 1;

                    var grsDvn = grDvl.AsEnumerable().GroupBy(x => x["CodeDVN"].ToString());

                    foreach (var grDvn in grsDvn)
                    {
                        var newDvn = dtData.NewRow();
                        dtData.Rows.Add(newDvn);
                        var fstDvn = grDvl.First();

                        int crRowDVNInd = ++crRowInd;


                        newDvn[GiaoViec.COL_STT] = "+";
                        newDvn[GiaoViec.COL_TenCongViec] = fstDvn["DVN"];
                        newDvn[GiaoViec.COL_TypeRow] = MyConstant.TYPEROW_HangMuc;
                        newDvn[GiaoViec.COL_RowCha] = crRowDVLInd + 1;

                        int STT = 0;
                        foreach (var ctac in grDvn.Where(x => x["CodeCongViecCha"] != null))
                        {
                            ++crRowInd;

                            var newCt = dtData.NewRow();
                            dtData.Rows.Add(newCt);


                            newCt[GiaoViec.COL_STT] = ++STT;
                            //newCt[GiaoViec.COL_CodeCT] = ctac["CodeCongViecCha"].ToString();

                            newCt[GiaoViec.COL_TypeRow] = MyConstant.TYPEROW_CVCha;
                            newCt[GiaoViec.COL_RowCha] = crRowDVNInd + 1;


                            newCt[GiaoViec.COL_TenCongViec] = ctac[GiaoViec.COL_TenCongViec];
                            newCt[GiaoViec.COL_KLKeHoach] = ctac[GiaoViec.COL_KLKeHoach];
                            newCt[GiaoViec.COL_ThucHien] = ctac[GiaoViec.COL_ThucHien];
                            newCt[GiaoViec.COL_PhuTrach] = ctac[GiaoViec.COL_PhuTrach];
                            newCt[GiaoViec.COL_HoTro] = ctac[GiaoViec.COL_HoTro];
                            newCt[GiaoViec.COL_CoQuanLienHe] = ctac[GiaoViec.COL_CoQuanLienHe];
                            newCt[GiaoViec.COL_NguoiLienHe] = ctac[GiaoViec.COL_NguoiLienHe];
                            newCt[GiaoViec.COL_NgayBatDauThiCong] = ctac[GiaoViec.COL_NgayBatDauThiCong];
                            newCt[GiaoViec.COL_NgayKetThucThiCong] = ctac[GiaoViec.COL_NgayKetThucThiCong];
                            newCt[GiaoViec.COL_SoNgay] = $"{MyConstant.PrefixFormula}{dic[GiaoViec.COL_NgayKetThucThiCong]}{crRowInd + 1} - {dic[GiaoViec.COL_NgayBatDauThiCong]}{crRowInd + 1}";
                            newCt[GiaoViec.COL_NguoiThucHien] = ctac[GiaoViec.COL_NguoiThucHien];
                        }
                    }
                }


                ws.Rows.Insert(range.BottomRowIndex, dtData.Rows.Count, RowFormatMode.FormatAsNext);
                ws.Import(dtData, false, range.TopRowIndex, 0);
                range = ws.Range["DanhSachCongViec"];
                SpreadsheetHelper.ReplaceAllFormulaAfterImport(range);
                SpreadsheetHelper.FormatRowsInRange(range, dic[GiaoViec.COL_TypeRow], dic[GiaoViec.COL_RowCha]);
                DinhMucHelper.fcn_TDKH_CapNhatRowChaConTienDoKeHoach(ws.Rows[range.TopRowIndex], isCalculate: false, dic: dic); //(range, dic[GiaoViec.COL_TypeRow]);
                ws.Rows.Remove(3, 2);

                //for (int i = range.RightColumnIndex; i >= range.LeftColumnIndex; i--)
                //{
                //    if (!ws.Columns[i].Visible)
                //        ws.Columns.Remove(i);
                //}

                wb.SaveDocument(saveFileDialog.FileName, DevExpress.Spreadsheet.DocumentFormat.OpenXml);
                wb.Dispose();
                WaitFormHelper.CloseWaitForm();
                if (MessageShower.ShowYesNoQuestion("Đã xuất! Bạn có muốn mở file luôn không?") == DialogResult.Yes)
                {
                    Process.Start(saveFileDialog.FileName);
                }


            }
        }

        private void sb_DocPhanKhai_Click(object sender, EventArgs e)
        {
            string PathSave = "";
            openFileDialog.DefaultExt = "xls";
            openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
            openFileDialog.Title = "Chọn file Excel";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                PathSave = openFileDialog.FileName;
            }
            else
                return;

            WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu công tác");
            SpreadsheetControl Spread = new SpreadsheetControl();
            Spread.LoadDocument(PathSave);
            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            string[] CodeHM = dtHM.AsEnumerable().Select(x => x["Code"].ToString()).ToArray();
            if (!Spread.Document.Worksheets.ToList().Select(x => x.Name).ToList().Contains("Khối lượng phân khai"))
            {
                MessageShower.ShowError("Vui lòng chọn đúng định dạng File MẪU PHÂN KHAI!!!!!!");
                WaitFormHelper.CloseWaitForm();
                return;
            }
            DialogResult rs = MessageShower.ShowYesNoQuestion("Dữ liệu khối lượng và đơn giá nhà thầu phụ sẽ thay đổi bạn có muốn tiếp tục????");
            if (rs == DialogResult.No)
            {
                WaitFormHelper.CloseWaitForm();

                return;
            }
            rs = MessageShower.ShowYesNoQuestion("Bạn có muốn cập nhập lại khối lượng và đơn giá dự thầu và Nhà thầu chính????");
            bool DuThau = rs == DialogResult.Yes ? true : false;
            rs = MessageShower.ShowYesNoQuestion("Bạn có muốn đọc lại STT Đọc vào và STT Người Dùng????");
            bool DocVao = rs == DialogResult.Yes ? true : false;

            rs = MessageShower.ShowYesNoQuestion("Bạn có muốn làm tròn số liệu lấy vào????");
            bool LamTron = rs == DialogResult.Yes ? true : false;
            Worksheet ws = Spread.Document.Worksheets["Khối lượng phân khai"];
            Spread.Document.History.IsEnabled = false;
            CellRange RangeData = ws.Range[MyConstant.TBL_QUYETTHONGTIN];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            List<DonViThucHien> DVTH = (ctrl_DonViThucHienDuAnTDKH.DataSource) as List<DonViThucHien>;
            DonViThucHien NhaThauChinh = DVTH.Where(x => x.IsGiaoThau).SingleOrDefault();
            List<DonViThucHien> ThauPhu = DVTH.Where(x => !x.IsGiaoThau).ToList();
            string MaHieu = "", CodeCT = "", dbString = "", CodeCongTac = "", CodeNhom = "", TenCongTac = "", NewCode = "";
            double KL = 0, DonGia = 0, DonGiaDuThau = 0, KLNhom = 0, DGNhom = 0;
            DateTime NBD, NKT;
            string CodeNhomOld = "", CodeDgold = "", CodeNewNhom = "";
            List<string> CodeCTac = new List<string>();
            Dictionary<string, string> CodeNhaThau_NhomNew = new Dictionary<string, string>();
            List<string> lsCodeNhom = new List<string>();
            List<string> lsCodeDg = new List<string>();
            if (!Name.Keys.Contains($"KL_{NhaThauChinh.Code}"))
            {
                MessageShower.ShowError("Bạn đang chọn không đúng MẪU PHÂN KHAI dự án hiện tại, Vui lòng chọn lại File khác!!!!!!");
                WaitFormHelper.CloseWaitForm();

                return;
            }
            Spread.BeginUpdate();
            for (int i = RangeData.TopRowIndex; i <= RangeData.BottomRowIndex; i++)
            {
                Row Crow = ws.Rows[i];
                if (!Crow.Visible)
                    continue;
                bool Code = Crow[Name[TDKH.COL_Code]].Value.IsEmpty;
                if (Code)
                    continue;
                MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                CodeNhom = Crow[Name["CodeNhom"]].Value.ToString();
                if (MaHieu == MyConstant.CONST_TYPE_NHOM)
                {
                    CodeNhom = Crow[Name["Code"]].Value.ToString();
                    dbString = $"SELECT * FROM {TDKH.TBL_NhomCongTac} WHERE Code = '{CodeNhom}'";
                    DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    DataRow Update = dtNhom.Rows[0];
                    //double KLNhom = double.Parse(Crow[Name[$"KL_{NhaThauChinh.Code}"]].Value.ToString());
                    double.TryParse(Crow[Name[$"KL_{NhaThauChinh.Code}"]].Value.ToString(), out KLNhom);
                    if (KLNhom > 0)
                        Update["KhoiLuongKeHoach"] = Update["KhoiLuongHopDongChiTiet"] = KLNhom;
                    double.TryParse(Crow[Name[$"DG_{NhaThauChinh.Code}"]].Value.ToString(), out DGNhom);
                    //double DGNhom = double.Parse(Crow[Name[$"DG_{NhaThauChinh.Code}"]].Value.ToString());
                    if (DGNhom > 0)
                        Update["DonGia"] = DGNhom;
                    if (DocVao)
                    {
                        TDKH_GhiChuBoSungJson JsonGhiChu = new TDKH_GhiChuBoSungJson();
                        JsonGhiChu.STT = Crow[Name[TDKH.COL_STTDocVao]].Value.ToString();
                        JsonGhiChu.STTND = Crow[Name[TDKH.COL_STTND]].Value.ToString();
                        JsonGhiChu.CodeDanhMucCongTac = CodeNhom;
                        var encryptedStr = JsonConvert.SerializeObject(JsonGhiChu);
                        Update["GhiChuBoSungJson"] = encryptedStr;
                    }
                    DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNhom, TDKH.TBL_NhomCongTac);
                    continue;

                }
                if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC
                    || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.TYPEROW_HTPhanTuyen)
                    continue;
                CodeCT = Crow[Name[TDKH.COL_Code]].Value.ToString();
                CodeCongTac = Crow[Name["CodeCongTac"]].Value.ToString();
                TenCongTac = Crow[Name["TenCongTac"]].Value.ToString();
                NBD = DateTime.TryParse(Crow[Name["NgayBatDau"]].Value.ToString(), out NBD) ? NBD : DateTime.Now;
                NKT = DateTime.TryParse(Crow[Name["NgayKetThuc"]].Value.ToString(), out NKT) ? NKT : DateTime.Now.AddDays(30);
                WaitFormHelper.ShowWaitForm($"{i}.{MaHieu}_{TenCongTac}");
                dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"NgayBatDau\"='{NBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'," +
                    $"\"NgayKetThuc\"='{NKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}' WHERE \"Code\"='{CodeCT}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                if (DocVao)
                {
                    TDKH_GhiChuBoSungJson JsonGhiChu = new TDKH_GhiChuBoSungJson();
                    JsonGhiChu.STT = Crow[Name[TDKH.COL_STTDocVao]].Value.ToString();
                    JsonGhiChu.STTND = Crow[Name[TDKH.COL_STTND]].Value.ToString();
                    JsonGhiChu.CodeDanhMucCongTac = CodeCongTac;
                    var encryptedStr = JsonConvert.SerializeObject(JsonGhiChu);
                    dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET \"GhiChuBoSungJson\"='{encryptedStr}' WHERE \"Code\"='{CodeCongTac}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                }
                if (DuThau)
                {
                    double.TryParse(Crow[Name[$"DG_{NhaThauChinh.Code}"]].Value.ToString(), out DonGiaDuThau);
                    double.TryParse(Crow[Name["DonGiaDuThau"]].Value.ToString(), out DonGia);
                    double.TryParse(Crow[Name[$"KL_{NhaThauChinh.Code}"]].Value.ToString(), out KL);
                    if (LamTron)
                    {
                        DonGiaDuThau = Math.Round(DonGiaDuThau, SharedControls.Error);
                        DonGia = Math.Round(DonGia, SharedControls.Error);
                        KL = Math.Round(KL, SharedControls.Error);
                    }
                    dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"DonGia\"='{DonGia}',\"DonGiaDuThau\"='{DonGiaDuThau}'," +
                                $"\"KhoiLuongToanBo\"='{KL}' WHERE \"Code\"='{CodeCT}'";
                    DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    CodeCTac.Add(CodeCT);
                }
                int.TryParse(Crow[Name[TDKH.COL_RowCha]].Value.ToString(), out int RowCha);
                foreach (DonViThucHien item in ThauPhu)
                {
                    double.TryParse(Crow[Name[$"KL_{item.Code}"]].Value.ToString(), out KL);
                    double.TryParse(Crow[Name[$"DG_{item.Code}"]].Value.ToString(), out DonGia);
                    if (LamTron)
                    {
                        DonGia = Math.Round(DonGia, SharedControls.Error);
                        KL = Math.Round(KL, SharedControls.Error);
                    }
                    //KL = LamTron ? Math.Round(double.Parse(Crow[Name[$"KL_{item.Code}"]].Value.ToString()), 2) :double.Parse(Crow[Name[$"KL_{item.Code}"]].Value.ToString());
                    //DonGia = LamTron ? Math.Round(double.Parse(Crow[Name[$"DG_{item.Code}"]].Value.ToString()), 2) : double.Parse(Crow[Name[$"DG_{item.Code}"]].Value.ToString());
                    dbString = $"SELECT \"Code\",\"KhoiLuongToanBo\",\"CodeNhom\",\"DonGiaThiCong\" FROM \"{TDKH.TBL_ChiTietCongTacTheoKy}\" WHERE \"CodeCongTac\" = '{CodeCongTac}' " +
                    $"AND {item.ColCodeFK}='{item.Code}' ";
                    DataTable CT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                    if (CT.Rows.Count == 0)
                    {///Insert
                        if (KL == 0)
                            continue;
                        dbString = $"SELECT * FROM \"{TDKH.TBL_ChiTietCongTacTheoKy}\" WHERE \"Code\" = '{CodeCT}' ";
                        CT = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                        DataRow row = CT.Rows[0];
                        dbString = $"SELECT * FROM {TDKH.TBL_ChiTietCongTacCon} WHERE \"CodeCongTacCha\"='{CodeCT}'";
                        DataTable dtCongTacCon = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        dbString = $"SELECT * FROM {TDKH.Tbl_HaoPhiVatTu} WHERE \"CodeCongTac\"='{CodeCT}'";
                        DataTable dtHaoPhi = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                        DataTable dtConMoi = dtCongTacCon.Clone();
                        DataTable dtHaoPhiMoi = dtHaoPhi.Clone();
                        DataTable CTTheoKy = CT.Clone();
                        if (!string.IsNullOrEmpty(CodeNhom) && !lsCodeNhom.Contains($"{CodeNhom}_{item.Code}"))
                        {
                            dbString = $"SELECT * FROM {TDKH.TBL_NhomCongTac} WHERE Code = '{CodeNhom}'";
                            DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                            string newGuid = Guid.NewGuid().ToString();
                            DataRow newRow = dtNhom.NewRow();
                            newRow.ItemArray = dtNhom.Rows[0].ItemArray;
                            newRow["Code"] = newGuid;
                            //double KLNhom = ws.Rows[RowCha - 1][Name[$"KL_{item.Code}"]].Value.NumericValue;
                            double.TryParse(ws.Rows[RowCha - 1][Name[$"KL_{item.Code}"]].Value.ToString(), out KLNhom);
                            if (KLNhom > 0)
                                newRow["KhoiLuongKeHoach"] = newRow["KhoiLuongHopDongChiTiet"] = KLNhom;
                            double.TryParse(ws.Rows[RowCha - 1][Name[$"DG_{item.Code}"]].Value.ToString(), out DGNhom);
                            //double DGNhom = ws.Rows[RowCha - 1][Name[$"DG_{item.Code}"]].Value.NumericValue;
                            if (DGNhom > 0)
                                newRow["DonGia"] = newRow["DonGiaThiCong"] = DGNhom;
                            dtNhom.Rows.Add(newRow);
                            row["CodeNhom"] = newGuid;
                            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNhom, TDKH.TBL_NhomCongTac);
                            if (CodeNhom != CodeNhomOld)
                            {
                                CodeNhaThau_NhomNew.Clear();
                                lsCodeNhom.Clear();
                            }
                            CodeNhomOld = CodeNhom;
                            lsCodeNhom.Add($"{CodeNhom}_{item.Code}");
                            CodeNhaThau_NhomNew.Add(item.Code, newGuid);
                        }
                        else if (lsCodeNhom.Contains($"{CodeNhom}_{item.Code}") && CodeNhaThau_NhomNew.Count() > 0)
                        {
                            row["CodeNhom"] = CodeNhaThau_NhomNew[item.Code];
                        }
                        else if (CodeNhom == "")
                        {
                            CodeNhaThau_NhomNew.Clear();
                            lsCodeNhom.Clear();
                        }
                        NewCode = Guid.NewGuid().ToString();
                        CodeCTac.Add(NewCode);
                        row["Code"] = NewCode;
                        row["CodeNhaThau"] = row["CodeNhaThauPhu"] = row["CodeToDoi"] = null;
                        row[item.ColCodeFK] = item.Code;
                        row["KhoiLuongToanBo"] = row["KhoiLuongHopDongChiTiet"] = KL;
                        if (DonGia != 0)
                            row["DonGiaThiCong"] = DonGia;
                        row["KhoiLuongToanBo_Iscongthucmacdinh"] = DBNull.Value;
                        CTTheoKy.Rows.Add(row.ItemArray);
                        DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(CTTheoKy, TDKH.TBL_ChiTietCongTacTheoKy);
                        foreach (DataRow drCon in dtCongTacCon.Rows)
                        {
                            drCon["Code"] = Guid.NewGuid().ToString();
                            drCon["CodeCongTacCha"] = row["Code"];

                            if (drCon["CodeNhom"] != DBNull.Value && !lsCodeDg.Contains(drCon["CodeNhom"].ToString()))
                            {
                                string codeNhomDg = drCon["CodeNhom"].ToString();
                                string newGuid = Guid.NewGuid().ToString();

                                dbString = $"SELECT * FROM {TDKH.TBL_NhomDienGiai} WHERE Code = '{codeNhomDg}'";
                                DataTable dtNhomDg = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

                                DataRow newRow = dtNhomDg.NewRow();
                                newRow.ItemArray = dtNhomDg.Rows[0].ItemArray;
                                newRow["Code"] = newGuid;
                                dtNhomDg.Rows.Add(newRow);
                                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNhomDg, TDKH.TBL_NhomDienGiai);
                                lsCodeDg.Add(newGuid);
                                drCon["CodeNhom"] = newGuid;
                                CodeDgold = newGuid;
                            }
                            else if (CodeDgold != "")
                                drCon["CodeNhom"] = CodeDgold;
                            dtConMoi.Rows.Add(drCon.ItemArray);
                        }
                        foreach (DataRow drHaoPhi in dtHaoPhi.Rows)
                        {
                            drHaoPhi["Code"] = Guid.NewGuid().ToString();
                            drHaoPhi["CodeCongTac"] = row["Code"];
                            dtHaoPhiMoi.Rows.Add(drHaoPhi.ItemArray);
                        }
                        DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtConMoi, TDKH.TBL_ChiTietCongTacCon);
                        DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtHaoPhiMoi, TDKH.Tbl_HaoPhiVatTu);
                        //TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { NewCode });
                    }
                    else
                    {
                        CodeCT = CT.Rows[0][0].ToString();
                        double KLNT = double.Parse(CT.Rows[0][1].ToString());
                        double DGNT = double.Parse(CT.Rows[0][3].ToString());
                        if (!string.IsNullOrEmpty(CodeNhom) && !lsCodeNhom.Contains($"{CodeNhom}_{item.Code}"))
                        {
                            if (CT.Rows[0]["CodeNhom"] != DBNull.Value)
                            {
                                dbString = $"SELECT * FROM {TDKH.TBL_NhomCongTac} WHERE Code = '{CT.Rows[0]["CodeNhom"]}'";
                                DataTable dtNhom = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                                DataRow Update = dtNhom.Rows[0];
                                //double KLNhom = ws.Rows[RowCha - 1][Name[$"KL_{item.Code}"]].Value.NumericValue;
                                double.TryParse(ws.Rows[RowCha - 1][Name[$"KL_{item.Code}"]].Value.ToString(), out KLNhom);
                                if (KLNhom > 0)
                                    Update["KhoiLuongKeHoach"] = Update["KhoiLuongHopDongChiTiet"] = KLNhom;
                                double.TryParse(ws.Rows[RowCha - 1][Name[$"DG_{item.Code}"]].Value.ToString(), out DGNhom);
                                //double DGNhom = ws.Rows[RowCha - 1][Name[$"DG_{item.Code}"]].Value.NumericValue;
                                if (DGNhom > 0)
                                    Update["DonGia"] = DGNhom;
                                if (DocVao)
                                {

                                    TDKH_GhiChuBoSungJson JsonGhiChu = new TDKH_GhiChuBoSungJson();
                                    JsonGhiChu.STT = ws.Rows[RowCha - 1][Name[TDKH.COL_STTDocVao]].Value.ToString();
                                    JsonGhiChu.STTND = ws.Rows[RowCha - 1][Name[TDKH.COL_STTND]].Value.ToString();
                                    JsonGhiChu.CodeDanhMucCongTac = CodeNhom;
                                    var encryptedStr = JsonConvert.SerializeObject(JsonGhiChu);
                                    Update["GhiChuBoSungJson"] = encryptedStr;
                                }
                                DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtNhom, TDKH.TBL_NhomCongTac);
                                if (CodeNhom != CodeNhomOld)
                                {
                                    CodeNhaThau_NhomNew.Clear();
                                    lsCodeNhom.Clear();
                                }
                                CodeNhomOld = CodeNhom;
                                lsCodeNhom.Add($"{CodeNhom}_{item.Code}");
                            }

                        }

                        if (KL == KLNT && DGNT == DonGia)
                            continue;
                        dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"KhoiLuongToanBo\"='{KL}',\"DonGiaThiCong\"='{DonGia}' WHERE \"Code\"='{CodeCT}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                        //TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(new string[] { CodeCT });
                    }
                }
            }
            WaitFormHelper.ShowWaitForm("Đang tính lại khối lượng toàn bộ dự án");
            TDKHHelper.TinhLaiToanBoKhoiLuongKeHoach(CodeCTac.ToArray());
            TDKHHelper.CapNhatAllVatTuHaoPhi(CodesHangMuc: CodeHM);
            Spread.EndUpdate();
            Spread.Document.History.IsEnabled = true;
            if (spsheet_Thongtinchinh.ActiveSheet.Name == "Khối lượng phân khai")
            {
                WaitFormHelper.ShowWaitForm("Đang tải dữ liệu phân khai");
                //Fcn_LoadCongTacPhanKhai("Khối lượng phân khai");
                Fcn_LoadPhanKhaiNew();
            }
            fcn_LoadCongTrinhHangMuc();
            WaitFormHelper.CloseWaitForm();
        }

        private void sửaLỗiThứTựHạngMụcToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!BaseFrom.allPermission.HaveInitProjectPermission)
            {
                MessageShower.ShowInformation("Tính năng này chỉ dùng cho Admin");
                return;
            }

            var ret = MessageShower.ShowYesNoQuestion("Vùi lòng cập nhật dữ liệu dự án mới nhất từ server về trước khi thực hiện thao tác này để tránh trường hợp bị đè dữ liệu mới!");

            if (ret != DialogResult.Yes)
                return;

            WaitFormHelper.ShowWaitForm("Đang cập nhật!");
            string dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINCONGTRINH} WHERE CodeDuAn = '{slke_ThongTinDuAn.EditValue}' ORDER BY SortId";
            DataTable dtCtrinh = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            dbString = $"SELECT hm.* FROM {MyConstant.TBL_THONGTINHANGMUC} hm\r\n" +
                $"JOIN {MyConstant.TBL_THONGTINCONGTRINH} ctr\r\n" +
                $"ON hm.CodeCongTrinh = ctr.Code\r\n" +
                $"WHERE ctr.CodeDuAn = '{slke_ThongTinDuAn.EditValue}' ORDER BY hm.SortId";
            DataTable dtHms = DataProvider.InstanceTHDA.ExecuteQuery(dbString);

            int sortIdCTrinh = 0;
            foreach (DataRow dr in dtCtrinh.Rows)
            {
                if ((long)dr["SortId"] != ++sortIdCTrinh)
                    dr["SortId"] = sortIdCTrinh;

                var drsHM = dtHms.AsEnumerable().Where(x => x["CodeCongTrinh"].ToString() == dr["Code"].ToString());

                int sortIdHMuc = 0;
                foreach (var drHM in drsHM)
                {
                    if ((long)drHM["SortId"] != ++sortIdHMuc)
                        drHM["SortId"] = sortIdHMuc;
                }
            }

            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtCtrinh, MyConstant.TBL_THONGTINCONGTRINH);
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtHms, MyConstant.TBL_THONGTINHANGMUC);
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Đã cập nhật!");
            fcn_LoadCongTacDoBoc();
        }

        private void navigationPane1_StateChanged(object sender, StateChangedEventArgs e)
        {
            if (e.State == NavigationPaneState.Default)
            {
                if (navigationPane1.SelectedPage == np_BieuDoTaiChinh)
                {
                    WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu");
                    DataTable dtCT, dtHM, dtCongTacTheoKy = null;
                    List<KLHN> dtHangNgay = new List<KLHN>();
                    bool isCongTac = cbo_LoaiTienDo.SelectedIndex == 0;
                    string loaiVatTu = (isCongTac) ? null : cbo_HienThiTienDo.Text;
                    DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
                    DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                    if (DVTH.Table == MyConstant.TBL_THONGTINNHATHAU)
                    {
                        DinhMucHelper.fcn_CTacTheoKyNew(loaiVatTu, out DataTable dtCongTacTheoKy_New, out List<KLHN> dtHangNgay_New, true);
                        dtHangNgay = dtHangNgay_New;
                    }
                    else
                    {
                        DinhMucHelper.fcn_CTacTheoKyNew(loaiVatTu, out DataTable dtCongTacTheoKy_New, out List<KLHN> dtHangNgay_New, false);
                        dtHangNgay = dtHangNgay_New;
                    }
                    #region Vẽ biểu đồ tài chính
                    ctrl_ChartKhoiLuongThanhTien.PushData(dtHangNgay, DVTH.IsGiaoThau);
                    #endregion
                    WaitFormHelper.CloseWaitForm();
                }
                else if (navigationPane1.SelectedPage == np_NhanCong)
                {
                    WaitFormHelper.ShowWaitForm("Đang phân tích dữ liệu nhân công");
                    LoadBieuDoNhanCong();
                    WaitFormHelper.CloseWaitForm();
                }
            }
        }
        private void Args_Showing_XuatVT(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Appearance.FontStyleDelta = FontStyle.Bold;
            e.Form.Appearance.FontSizeDelta = 2;
            foreach (var control in e.Form.Controls)
            {
                SimpleButton button = control as SimpleButton;
                if (button != null)
                {
                    button.ImageOptions.SvgImageSize = new Size(16, 16);
                    // button.Height = 25;
                    switch (button.DialogResult)
                    {
                        case DialogResult.No:
                            button.ImageOptions.SvgImage = svgImageCollection1[0];
                            button.Text = "Xuất sheet hiện tại";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                e.Form.Close();
                                XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
                                string PathSave = "";
                                if (Xtra.ShowDialog() == DialogResult.OK)
                                {
                                    PathSave = Xtra.SelectedPath;
                                }
                                else
                                    return;


                                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                                string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
                                Workbook wb = spsheet_TD_KH_LapKeHoach.Document.Clone();
                                var crName = spsheet_TD_KH_LapKeHoach.ActiveWorksheet.Name;
                                foreach (var ws in wb.Worksheets.ToArray())
                                {
                                    if (ws.Name != crName)
                                    {
                                        wb.Worksheets.Remove(ws);
                                    }
                                }
                                string TenDuAn = Regex.Replace(slke_ThongTinDuAn.Text, $@"(\-|\,|\\|\.|\+|\""|\;|\:)+", string.Empty);
                                wb.SaveDocument(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx"));
                                DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                if (dialogResult == DialogResult.Yes)
                                {
                                    Process.Start(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx"));
                                }
                            };
                            break;
                        case DialogResult.OK:
                            button.ImageOptions.SvgImage = svgImageCollection1[5];
                            button.Text = "Xuất Full";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                e.Form.Close();
                                XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
                                string PathSave = "";
                                if (Xtra.ShowDialog() == DialogResult.OK)
                                {
                                    PathSave = Xtra.SelectedPath;
                                }
                                else
                                    return;
                                TDKHHelper.LoadTongHopVatTuKeHoachBrief();
                                TDKHHelper.LoadVatTuFull((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_VatLieu));
                                TDKHHelper.LoadVatTuFull((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_NhanCong));
                                TDKHHelper.LoadVatTuFull((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_MayThiCong));
                                TDKHHelper.LoadCongKinhPhiTienDo();
                                TDKHHelper.LoadCongTacDoBoc();
                                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                                string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
                                Workbook wb = spsheet_TD_KH_LapKeHoach.Document.Clone();
                                Worksheet ws = wb.Worksheets["Đo bóc chuẩn"];
                                Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(ws.Range["DoBocChuan"]);
                                ws.Columns[NAME_COL["PhanTichVatTu"]].Visible = false;
                                ws.Columns[NAME_COL["HasHopDongAB"]].Visible = false;
                                string TenDuAn = Regex.Replace(slke_ThongTinDuAn.Text, $@"(\-|\,|\\|\.|\+|\""|\;|\:)+", string.Empty);
                                wb.SaveDocument(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx"));
                                DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                if (dialogResult == DialogResult.Yes)
                                {
                                    Process.Start(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx"));
                                }
                            };
                            break;
                        case DialogResult.Yes:
                            button.ImageOptions.SvgImage = svgImageCollection1[4];
                            button.Text = "Xuất Bảng rút gọn";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                e.Form.Close();
                                XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
                                string PathSave = "";
                                if (Xtra.ShowDialog() == DialogResult.OK)
                                {
                                    PathSave = Xtra.SelectedPath;
                                }
                                else
                                    return;
                                TDKHHelper.LoadTongHopVatTuKeHoachBrief();
                                TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_VatLieu));
                                TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_NhanCong));
                                TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_MayThiCong));
                                TDKHHelper.LoadCongKinhPhiTienDo();
                                TDKHHelper.LoadCongTacDoBoc();
                                DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
                                string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
                                Workbook wb = spsheet_TD_KH_LapKeHoach.Document.Clone();
                                Worksheet ws = wb.Worksheets["Đo bóc chuẩn"];
                                Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(ws.Range["DoBocChuan"]);
                                ws.Columns[NAME_COL["PhanTichVatTu"]].Visible = false;
                                ws.Columns[NAME_COL["HasHopDongAB"]].Visible = false;
                                string TenDuAn = Regex.Replace(slke_ThongTinDuAn.Text, $@"(\-|\,|\\|\.|\+|\""|\;|\:)+", string.Empty);
                                wb.SaveDocument(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx"));
                                DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                if (dialogResult == DialogResult.Yes)
                                {
                                    Process.Start(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{TenDuAn}_{DVTH.Ten}_{time}.xlsx"));
                                }
                            };
                            break;
                        case DialogResult.Abort:
                            button.ImageOptions.SvgImage = svgImageCollection1[2];
                            button.Text = "Xuất khối lượng hằng ngày";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                e.Form.Close();
                                XtraForm_BaoCaoHangNgayTDKH BCHN = new XtraForm_BaoCaoHangNgayTDKH();
                                BCHN.ShowDialog();
                                DialogResult dialogResult = MessageShower.ShowYesNoQuestion("Bạn có muốn tải lại dữ liệu mới không????");
                                if (dialogResult == DialogResult.Yes)
                                    TDKHHelper.LoadCongKinhPhiTienDo();
                            };
                            break;
                        default:
                            button.ImageOptions.SvgImage = svgImageCollection1[3];
                            button.Text = "Thoát";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) => { e.Form.Close(); };
                            break;
                    }
                }
            }
        }
        private void sb_XuatFileKeHoach_Click(object sender, EventArgs e)
        {
            //XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
            //string PathSave = "";
            //if (Xtra.ShowDialog() == DialogResult.OK)
            //{
            //    PathSave = Xtra.SelectedPath;
            //}
            //else
            //    return;
            XtraMessageBoxArgs args = new XtraMessageBoxArgs();
            args.Caption = "Lựa chọn Xuất File";
            args.Buttons = new DialogResult[] { DialogResult.No, DialogResult.OK, DialogResult.Yes, DialogResult.Abort, DialogResult.Cancel };
            args.Showing += Args_Showing_XuatVT;
            DevExpress.XtraEditors.XtraMessageBox.Show(args);
            //TDKHHelper.LoadTongHopVatTuKeHoachBrief();
            //TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_VatLieu));
            //TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_NhanCong));
            //TDKHHelper.LoadVatTuBrief((DoBocVatTu)Array.IndexOf(TDKH.sheetsName, TDKH.SheetName_MayThiCong));
            //TDKHHelper.LoadCongKinhPhiTienDo();
            //TDKHHelper.LoadCongTacDoBoc();
            //DonViThucHien DVTH = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            //string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
            ////spsheet_TD_KH_LapKeHoach.SaveDocument(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{slke_ThongTinDuAn.Text}_{DVTH.Ten}_{time}.xlsx"), DocumentFormat.Xlsx);
            //Workbook wb = spsheet_TD_KH_LapKeHoach.Document.Clone();           
            ////wb.LoadDocument(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{slke_ThongTinDuAn.Text}_{DVTH.Ten}_{time}.xlsx"));
            //Worksheet ws = wb.Worksheets["Đo bóc chuẩn"];
            //Dictionary<string, string> NAME_COL = MyFunction.fcn_getDicOfColumn(ws.Range["DoBocChuan"]);
            //ws.Columns[NAME_COL["PhanTichVatTu"]].Visible = false;
            //ws.Columns[NAME_COL["HasHopDongAB"]].Visible = false;
            //wb.SaveDocument(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{slke_ThongTinDuAn.Text}_{DVTH.Ten}_{time}.xlsx"));
            //DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Kế hoạch-Tiến độ tổng hợp_{slke_ThongTinDuAn.Text}_{DVTH.Ten}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //if (dialogResult == DialogResult.Yes)
            //{
            //    Process.Start(Path.Combine(PathSave, $"Kế hoạch-Tiến độ tổng hợp_{slke_ThongTinDuAn.Text}_{DVTH.Ten}_{time}.xlsx"));
            //}
        }

        private void spsheet_TuThucHien_CellValueChanged(object sender, SpreadsheetCellEventArgs e)
        {
            Fcn_CellvalueChanged(e.Cell, e.OldValue, spsheet_TuThucHien);
        }

        private void spsheet_ThanhToan_NhaCungCap_CellBeginEdit(object sender, SpreadsheetCellCancelEventArgs e)
        {
            IWorkbook wb = e.Worksheet.Workbook;
            Worksheet ws = e.Worksheet;
            string colHeading = ws.Columns[e.Cell.ColumnIndex].Heading;
            Row crRow = ws.Rows[e.RowIndex];

            switch (ws.Name)
            {
                case "Thanh toán nhà cung cấp":
                    CellRange Dot1 = ws.Range["Dot_1"];
                    Dictionary<string, string> dicHT = MyFunction.fcn_getDicOfColumn(Dot1);
                    if (!Dot1.Contains(e.Cell) || ws.Columns[e.ColumnIndex].Heading != dicHT["ThucHienKyNay"]
                        || ws.Columns[e.ColumnIndex].Heading != dicHT["KhoiLuongThuCong"] || ws.Columns[e.ColumnIndex].Heading != dicHT["DonGiaBoSung"])
                        e.Cancel = true;
                    string CodeDB = ws.Rows[e.RowIndex][dicHT["Code"]].Value.ToString();
                    if (CodeDB == "")
                        e.Cancel = true;

                    break;
                default:
                    break;
            }
        }

        private void spsheet_ThanhToan_NhaCungCap_PopupMenuShowing(object sender, DevExpress.XtraSpreadsheet.PopupMenuShowingEventArgs e)
        {
            SharedControls.m_SpreadSheet = sender as SpreadsheetControl;
            IWorkbook wb = (sender as SpreadsheetControl).Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            Cell cell = ws.SelectedCell[0];
            if (ws.Name == "Thanh toán nhà cung cấp")
            {
                SpreadsheetMenuItem LayKLTCToanBo = new SpreadsheetMenuItem("Lấy khối lượng hợp đồng của toàn bộ công tác sang thực hiện kỳ này", fcn_Handle_Popup_LayToanBoKLNCC);
                e.Menu.Items.Add(LayKLTCToanBo);
                SpreadsheetMenuItem LayKLThiCong = new SpreadsheetMenuItem("Lấy khối lượng hợp đồng công tác chọn sang thực hiện kỳ này", fcn_Handle_Popup_LayToanBoKLDaChonNCC);
                e.Menu.Items.Add(LayKLThiCong);
                SpreadsheetMenuItem DatLaiKLKyNay = new SpreadsheetMenuItem("Đặt lại khối lượng kỳ này", fcn_Handle_Popup_DatLaiKLKNncc);
                e.Menu.Items.Add(DatLaiKLKyNay);
                SpreadsheetMenuItem LayLaiThiCong = new SpreadsheetMenuItem("Lấy lại khối lượng thi công công tác chọn", fcn_Handle_Popup_LayLaiKLDaChonNCC);
                e.Menu.Items.Add(LayLaiThiCong);
            }
            else if (ws.Name == "Bảng đề nghị thanh toán")
            {
                SpreadsheetMenuItem ChuyenThuChi = new SpreadsheetMenuItem("Chuyển sang thu chi", fcn_Handle_Popup_ChuyenThuChi);
                e.Menu.Items.Add(ChuyenThuChi);
            }
        }

        private void sp_TongHopGiaTriDA_Click(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập giá trị dự án, Vui lòng chờ");
            IWorkbook workbook_thongtin = spsheet_Thongtinchinh.Document;
            Worksheet ws_thongtin = workbook_thongtin.Worksheets["Khối lượng phân khai"];
            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            CellRange RangeData = ws_thongtin.Range[MyConstant.TBL_QUYETTHONGTIN];
            Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(RangeData);
            long ThanhTienDa = 0, ThanhTienCT = 0, ThanhTienHM = 0;
            string dbString = string.Empty;
            foreach (DataRow CT in dtCT.Rows)
            {
                IEnumerable<Cell> searchResult = ws_thongtin.Search(CT["Code"].ToString());
                if (searchResult.Count() == 0)
                {
                    WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                    fcn_updatenhathau_todoi("Khối lượng phân khai");
                    //Fcn_LoadCongTacPhanKhai("Khối lượng phân khai");
                    Fcn_LoadPhanKhaiNew();
                    WaitFormHelper.CloseWaitForm();
                    ws_thongtin.Calculate();
                    RangeData = ws_thongtin.Range[MyConstant.TBL_QUYETTHONGTIN];
                    Name = MyFunction.fcn_getDicOfColumn(RangeData);
                    searchResult = ws_thongtin.Search(CT["Code"].ToString());
                    if (searchResult.Count() == 0)
                        continue;
                    ThanhTienCT = (long)ws_thongtin.Rows[searchResult.FirstOrDefault().RowIndex][Name["ThanhTienDuThau"]].Value.NumericValue;
                    ThanhTienDa += ThanhTienCT;
                }
                else
                {
                    ThanhTienCT = (long)ws_thongtin.Rows[searchResult.FirstOrDefault().RowIndex][Name["ThanhTienDuThau"]].Value.NumericValue;
                    ThanhTienDa += ThanhTienCT;
                }
                dbString = $"UPDATE {MyConstant.TBL_THONGTINCONGTRINH} SET \"GiaTri\" = '{ThanhTienCT}' WHERE \"Code\" = '{CT["Code"]}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            dbString = $"UPDATE {MyConstant.TBL_THONGTINDUAN} SET \"TongVon\" = '{ThanhTienDa}' WHERE \"Code\" = '{slke_ThongTinDuAn.EditValue}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            foreach (DataRow HM in dtHM.Rows)
            {
                IEnumerable<Cell> searchResult = ws_thongtin.Search(HM["Code"].ToString());
                if (searchResult.Count() == 0)
                    continue;
                ThanhTienHM = (long)ws_thongtin.Rows[searchResult.FirstOrDefault().RowIndex][Name["ThanhTienDuThau"]].Value.NumericValue;
                dbString = $"UPDATE {MyConstant.TBL_THONGTINHANGMUC} SET \"GiaTri\" = '{ThanhTienHM}' WHERE \"Code\" = '{HM["Code"]}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINNHATHAU} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dtnt = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINNHATHAUPHU} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dttp = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            dbString = $"SELECT * FROM {MyConstant.TBL_THONGTINTODOITHICONG} WHERE \"CodeDuAn\" = '{slke_ThongTinDuAn.EditValue}'";
            DataTable dttd = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            foreach (DataRow row in dtnt.Rows)
            {
                long TT = (long)ws_thongtin.Rows[3][Name[$"TT_{row["Code"]}"]].Value.NumericValue;
                row["GiaTri"] = TT;
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dtnt, MyConstant.TBL_THONGTINNHATHAU);
            foreach (DataRow row in dttp.Rows)
            {
                long TT = (long)ws_thongtin.Rows[3][Name[$"TT_{row["Code"]}"]].Value.NumericValue;
                row["GiaTri"] = TT;
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dttp, MyConstant.TBL_THONGTINNHATHAUPHU);
            foreach (DataRow row in dttd.Rows)
            {
                long TT = (long)ws_thongtin.Rows[3][Name[$"TT_{row["Code"]}"]].Value.NumericValue;
                row["GiaTri"] = TT;
            }
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(dttd, MyConstant.TBL_THONGTINTODOITHICONG);
            fcn_updateSheetThongTinChinh();
            WaitFormHelper.CloseWaitForm();
            DialogResult rs = MessageShower.ShowYesNoQuestion("Bạn có muốn hiển thị giá trị vật liệu nhân công và máy thi công không????");
            Worksheet ws = workbook_thongtin.Worksheets[0];
            CellRange CTrinh = ws.Range["tbl_ThongTinCongTrinh"];
            CellRange DataVatLieu = ws.Range["DataVatLieuNCMTC"];
            if (rs == DialogResult.Yes)
            {
                Worksheet VL = workbook_thongtin.Worksheets["Vật liệu"];
                Worksheet MTC = workbook_thongtin.Worksheets["Máy thi công"];
                Worksheet NC = workbook_thongtin.Worksheets["Nhân công"];
                Worksheet NguoiDung = workbook_thongtin.Worksheets["Người dùng"];
                NguoiDung.Rows.Insert(4, dtHM.Rows.Count + dtCT.Rows.Count, RowFormatMode.FormatAsNext);
                CellRange RangeDataVL = VL.Range[MyConstant.TBL_QUYETTHONGTIN];
                Dictionary<string, string> NameVL = MyFunction.fcn_getDicOfColumn(RangeDataVL);
                CellRange RangeDataMTC = MTC.Range[MyConstant.TBL_QUYETTHONGTIN];
                Dictionary<string, string> NameMTC = MyFunction.fcn_getDicOfColumn(RangeDataMTC);
                CellRange RangeDataNC = NC.Range[MyConstant.TBL_QUYETTHONGTIN];
                Dictionary<string, string> NameNC = MyFunction.fcn_getDicOfColumn(RangeDataNC);

                spsheet_Thongtinchinh.BeginUpdate();
                DataVatLieu.ForEach(x => ws.Columns[x.ColumnIndex].Visible = true);
                int RowIndex = CTrinh.TopRowIndex;
                CellRange ND = NguoiDung.Range["DataMau"];
                ws.Rows[RowIndex - 2]["V"].CopyFrom(ND, PasteSpecial.All);
                Row Crow = ws.Rows[RowIndex];
                int RowCongTrinh = 0;
                for (int i = CTrinh.TopRowIndex; i <= CTrinh.BottomRowIndex; i++)
                {
                    Crow = ws.Rows[i];
                    RowCongTrinh = i;
                    string CodeCongTrinh = Crow["C"].Value.TextValue;
                    string CodeHM = Crow["B"].Value.TextValue;
                    if (!string.IsNullOrEmpty(CodeCongTrinh))
                    {
                        for (int j = RowCongTrinh + 1; j <= CTrinh.BottomRowIndex; j++)
                        {
                            Crow = ws.Rows[j];
                            CodeCongTrinh = Crow["C"].Value.TextValue;
                            CodeHM = Crow["B"].Value.TextValue;
                            if (!string.IsNullOrEmpty(CodeCongTrinh))
                            {
                                i = j - 1;
                                break;
                            }
                            else
                            {
                                i = j;
                                if (string.IsNullOrEmpty(CodeHM))
                                    continue;
                                IEnumerable<Cell> SearchVL = VL.Search(CodeHM);
                                IEnumerable<Cell> SearchNC = NC.Search(CodeHM);
                                IEnumerable<Cell> SearchMTC = MTC.Search(CodeHM);
                                if (SearchVL.Count() == 0)
                                {
                                    WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                                    fcn_updatenhathau_todoi_ncc("Vật liệu");
                                    WaitFormHelper.CloseWaitForm();
                                    SearchVL = VL.Search(CodeHM);
                                    RangeDataVL = VL.Range[MyConstant.TBL_QUYETTHONGTIN];
                                    NameVL = MyFunction.fcn_getDicOfColumn(RangeDataVL);
                                }
                                if (SearchNC.Count() == 0)
                                {
                                    WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                                    fcn_updatenhathau_todoi_ncc("Nhân công");
                                    WaitFormHelper.CloseWaitForm();
                                    SearchNC = NC.Search(CodeHM);
                                    RangeDataNC = NC.Range[MyConstant.TBL_QUYETTHONGTIN];
                                    NameNC = MyFunction.fcn_getDicOfColumn(RangeDataNC);
                                }
                                if (SearchMTC.Count() == 0)
                                {
                                    WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                                    fcn_updatenhathau_todoi_ncc("Máy thi công");
                                    WaitFormHelper.CloseWaitForm();
                                    MTC.Search(CodeHM);
                                    RangeDataMTC = MTC.Range[MyConstant.TBL_QUYETTHONGTIN];
                                    NameMTC = MyFunction.fcn_getDicOfColumn(RangeDataMTC);
                                }
                                Crow["V"].SetValue(0);
                                Crow["X"].SetValue(0);
                                Crow["Z"].SetValue(0);
                                if (SearchVL.Count() > 0)
                                    Crow["V"].Formula = $"'Vật liệu'!{VL.Rows[SearchVL.FirstOrDefault().RowIndex][NameVL["ThanhTienDuThau"]].GetReferenceA1()}";
                                if (SearchMTC.Count() > 0)
                                    Crow["X"].Formula = $"'Máy thi công'!{MTC.Rows[SearchMTC.FirstOrDefault().RowIndex][NameMTC["ThanhTienDuThau"]].GetReferenceA1()}";
                                if (SearchNC.Count() > 0)
                                    Crow["Z"].Formula = $"'Nhân công'!{NC.Rows[SearchNC.FirstOrDefault().RowIndex][NameNC["ThanhTienDuThau"]].GetReferenceA1()}";
                                Crow["W"].Formula = $"IF(P{j + 1}=0;0;V{j + 1}/P{j + 1})";
                                Crow["Y"].Formula = $"IF(P{j + 1}=0;0;X{j + 1}/P{j + 1})";
                                Crow["AA"].Formula = $"IF(P{j + 1}=0;0;Z{j + 1}/P{j + 1})";
                                Crow["AB"].Formula = $"W{j + 1}+Y{j + 1}+AA{j + 1}";
                                Crow["AC"].Formula = $"AB{j + 1}*AC6";
                            }
                        }
                        ws.Rows[RowCongTrinh].Font.Bold = true;
                        ws.Rows[RowCongTrinh]["V"].Formula = $"=SUM(V{RowCongTrinh + 2}:V{i})";
                        ws.Rows[RowCongTrinh]["X"].Formula = $"=SUM(X{RowCongTrinh + 2}:X{i})";
                        ws.Rows[RowCongTrinh]["Z"].Formula = $"=SUM(Z{RowCongTrinh + 2}:Z{i})";
                    }
                    //else
                    //{
                    //    if (string.IsNullOrEmpty(CodeHM))
                    //        continue;
                    //    IEnumerable<Cell> SearchVL = VL.Search(CodeHM);
                    //    IEnumerable<Cell> SearchNC = NC.Search(CodeHM);
                    //    IEnumerable<Cell> SearchMTC = MTC.Search(CodeHM);
                    //    if (SearchVL.Count() == 0)
                    //    {
                    //        WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                    //        fcn_updatenhathau_todoi_ncc("Vật liệu");
                    //        WaitFormHelper.CloseWaitForm();
                    //        SearchVL = VL.Search(CodeHM);
                    //        RangeDataVL = VL.Range[MyConstant.TBL_QUYETTHONGTIN];
                    //        NameVL = MyFunction.fcn_getDicOfColumn(RangeDataVL);
                    //    }       
                    //    if (SearchNC.Count() == 0)
                    //    {
                    //        WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                    //        fcn_updatenhathau_todoi_ncc("Nhân công");
                    //        WaitFormHelper.CloseWaitForm();
                    //        SearchNC = NC.Search(CodeHM);
                    //        RangeDataNC = NC.Range[MyConstant.TBL_QUYETTHONGTIN];
                    //        NameNC = MyFunction.fcn_getDicOfColumn(RangeDataNC);
                    //    }         
                    //    if (SearchMTC.Count() == 0)
                    //    {
                    //        WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
                    //        fcn_updatenhathau_todoi_ncc("Máy thi công");
                    //        WaitFormHelper.CloseWaitForm();
                    //        MTC.Search(CodeHM);
                    //        RangeDataMTC = MTC.Range[MyConstant.TBL_QUYETTHONGTIN];
                    //        NameMTC = MyFunction.fcn_getDicOfColumn(RangeDataMTC);
                    //    }
                    //    if (SearchVL.Count() > 0)
                    //        Crow["V"].Formula = $"'Vật liệu'!{VL.Rows[SearchVL.FirstOrDefault().RowIndex][NameVL["ThanhTienDuThau"]].GetReferenceA1()}";
                    //    if (SearchMTC.Count() > 0)
                    //        Crow["X"].Formula = $"'Máy thi công'!{MTC.Rows[SearchMTC.FirstOrDefault().RowIndex][NameMTC["ThanhTienDuThau"]].GetReferenceA1()}";
                    //    if (SearchNC.Count() > 0)
                    //        Crow["Z"].Formula = $"'Nhân công'!{NC.Rows[SearchNC.FirstOrDefault().RowIndex][NameNC["ThanhTienDuThau"]].GetReferenceA1()}";
                    //    Crow["W"].Formula = $"V{i+1}/P{i+1}";
                    //    Crow["Y"].Formula = $"X{i+1}/P{i+1}";
                    //    Crow["AA"].Formula = $"Z{i+1}/P{i+1}";
                    //    Crow["AB"].Formula = $"W{i+1}+Y{i+1}+AA{i+1}";
                    //    Crow["AC"].Formula= $"AB{i + 1}*AC6";
                    //}
                }
                spsheet_Thongtinchinh.EndUpdate();

            }
            else
                DataVatLieu.ForEach(x => ws.Columns[x.ColumnIndex].Visible = false);
            MessageShower.ShowInformation("Cập nhập thành công !!");
        }

        private void sb_CapNhapKLHDChiTiet_Click(object sender, EventArgs e)
        {
            var ret = MessageShower.ShowYesNoQuestion("Bạn có muốn cập nhập Khối lượng toàn bộ sang Khối lượng hợp đồng chi tiết không????");

            if (ret != DialogResult.Yes)
                return;
            DonViThucHien dvth = ctrl_DonViThucHienDuAnTDKH.SelectedDVTH as DonViThucHien;
            WaitFormHelper.ShowWaitForm("Đang cập nhập giá trị dự án, Vui lòng chờ");
            string dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"KhoiLuongHopDongChiTiet\" = \"KhoiLuongToanBo\" WHERE {dvth.ColCodeFK} = '{dvth.Code}'";
            DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            WaitFormHelper.CloseWaitForm();
            TDKHHelper.LoadCongTacDoBoc();
            spsheet_TD_KH_LapKeHoach.Document.Worksheets.ActiveWorksheet = spsheet_TD_KH_LapKeHoach.Document.Worksheets[0];
            MessageShower.ShowInformation("Cập nhập thành công !!");
        }

        private async void toolStripKiemTraCapNhat_Click(object sender, EventArgs e)
        {
            UpdateChecker(true);
        }

        private void sb_CapNhapGiaTriHd_Click(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhập giá trị Hợp đồng, Vui lòng chờ");
            string dbString = $"SELECT * FROM {MyConstant.TBL_TaoHopDongMoi} WHERE \"CodeDuAn\"='{slke_ThongTinDuAn.EditValue}'";
            DataTable dt_HD = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            string lst = MyFunction.fcn_Array2listQueryCondition(dt_HD.AsEnumerable().Select(x => x["Code"].ToString()));
            dbString = $"SELECT PLHD.*,Tbl_HopDong_TongHop.CodeHopDong  FROM Tbl_HopDong_PhuLucHD PLHD " +
                $" LEFT JOIN Tbl_HopDong_ThongtinphulucHD TenPL ON PLHD.CodePl=TenPL.Code " +
                $" LEFT JOIN Tbl_HopDong_TongHop ON Tbl_HopDong_TongHop.Code=TenPL.CodeHd  WHERE Tbl_HopDong_TongHop.CodeHopDong IN ({lst})";
            DataTable dt_ChiTiet = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
            foreach (DataRow row in dt_HD.Rows)
            {
                DataRow[] NewRow = dt_ChiTiet.AsEnumerable().Where(x => x["CodeHopDong"].ToString() == row["Code"].ToString()).ToArray();
                if (!NewRow.Any())
                    continue;
                double TT = NewRow.Sum(x => double.Parse(x["KhoiLuong"].ToString()) * double.Parse(x["DonGia"].ToString()));
                dbString = $"UPDATE {MyConstant.TBL_TaoHopDongMoi} SET \"GiaTriHopDong\" ='{Math.Round(TT)}' WHERE \"Code\"= '{row["Code"]}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
            ctrl_TongHopHopDong.Fcn_Update();
            WaitFormHelper.CloseWaitForm();
            MessageShower.ShowInformation("Cập nhập thành công !!");
        }

        private void ce_HienThiHDCon_CheckedChanged(object sender, EventArgs e)
        {
            pc_CaiDatThanhToan.Visible = ce_HienThiHDCon.Checked;
            if (ce_HienThiHDCon.Checked)
                MessageShower.ShowInformation("Khối lượng thi công công tác trong HỢP ĐỒNG CON của " +
                    "HỢP ĐÔNG HIỆN TẠI sẽ được lấy làm giá trị thanh toán đợt này !!!!!!!!!!!");
            fcn_DobocAB(spsheet_ThanhToanA_B);
        }

        //private void form_ThuChiTamUng_DeXuat_Sb_ThemNV_Click(object sender, EventArgs e)
        //{
        //    Fcn_LoadTCTU();
        //}

        private void sb_HienThiMeCon_Click(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang tải dữ liệu", "Vui Lòng chờ!");
            ctrl_TongHopHopDong.Fcn_HopDongMeCon();
            WaitFormHelper.CloseWaitForm();
        }

        private void tabChamCongAll_Load(object sender, EventArgs e)
        {
            tabChamCongAll.Fcn_UpDate();
        }

        private void máyThiCôngToolStripMenuItem_Click(object sender, EventArgs e)
        {
            XtraForm_MayThiCong frm = new XtraForm_MayThiCong();
            frm.ShowDialog();
            xtraTabControl_QLMayThietBi.SelectedTabPage = null;
        }


        private void bt_PATC_Click(object sender, EventArgs e)
        {

            //SharedControls.uc_PATC = uc;

            var form = new XtraForm();
            form.WindowState = FormWindowState.Maximized;
            SharedControls.uc_PATC.Parent = form;
            SharedControls.uc_PATC.SetRibbonMinimized(false);

            form.ShowDialog();
            SharedControls.uc_PATC.SetRibbonMinimized(true);
            SharedControls.uc_PATC.Parent = pn_PATC;

        }
        private void Fcn_InsertHeSoChamCong(string codeDA, bool CheckNewDuAn = false)
        {
            string db_string = "";
            if (CheckNewDuAn)
            {
                db_string = $"SELECT * FROM {DanhSachNhanVienConstant.TBL_CHAMCONG_CAIDATHESO} WHERE \"CodeDuAn\" ='{codeDA}' ";
                DataTable HeSoNew = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
                if (HeSoNew.Rows.Count == 0)
                    goto LabelInSert;
                else
                    return;
            }
            LabelInSert:
            db_string = $"SELECT * FROM {DanhSachNhanVienConstant.TBL_CHAMCONG_CAIDATHESO} WHERE \"CodeDuAn\" IS NULL ";
            DataTable HeSo = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
            HeSo.AsEnumerable().ForEach(x => { x["CodeDuAn"] = codeDA; x["Code"] = Guid.NewGuid(); });
            DataProvider.InstanceTHDA.UpdateDataTableFromSqliteSource(HeSo, DanhSachNhanVienConstant.TBL_CHAMCONG_CAIDATHESO);
            db_string = $"SELECT * FROM {DanhSachNhanVienConstant.TBL_CHAMCONG_CAIDATGIOLAM} WHERE \"CodeDuAn\" IS NULL ";
            DataTable GioLam = DataProvider.InstanceTHDA.ExecuteQuery(db_string);
            GioLam.AsEnumerable().ForEach(x => { x["CodeDuAn"] = codeDA; x["Code"] = Guid.NewGuid(); });
            DataProvider.InstanceTHDA.UpdateDataTableFromOtherSource(GioLam, DanhSachNhanVienConstant.TBL_CHAMCONG_CAIDATGIOLAM);
        }

        private void ce_TDKH_HienHTPD_CheckedChanged(object sender, EventArgs e)
        {
            TDKHHelper.CheckAnHienPhanDoan();
        }

        private void gc_noti_Click(object sender, EventArgs e)
        {

        }

        private async void spsheet_TD_KH_LapKeHoach_SelectionChanged(object sender, EventArgs e)
        {
            m_ctrlMTCs.Hide();
            m_ctrlTKDM.Hide();
            m_ctrlVatlieu.Hide();
            m_ctrlVatlieuThuCong.Hide();
        }

        private void spsheet_Thongtinchinh_CustomDrawCell(object sender, CustomDrawCellEventArgs e)
        {
            string wsName = e.Cell.Worksheet.Name;
            //CellRange range = e.Cell.Worksheet.Workbook.Range[TDKH_DBC.RANGE_DoBocChuan];
            IWorkbook wb = e.Cell.Worksheet.Workbook;
            Worksheet ws = e.Cell.Worksheet;

            if (wsName == "Thông tin Dự án - Công trình" && ws.Columns[e.Cell.ColumnIndex].Heading == MyConstant.COL_DONVITRUCTHUOC)
            {
                foreach (var name in MyConstant.RANGES_DonViThucHienNCC)
                {
                    if (!ws.Range[name].Contains(e.Cell) || ws.Range[name].BottomRowIndex == e.Cell.RowIndex)
                        continue;

                    e.Text = "";
                    int x_center = (e.Bounds.Left + e.Bounds.Right) / 2;
                    int y_center = (e.Bounds.Bottom + e.Bounds.Top) / 2;
                    Rectangle rec = new Rectangle(x_center - 25, y_center - 10, 50, 20);
                    e.Cache.Paint.DrawCheckBox(e.Cache.Graphics, rec, (e.Cell.Value == true) ? ButtonState.Checked : ButtonState.Normal);
                    return;
                }
            }

        }

        private void cbb_State_SelectedIndexChanged(object sender, EventArgs e)
        {
            KLTTHangNgay kLTTHangNgay = CVHN_DangThucHien.Treelist.GetFocusedRow() as KLTTHangNgay;

            if (kLTTHangNgay != null && cbb_State.Text.HasValue())
            {
                string dbString = $"UPDATE {Server.Tbl_GiaoViec_CongViecCha} SET TrangThai = '{cbb_State.Text}' WHERE CodeCongViecCha = '{kLTTHangNgay.CodeCha}'";
                DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
            }
        }

        private async void cậpNhậtLạiQuyềnCáNhânToolStripMenuItem_Click(object sender, EventArgs e)
        {
            await SharedProjectHelper.SyncRoleFromServer();
            TongHopHelper.SetControlsByPermission(false);
        }

        private async void cậpNhậtQuyềnCáNhânToolStripMenuItem_Click(object sender, EventArgs e)
        {
            await SharedProjectHelper.SyncRoleFromServer();
            TongHopHelper.SetControlsByPermission(false);
        }

        private void ctrl_BaoCaoTaiChinhDuAn_sb_capNhap_Click_1(object sender, EventArgs e)
        {
            navigationPane13.State = NavigationPaneState.Default;
        }


        private void tsmi_TruVatTuACap_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/qd6shGtChP8");
        }

        private void tsmi_DoiDonViThauChinh_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/YXJHc7230nA");
        }

        private void tsmi_TinhGiaThauPhu_Click(object sender, EventArgs e)
        {
            Process.Start("https://youtu.be/bxiFHLuCcNg");
        }

        private void spsheet_TD_KH_LapKeHoach_Click(object sender, EventArgs e)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            if (ws.Name == TDKH.SheetName_DoBocChuan)
            {
                Cell cell = ws.SelectedCell[0];
                Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(wb.Range[TDKH.RANGE_DoBocChuan]);
                string ColCode = ws.Columns[cell.RightColumnIndex].Heading;
                string TypeRow = ws.Rows[cell.TopRowIndex][dicDoBoc[TDKH.COL_TypeRow]].Value.TextValue;
                string CodeCT = ws.Rows[cell.TopRowIndex][dicDoBoc[TDKH.COL_Code]].Value.TextValue;
                string CodeMTC = ws.Rows[cell.TopRowIndex][dicDoBoc["CodeMuiThiCong"]].Value.TextValue;
                if (ColCode == dicDoBoc["MuiThiCong"] && (TypeRow == MyConstant.TYPEROW_CVCha || TypeRow == MyConstant.TYPEROW_CVCHIA))
                {
                    mtc.Show();
                    var spsheetLoc = spsheet_TD_KH_LapKeHoach.Location;
                    Rectangle rec = spsheet_TD_KH_LapKeHoach.GetCellBounds(cell.TopRowIndex, cell.LeftColumnIndex);
                    mtc.Location = new Point(rec.Left - mtc.Width + spsheetLoc.X, rec.Top + spsheetLoc.Y);
                    mtc.BringToFront();
                    mtc.Fcn_LoadData(CodeMTC, CodeCT);
                }
                else
                    mtc.Hide();
            }
            else
                mtc.Hide();
        }

        private void ce_CheckThuPhong_CheckedChanged(object sender, EventArgs e)
        {
            if (ce_CheckThuPhong.Checked)
            {
                gc_Tiendo.TreeListMappings.HierarchyColumn = col_STT;
                col_STT.Width = 90;
            }
            else
            {
                gc_Tiendo.TreeListMappings.HierarchyColumn = Col_Code;
                col_STT.Width = 45;
            }
            gc_Tiendo.Refresh();
        }

        private void bt_Import_Click(object sender, EventArgs e)
        {
            var form = new XtraForm_ImportGiaoViec();
            form.ShowDialog();
        }

        private void cbo_LuaChon_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbo_LuaChon.SelectedIndex == 0 || cbo_LuaChon.SelectedIndex == 4)
            {
                fcn_loadYeuCauVT_Thucong_TDKH(true, false, false, "CodeKHVT", "CodeTDKH");
                fcn_updateDeXuatVatLieu();
            }
            else if (cbo_LuaChon.SelectedIndex == 1)
            {
                fcn_loadYeuCauVT_Thucong_TDKH(false, false, false, "CodeKHVT", "CodeTDKH");
                Form_QLVT_LayTuTDKH TDKH = new Form_QLVT_LayTuTDKH();
                TDKH.LoadData();
                TDKH.m__TRUYENDATA = new Form_QLVT_LayTuTDKH.DE__TRUYENDATA(Fcn_UpdateQLVT_TDKH);
                TDKH.ShowDialog();
            }
            else if (cbo_LuaChon.SelectedIndex == 2)
            {
                fcn_loadYeuCauVT_Thucong_TDKH(false, true, false, "CodeKHVT", "CodeTDKH");
                Form_QLVT_LayVatLieuHopDong HD = new Form_QLVT_LayVatLieuHopDong();
                HD.LoadDanhSachHopDong();
                HD.m__TRUYENDATA = new Form_QLVT_LayVatLieuHopDong.DE__TRUYENDATA(Fcn_UpdateQLVT_HD);
                HD.ShowDialog();
            }
            else
            {
                fcn_loadYeuCauVT_Thucong_TDKH(false, false, false, "CodeTDKH", "CodeKHVT");
                Form_QLVT_LayTuKHVT TDKH = new Form_QLVT_LayTuKHVT();
                TDKH.m__TRUYENDATA = new Form_QLVT_LayTuKHVT.DE__TRUYENDATA(Fcn_UpdateQLVT_KHVT);
                TDKH.ShowDialog();
            }
        }

        private void sb_AddVatLieu_Click(object sender, EventArgs e)
        {
            if (ce_HienThiAll.Checked)
            {
                MessageShower.ShowInformation("Vui lòng tắt Hiển thị tất cả vật liệu để lấy thêm vật liệu!!!!!!!!!");
                return;
            }
            if (cbo_LuaChon.SelectedIndex == 1)
            {
                //fcn_loadYeuCauVT_Thucong_TDKH(false, false, false, "CodeKHVT", "CodeTDKH");
                Form_QLVT_LayTuTDKH TDKH = new Form_QLVT_LayTuTDKH();
                TDKH.LoadData();
                TDKH.m__TRUYENDATA = new Form_QLVT_LayTuTDKH.DE__TRUYENDATA(Fcn_UpdateQLVT_TDKH);
                TDKH.ShowDialog();
            }
            else if (cbo_LuaChon.SelectedIndex == 2)
            {
                //fcn_loadYeuCauVT_Thucong_TDKH(false, true, false, "CodeKHVT", "CodeTDKH");
                Form_QLVT_LayVatLieuHopDong HD = new Form_QLVT_LayVatLieuHopDong();
                HD.LoadDanhSachHopDong();
                HD.m__TRUYENDATA = new Form_QLVT_LayVatLieuHopDong.DE__TRUYENDATA(Fcn_UpdateQLVT_HD);
                HD.ShowDialog();
            }
            else
            {
                //fcn_loadYeuCauVT_Thucong_TDKH(false, false, false, "CodeTDKH", "CodeKHVT");
                Form_QLVT_LayTuKHVT TDKH = new Form_QLVT_LayTuKHVT();
                TDKH.m__TRUYENDATA = new Form_QLVT_LayTuKHVT.DE__TRUYENDATA(Fcn_UpdateQLVT_KHVT);
                TDKH.ShowDialog();
            }
        }

        private void càiĐặtThờiGianToolStripMenuItem_Click(object sender, EventArgs e)
        {
            XtraForm_AlertTimeSetting form = new XtraForm_AlertTimeSetting();
            form.ShowDialog();
        }

        private void StripHuongDanSuDung_Video_BaiViet_DropDownItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            try
            {
                Process.Start(e.ClickedItem.AccessibleDescription);

            }
            catch (Exception ex)
            {
                MessageShower.ShowError("Không thể mở đường dẫn");
            }
        }

        private void ctrl_KiemSoatTienDoDuAn_Sb_XemChiTiet_Click(object sender, EventArgs e)
        {
            if (!ctrl_KiemSoatTienDoDuAn.IsSelect)
                return;
            xtraTab_KiemSoat.SelectedPageChanged -= xtraTab_KiemSoat_SelectedPageChanged;
            xtraTab_KiemSoat.SelectedTabPage = xtraTab_KiemSoatTienDo;
            string Condition = ctrl_KiemSoatTienDoDuAn.Condition;
            string Condition1 = ctrl_KiemSoatTienDoDuAn.Condition1;
            if (Condition == "All")
                kiemSoatTienDo.Fcn_UpdateKiemSoat(true);
            else
                kiemSoatTienDo.Fcn_UpdateKiemSoat(true, Condition: Condition, Condition1: Condition1);
            xtraTab_KiemSoat.SelectedPageChanged += xtraTab_KiemSoat_SelectedPageChanged;
        }
        private void Ctrl_KiemSoatTienDoDuAn_Sb_XemChiTiet_Click_KiemSoatChung(object sender, EventArgs e)
        {
            if (!SharedControls.ctrl_KiemSoatTienDoDuAn.IsSelect)
                return;
            xtraTab_KiemSoat.SelectedPageChanged -= xtraTab_KiemSoat_SelectedPageChanged;
            xtraTab_KiemSoat.SelectedTabPage = xtraTab_KiemSoatTienDo;
            string Condition = SharedControls.ctrl_KiemSoatTienDoDuAn.Condition;
            string Condition1 = SharedControls.ctrl_KiemSoatTienDoDuAn.Condition1;
            if (Condition == "All")
                kiemSoatTienDo.Fcn_UpdateKiemSoat(true);
            else
                kiemSoatTienDo.Fcn_UpdateKiemSoat(true, Condition: Condition, Condition1: Condition1);
            xtraTab_KiemSoat.SelectedPageChanged += xtraTab_KiemSoat_SelectedPageChanged;
        }

        private void ctrl_KiemSoatTienDoDuAn_Load(object sender, EventArgs e)
        {
            ctrl_KiemSoatTienDoDuAn.Fcn_UpdateBieuDoTron();
            ctrl_KiemSoatTienDoDuAn.Fcn_UpdateBarChart();
        }

        private void gc_Tiendo_CustomColumnDisplayText(object sender, CustomColumnDisplayTextEventArgs e)
        {
            if (e.Column.FieldName != "STT")
                return;
            //if ((long)e.Value == 0)
            //{
            //    e.DisplayText = "";
            //}
        }

        private void tL_YeuCauVatTu_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            if (e.Node is null || e.Node.GetValue("ID") is null)
                return;
            if (e.Node.Level == 2)
            {
                string Id = e.Node.GetValue("ID").ToString();
                uc_LichSuDuyetHangNgayYeuCau.Fcn_LoadData(QLVT.TBL_QLVT_YEUCAUVTKLHN, Id);
            }
        }

        private void PaneDeXuat_StateChanged(object sender, StateChangedEventArgs e)
        {
            //NavigationPaneState NewState = e.State;
            //NavigationPaneState OldState = e.OldState;
            //if (OldState == NavigationPaneState.Collapsed && NewState == NavigationPaneState.Default)
            //    uc_LichSuDuyetHangNgayYeuCau.Fcn_LoadData(QLVT.TBL_QLVT_YEUCAUVTKLHN,null);
        }
        private void tL_NhapKho_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            if (e.Node is null)
                return;
            if (e.Node.Level == 2)
            {
                string Id = e.Node.GetValue("ID").ToString();
                uc_LichSuDuyetHangNgayNhapKho.Fcn_LoadData(QLVT.TBL_QLVT_NHAPVTKLHN, Id);
            }
        }

        private void tL_XuatKho_FocusedNodeChanged(object sender, FocusedNodeChangedEventArgs e)
        {
            if (e.Node is null)
                return;
            if (e.Node.Level == 2)
            {
                string Id = e.Node.GetValue("ID").ToString();
                uc_LichSuDuyetHangNgayXuatKho.Fcn_LoadData(QLVT.TBL_QLVT_XUATVTKLHN, Id);
            }
        }

        private void Ccbe_AnHien_EditValueChanged(object sender, EventArgs e)
        {
            Fcn_AnHienTienDo();
        }
        private void Fcn_AnHienTienDo()
        {
            foreach (DevExpress.XtraEditors.Controls.CheckedListBoxItem item in Ccbe_AnHien.Properties.Items)
            {
                if ((int)item.Value == 1)
                {
                    TreeListNode[] Da = gc_Tiendo.FindNodes(x => x.Level == 0);
                    if (item.CheckState == CheckState.Unchecked)
                        Da.ForEach(x => x.Expand());
                    else
                        Da.ForEach(x => x.Collapse());
                }
                else if ((int)item.Value == 2)
                {
                    TreeListNode[] CTR = gc_Tiendo.FindNodes(x => x.GetValue("UID").ToString().Contains("_CTR"));
                    if (item.CheckState == CheckState.Unchecked)
                        CTR.ForEach(x => x.Expand());
                    else
                        CTR.ForEach(x => x.Collapse());
                }
                else if ((int)item.Value == 3)
                {
                    TreeListNode[] HM = gc_Tiendo.FindNodes(x => x.GetValue("UID").ToString().Contains("_HM"));
                    if (item.CheckState == CheckState.Unchecked)
                        HM.ForEach(x => x.Expand());
                    else
                        HM.ForEach(x => x.Collapse());
                }
                else if ((int)item.Value == 4)
                {
                    TreeListNode[] Tuyen = gc_Tiendo.FindNodes(x => x.GetValue("UID").ToString().Contains("_CodeTuyen"));
                    if (item.CheckState == CheckState.Unchecked)
                        Tuyen.ForEach(x => x.Expand());
                    else
                        Tuyen.ForEach(x => x.Collapse());
                }
                else
                {
                    TreeListNode[] Nhom = gc_Tiendo.FindNodes(x => x.GetValue("UID").ToString().Contains("_CodeNhom"));
                    if (item.CheckState == CheckState.Unchecked)
                        Nhom.ForEach(x => x.Expand());
                    else
                        Nhom.ForEach(x => x.Collapse());
                }
            }
        }
        private void form_ThuChiTamUng_DeXuat_SB_GuiDuyet_Click(object sender, EventArgs e)
        {
            if (form_ThuChiTamUng_DeXuat._IsQuyTrinh)
            {
                WaitFormHelper.ShowWaitForm("Đang tải dữ liệu phần Thu Chi Tạm ứng", "Vui Lòng chờ!");
                ctrl_ThuChiTamUng_KhoanThu.Fcn_Update();
                ctrl_ThuChiTamUng_KhoanChi.Fcn_Load();
                WaitFormHelper.CloseWaitForm();
            }
            else
            {
                List<KhoanChi> KC = form_ThuChiTamUng_DeXuat.NewKC;
                List<KhoanThu> KT = form_ThuChiTamUng_DeXuat.NewKT;
                if (KC.Count != 0)
                    ctrl_ThuChiTamUng_KhoanChi.Fcn_Updata(KC);
                if (KT.Count != 0)
                {
                    ctrl_ThuChiTamUng_KhoanThu.Fcn_AddData(KT);
                }
            }
        }

        private void form_ThuChiTamUng_DeXuat_Sb_CapNhapTCTU_Click(object sender, EventArgs e)
        {
            Fcn_LoadTCTU();
        }

        private void form_ThuChiTamUng_DeXuat_Sb_DeXuatExport_Click(object sender, EventArgs e)
        {
            XtraFolderBrowserDialog Xtra = new XtraFolderBrowserDialog();
            string PathSave = "";
            if (Xtra.ShowDialog() == DialogResult.OK)
            {
                PathSave = Xtra.SelectedPath;
            }
            else
                return;
            WaitFormHelper.ShowWaitForm("Đang xuất dữ liệu?Vui lòng chờ !!!!");
            TreeList KC = ctrl_ThuChiTamUng_KhoanChi.Fcn_LoadTreeList();
            TreeList KT = ctrl_ThuChiTamUng_KhoanThu.Fcn_LoadTreeList();
            PrintingSystem ps = new PrintingSystem();
            PrintableComponentLink linkDeXuat = new PrintableComponentLink(ps);
            linkDeXuat.Component = form_ThuChiTamUng_DeXuat.gc_ThuChiTamUng_DeXuat;
            PrintableComponentLink linkKhoanChi = new PrintableComponentLink(ps);
            linkKhoanChi.Component = KC;
            PrintableComponentLink linkKhoanThu = new PrintableComponentLink(ps);
            linkKhoanThu.Component = KT;
            CompositeLink compositeLink = new CompositeLink(ps);
            compositeLink.Links.AddRange(new object[] { linkDeXuat, linkKhoanChi, linkKhoanThu });
            form_ThuChiTamUng_DeXuat.gc_ThuChiTamUng_DeXuat.ForceInitialize();
            KC.ForceInitialize();
            KT.ForceInitialize();
            compositeLink.CreatePageForEachLink();
            XlsxExportOptions advOptions = new XlsxExportOptions();
            advOptions.ExportMode = XlsxExportMode.SingleFilePageByPage;
            string time = DateTime.Now.ToString("dd-MM-yyyy_hh-mm-ss");
            string TenDuAn = Regex.Replace(slke_ThongTinDuAn.Text, $@"(\-|\,|\\|\.|\+|\""|\;|\:)+", string.Empty);
            compositeLink.ExportToXlsx(Path.Combine(PathSave, $"Thu chi tạm ứng_{TenDuAn}_{time}.xlsx"), advOptions);
            SpreadsheetControl Spread = new SpreadsheetControl();
            Spread.LoadDocument(Path.Combine(PathSave, $"Thu chi tạm ứng_{TenDuAn}_{time}.xlsx"), DocumentFormat.Xlsx);
            IWorkbook wb = Spread.Document;
            wb.Worksheets[0].Name = "Đề xuất thu chi";
            wb.Worksheets[1].Name = "Khoản chi";
            wb.Worksheets[2].Name = "Khoản thu";
            wb.Worksheets[0].ActiveView.ShowZeroValues = false;
            wb.Worksheets[1].ActiveView.ShowZeroValues = false;
            wb.Worksheets[2].ActiveView.ShowZeroValues = false;
            wb.SaveDocument(Path.Combine(PathSave, $"Thu chi tạm ứng_{TenDuAn}_{time}.xlsx"), DocumentFormat.Xlsx);
            WaitFormHelper.CloseWaitForm();
            DialogResult dialogResult = XtraMessageBox.Show($"Xuất file [Thu chi tạm ứng_{TenDuAn}_{time}.xlsx] thành công. Bạn có muốn mở file không???", "QUẢN LÝ THI CÔNG - THÔNG BÁO", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dialogResult == DialogResult.Yes)
            {
                Process.Start(Path.Combine(PathSave, $"Thu chi tạm ứng_{TenDuAn}_{time}.xlsx"));
            }
        }

        private void form_ThuChiTamUng_DeXuat_Load(object sender, EventArgs e)
        {

        }

        private void de_Loc_DenNgay_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void ce_CheckThongTinKho_CheckedChanged(object sender, EventArgs e)
        {
            de_NBDVL.Enabled = de_NKTVL.Enabled = ce_CheckThongTinKho.Checked;
            DataTable dtCT, dtHM;
            DuAnHelper.fcn_GetDtCongTrinhHangMuc(out dtCT, out dtHM, MyConstant.TBL_THONGTINCONGTRINH, MyConstant.TBL_THONGTINHANGMUC, false);
            List<InforCT_HM> Infor = MyFunction.InforHMCT(slke_ThongTinDuAn.Properties.DataSource, true);
            if (ce_CheckThongTinKho.Checked)
            {
                string dbString = $"SELECT MIN(Ngay) AS MinNgayThiCong, MAX(Ngay) as MaxNgayThiCong  " +
                $"FROM {QLVT.TBL_QLVT_YEUCAUVTKLHN} WHERE \"TrangThai\"=2 ";
                DataTable dttc = DataProvider.InstanceTHDA.ExecuteQuery(dbString);
                if (dttc.Rows.Count == 0)
                {
                    de_NBDVL.DateTime = DateTime.Now;
                    de_NKTVL.DateTime = DateTime.Now.AddDays(30);
                }
                else
                {
                    de_NKTVL.DateTime = dttc.Rows[0]["MaxNgayThiCong"] != DBNull.Value ? DateTime.Parse(dttc.Rows[0]["MaxNgayThiCong"].ToString()) : DateTime.Now.AddDays(30);
                    de_NBDVL.DateTime = dttc.Rows[0]["MinNgayThiCong"] != DBNull.Value ? DateTime.Parse(dttc.Rows[0]["MinNgayThiCong"].ToString()) : DateTime.Now;
                }
                Fcn_LoadDataTongHop(dtCT, dtHM, Infor, de_NBDVL.DateTime, de_NKTVL.DateTime);
            }
            else
                Fcn_LoadDataTongHop(dtCT, dtHM, Infor);
        }

        private void slke_ChonCTHM_EditValueChanged(object sender, EventArgs e)
        {
            if (ctrl_DonViThucHienDuAnTDKH.SelectedDVTH != null)
            {
                if (xtraTabControl_TienDoKeHoach.SelectedTabPage == xtraTab_TienDo)
                {
                    fcn_TDKH_loadTienDo();
                }
                BaseFrom.ResetLoaded();
                LoadSheetTDKH();
            }
        }

        private void slke_ChonCTHM_EditValueChanging(object sender, DevExpress.XtraEditors.Controls.ChangingEventArgs e)
        {
            if (e.NewValue?.ToString() == "ALL")
            {
                var dr = MessageShower.ShowYesNoQuestion("Load tất cả sẽ tốn tài nguyên và thời gian, Bạn có muốn tiếp tục không?");
                if (dr == DialogResult.No)
                    e.Cancel = true;
            }
        }

        private void ctrl_DonViThucHienDuAnTDKH_VisibleChanged(object sender, EventArgs e)
        {
            pn_CTHM.Visible = ctrl_DonViThucHienDuAnTDKH.Visible;
        }

        private void spsheet_TD_KH_LapKeHoach_ActiveSheetChanging(object sender, ActiveSheetChangingEventArgs e)
        {
            if (e.OldActiveSheetName == TDKH.SheetName_KeHoachKinhPhi)
            {
                RecalcKPTD(false);
            }
        }

        private bool CheckKeHoachChanged()
        {
            var wb = spsheet_TD_KH_LapKeHoach.Document;
            var ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;


            var dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            var range = ws.Range[TDKH.RANGE_KeHoach];
            List<string> ctacs = new List<string>();

            for (int i = range.TopRowIndex; i <= range.BottomRowIndex; i++)
            {
                var crRow = ws.Rows[i];
                var typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();
                var code = crRow[dic[TDKH.COL_Code]].Value.ToString();
                var cusNote = crRow[dic[TDKH.COL_CustomNote]].Value.ToString();

                if (!cusNote.HasValue())
                    continue;

                if (typeRow == MyConstant.TYPEROW_Nhom || typeRow == MyConstant.TYPEROW_CVCha)
                {
                    return true;

                }
            }
            return false;
        }

        //private void checkBox10_CheckedChanged(object sender, EventArgs e)
        //{
        //    lc_LocTheoNgay.Visible = checkBox10.Checked;
        //}

        private void bt_LapKeHoach_Click(object sender, EventArgs e)
        {

        }

        private void bt_NhapKeHoach_Click(object sender, EventArgs e)
        {
            bool val = ce_replan.Checked ? TDKHHelper.RePlan() : TDKHHelper.UpdateDesiredVolumn();


            if (val)
                LoadSheetTDKH();
        }
        private void Args_Showing_DocFile(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Appearance.FontStyleDelta = FontStyle.Bold;
            e.Form.Appearance.FontSizeDelta = 2;
            foreach (var control in e.Form.Controls)
            {
                SimpleButton button = control as SimpleButton;
                if (button != null)
                {
                    button.ImageOptions.SvgImageSize = new Size(16, 16);
                    // button.Height = 25;
                    switch (button.DialogResult.ToString())
                    {
                        case ("OK"):
                            button.ImageOptions.SvgImage = svgImageCollection1[0];
                            button.Text = "Đọc khối lượng nhập vào";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                Fcn_DocKLNhapVao();
                            };
                            break;
                        case ("Yes"):
                            button.ImageOptions.SvgImage = svgImageCollection1[1];
                            button.Text = "Đọc dữ liệu công tác";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) =>
                            {
                                Fcn_DocDuLieuCongTac();
                            };
                            break;
                        default:
                            button.ImageOptions.SvgImage = svgImageCollection1[5];
                            button.Text = "Thoát";
                            button.Width = 200;
                            button.Height = 50;
                            button.Click += (ss, ee) => { e.Form.Close(); };
                            break;
                    }
                }
            }
        }
        private void Fcn_DocDuLieuCongTac()
        {
            OpenFileDialog openFileDialog = SharedControls.openFileDialog;
            openFileDialog.DefaultExt = "xls";
            openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
            openFileDialog.Title = "Chọn file Excel";
            DialogResult rs = openFileDialog.ShowDialog();
            if (rs == DialogResult.OK)
            {
                SpreadsheetControl Spread = new SpreadsheetControl();
                Spread.LoadDocument(openFileDialog.FileName);
                if (!Spread.Document.Worksheets.Select(x => x.Name).ToList().Contains("Tiến độ - Kế hoạch kinh phí"))
                {
                    MessageShower.ShowError("Mẫu đọc vào không phải mẫu Tiến độ - Kế hoạch kinh phí của hệ thống, Vui lòng chọn lại Mẫu khác!!!!");
                    return;
                }
                Worksheet ws = Spread.Document.Worksheets["Tiến độ - Kế hoạch kinh phí"];
                if (!Spread.Document.DefinedNames.Contains("KeHoach"))
                {
                    MessageShower.ShowError("Mẫu đọc vào đã được chỉnh sửa, Vui lòng chọn lại Mẫu khác!!!!");
                    return;
                }
                WaitFormHelper.ShowWaitForm("Đang đọc dữ liệu vào!!!!!", "Vui Lòng chờ!");
                Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range["KeHoach"]);
                //bool DauVao = Name.Keys.Contains("KhoiLuongNhapVao") ? true : false;
                CellRange Data = ws.GetUsedRange();
                DateTime NBD, NKT;
                //string KLDV = string.Empty;
                string dbString = string.Empty;
                Spread.BeginUpdate();
                for (int i = Data.TopRowIndex; i <= Data.BottomRowIndex; i++)
                {
                    Row Crow = ws.Rows[i];
                    if (!Crow.Visible)
                        continue;
                    if (!Guid.TryParse(Crow[Name[TDKH.COL_Code]].Value.ToString(), out Guid id))
                        continue;
                    string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC
                        || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.TYPEROW_HTPhanTuyen)
                        continue;
                    //KLDV = string.Empty;
                    string TenCongTac = Crow[Name["TenCongTac"]].Value.ToString();
                    WaitFormHelper.ShowWaitForm($"{i}.{MaHieu}_{TenCongTac}");
                    NBD = DateTime.TryParse(Crow[Name["NgayBatDau"]].Value.ToString(), out NBD) ? NBD : DateTime.Now;
                    NKT = DateTime.TryParse(Crow[Name["NgayKetThuc"]].Value.ToString(), out NKT) ? NKT : DateTime.Now.AddDays(30);
                    double? KLKH = null;
                    if (Crow[Name["KhoiLuongToanBo"]].Value.NumericValue > 0)
                        KLKH = Crow[Name["KhoiLuongToanBo"]].Value.NumericValue;
                    double? KhoiLuongHopDongChiTiet = null;
                    if (Crow[Name["KhoiLuongHopDongChiTiet"]].Value.NumericValue > 0)
                        KhoiLuongHopDongChiTiet = Crow[Name["KhoiLuongHopDongChiTiet"]].Value.NumericValue;
                    double? DonGia = null;
                    if (Crow[Name["DonGia"]].Value.NumericValue > 0)
                        DonGia = Crow[Name["DonGia"]].Value.NumericValue;
                    double? DonGiaThiCong = null;
                    if (Crow[Name["DonGiaThiCong"]].Value.NumericValue > 0)
                        DonGiaThiCong = Crow[Name["DonGiaThiCong"]].Value.NumericValue;
                    if (MaHieu == MyConstant.CONST_TYPE_NHOM)
                    {
                        TDKH_GhiChuBoSungJson JsonGhiChu = new TDKH_GhiChuBoSungJson();
                        JsonGhiChu.STT = Crow[Name[TDKH.COL_STTDocVao]].Value.ToString();
                        JsonGhiChu.STTND = Crow[Name[TDKH.COL_STTND]].Value.ToString();
                        JsonGhiChu.CodeDanhMucCongTac = id.ToString();
                        var encryptedStr = JsonConvert.SerializeObject(JsonGhiChu);
                        dbString = $"UPDATE {TDKH.TBL_NhomCongTac} SET \"NgayBatDau\"='{NBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'," +
$"\"NgayKetThuc\"='{NKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}',KhoiLuongHopDongChiTiet=@KhoiLuongHopDongChiTiet," +
$"KhoiLuongKeHoach=@KhoiLuongKeHoach,DonGia=@DonGia,DonGiaThiCong=@DonGiaThiCong,\"GhiChuBoSungJson\"='{encryptedStr}'" +
$" WHERE \"Code\"='{id}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { KhoiLuongHopDongChiTiet, KLKH, DonGia, DonGiaThiCong });
                    }
                    else
                    {
                        if (KLKH is null)
                            KLKH = 0;
                        if (KhoiLuongHopDongChiTiet is null)
                            KhoiLuongHopDongChiTiet = 0;
                        if (DonGiaThiCong is null)
                            DonGiaThiCong = 0;
                        if (DonGia is null)
                            DonGia = 0;
                        dbString = $"UPDATE {TDKH.TBL_ChiTietCongTacTheoKy} SET \"NgayBatDau\"='{NBD.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}'," +
    $"\"NgayKetThuc\"='{NKT.ToString(MyConstant.CONST_DATE_FORMAT_SQLITE)}',KhoiLuongToanBo=@KhoiLuongToanBo," +
    $"KhoiLuongHopDongChiTiet=@KhoiLuongHopDongChiTiet,DonGia=@DonGia,DonGiaThiCong=@DonGiaThiCong " +
    $" WHERE \"Code\"='{id}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString, parameter: new object[] { KLKH, KhoiLuongHopDongChiTiet, DonGia, DonGiaThiCong });
                        TDKH_GhiChuBoSungJson JsonGhiChu = new TDKH_GhiChuBoSungJson();
                        JsonGhiChu.STT = Crow[Name[TDKH.COL_STTDocVao]].Value.ToString();
                        JsonGhiChu.STTND = Crow[Name[TDKH.COL_STTND]].Value.ToString();
                        JsonGhiChu.CodeDanhMucCongTac = Crow[Name[TDKH.COL_CodeDMCT]].Value.TextValue;
                        var encryptedStr = JsonConvert.SerializeObject(JsonGhiChu);
                        //if (DauVao)
                        //{
                        //    KLDV = $",\"KhoiLuongDocVao\"='{Crow[Name["KhoiLuongNhapVao"]].Value.NumericValue}'";
                        //}
                        dbString = $"UPDATE {TDKH.TBL_DanhMucCongTac} SET \"GhiChuBoSungJson\"='{encryptedStr}' " +
                     $" WHERE \"Code\"='{Crow[Name[TDKH.COL_CodeDMCT]].Value.TextValue}'";
                        DataProvider.InstanceTHDA.ExecuteNonQuery(dbString);
                    }

                }
                Spread.EndUpdate();
                WaitFormHelper.CloseWaitForm();
                MessageShower.ShowInformation("Đọc dữ liệu hoàn tất!!!!!!!!!!!!");
                TDKHHelper.LoadCongKinhPhiTienDo();
            }
        }
        private void Fcn_DocKLNhapVao()
        {
            OpenFileDialog openFileDialog = SharedControls.openFileDialog;
            openFileDialog.DefaultExt = "xls";
            openFileDialog.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
            openFileDialog.Title = "Chọn file Excel";
            DialogResult rs = openFileDialog.ShowDialog();
            if (rs == DialogResult.OK)
            {
                SpreadsheetControl Spread = new SpreadsheetControl();
                Spread.LoadDocument(openFileDialog.FileName);
                if (!Spread.Document.Worksheets.Select(x => x.Name).ToList().Contains("Tiến độ - Kế hoạch kinh phí"))
                {
                    MessageShower.ShowError("Mẫu đọc vào không phải mẫu Tiến độ - Kế hoạch kinh phí của hệ thống, Vui lòng chọn lại Mẫu khác!!!!");
                    return;
                }
                Worksheet ws = Spread.Document.Worksheets["Tiến độ - Kế hoạch kinh phí"];
                if (!Spread.Document.DefinedNames.Contains("KeHoach"))
                {
                    MessageShower.ShowError("Mẫu đọc vào đã được chỉnh sửa, Vui lòng chọn lại Mẫu khác!!!!");
                    return;
                }
                Dictionary<string, string> Name = MyFunction.fcn_getDicOfColumn(ws.Range["KeHoach"]);
                bool DauVao = Name.Keys.Contains("KhoiLuongNhapVao") ? true : false;
                if (!DauVao)
                {
                    MessageShower.ShowError("Mẫu đọc không chứa cột khối lượng đọc vào, Vui lòng chọn lại Mẫu khác!!!!");
                    return;
                }
                CellRange Data = ws.GetUsedRange();


                IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
                Worksheet wskp = wb.Worksheets[TDKH.SheetName_KeHoachKinhPhi];
                CellRange rangeData = wskp.Range[TDKH.RANGE_KeHoach];
                Dictionary<string, string> dicDoBoc = MyFunction.fcn_getDicOfColumn(rangeData);
                DauVao = wskp.Columns[dicDoBoc["KhoiLuongNhapVao"]].Visible;
                if (!DauVao)
                {
                    MessageShower.ShowError("Sheet hiện tại chưa ở chế độ Lọc ngày, Vui lòng chọn lọc ngày để thực hiện việc đọc vào!!!!");
                    return;
                }
                WaitFormHelper.ShowWaitForm("Đang đọc dữ liệu vào!!!!!", "Vui Lòng chờ!");
                Column colCode = wskp.Columns[dicDoBoc["Code"]];
                Spread.BeginUpdate();
                wb.BeginUpdate();
                for (int i = Data.TopRowIndex; i <= Data.BottomRowIndex; i++)
                {
                    Row Crow = ws.Rows[i];
                    if (!Crow.Visible)
                        continue;
                    if (!Guid.TryParse(Crow[Name[TDKH.COL_Code]].Value.ToString(), out Guid id))
                        continue;
                    //bool Code = Crow[Name[TDKH.COL_Code]].Value.IsEmpty;
                    //if (Code)
                    //    continue;
                    string MaHieu = Crow[Name[TDKH.COL_MaHieuCongTac]].Value.ToString();
                    if (MaHieu == MyConstant.CONST_TYPE_CONGTRINH || MaHieu == MyConstant.CONST_TYPE_HANGMUC
                        || MaHieu == MyConstant.CONST_TYPE_PhanTuyen || MaHieu == MyConstant.TYPEROW_HTPhanTuyen)
                        continue;
                    string TenCongTac = Crow[Name["TenCongTac"]].Value.ToString();
                    WaitFormHelper.ShowWaitForm($"{i}.{MaHieu}_{TenCongTac}");
                    var cell = colCode.Search(id.ToString(), MyConstant.MySearchOptions).FirstOrDefault();
                    if (cell is null)
                    {
                        continue;
                    }
                    wskp.Rows[cell.RowIndex][dicDoBoc["KhoiLuongNhapVao"]].SetValue(Crow[Name["KhoiLuongNhapVao"]].Value.NumericValue);
                }
                Spread.EndUpdate();
                wb.EndUpdate();
                WaitFormHelper.CloseWaitForm();
                MessageShower.ShowInformation("Đọc dữ liệu hoàn tất!!!!!!!!!!!!");
            }
        }
        private void sb_DocTDKH_Click(object sender, EventArgs e)
        {
            XtraMessageBoxArgs args = new XtraMessageBoxArgs();
            args.Caption = "Lựa chọn cách đọc vào";
            args.Buttons = new DialogResult[] { DialogResult.OK, DialogResult.Yes, DialogResult.Cancel };
            args.Showing += Args_Showing_DocFile;
            DevExpress.XtraEditors.XtraMessageBox.Show(args);
        }

        private void lb_ThongBaoBanQuyen_Click(object sender, EventArgs e)
        {

        }

        private void tảiKhốiLượngToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void spsheet_TD_KH_LapKeHoach_HyperlinkClick(object sender, HyperlinkClickEventArgs e)
        {
            IWorkbook wb = spsheet_TD_KH_LapKeHoach.Document;
            Worksheet ws = wb.Worksheets.ActiveWorksheet;
            Cell cell = ws.SelectedCell[0];
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());
            if (ws.Name == TDKH.SheetName_KeHoachKinhPhi)
            {
                string TypeRow = ws.Rows[cell.TopRowIndex][dic[TDKH.COL_TypeRow]].Value.ToString();
                if (TypeRow == MyConstant.TYPEROW_Nhom)
                {
                    FormLuaChon form = new FormLuaChon(ws.Rows[cell.TopRowIndex][dic[TDKH.COL_Code]].Value.ToString(), FileManageTypeEnum.NhomCongTac);
                    form.ShowDialog();
                }
                else if (TypeRow == MyConstant.TYPEROW_CVCha)
                {
                    FormLuaChon form = new FormLuaChon(ws.Rows[cell.TopRowIndex][dic[TDKH.COL_Code]].Value.ToString(), FileManageTypeEnum.ChiTietCongTacTheoGiaiDoan);
                    form.ShowDialog();
                }
            }
        }

        private void ce_replan_CheckedChanged(object sender, EventArgs e)
        {
            FormMainHelper.LoadInputRePlan();

        }

        private void xtraTab_KiemSoatChung_Paint(object sender, PaintEventArgs e)
        {

        }
        private async void bt_CalcThiCong_Click(object sender, EventArgs e)
        {
            TDKHHelper.TinhKhoiLuongThiCong();
        }

        private void gc_Tiendo_CustomPrintTask(object sender, DevExpress.XtraGantt.Printing.CustomPrintTaskEventArgs e)
        {
            if (e.Node.GetValue("UID") is null)
                return;
            string UID = e.Node.GetValue("UID").ToString();
            e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
            if (e.Node.Level == 0)
                e.Appearance.BackColor = DXSkinColors.FillColors.Danger;
            else if (e.Node.Level == 1)
                e.Appearance.BackColor = MyConstant.color_Row_CongTrinh;
            else if (e.Node.Level == 2)
            {
                if (UID.Contains("_MuiTC"))
                    e.Appearance.BackColor = MyConstant.color_Row_MuiTC;
                else
                    e.Appearance.BackColor = MyConstant.color_Row_HangMuc;
            }
            else if (e.Node.Level == 3)
            {
                if (UID.Contains("_HM"))
                    e.Appearance.BackColor = MyConstant.color_Row_HangMuc;
                else if (UID.Contains("CodeTuyen"))
                    e.Appearance.BackColor = Color.Red;
                else
                    e.Appearance.BackColor = MyConstant.color_Row_NhaThau;
            }
            else
            {
                if (UID.Contains("_NhaThau"))
                    e.Appearance.BackColor = MyConstant.color_Row_NhaThau;
                if (UID.Contains("_CodeNhom"))
                    e.Appearance.BackColor = MyConstant.color_Row_NhomCongTac;
                else if (UID.Contains("CodeTuyen"))
                    e.Appearance.BackColor = Color.Red;
                else if (e.Node.GetValue("UID").ToString().Contains("Thi công") || e.Node.GetValue("UID").ToString().Contains("_ThiCong") || e.Node.GetValue("UID").ToString().Contains("_TCNT"))
                    e.Appearance.BackColor = Color.Orange;
                else if (e.Node.GetValue("UID").ToString().Contains("Kế hoạch") || e.Node.GetValue("UID").ToString().Contains("_KeHoach") || e.Node.GetValue("UID").ToString().Contains("_KHNT"))
                    e.Appearance.BackColor = Color.Blue;
            }
        }

        private void sb_UpdatePK_Click(object sender, EventArgs e)
        {
            WaitFormHelper.ShowWaitForm("Đang cập nhật dữ liệu");
            fcn_updatenhathau_todoi("Khối lượng phân khai");
            Fcn_LoadPhanKhaiNew();
            WaitFormHelper.CloseWaitForm();
        }

        private void gc_Tiendo_CustomizeItem(object sender, CustomizeItemEventArgs e)
        {
            //if(e.ItemType== GanttChartItemType.SummaryTask)
            //{
            //    GanttChartTaskInfo ti = e.Item as GanttChartTaskInfo;
            //    if (ti == null) return;
            //    e.Element.Style.SetProperty("border-radius", "4px");
            //}
        }

        private void ce_ChiVeCongTac_CheckedChanged(object sender, EventArgs e)
        {
            fcn_TDKH_loadTienDo();
        }

        private void gc_Tiendo_ShowingEditor(object sender, CancelEventArgs e)
        {
            if (gc_Tiendo.FocusedColumn == col_LienKet)
            {
                if (cbo_LoaiTienDo.SelectedIndex > 0)
                {
                    MessageShower.ShowWarning("Tiến độ phải ở chế độ xem Kế hoạch mới thực hiện được tính năng Nhập liên kết!!!!!!!!!");
                    e.Cancel = true;
                }
                else
                {
                    if (gc_Tiendo.FocusedNode is null)
                        return;
                    string UID = gc_Tiendo.FocusedNode.GetValue("UID").ToString();
                    if (!UID.Contains("_CTR") && !UID.Contains("_HM") && !UID.Contains("_CodeTuyen") && !UID.Contains("_CodeNhom") && !UID.Contains("_KeHoach"))
                    {
                        MessageShower.ShowWarning("Không tạo được liên kết với dòng này, Vui lòng chọn dòng Công trình, Hạng mục,Tuyến, Nhóm và Công tác!!!!!!");
                        e.Cancel = true;
                    }
                }
            }
        }

        private void ce_HienLienKet_CheckedChanged(object sender, EventArgs e)
        {
            col_LienKet.Visible = ce_HienLienKet.Checked;
            if (ce_HienLienKet.Checked)
            {
                bool KH = cbo_HienThiTienDo.Text == "Kế hoạch" && cbo_LoaiTienDo.SelectedIndex == 0;
                if (!KH)
                {
                    ce_HienLienKet.Visible = false;
                    ce_HienLienKet.Checked = false;
                    MessageShower.ShowError("Vui lòng chọn chế độ xem là kế hoạch và công tác để hiện liên kết!!!!!!!!");
                    return;
                }
                fcn_TDKH_loadTienDo();
            }
            else
            {
                fcn_TDKH_loadTienDo();
            }

        }

<<<<<<< HEAD
        private void ce_NgoaiKeHoach_CheckedChanged(object sender, EventArgs e)
        {
            var ws = spsheet_TD_KH_LapKeHoach.ActiveWorksheet;
            TDKHHelper.GetCodeCongTrinhHangMuc(out string codeHM, out string codeCT);




            var range = ws.Range[TDKH.RANGE_KeHoach];
            //var dic = TDKH.dic_TongHopKinhPhiTDKH;
            Dictionary<string, string> dic = MyFunction.fcn_getDicOfColumn(ws.GetUsedRange());

            ws.Workbook.BeginUpdate();


            for (int i = range.TopRowIndex + 1; i <= range.BottomRowIndex; i++)
            {
                var crRow = ws.Rows[i];
                var dateBD = crRow[dic[TDKH.COL_NgayBatDau]].Value.DateTimeValue;
                var dateKT = crRow[dic[TDKH.COL_NgayKetThuc]].Value.DateTimeValue;

                var dateBDTC = crRow[dic[TDKH.COL_NgayBatDauThiCong]].Value.DateTimeValue;
                var dateKTTC = crRow[dic[TDKH.COL_NgayKetThucThiCong]].Value.DateTimeValue;

                var typeRow = crRow[dic[TDKH.COL_TypeRow]].Value.ToString();


                //if (typeRow == MyConstant.TYPEROW_CVCha && !MSETTING.Default.CongTacInNhomVisible)
                //{
                //    crRow.Visible = false;

                //}
                //else
                //{
                if ((dateKT < de_Loc_TuNgay.DateTime || dateBD > de_Loc_DenNgay.DateTime)
                                    && (dateKTTC < de_Loc_TuNgay.DateTime || dateBDTC > de_Loc_DenNgay.DateTime))
                {
                    if (!ce_NgoaiKeHoach.Checked)
                        crRow.Visible = false;
                    else
                    {

                        crRow.Visible = true;
                    }
                }
                else
                {
                    crRow[TDKH.COL_Chon].SetValue(true);
                    crRow.Visible = true;
                }
                //}
            }

            ws.Workbook.EndUpdate();
=======
        private void sb_TenKho_Click(object sender, EventArgs e)
        {
            XtraForm3 frm = new XtraForm3(UcType.QLVT_TenKho, "Quản lý danh sách TÊN KHO CHUNG");
            frm.ShowDialog();
>>>>>>> d6230384ef0c68a88c7452da74241172fd49eaea
        }
    }

}
